diff --git MODULE.bazel MODULE.bazel
index 4dce8d0..1041af2 100644
--- MODULE.bazel
+++ MODULE.bazel
@@ -157,3 +157,19 @@ use_repo(
     "distroless_static_linux_amd64",
     "distroless_static_linux_arm64_v8",
 )
+
+oci.pull(
+    name = "distroless_base",
+    digest = "sha256:6ae5fe659f28c6afe9cc2903aebc78a5c6ad3aaa3d9d0369760ac6aaea2529c8",
+    image = "gcr.io/distroless/base",
+    platforms = [
+        "linux/amd64",
+        "linux/arm64/v8",
+    ],
+)
+use_repo(
+    oci,
+    "distroless_base",
+    "distroless_base_linux_amd64",
+    "distroless_base_linux_arm64_v8",
+)
diff --git tools/container.bzl tools/container.bzl
index e4aa679..c777774 100644
--- tools/container.bzl
+++ tools/container.bzl
@@ -22,7 +22,7 @@ def multiarch_go_image(name, binary):
 
     oci_image(
         name = image_target,
-        base = Label("@distroless_static"),
+        base = Label("@distroless_base"),
         entrypoint = ["/app/{}".format(native.package_relative_label(binary).name)],
         tars = [tar_target],
         # Don't build un-transitioned images, as the default target architecture might be unsupported
@@ -32,7 +32,7 @@ def multiarch_go_image(name, binary):

     for arch in ["amd64", "arm64"]:
         arch_image_target = "{}_{}_image".format(name, arch)
-        target_platform = "@rules_go//go/toolchain:linux_" + arch
+        target_platform = "@rules_go//go/toolchain:linux_" + arch + "_cgo"
         images.append(arch_image_target)
         platform_transition_filegroup(
             name = arch_image_target,
@@ -49,6 +49,6 @@ def container_push_official(name, image, component):
     oci_push(
         name = name,
         image = image,
-        repository = "ghcr.io/buildbarn/" + component,
+        repository = "ghcr.io/buildbarn/" + component + "-backend",
         remote_tags = "@com_github_buildbarn_bb_storage//tools:stamped_tags",
     )
