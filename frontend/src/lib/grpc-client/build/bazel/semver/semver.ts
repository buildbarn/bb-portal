// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: build/bazel/semver/semver.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "build.bazel.semver";

/** The full version of a given tool. */
export interface SemVer {
  /** The major version, e.g 10 for 10.2.3. */
  major: number;
  /** The minor version, e.g. 2 for 10.2.3. */
  minor: number;
  /** The patch version, e.g 3 for 10.2.3. */
  patch: number;
  /**
   * The pre-release version. Either this field or major/minor/patch fields
   * must be filled. They are mutually exclusive. Pre-release versions are
   * assumed to be earlier than any released versions.
   */
  prerelease: string;
}

function createBaseSemVer(): SemVer {
  return { major: 0, minor: 0, patch: 0, prerelease: "" };
}

export const SemVer: MessageFns<SemVer> = {
  encode(message: SemVer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.major !== 0) {
      writer.uint32(8).int32(message.major);
    }
    if (message.minor !== 0) {
      writer.uint32(16).int32(message.minor);
    }
    if (message.patch !== 0) {
      writer.uint32(24).int32(message.patch);
    }
    if (message.prerelease !== "") {
      writer.uint32(34).string(message.prerelease);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SemVer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSemVer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.major = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.minor = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.patch = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.prerelease = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SemVer {
    return {
      major: isSet(object.major) ? globalThis.Number(object.major) : 0,
      minor: isSet(object.minor) ? globalThis.Number(object.minor) : 0,
      patch: isSet(object.patch) ? globalThis.Number(object.patch) : 0,
      prerelease: isSet(object.prerelease) ? globalThis.String(object.prerelease) : "",
    };
  },

  toJSON(message: SemVer): unknown {
    const obj: any = {};
    if (message.major !== 0) {
      obj.major = Math.round(message.major);
    }
    if (message.minor !== 0) {
      obj.minor = Math.round(message.minor);
    }
    if (message.patch !== 0) {
      obj.patch = Math.round(message.patch);
    }
    if (message.prerelease !== "") {
      obj.prerelease = message.prerelease;
    }
    return obj;
  },

  create(base?: DeepPartial<SemVer>): SemVer {
    return SemVer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SemVer>): SemVer {
    const message = createBaseSemVer();
    message.major = object.major ?? 0;
    message.minor = object.minor ?? 0;
    message.patch = object.patch ?? 0;
    message.prerelease = object.prerelease ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
