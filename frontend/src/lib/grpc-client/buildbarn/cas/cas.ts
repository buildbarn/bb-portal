// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: buildbarn/cas/cas.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Digest, ExecuteResponse } from "../../build/bazel/remote/execution/v2/remote_execution";

export const protobufPackage = "buildbarn.cas";

/**
 * HistoricalExecuteResponse is a custom message that is stored into the
 * Content Addressable Storage. The Action Cache is only permitted to
 * contain ActionResults of successful builds. In our case we also want
 * to provide the user insight as to why their build fails by storing
 * the ActionResult upon failure.
 *
 * This message is written into the ContentAddressableStorage by
 * bb_worker by the CachingBuildExecutor. The digest is returned to the
 * user by providing a URL to bb_browser as a message in the
 * ExecuteResponse.
 *
 * Additionally, this message is attached to CompletedActions that are
 * streamed through a CompletedActionLogger in order to provide metadata
 * for uniquely identifying actions.
 */
export interface HistoricalExecuteResponse {
  actionDigest: Digest | undefined;
  executeResponse: ExecuteResponse | undefined;
}

function createBaseHistoricalExecuteResponse(): HistoricalExecuteResponse {
  return { actionDigest: undefined, executeResponse: undefined };
}

export const HistoricalExecuteResponse: MessageFns<HistoricalExecuteResponse> = {
  encode(message: HistoricalExecuteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionDigest !== undefined) {
      Digest.encode(message.actionDigest, writer.uint32(10).fork()).join();
    }
    if (message.executeResponse !== undefined) {
      ExecuteResponse.encode(message.executeResponse, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HistoricalExecuteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistoricalExecuteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actionDigest = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.executeResponse = ExecuteResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistoricalExecuteResponse {
    return {
      actionDigest: isSet(object.actionDigest) ? Digest.fromJSON(object.actionDigest) : undefined,
      executeResponse: isSet(object.executeResponse) ? ExecuteResponse.fromJSON(object.executeResponse) : undefined,
    };
  },

  toJSON(message: HistoricalExecuteResponse): unknown {
    const obj: any = {};
    if (message.actionDigest !== undefined) {
      obj.actionDigest = Digest.toJSON(message.actionDigest);
    }
    if (message.executeResponse !== undefined) {
      obj.executeResponse = ExecuteResponse.toJSON(message.executeResponse);
    }
    return obj;
  },

  create(base?: DeepPartial<HistoricalExecuteResponse>): HistoricalExecuteResponse {
    return HistoricalExecuteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HistoricalExecuteResponse>): HistoricalExecuteResponse {
    const message = createBaseHistoricalExecuteResponse();
    message.actionDigest = (object.actionDigest !== undefined && object.actionDigest !== null)
      ? Digest.fromPartial(object.actionDigest)
      : undefined;
    message.executeResponse = (object.executeResponse !== undefined && object.executeResponse !== null)
      ? ExecuteResponse.fromPartial(object.executeResponse)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
