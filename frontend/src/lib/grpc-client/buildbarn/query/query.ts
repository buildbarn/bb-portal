// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: buildbarn/query/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Digest } from "../../build/bazel/remote/execution/v2/remote_execution";

export const protobufPackage = "buildbarn.query";

/**
 * Reference to a certain directory contained in a
 * FileSystemAccessProfile, which is provided as part of bb_browser URL
 * query parameters when listing directories.
 */
export interface FileSystemAccessProfileReference {
  /**
   * The digest of the profile stored in the File System Access Cache
   * (FSAC).
   */
  digest:
    | Digest
    | undefined;
  /**
   * The FNV-1a base hash value of the path hashes corresponding to the
   * current directory.
   */
  pathHashesBaseHash: string;
}

function createBaseFileSystemAccessProfileReference(): FileSystemAccessProfileReference {
  return { digest: undefined, pathHashesBaseHash: "0" };
}

export const FileSystemAccessProfileReference: MessageFns<FileSystemAccessProfileReference> = {
  encode(message: FileSystemAccessProfileReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.digest !== undefined) {
      Digest.encode(message.digest, writer.uint32(10).fork()).join();
    }
    if (message.pathHashesBaseHash !== "0") {
      writer.uint32(16).uint64(message.pathHashesBaseHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileSystemAccessProfileReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileSystemAccessProfileReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.digest = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pathHashesBaseHash = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileSystemAccessProfileReference {
    return {
      digest: isSet(object.digest) ? Digest.fromJSON(object.digest) : undefined,
      pathHashesBaseHash: isSet(object.pathHashesBaseHash) ? globalThis.String(object.pathHashesBaseHash) : "0",
    };
  },

  toJSON(message: FileSystemAccessProfileReference): unknown {
    const obj: any = {};
    if (message.digest !== undefined) {
      obj.digest = Digest.toJSON(message.digest);
    }
    if (message.pathHashesBaseHash !== "0") {
      obj.pathHashesBaseHash = message.pathHashesBaseHash;
    }
    return obj;
  },

  create(base?: DeepPartial<FileSystemAccessProfileReference>): FileSystemAccessProfileReference {
    return FileSystemAccessProfileReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileSystemAccessProfileReference>): FileSystemAccessProfileReference {
    const message = createBaseFileSystemAccessProfileReference();
    message.digest = (object.digest !== undefined && object.digest !== null)
      ? Digest.fromPartial(object.digest)
      : undefined;
    message.pathHashesBaseHash = object.pathHashesBaseHash ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
