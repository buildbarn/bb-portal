// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/eventmetadata"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// EventMetadataQuery is the builder for querying EventMetadata entities.
type EventMetadataQuery struct {
	config
	ctx                 *QueryContext
	order               []eventmetadata.OrderOption
	inters              []Interceptor
	predicates          []predicate.EventMetadata
	withBazelInvocation *BazelInvocationQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*EventMetadata) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventMetadataQuery builder.
func (emq *EventMetadataQuery) Where(ps ...predicate.EventMetadata) *EventMetadataQuery {
	emq.predicates = append(emq.predicates, ps...)
	return emq
}

// Limit the number of records to be returned by this query.
func (emq *EventMetadataQuery) Limit(limit int) *EventMetadataQuery {
	emq.ctx.Limit = &limit
	return emq
}

// Offset to start from.
func (emq *EventMetadataQuery) Offset(offset int) *EventMetadataQuery {
	emq.ctx.Offset = &offset
	return emq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (emq *EventMetadataQuery) Unique(unique bool) *EventMetadataQuery {
	emq.ctx.Unique = &unique
	return emq
}

// Order specifies how the records should be ordered.
func (emq *EventMetadataQuery) Order(o ...eventmetadata.OrderOption) *EventMetadataQuery {
	emq.order = append(emq.order, o...)
	return emq
}

// QueryBazelInvocation chains the current query on the "bazel_invocation" edge.
func (emq *EventMetadataQuery) QueryBazelInvocation() *BazelInvocationQuery {
	query := (&BazelInvocationClient{config: emq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventmetadata.Table, eventmetadata.FieldID, selector),
			sqlgraph.To(bazelinvocation.Table, bazelinvocation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventmetadata.BazelInvocationTable, eventmetadata.BazelInvocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventMetadata entity from the query.
// Returns a *NotFoundError when no EventMetadata was found.
func (emq *EventMetadataQuery) First(ctx context.Context) (*EventMetadata, error) {
	nodes, err := emq.Limit(1).All(setContextOp(ctx, emq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventmetadata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (emq *EventMetadataQuery) FirstX(ctx context.Context) *EventMetadata {
	node, err := emq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventMetadata ID from the query.
// Returns a *NotFoundError when no EventMetadata ID was found.
func (emq *EventMetadataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = emq.Limit(1).IDs(setContextOp(ctx, emq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventmetadata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (emq *EventMetadataQuery) FirstIDX(ctx context.Context) int {
	id, err := emq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventMetadata entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventMetadata entity is found.
// Returns a *NotFoundError when no EventMetadata entities are found.
func (emq *EventMetadataQuery) Only(ctx context.Context) (*EventMetadata, error) {
	nodes, err := emq.Limit(2).All(setContextOp(ctx, emq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventmetadata.Label}
	default:
		return nil, &NotSingularError{eventmetadata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (emq *EventMetadataQuery) OnlyX(ctx context.Context) *EventMetadata {
	node, err := emq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventMetadata ID in the query.
// Returns a *NotSingularError when more than one EventMetadata ID is found.
// Returns a *NotFoundError when no entities are found.
func (emq *EventMetadataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = emq.Limit(2).IDs(setContextOp(ctx, emq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventmetadata.Label}
	default:
		err = &NotSingularError{eventmetadata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (emq *EventMetadataQuery) OnlyIDX(ctx context.Context) int {
	id, err := emq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventMetadataSlice.
func (emq *EventMetadataQuery) All(ctx context.Context) ([]*EventMetadata, error) {
	ctx = setContextOp(ctx, emq.ctx, ent.OpQueryAll)
	if err := emq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EventMetadata, *EventMetadataQuery]()
	return withInterceptors[[]*EventMetadata](ctx, emq, qr, emq.inters)
}

// AllX is like All, but panics if an error occurs.
func (emq *EventMetadataQuery) AllX(ctx context.Context) []*EventMetadata {
	nodes, err := emq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventMetadata IDs.
func (emq *EventMetadataQuery) IDs(ctx context.Context) (ids []int, err error) {
	if emq.ctx.Unique == nil && emq.path != nil {
		emq.Unique(true)
	}
	ctx = setContextOp(ctx, emq.ctx, ent.OpQueryIDs)
	if err = emq.Select(eventmetadata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (emq *EventMetadataQuery) IDsX(ctx context.Context) []int {
	ids, err := emq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (emq *EventMetadataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, emq.ctx, ent.OpQueryCount)
	if err := emq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, emq, querierCount[*EventMetadataQuery](), emq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (emq *EventMetadataQuery) CountX(ctx context.Context) int {
	count, err := emq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (emq *EventMetadataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, emq.ctx, ent.OpQueryExist)
	switch _, err := emq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (emq *EventMetadataQuery) ExistX(ctx context.Context) bool {
	exist, err := emq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventMetadataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (emq *EventMetadataQuery) Clone() *EventMetadataQuery {
	if emq == nil {
		return nil
	}
	return &EventMetadataQuery{
		config:              emq.config,
		ctx:                 emq.ctx.Clone(),
		order:               append([]eventmetadata.OrderOption{}, emq.order...),
		inters:              append([]Interceptor{}, emq.inters...),
		predicates:          append([]predicate.EventMetadata{}, emq.predicates...),
		withBazelInvocation: emq.withBazelInvocation.Clone(),
		// clone intermediate query.
		sql:  emq.sql.Clone(),
		path: emq.path,
	}
}

// WithBazelInvocation tells the query-builder to eager-load the nodes that are connected to
// the "bazel_invocation" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EventMetadataQuery) WithBazelInvocation(opts ...func(*BazelInvocationQuery)) *EventMetadataQuery {
	query := (&BazelInvocationClient{config: emq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	emq.withBazelInvocation = query
	return emq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SequenceNumber int64 `json:"sequence_number,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventMetadata.Query().
//		GroupBy(eventmetadata.FieldSequenceNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (emq *EventMetadataQuery) GroupBy(field string, fields ...string) *EventMetadataGroupBy {
	emq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EventMetadataGroupBy{build: emq}
	grbuild.flds = &emq.ctx.Fields
	grbuild.label = eventmetadata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SequenceNumber int64 `json:"sequence_number,omitempty"`
//	}
//
//	client.EventMetadata.Query().
//		Select(eventmetadata.FieldSequenceNumber).
//		Scan(ctx, &v)
func (emq *EventMetadataQuery) Select(fields ...string) *EventMetadataSelect {
	emq.ctx.Fields = append(emq.ctx.Fields, fields...)
	sbuild := &EventMetadataSelect{EventMetadataQuery: emq}
	sbuild.label = eventmetadata.Label
	sbuild.flds, sbuild.scan = &emq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventMetadataSelect configured with the given aggregations.
func (emq *EventMetadataQuery) Aggregate(fns ...AggregateFunc) *EventMetadataSelect {
	return emq.Select().Aggregate(fns...)
}

func (emq *EventMetadataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range emq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, emq); err != nil {
				return err
			}
		}
	}
	for _, f := range emq.ctx.Fields {
		if !eventmetadata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if emq.path != nil {
		prev, err := emq.path(ctx)
		if err != nil {
			return err
		}
		emq.sql = prev
	}
	return nil
}

func (emq *EventMetadataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventMetadata, error) {
	var (
		nodes       = []*EventMetadata{}
		withFKs     = emq.withFKs
		_spec       = emq.querySpec()
		loadedTypes = [1]bool{
			emq.withBazelInvocation != nil,
		}
	)
	if emq.withBazelInvocation != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, eventmetadata.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EventMetadata).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EventMetadata{config: emq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(emq.modifiers) > 0 {
		_spec.Modifiers = emq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, emq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := emq.withBazelInvocation; query != nil {
		if err := emq.loadBazelInvocation(ctx, query, nodes, nil,
			func(n *EventMetadata, e *BazelInvocation) { n.Edges.BazelInvocation = e }); err != nil {
			return nil, err
		}
	}
	for i := range emq.loadTotal {
		if err := emq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (emq *EventMetadataQuery) loadBazelInvocation(ctx context.Context, query *BazelInvocationQuery, nodes []*EventMetadata, init func(*EventMetadata), assign func(*EventMetadata, *BazelInvocation)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventMetadata)
	for i := range nodes {
		if nodes[i].bazel_invocation_event_metadata == nil {
			continue
		}
		fk := *nodes[i].bazel_invocation_event_metadata
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(bazelinvocation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "bazel_invocation_event_metadata" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (emq *EventMetadataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := emq.querySpec()
	if len(emq.modifiers) > 0 {
		_spec.Modifiers = emq.modifiers
	}
	_spec.Node.Columns = emq.ctx.Fields
	if len(emq.ctx.Fields) > 0 {
		_spec.Unique = emq.ctx.Unique != nil && *emq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, emq.driver, _spec)
}

func (emq *EventMetadataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(eventmetadata.Table, eventmetadata.Columns, sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt))
	_spec.From = emq.sql
	if unique := emq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if emq.path != nil {
		_spec.Unique = true
	}
	if fields := emq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventmetadata.FieldID)
		for i := range fields {
			if fields[i] != eventmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := emq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := emq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := emq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := emq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (emq *EventMetadataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(emq.driver.Dialect())
	t1 := builder.Table(eventmetadata.Table)
	columns := emq.ctx.Fields
	if len(columns) == 0 {
		columns = eventmetadata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if emq.sql != nil {
		selector = emq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if emq.ctx.Unique != nil && *emq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range emq.predicates {
		p(selector)
	}
	for _, p := range emq.order {
		p(selector)
	}
	if offset := emq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := emq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventMetadataGroupBy is the group-by builder for EventMetadata entities.
type EventMetadataGroupBy struct {
	selector
	build *EventMetadataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (emgb *EventMetadataGroupBy) Aggregate(fns ...AggregateFunc) *EventMetadataGroupBy {
	emgb.fns = append(emgb.fns, fns...)
	return emgb
}

// Scan applies the selector query and scans the result into the given value.
func (emgb *EventMetadataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, emgb.build.ctx, ent.OpQueryGroupBy)
	if err := emgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventMetadataQuery, *EventMetadataGroupBy](ctx, emgb.build, emgb, emgb.build.inters, v)
}

func (emgb *EventMetadataGroupBy) sqlScan(ctx context.Context, root *EventMetadataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(emgb.fns))
	for _, fn := range emgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*emgb.flds)+len(emgb.fns))
		for _, f := range *emgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*emgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := emgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventMetadataSelect is the builder for selecting fields of EventMetadata entities.
type EventMetadataSelect struct {
	*EventMetadataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ems *EventMetadataSelect) Aggregate(fns ...AggregateFunc) *EventMetadataSelect {
	ems.fns = append(ems.fns, fns...)
	return ems
}

// Scan applies the selector query and scans the result into the given value.
func (ems *EventMetadataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ems.ctx, ent.OpQuerySelect)
	if err := ems.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventMetadataQuery, *EventMetadataSelect](ctx, ems.EventMetadataQuery, ems, ems.inters, v)
}

func (ems *EventMetadataSelect) sqlScan(ctx context.Context, root *EventMetadataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ems.fns))
	for _, fn := range ems.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ems.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ems.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
