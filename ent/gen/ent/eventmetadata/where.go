// Code generated by ent, DO NOT EDIT.

package eventmetadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldLTE(FieldID, id))
}

// SequenceNumber applies equality check predicate on the "sequence_number" field. It's identical to SequenceNumberEQ.
func SequenceNumber(v int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEQ(FieldSequenceNumber, v))
}

// EventReceivedAt applies equality check predicate on the "event_received_at" field. It's identical to EventReceivedAtEQ.
func EventReceivedAt(v time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEQ(FieldEventReceivedAt, v))
}

// EventHash applies equality check predicate on the "event_hash" field. It's identical to EventHashEQ.
func EventHash(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEQ(FieldEventHash, v))
}

// SequenceNumberEQ applies the EQ predicate on the "sequence_number" field.
func SequenceNumberEQ(v int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEQ(FieldSequenceNumber, v))
}

// SequenceNumberNEQ applies the NEQ predicate on the "sequence_number" field.
func SequenceNumberNEQ(v int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldNEQ(FieldSequenceNumber, v))
}

// SequenceNumberIn applies the In predicate on the "sequence_number" field.
func SequenceNumberIn(vs ...int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldIn(FieldSequenceNumber, vs...))
}

// SequenceNumberNotIn applies the NotIn predicate on the "sequence_number" field.
func SequenceNumberNotIn(vs ...int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldNotIn(FieldSequenceNumber, vs...))
}

// SequenceNumberGT applies the GT predicate on the "sequence_number" field.
func SequenceNumberGT(v int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldGT(FieldSequenceNumber, v))
}

// SequenceNumberGTE applies the GTE predicate on the "sequence_number" field.
func SequenceNumberGTE(v int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldGTE(FieldSequenceNumber, v))
}

// SequenceNumberLT applies the LT predicate on the "sequence_number" field.
func SequenceNumberLT(v int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldLT(FieldSequenceNumber, v))
}

// SequenceNumberLTE applies the LTE predicate on the "sequence_number" field.
func SequenceNumberLTE(v int64) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldLTE(FieldSequenceNumber, v))
}

// EventReceivedAtEQ applies the EQ predicate on the "event_received_at" field.
func EventReceivedAtEQ(v time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEQ(FieldEventReceivedAt, v))
}

// EventReceivedAtNEQ applies the NEQ predicate on the "event_received_at" field.
func EventReceivedAtNEQ(v time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldNEQ(FieldEventReceivedAt, v))
}

// EventReceivedAtIn applies the In predicate on the "event_received_at" field.
func EventReceivedAtIn(vs ...time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldIn(FieldEventReceivedAt, vs...))
}

// EventReceivedAtNotIn applies the NotIn predicate on the "event_received_at" field.
func EventReceivedAtNotIn(vs ...time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldNotIn(FieldEventReceivedAt, vs...))
}

// EventReceivedAtGT applies the GT predicate on the "event_received_at" field.
func EventReceivedAtGT(v time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldGT(FieldEventReceivedAt, v))
}

// EventReceivedAtGTE applies the GTE predicate on the "event_received_at" field.
func EventReceivedAtGTE(v time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldGTE(FieldEventReceivedAt, v))
}

// EventReceivedAtLT applies the LT predicate on the "event_received_at" field.
func EventReceivedAtLT(v time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldLT(FieldEventReceivedAt, v))
}

// EventReceivedAtLTE applies the LTE predicate on the "event_received_at" field.
func EventReceivedAtLTE(v time.Time) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldLTE(FieldEventReceivedAt, v))
}

// EventHashEQ applies the EQ predicate on the "event_hash" field.
func EventHashEQ(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEQ(FieldEventHash, v))
}

// EventHashNEQ applies the NEQ predicate on the "event_hash" field.
func EventHashNEQ(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldNEQ(FieldEventHash, v))
}

// EventHashIn applies the In predicate on the "event_hash" field.
func EventHashIn(vs ...string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldIn(FieldEventHash, vs...))
}

// EventHashNotIn applies the NotIn predicate on the "event_hash" field.
func EventHashNotIn(vs ...string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldNotIn(FieldEventHash, vs...))
}

// EventHashGT applies the GT predicate on the "event_hash" field.
func EventHashGT(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldGT(FieldEventHash, v))
}

// EventHashGTE applies the GTE predicate on the "event_hash" field.
func EventHashGTE(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldGTE(FieldEventHash, v))
}

// EventHashLT applies the LT predicate on the "event_hash" field.
func EventHashLT(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldLT(FieldEventHash, v))
}

// EventHashLTE applies the LTE predicate on the "event_hash" field.
func EventHashLTE(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldLTE(FieldEventHash, v))
}

// EventHashContains applies the Contains predicate on the "event_hash" field.
func EventHashContains(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldContains(FieldEventHash, v))
}

// EventHashHasPrefix applies the HasPrefix predicate on the "event_hash" field.
func EventHashHasPrefix(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldHasPrefix(FieldEventHash, v))
}

// EventHashHasSuffix applies the HasSuffix predicate on the "event_hash" field.
func EventHashHasSuffix(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldHasSuffix(FieldEventHash, v))
}

// EventHashEqualFold applies the EqualFold predicate on the "event_hash" field.
func EventHashEqualFold(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldEqualFold(FieldEventHash, v))
}

// EventHashContainsFold applies the ContainsFold predicate on the "event_hash" field.
func EventHashContainsFold(v string) predicate.EventMetadata {
	return predicate.EventMetadata(sql.FieldContainsFold(FieldEventHash, v))
}

// HasBazelInvocation applies the HasEdge predicate on the "bazel_invocation" edge.
func HasBazelInvocation() predicate.EventMetadata {
	return predicate.EventMetadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BazelInvocationTable, BazelInvocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBazelInvocationWith applies the HasEdge predicate on the "bazel_invocation" edge with a given conditions (other predicates).
func HasBazelInvocationWith(preds ...predicate.BazelInvocation) predicate.EventMetadata {
	return predicate.EventMetadata(func(s *sql.Selector) {
		step := newBazelInvocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventMetadata) predicate.EventMetadata {
	return predicate.EventMetadata(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventMetadata) predicate.EventMetadata {
	return predicate.EventMetadata(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventMetadata) predicate.EventMetadata {
	return predicate.EventMetadata(sql.NotPredicates(p))
}
