// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/artifactmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/filesmetric"
)

// FilesMetricCreate is the builder for creating a FilesMetric entity.
type FilesMetricCreate struct {
	config
	mutation *FilesMetricMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSizeInBytes sets the "size_in_bytes" field.
func (fmc *FilesMetricCreate) SetSizeInBytes(i int64) *FilesMetricCreate {
	fmc.mutation.SetSizeInBytes(i)
	return fmc
}

// SetNillableSizeInBytes sets the "size_in_bytes" field if the given value is not nil.
func (fmc *FilesMetricCreate) SetNillableSizeInBytes(i *int64) *FilesMetricCreate {
	if i != nil {
		fmc.SetSizeInBytes(*i)
	}
	return fmc
}

// SetCount sets the "count" field.
func (fmc *FilesMetricCreate) SetCount(i int32) *FilesMetricCreate {
	fmc.mutation.SetCount(i)
	return fmc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (fmc *FilesMetricCreate) SetNillableCount(i *int32) *FilesMetricCreate {
	if i != nil {
		fmc.SetCount(*i)
	}
	return fmc
}

// SetArtifactMetricsID sets the "artifact_metrics" edge to the ArtifactMetrics entity by ID.
func (fmc *FilesMetricCreate) SetArtifactMetricsID(id int) *FilesMetricCreate {
	fmc.mutation.SetArtifactMetricsID(id)
	return fmc
}

// SetNillableArtifactMetricsID sets the "artifact_metrics" edge to the ArtifactMetrics entity by ID if the given value is not nil.
func (fmc *FilesMetricCreate) SetNillableArtifactMetricsID(id *int) *FilesMetricCreate {
	if id != nil {
		fmc = fmc.SetArtifactMetricsID(*id)
	}
	return fmc
}

// SetArtifactMetrics sets the "artifact_metrics" edge to the ArtifactMetrics entity.
func (fmc *FilesMetricCreate) SetArtifactMetrics(a *ArtifactMetrics) *FilesMetricCreate {
	return fmc.SetArtifactMetricsID(a.ID)
}

// Mutation returns the FilesMetricMutation object of the builder.
func (fmc *FilesMetricCreate) Mutation() *FilesMetricMutation {
	return fmc.mutation
}

// Save creates the FilesMetric in the database.
func (fmc *FilesMetricCreate) Save(ctx context.Context) (*FilesMetric, error) {
	return withHooks(ctx, fmc.sqlSave, fmc.mutation, fmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fmc *FilesMetricCreate) SaveX(ctx context.Context) *FilesMetric {
	v, err := fmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fmc *FilesMetricCreate) Exec(ctx context.Context) error {
	_, err := fmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmc *FilesMetricCreate) ExecX(ctx context.Context) {
	if err := fmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fmc *FilesMetricCreate) check() error {
	return nil
}

func (fmc *FilesMetricCreate) sqlSave(ctx context.Context) (*FilesMetric, error) {
	if err := fmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fmc.mutation.id = &_node.ID
	fmc.mutation.done = true
	return _node, nil
}

func (fmc *FilesMetricCreate) createSpec() (*FilesMetric, *sqlgraph.CreateSpec) {
	var (
		_node = &FilesMetric{config: fmc.config}
		_spec = sqlgraph.NewCreateSpec(filesmetric.Table, sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fmc.conflict
	if value, ok := fmc.mutation.SizeInBytes(); ok {
		_spec.SetField(filesmetric.FieldSizeInBytes, field.TypeInt64, value)
		_node.SizeInBytes = value
	}
	if value, ok := fmc.mutation.Count(); ok {
		_spec.SetField(filesmetric.FieldCount, field.TypeInt32, value)
		_node.Count = value
	}
	if nodes := fmc.mutation.ArtifactMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   filesmetric.ArtifactMetricsTable,
			Columns: []string{filesmetric.ArtifactMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.artifact_metrics_top_level_artifacts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FilesMetric.Create().
//		SetSizeInBytes(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilesMetricUpsert) {
//			SetSizeInBytes(v+v).
//		}).
//		Exec(ctx)
func (fmc *FilesMetricCreate) OnConflict(opts ...sql.ConflictOption) *FilesMetricUpsertOne {
	fmc.conflict = opts
	return &FilesMetricUpsertOne{
		create: fmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FilesMetric.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fmc *FilesMetricCreate) OnConflictColumns(columns ...string) *FilesMetricUpsertOne {
	fmc.conflict = append(fmc.conflict, sql.ConflictColumns(columns...))
	return &FilesMetricUpsertOne{
		create: fmc,
	}
}

type (
	// FilesMetricUpsertOne is the builder for "upsert"-ing
	//  one FilesMetric node.
	FilesMetricUpsertOne struct {
		create *FilesMetricCreate
	}

	// FilesMetricUpsert is the "OnConflict" setter.
	FilesMetricUpsert struct {
		*sql.UpdateSet
	}
)

// SetSizeInBytes sets the "size_in_bytes" field.
func (u *FilesMetricUpsert) SetSizeInBytes(v int64) *FilesMetricUpsert {
	u.Set(filesmetric.FieldSizeInBytes, v)
	return u
}

// UpdateSizeInBytes sets the "size_in_bytes" field to the value that was provided on create.
func (u *FilesMetricUpsert) UpdateSizeInBytes() *FilesMetricUpsert {
	u.SetExcluded(filesmetric.FieldSizeInBytes)
	return u
}

// AddSizeInBytes adds v to the "size_in_bytes" field.
func (u *FilesMetricUpsert) AddSizeInBytes(v int64) *FilesMetricUpsert {
	u.Add(filesmetric.FieldSizeInBytes, v)
	return u
}

// ClearSizeInBytes clears the value of the "size_in_bytes" field.
func (u *FilesMetricUpsert) ClearSizeInBytes() *FilesMetricUpsert {
	u.SetNull(filesmetric.FieldSizeInBytes)
	return u
}

// SetCount sets the "count" field.
func (u *FilesMetricUpsert) SetCount(v int32) *FilesMetricUpsert {
	u.Set(filesmetric.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *FilesMetricUpsert) UpdateCount() *FilesMetricUpsert {
	u.SetExcluded(filesmetric.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *FilesMetricUpsert) AddCount(v int32) *FilesMetricUpsert {
	u.Add(filesmetric.FieldCount, v)
	return u
}

// ClearCount clears the value of the "count" field.
func (u *FilesMetricUpsert) ClearCount() *FilesMetricUpsert {
	u.SetNull(filesmetric.FieldCount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FilesMetric.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FilesMetricUpsertOne) UpdateNewValues() *FilesMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FilesMetric.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FilesMetricUpsertOne) Ignore() *FilesMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilesMetricUpsertOne) DoNothing() *FilesMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilesMetricCreate.OnConflict
// documentation for more info.
func (u *FilesMetricUpsertOne) Update(set func(*FilesMetricUpsert)) *FilesMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilesMetricUpsert{UpdateSet: update})
	}))
	return u
}

// SetSizeInBytes sets the "size_in_bytes" field.
func (u *FilesMetricUpsertOne) SetSizeInBytes(v int64) *FilesMetricUpsertOne {
	return u.Update(func(s *FilesMetricUpsert) {
		s.SetSizeInBytes(v)
	})
}

// AddSizeInBytes adds v to the "size_in_bytes" field.
func (u *FilesMetricUpsertOne) AddSizeInBytes(v int64) *FilesMetricUpsertOne {
	return u.Update(func(s *FilesMetricUpsert) {
		s.AddSizeInBytes(v)
	})
}

// UpdateSizeInBytes sets the "size_in_bytes" field to the value that was provided on create.
func (u *FilesMetricUpsertOne) UpdateSizeInBytes() *FilesMetricUpsertOne {
	return u.Update(func(s *FilesMetricUpsert) {
		s.UpdateSizeInBytes()
	})
}

// ClearSizeInBytes clears the value of the "size_in_bytes" field.
func (u *FilesMetricUpsertOne) ClearSizeInBytes() *FilesMetricUpsertOne {
	return u.Update(func(s *FilesMetricUpsert) {
		s.ClearSizeInBytes()
	})
}

// SetCount sets the "count" field.
func (u *FilesMetricUpsertOne) SetCount(v int32) *FilesMetricUpsertOne {
	return u.Update(func(s *FilesMetricUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *FilesMetricUpsertOne) AddCount(v int32) *FilesMetricUpsertOne {
	return u.Update(func(s *FilesMetricUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *FilesMetricUpsertOne) UpdateCount() *FilesMetricUpsertOne {
	return u.Update(func(s *FilesMetricUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *FilesMetricUpsertOne) ClearCount() *FilesMetricUpsertOne {
	return u.Update(func(s *FilesMetricUpsert) {
		s.ClearCount()
	})
}

// Exec executes the query.
func (u *FilesMetricUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilesMetricCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilesMetricUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FilesMetricUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FilesMetricUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FilesMetricCreateBulk is the builder for creating many FilesMetric entities in bulk.
type FilesMetricCreateBulk struct {
	config
	err      error
	builders []*FilesMetricCreate
	conflict []sql.ConflictOption
}

// Save creates the FilesMetric entities in the database.
func (fmcb *FilesMetricCreateBulk) Save(ctx context.Context) ([]*FilesMetric, error) {
	if fmcb.err != nil {
		return nil, fmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fmcb.builders))
	nodes := make([]*FilesMetric, len(fmcb.builders))
	mutators := make([]Mutator, len(fmcb.builders))
	for i := range fmcb.builders {
		func(i int, root context.Context) {
			builder := fmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilesMetricMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fmcb *FilesMetricCreateBulk) SaveX(ctx context.Context) []*FilesMetric {
	v, err := fmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fmcb *FilesMetricCreateBulk) Exec(ctx context.Context) error {
	_, err := fmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmcb *FilesMetricCreateBulk) ExecX(ctx context.Context) {
	if err := fmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FilesMetric.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilesMetricUpsert) {
//			SetSizeInBytes(v+v).
//		}).
//		Exec(ctx)
func (fmcb *FilesMetricCreateBulk) OnConflict(opts ...sql.ConflictOption) *FilesMetricUpsertBulk {
	fmcb.conflict = opts
	return &FilesMetricUpsertBulk{
		create: fmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FilesMetric.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fmcb *FilesMetricCreateBulk) OnConflictColumns(columns ...string) *FilesMetricUpsertBulk {
	fmcb.conflict = append(fmcb.conflict, sql.ConflictColumns(columns...))
	return &FilesMetricUpsertBulk{
		create: fmcb,
	}
}

// FilesMetricUpsertBulk is the builder for "upsert"-ing
// a bulk of FilesMetric nodes.
type FilesMetricUpsertBulk struct {
	create *FilesMetricCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FilesMetric.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FilesMetricUpsertBulk) UpdateNewValues() *FilesMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FilesMetric.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FilesMetricUpsertBulk) Ignore() *FilesMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilesMetricUpsertBulk) DoNothing() *FilesMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilesMetricCreateBulk.OnConflict
// documentation for more info.
func (u *FilesMetricUpsertBulk) Update(set func(*FilesMetricUpsert)) *FilesMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilesMetricUpsert{UpdateSet: update})
	}))
	return u
}

// SetSizeInBytes sets the "size_in_bytes" field.
func (u *FilesMetricUpsertBulk) SetSizeInBytes(v int64) *FilesMetricUpsertBulk {
	return u.Update(func(s *FilesMetricUpsert) {
		s.SetSizeInBytes(v)
	})
}

// AddSizeInBytes adds v to the "size_in_bytes" field.
func (u *FilesMetricUpsertBulk) AddSizeInBytes(v int64) *FilesMetricUpsertBulk {
	return u.Update(func(s *FilesMetricUpsert) {
		s.AddSizeInBytes(v)
	})
}

// UpdateSizeInBytes sets the "size_in_bytes" field to the value that was provided on create.
func (u *FilesMetricUpsertBulk) UpdateSizeInBytes() *FilesMetricUpsertBulk {
	return u.Update(func(s *FilesMetricUpsert) {
		s.UpdateSizeInBytes()
	})
}

// ClearSizeInBytes clears the value of the "size_in_bytes" field.
func (u *FilesMetricUpsertBulk) ClearSizeInBytes() *FilesMetricUpsertBulk {
	return u.Update(func(s *FilesMetricUpsert) {
		s.ClearSizeInBytes()
	})
}

// SetCount sets the "count" field.
func (u *FilesMetricUpsertBulk) SetCount(v int32) *FilesMetricUpsertBulk {
	return u.Update(func(s *FilesMetricUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *FilesMetricUpsertBulk) AddCount(v int32) *FilesMetricUpsertBulk {
	return u.Update(func(s *FilesMetricUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *FilesMetricUpsertBulk) UpdateCount() *FilesMetricUpsertBulk {
	return u.Update(func(s *FilesMetricUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *FilesMetricUpsertBulk) ClearCount() *FilesMetricUpsertBulk {
	return u.Update(func(s *FilesMetricUpsert) {
		s.ClearCount()
	})
}

// Exec executes the query.
func (u *FilesMetricUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FilesMetricCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilesMetricCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilesMetricUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
