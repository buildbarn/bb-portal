// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/dynamicexecutionmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/racestatistics"
)

// DynamicExecutionMetricsCreate is the builder for creating a DynamicExecutionMetrics entity.
type DynamicExecutionMetricsCreate struct {
	config
	mutation *DynamicExecutionMetricsMutation
	hooks    []Hook
}

// SetMetricsID sets the "metrics_id" field.
func (demc *DynamicExecutionMetricsCreate) SetMetricsID(i int) *DynamicExecutionMetricsCreate {
	demc.mutation.SetMetricsID(i)
	return demc
}

// SetNillableMetricsID sets the "metrics_id" field if the given value is not nil.
func (demc *DynamicExecutionMetricsCreate) SetNillableMetricsID(i *int) *DynamicExecutionMetricsCreate {
	if i != nil {
		demc.SetMetricsID(*i)
	}
	return demc
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (demc *DynamicExecutionMetricsCreate) SetMetrics(m *Metrics) *DynamicExecutionMetricsCreate {
	return demc.SetMetricsID(m.ID)
}

// AddRaceStatisticIDs adds the "race_statistics" edge to the RaceStatistics entity by IDs.
func (demc *DynamicExecutionMetricsCreate) AddRaceStatisticIDs(ids ...int) *DynamicExecutionMetricsCreate {
	demc.mutation.AddRaceStatisticIDs(ids...)
	return demc
}

// AddRaceStatistics adds the "race_statistics" edges to the RaceStatistics entity.
func (demc *DynamicExecutionMetricsCreate) AddRaceStatistics(r ...*RaceStatistics) *DynamicExecutionMetricsCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return demc.AddRaceStatisticIDs(ids...)
}

// Mutation returns the DynamicExecutionMetricsMutation object of the builder.
func (demc *DynamicExecutionMetricsCreate) Mutation() *DynamicExecutionMetricsMutation {
	return demc.mutation
}

// Save creates the DynamicExecutionMetrics in the database.
func (demc *DynamicExecutionMetricsCreate) Save(ctx context.Context) (*DynamicExecutionMetrics, error) {
	return withHooks(ctx, demc.sqlSave, demc.mutation, demc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (demc *DynamicExecutionMetricsCreate) SaveX(ctx context.Context) *DynamicExecutionMetrics {
	v, err := demc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (demc *DynamicExecutionMetricsCreate) Exec(ctx context.Context) error {
	_, err := demc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (demc *DynamicExecutionMetricsCreate) ExecX(ctx context.Context) {
	if err := demc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (demc *DynamicExecutionMetricsCreate) check() error {
	return nil
}

func (demc *DynamicExecutionMetricsCreate) sqlSave(ctx context.Context) (*DynamicExecutionMetrics, error) {
	if err := demc.check(); err != nil {
		return nil, err
	}
	_node, _spec := demc.createSpec()
	if err := sqlgraph.CreateNode(ctx, demc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	demc.mutation.id = &_node.ID
	demc.mutation.done = true
	return _node, nil
}

func (demc *DynamicExecutionMetricsCreate) createSpec() (*DynamicExecutionMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &DynamicExecutionMetrics{config: demc.config}
		_spec = sqlgraph.NewCreateSpec(dynamicexecutionmetrics.Table, sqlgraph.NewFieldSpec(dynamicexecutionmetrics.FieldID, field.TypeInt))
	)
	if nodes := demc.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dynamicexecutionmetrics.MetricsTable,
			Columns: []string{dynamicexecutionmetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MetricsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := demc.mutation.RaceStatisticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dynamicexecutionmetrics.RaceStatisticsTable,
			Columns: []string{dynamicexecutionmetrics.RaceStatisticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(racestatistics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DynamicExecutionMetricsCreateBulk is the builder for creating many DynamicExecutionMetrics entities in bulk.
type DynamicExecutionMetricsCreateBulk struct {
	config
	err      error
	builders []*DynamicExecutionMetricsCreate
}

// Save creates the DynamicExecutionMetrics entities in the database.
func (demcb *DynamicExecutionMetricsCreateBulk) Save(ctx context.Context) ([]*DynamicExecutionMetrics, error) {
	if demcb.err != nil {
		return nil, demcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(demcb.builders))
	nodes := make([]*DynamicExecutionMetrics, len(demcb.builders))
	mutators := make([]Mutator, len(demcb.builders))
	for i := range demcb.builders {
		func(i int, root context.Context) {
			builder := demcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DynamicExecutionMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, demcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, demcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, demcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (demcb *DynamicExecutionMetricsCreateBulk) SaveX(ctx context.Context) []*DynamicExecutionMetrics {
	v, err := demcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (demcb *DynamicExecutionMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := demcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (demcb *DynamicExecutionMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := demcb.Exec(ctx); err != nil {
		panic(err)
	}
}
