// Code generated by ent, DO NOT EDIT.

package testresultbes

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLTE(FieldID, id))
}

// StatusDetails applies equality check predicate on the "status_details" field. It's identical to StatusDetailsEQ.
func StatusDetails(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldStatusDetails, v))
}

// CachedLocally applies equality check predicate on the "cached_locally" field. It's identical to CachedLocallyEQ.
func CachedLocally(v bool) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldCachedLocally, v))
}

// TestAttemptStartMillisEpoch applies equality check predicate on the "test_attempt_start_millis_epoch" field. It's identical to TestAttemptStartMillisEpochEQ.
func TestAttemptStartMillisEpoch(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestAttemptStartMillisEpoch, v))
}

// TestAttemptStart applies equality check predicate on the "test_attempt_start" field. It's identical to TestAttemptStartEQ.
func TestAttemptStart(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestAttemptStart, v))
}

// TestAttemptDurationMillis applies equality check predicate on the "test_attempt_duration_millis" field. It's identical to TestAttemptDurationMillisEQ.
func TestAttemptDurationMillis(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestAttemptDurationMillis, v))
}

// TestAttemptDuration applies equality check predicate on the "test_attempt_duration" field. It's identical to TestAttemptDurationEQ.
func TestAttemptDuration(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestAttemptDuration, v))
}

// TestCollectionID applies equality check predicate on the "test_collection_id" field. It's identical to TestCollectionIDEQ.
func TestCollectionID(v int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestCollectionID, v))
}

// TestStatusEQ applies the EQ predicate on the "test_status" field.
func TestStatusEQ(v TestStatus) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestStatus, v))
}

// TestStatusNEQ applies the NEQ predicate on the "test_status" field.
func TestStatusNEQ(v TestStatus) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldTestStatus, v))
}

// TestStatusIn applies the In predicate on the "test_status" field.
func TestStatusIn(vs ...TestStatus) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldTestStatus, vs...))
}

// TestStatusNotIn applies the NotIn predicate on the "test_status" field.
func TestStatusNotIn(vs ...TestStatus) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldTestStatus, vs...))
}

// TestStatusIsNil applies the IsNil predicate on the "test_status" field.
func TestStatusIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldTestStatus))
}

// TestStatusNotNil applies the NotNil predicate on the "test_status" field.
func TestStatusNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldTestStatus))
}

// StatusDetailsEQ applies the EQ predicate on the "status_details" field.
func StatusDetailsEQ(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldStatusDetails, v))
}

// StatusDetailsNEQ applies the NEQ predicate on the "status_details" field.
func StatusDetailsNEQ(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldStatusDetails, v))
}

// StatusDetailsIn applies the In predicate on the "status_details" field.
func StatusDetailsIn(vs ...string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldStatusDetails, vs...))
}

// StatusDetailsNotIn applies the NotIn predicate on the "status_details" field.
func StatusDetailsNotIn(vs ...string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldStatusDetails, vs...))
}

// StatusDetailsGT applies the GT predicate on the "status_details" field.
func StatusDetailsGT(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGT(FieldStatusDetails, v))
}

// StatusDetailsGTE applies the GTE predicate on the "status_details" field.
func StatusDetailsGTE(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGTE(FieldStatusDetails, v))
}

// StatusDetailsLT applies the LT predicate on the "status_details" field.
func StatusDetailsLT(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLT(FieldStatusDetails, v))
}

// StatusDetailsLTE applies the LTE predicate on the "status_details" field.
func StatusDetailsLTE(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLTE(FieldStatusDetails, v))
}

// StatusDetailsContains applies the Contains predicate on the "status_details" field.
func StatusDetailsContains(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldContains(FieldStatusDetails, v))
}

// StatusDetailsHasPrefix applies the HasPrefix predicate on the "status_details" field.
func StatusDetailsHasPrefix(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldHasPrefix(FieldStatusDetails, v))
}

// StatusDetailsHasSuffix applies the HasSuffix predicate on the "status_details" field.
func StatusDetailsHasSuffix(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldHasSuffix(FieldStatusDetails, v))
}

// StatusDetailsIsNil applies the IsNil predicate on the "status_details" field.
func StatusDetailsIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldStatusDetails))
}

// StatusDetailsNotNil applies the NotNil predicate on the "status_details" field.
func StatusDetailsNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldStatusDetails))
}

// StatusDetailsEqualFold applies the EqualFold predicate on the "status_details" field.
func StatusDetailsEqualFold(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEqualFold(FieldStatusDetails, v))
}

// StatusDetailsContainsFold applies the ContainsFold predicate on the "status_details" field.
func StatusDetailsContainsFold(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldContainsFold(FieldStatusDetails, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelIsNil applies the IsNil predicate on the "label" field.
func LabelIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldLabel))
}

// LabelNotNil applies the NotNil predicate on the "label" field.
func LabelNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldLabel))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldContainsFold(FieldLabel, v))
}

// WarningIsNil applies the IsNil predicate on the "warning" field.
func WarningIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldWarning))
}

// WarningNotNil applies the NotNil predicate on the "warning" field.
func WarningNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldWarning))
}

// CachedLocallyEQ applies the EQ predicate on the "cached_locally" field.
func CachedLocallyEQ(v bool) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldCachedLocally, v))
}

// CachedLocallyNEQ applies the NEQ predicate on the "cached_locally" field.
func CachedLocallyNEQ(v bool) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldCachedLocally, v))
}

// CachedLocallyIsNil applies the IsNil predicate on the "cached_locally" field.
func CachedLocallyIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldCachedLocally))
}

// CachedLocallyNotNil applies the NotNil predicate on the "cached_locally" field.
func CachedLocallyNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldCachedLocally))
}

// TestAttemptStartMillisEpochEQ applies the EQ predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochEQ(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestAttemptStartMillisEpoch, v))
}

// TestAttemptStartMillisEpochNEQ applies the NEQ predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochNEQ(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldTestAttemptStartMillisEpoch, v))
}

// TestAttemptStartMillisEpochIn applies the In predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochIn(vs ...int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldTestAttemptStartMillisEpoch, vs...))
}

// TestAttemptStartMillisEpochNotIn applies the NotIn predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochNotIn(vs ...int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldTestAttemptStartMillisEpoch, vs...))
}

// TestAttemptStartMillisEpochGT applies the GT predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochGT(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGT(FieldTestAttemptStartMillisEpoch, v))
}

// TestAttemptStartMillisEpochGTE applies the GTE predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochGTE(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGTE(FieldTestAttemptStartMillisEpoch, v))
}

// TestAttemptStartMillisEpochLT applies the LT predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochLT(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLT(FieldTestAttemptStartMillisEpoch, v))
}

// TestAttemptStartMillisEpochLTE applies the LTE predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochLTE(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLTE(FieldTestAttemptStartMillisEpoch, v))
}

// TestAttemptStartMillisEpochIsNil applies the IsNil predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldTestAttemptStartMillisEpoch))
}

// TestAttemptStartMillisEpochNotNil applies the NotNil predicate on the "test_attempt_start_millis_epoch" field.
func TestAttemptStartMillisEpochNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldTestAttemptStartMillisEpoch))
}

// TestAttemptStartEQ applies the EQ predicate on the "test_attempt_start" field.
func TestAttemptStartEQ(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestAttemptStart, v))
}

// TestAttemptStartNEQ applies the NEQ predicate on the "test_attempt_start" field.
func TestAttemptStartNEQ(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldTestAttemptStart, v))
}

// TestAttemptStartIn applies the In predicate on the "test_attempt_start" field.
func TestAttemptStartIn(vs ...string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldTestAttemptStart, vs...))
}

// TestAttemptStartNotIn applies the NotIn predicate on the "test_attempt_start" field.
func TestAttemptStartNotIn(vs ...string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldTestAttemptStart, vs...))
}

// TestAttemptStartGT applies the GT predicate on the "test_attempt_start" field.
func TestAttemptStartGT(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGT(FieldTestAttemptStart, v))
}

// TestAttemptStartGTE applies the GTE predicate on the "test_attempt_start" field.
func TestAttemptStartGTE(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGTE(FieldTestAttemptStart, v))
}

// TestAttemptStartLT applies the LT predicate on the "test_attempt_start" field.
func TestAttemptStartLT(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLT(FieldTestAttemptStart, v))
}

// TestAttemptStartLTE applies the LTE predicate on the "test_attempt_start" field.
func TestAttemptStartLTE(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLTE(FieldTestAttemptStart, v))
}

// TestAttemptStartContains applies the Contains predicate on the "test_attempt_start" field.
func TestAttemptStartContains(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldContains(FieldTestAttemptStart, v))
}

// TestAttemptStartHasPrefix applies the HasPrefix predicate on the "test_attempt_start" field.
func TestAttemptStartHasPrefix(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldHasPrefix(FieldTestAttemptStart, v))
}

// TestAttemptStartHasSuffix applies the HasSuffix predicate on the "test_attempt_start" field.
func TestAttemptStartHasSuffix(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldHasSuffix(FieldTestAttemptStart, v))
}

// TestAttemptStartIsNil applies the IsNil predicate on the "test_attempt_start" field.
func TestAttemptStartIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldTestAttemptStart))
}

// TestAttemptStartNotNil applies the NotNil predicate on the "test_attempt_start" field.
func TestAttemptStartNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldTestAttemptStart))
}

// TestAttemptStartEqualFold applies the EqualFold predicate on the "test_attempt_start" field.
func TestAttemptStartEqualFold(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEqualFold(FieldTestAttemptStart, v))
}

// TestAttemptStartContainsFold applies the ContainsFold predicate on the "test_attempt_start" field.
func TestAttemptStartContainsFold(v string) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldContainsFold(FieldTestAttemptStart, v))
}

// TestAttemptDurationMillisEQ applies the EQ predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisEQ(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestAttemptDurationMillis, v))
}

// TestAttemptDurationMillisNEQ applies the NEQ predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisNEQ(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldTestAttemptDurationMillis, v))
}

// TestAttemptDurationMillisIn applies the In predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisIn(vs ...int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldTestAttemptDurationMillis, vs...))
}

// TestAttemptDurationMillisNotIn applies the NotIn predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisNotIn(vs ...int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldTestAttemptDurationMillis, vs...))
}

// TestAttemptDurationMillisGT applies the GT predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisGT(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGT(FieldTestAttemptDurationMillis, v))
}

// TestAttemptDurationMillisGTE applies the GTE predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisGTE(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGTE(FieldTestAttemptDurationMillis, v))
}

// TestAttemptDurationMillisLT applies the LT predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisLT(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLT(FieldTestAttemptDurationMillis, v))
}

// TestAttemptDurationMillisLTE applies the LTE predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisLTE(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLTE(FieldTestAttemptDurationMillis, v))
}

// TestAttemptDurationMillisIsNil applies the IsNil predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldTestAttemptDurationMillis))
}

// TestAttemptDurationMillisNotNil applies the NotNil predicate on the "test_attempt_duration_millis" field.
func TestAttemptDurationMillisNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldTestAttemptDurationMillis))
}

// TestAttemptDurationEQ applies the EQ predicate on the "test_attempt_duration" field.
func TestAttemptDurationEQ(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestAttemptDuration, v))
}

// TestAttemptDurationNEQ applies the NEQ predicate on the "test_attempt_duration" field.
func TestAttemptDurationNEQ(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldTestAttemptDuration, v))
}

// TestAttemptDurationIn applies the In predicate on the "test_attempt_duration" field.
func TestAttemptDurationIn(vs ...int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldTestAttemptDuration, vs...))
}

// TestAttemptDurationNotIn applies the NotIn predicate on the "test_attempt_duration" field.
func TestAttemptDurationNotIn(vs ...int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldTestAttemptDuration, vs...))
}

// TestAttemptDurationGT applies the GT predicate on the "test_attempt_duration" field.
func TestAttemptDurationGT(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGT(FieldTestAttemptDuration, v))
}

// TestAttemptDurationGTE applies the GTE predicate on the "test_attempt_duration" field.
func TestAttemptDurationGTE(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldGTE(FieldTestAttemptDuration, v))
}

// TestAttemptDurationLT applies the LT predicate on the "test_attempt_duration" field.
func TestAttemptDurationLT(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLT(FieldTestAttemptDuration, v))
}

// TestAttemptDurationLTE applies the LTE predicate on the "test_attempt_duration" field.
func TestAttemptDurationLTE(v int64) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldLTE(FieldTestAttemptDuration, v))
}

// TestAttemptDurationIsNil applies the IsNil predicate on the "test_attempt_duration" field.
func TestAttemptDurationIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldTestAttemptDuration))
}

// TestAttemptDurationNotNil applies the NotNil predicate on the "test_attempt_duration" field.
func TestAttemptDurationNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldTestAttemptDuration))
}

// TestCollectionIDEQ applies the EQ predicate on the "test_collection_id" field.
func TestCollectionIDEQ(v int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldEQ(FieldTestCollectionID, v))
}

// TestCollectionIDNEQ applies the NEQ predicate on the "test_collection_id" field.
func TestCollectionIDNEQ(v int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNEQ(FieldTestCollectionID, v))
}

// TestCollectionIDIn applies the In predicate on the "test_collection_id" field.
func TestCollectionIDIn(vs ...int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIn(FieldTestCollectionID, vs...))
}

// TestCollectionIDNotIn applies the NotIn predicate on the "test_collection_id" field.
func TestCollectionIDNotIn(vs ...int) predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotIn(FieldTestCollectionID, vs...))
}

// TestCollectionIDIsNil applies the IsNil predicate on the "test_collection_id" field.
func TestCollectionIDIsNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldIsNull(FieldTestCollectionID))
}

// TestCollectionIDNotNil applies the NotNil predicate on the "test_collection_id" field.
func TestCollectionIDNotNil() predicate.TestResultBES {
	return predicate.TestResultBES(sql.FieldNotNull(FieldTestCollectionID))
}

// HasTestCollection applies the HasEdge predicate on the "test_collection" edge.
func HasTestCollection() predicate.TestResultBES {
	return predicate.TestResultBES(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TestCollectionTable, TestCollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestCollectionWith applies the HasEdge predicate on the "test_collection" edge with a given conditions (other predicates).
func HasTestCollectionWith(preds ...predicate.TestCollection) predicate.TestResultBES {
	return predicate.TestResultBES(func(s *sql.Selector) {
		step := newTestCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestActionOutput applies the HasEdge predicate on the "test_action_output" edge.
func HasTestActionOutput() predicate.TestResultBES {
	return predicate.TestResultBES(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestActionOutputTable, TestActionOutputColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestActionOutputWith applies the HasEdge predicate on the "test_action_output" edge with a given conditions (other predicates).
func HasTestActionOutputWith(preds ...predicate.TestFile) predicate.TestResultBES {
	return predicate.TestResultBES(func(s *sql.Selector) {
		step := newTestActionOutputStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExecutionInfo applies the HasEdge predicate on the "execution_info" edge.
func HasExecutionInfo() predicate.TestResultBES {
	return predicate.TestResultBES(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ExecutionInfoTable, ExecutionInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionInfoWith applies the HasEdge predicate on the "execution_info" edge with a given conditions (other predicates).
func HasExecutionInfoWith(preds ...predicate.ExectionInfo) predicate.TestResultBES {
	return predicate.TestResultBES(func(s *sql.Selector) {
		step := newExecutionInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestResultBES) predicate.TestResultBES {
	return predicate.TestResultBES(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestResultBES) predicate.TestResultBES {
	return predicate.TestResultBES(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestResultBES) predicate.TestResultBES {
	return predicate.TestResultBES(sql.NotPredicates(p))
}
