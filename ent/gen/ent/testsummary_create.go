// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testcollection"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testfile"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testsummary"
)

// TestSummaryCreate is the builder for creating a TestSummary entity.
type TestSummaryCreate struct {
	config
	mutation *TestSummaryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOverallStatus sets the "overall_status" field.
func (tsc *TestSummaryCreate) SetOverallStatus(ts testsummary.OverallStatus) *TestSummaryCreate {
	tsc.mutation.SetOverallStatus(ts)
	return tsc
}

// SetNillableOverallStatus sets the "overall_status" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableOverallStatus(ts *testsummary.OverallStatus) *TestSummaryCreate {
	if ts != nil {
		tsc.SetOverallStatus(*ts)
	}
	return tsc
}

// SetTotalRunCount sets the "total_run_count" field.
func (tsc *TestSummaryCreate) SetTotalRunCount(i int32) *TestSummaryCreate {
	tsc.mutation.SetTotalRunCount(i)
	return tsc
}

// SetNillableTotalRunCount sets the "total_run_count" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableTotalRunCount(i *int32) *TestSummaryCreate {
	if i != nil {
		tsc.SetTotalRunCount(*i)
	}
	return tsc
}

// SetRunCount sets the "run_count" field.
func (tsc *TestSummaryCreate) SetRunCount(i int32) *TestSummaryCreate {
	tsc.mutation.SetRunCount(i)
	return tsc
}

// SetNillableRunCount sets the "run_count" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableRunCount(i *int32) *TestSummaryCreate {
	if i != nil {
		tsc.SetRunCount(*i)
	}
	return tsc
}

// SetAttemptCount sets the "attempt_count" field.
func (tsc *TestSummaryCreate) SetAttemptCount(i int32) *TestSummaryCreate {
	tsc.mutation.SetAttemptCount(i)
	return tsc
}

// SetNillableAttemptCount sets the "attempt_count" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableAttemptCount(i *int32) *TestSummaryCreate {
	if i != nil {
		tsc.SetAttemptCount(*i)
	}
	return tsc
}

// SetShardCount sets the "shard_count" field.
func (tsc *TestSummaryCreate) SetShardCount(i int32) *TestSummaryCreate {
	tsc.mutation.SetShardCount(i)
	return tsc
}

// SetNillableShardCount sets the "shard_count" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableShardCount(i *int32) *TestSummaryCreate {
	if i != nil {
		tsc.SetShardCount(*i)
	}
	return tsc
}

// SetTotalNumCached sets the "total_num_cached" field.
func (tsc *TestSummaryCreate) SetTotalNumCached(i int32) *TestSummaryCreate {
	tsc.mutation.SetTotalNumCached(i)
	return tsc
}

// SetNillableTotalNumCached sets the "total_num_cached" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableTotalNumCached(i *int32) *TestSummaryCreate {
	if i != nil {
		tsc.SetTotalNumCached(*i)
	}
	return tsc
}

// SetFirstStartTime sets the "first_start_time" field.
func (tsc *TestSummaryCreate) SetFirstStartTime(i int64) *TestSummaryCreate {
	tsc.mutation.SetFirstStartTime(i)
	return tsc
}

// SetNillableFirstStartTime sets the "first_start_time" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableFirstStartTime(i *int64) *TestSummaryCreate {
	if i != nil {
		tsc.SetFirstStartTime(*i)
	}
	return tsc
}

// SetLastStopTime sets the "last_stop_time" field.
func (tsc *TestSummaryCreate) SetLastStopTime(i int64) *TestSummaryCreate {
	tsc.mutation.SetLastStopTime(i)
	return tsc
}

// SetNillableLastStopTime sets the "last_stop_time" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableLastStopTime(i *int64) *TestSummaryCreate {
	if i != nil {
		tsc.SetLastStopTime(*i)
	}
	return tsc
}

// SetTotalRunDuration sets the "total_run_duration" field.
func (tsc *TestSummaryCreate) SetTotalRunDuration(i int64) *TestSummaryCreate {
	tsc.mutation.SetTotalRunDuration(i)
	return tsc
}

// SetNillableTotalRunDuration sets the "total_run_duration" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableTotalRunDuration(i *int64) *TestSummaryCreate {
	if i != nil {
		tsc.SetTotalRunDuration(*i)
	}
	return tsc
}

// SetLabel sets the "label" field.
func (tsc *TestSummaryCreate) SetLabel(s string) *TestSummaryCreate {
	tsc.mutation.SetLabel(s)
	return tsc
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableLabel(s *string) *TestSummaryCreate {
	if s != nil {
		tsc.SetLabel(*s)
	}
	return tsc
}

// SetTestCollectionID sets the "test_collection" edge to the TestCollection entity by ID.
func (tsc *TestSummaryCreate) SetTestCollectionID(id int) *TestSummaryCreate {
	tsc.mutation.SetTestCollectionID(id)
	return tsc
}

// SetNillableTestCollectionID sets the "test_collection" edge to the TestCollection entity by ID if the given value is not nil.
func (tsc *TestSummaryCreate) SetNillableTestCollectionID(id *int) *TestSummaryCreate {
	if id != nil {
		tsc = tsc.SetTestCollectionID(*id)
	}
	return tsc
}

// SetTestCollection sets the "test_collection" edge to the TestCollection entity.
func (tsc *TestSummaryCreate) SetTestCollection(t *TestCollection) *TestSummaryCreate {
	return tsc.SetTestCollectionID(t.ID)
}

// AddPassedIDs adds the "passed" edge to the TestFile entity by IDs.
func (tsc *TestSummaryCreate) AddPassedIDs(ids ...int) *TestSummaryCreate {
	tsc.mutation.AddPassedIDs(ids...)
	return tsc
}

// AddPassed adds the "passed" edges to the TestFile entity.
func (tsc *TestSummaryCreate) AddPassed(t ...*TestFile) *TestSummaryCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsc.AddPassedIDs(ids...)
}

// AddFailedIDs adds the "failed" edge to the TestFile entity by IDs.
func (tsc *TestSummaryCreate) AddFailedIDs(ids ...int) *TestSummaryCreate {
	tsc.mutation.AddFailedIDs(ids...)
	return tsc
}

// AddFailed adds the "failed" edges to the TestFile entity.
func (tsc *TestSummaryCreate) AddFailed(t ...*TestFile) *TestSummaryCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsc.AddFailedIDs(ids...)
}

// Mutation returns the TestSummaryMutation object of the builder.
func (tsc *TestSummaryCreate) Mutation() *TestSummaryMutation {
	return tsc.mutation
}

// Save creates the TestSummary in the database.
func (tsc *TestSummaryCreate) Save(ctx context.Context) (*TestSummary, error) {
	tsc.defaults()
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TestSummaryCreate) SaveX(ctx context.Context) *TestSummary {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TestSummaryCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TestSummaryCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TestSummaryCreate) defaults() {
	if _, ok := tsc.mutation.OverallStatus(); !ok {
		v := testsummary.DefaultOverallStatus
		tsc.mutation.SetOverallStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TestSummaryCreate) check() error {
	if v, ok := tsc.mutation.OverallStatus(); ok {
		if err := testsummary.OverallStatusValidator(v); err != nil {
			return &ValidationError{Name: "overall_status", err: fmt.Errorf(`ent: validator failed for field "TestSummary.overall_status": %w`, err)}
		}
	}
	return nil
}

func (tsc *TestSummaryCreate) sqlSave(ctx context.Context) (*TestSummary, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TestSummaryCreate) createSpec() (*TestSummary, *sqlgraph.CreateSpec) {
	var (
		_node = &TestSummary{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(testsummary.Table, sqlgraph.NewFieldSpec(testsummary.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tsc.conflict
	if value, ok := tsc.mutation.OverallStatus(); ok {
		_spec.SetField(testsummary.FieldOverallStatus, field.TypeEnum, value)
		_node.OverallStatus = value
	}
	if value, ok := tsc.mutation.TotalRunCount(); ok {
		_spec.SetField(testsummary.FieldTotalRunCount, field.TypeInt32, value)
		_node.TotalRunCount = value
	}
	if value, ok := tsc.mutation.RunCount(); ok {
		_spec.SetField(testsummary.FieldRunCount, field.TypeInt32, value)
		_node.RunCount = value
	}
	if value, ok := tsc.mutation.AttemptCount(); ok {
		_spec.SetField(testsummary.FieldAttemptCount, field.TypeInt32, value)
		_node.AttemptCount = value
	}
	if value, ok := tsc.mutation.ShardCount(); ok {
		_spec.SetField(testsummary.FieldShardCount, field.TypeInt32, value)
		_node.ShardCount = value
	}
	if value, ok := tsc.mutation.TotalNumCached(); ok {
		_spec.SetField(testsummary.FieldTotalNumCached, field.TypeInt32, value)
		_node.TotalNumCached = value
	}
	if value, ok := tsc.mutation.FirstStartTime(); ok {
		_spec.SetField(testsummary.FieldFirstStartTime, field.TypeInt64, value)
		_node.FirstStartTime = value
	}
	if value, ok := tsc.mutation.LastStopTime(); ok {
		_spec.SetField(testsummary.FieldLastStopTime, field.TypeInt64, value)
		_node.LastStopTime = value
	}
	if value, ok := tsc.mutation.TotalRunDuration(); ok {
		_spec.SetField(testsummary.FieldTotalRunDuration, field.TypeInt64, value)
		_node.TotalRunDuration = value
	}
	if value, ok := tsc.mutation.Label(); ok {
		_spec.SetField(testsummary.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if nodes := tsc.mutation.TestCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testsummary.TestCollectionTable,
			Columns: []string{testsummary.TestCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.test_collection_test_summary = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.PassedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsummary.PassedTable,
			Columns: []string{testsummary.PassedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.FailedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsummary.FailedTable,
			Columns: []string{testsummary.FailedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestSummary.Create().
//		SetOverallStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestSummaryUpsert) {
//			SetOverallStatus(v+v).
//		}).
//		Exec(ctx)
func (tsc *TestSummaryCreate) OnConflict(opts ...sql.ConflictOption) *TestSummaryUpsertOne {
	tsc.conflict = opts
	return &TestSummaryUpsertOne{
		create: tsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestSummary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsc *TestSummaryCreate) OnConflictColumns(columns ...string) *TestSummaryUpsertOne {
	tsc.conflict = append(tsc.conflict, sql.ConflictColumns(columns...))
	return &TestSummaryUpsertOne{
		create: tsc,
	}
}

type (
	// TestSummaryUpsertOne is the builder for "upsert"-ing
	//  one TestSummary node.
	TestSummaryUpsertOne struct {
		create *TestSummaryCreate
	}

	// TestSummaryUpsert is the "OnConflict" setter.
	TestSummaryUpsert struct {
		*sql.UpdateSet
	}
)

// SetOverallStatus sets the "overall_status" field.
func (u *TestSummaryUpsert) SetOverallStatus(v testsummary.OverallStatus) *TestSummaryUpsert {
	u.Set(testsummary.FieldOverallStatus, v)
	return u
}

// UpdateOverallStatus sets the "overall_status" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateOverallStatus() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldOverallStatus)
	return u
}

// ClearOverallStatus clears the value of the "overall_status" field.
func (u *TestSummaryUpsert) ClearOverallStatus() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldOverallStatus)
	return u
}

// SetTotalRunCount sets the "total_run_count" field.
func (u *TestSummaryUpsert) SetTotalRunCount(v int32) *TestSummaryUpsert {
	u.Set(testsummary.FieldTotalRunCount, v)
	return u
}

// UpdateTotalRunCount sets the "total_run_count" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateTotalRunCount() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldTotalRunCount)
	return u
}

// AddTotalRunCount adds v to the "total_run_count" field.
func (u *TestSummaryUpsert) AddTotalRunCount(v int32) *TestSummaryUpsert {
	u.Add(testsummary.FieldTotalRunCount, v)
	return u
}

// ClearTotalRunCount clears the value of the "total_run_count" field.
func (u *TestSummaryUpsert) ClearTotalRunCount() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldTotalRunCount)
	return u
}

// SetRunCount sets the "run_count" field.
func (u *TestSummaryUpsert) SetRunCount(v int32) *TestSummaryUpsert {
	u.Set(testsummary.FieldRunCount, v)
	return u
}

// UpdateRunCount sets the "run_count" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateRunCount() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldRunCount)
	return u
}

// AddRunCount adds v to the "run_count" field.
func (u *TestSummaryUpsert) AddRunCount(v int32) *TestSummaryUpsert {
	u.Add(testsummary.FieldRunCount, v)
	return u
}

// ClearRunCount clears the value of the "run_count" field.
func (u *TestSummaryUpsert) ClearRunCount() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldRunCount)
	return u
}

// SetAttemptCount sets the "attempt_count" field.
func (u *TestSummaryUpsert) SetAttemptCount(v int32) *TestSummaryUpsert {
	u.Set(testsummary.FieldAttemptCount, v)
	return u
}

// UpdateAttemptCount sets the "attempt_count" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateAttemptCount() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldAttemptCount)
	return u
}

// AddAttemptCount adds v to the "attempt_count" field.
func (u *TestSummaryUpsert) AddAttemptCount(v int32) *TestSummaryUpsert {
	u.Add(testsummary.FieldAttemptCount, v)
	return u
}

// ClearAttemptCount clears the value of the "attempt_count" field.
func (u *TestSummaryUpsert) ClearAttemptCount() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldAttemptCount)
	return u
}

// SetShardCount sets the "shard_count" field.
func (u *TestSummaryUpsert) SetShardCount(v int32) *TestSummaryUpsert {
	u.Set(testsummary.FieldShardCount, v)
	return u
}

// UpdateShardCount sets the "shard_count" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateShardCount() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldShardCount)
	return u
}

// AddShardCount adds v to the "shard_count" field.
func (u *TestSummaryUpsert) AddShardCount(v int32) *TestSummaryUpsert {
	u.Add(testsummary.FieldShardCount, v)
	return u
}

// ClearShardCount clears the value of the "shard_count" field.
func (u *TestSummaryUpsert) ClearShardCount() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldShardCount)
	return u
}

// SetTotalNumCached sets the "total_num_cached" field.
func (u *TestSummaryUpsert) SetTotalNumCached(v int32) *TestSummaryUpsert {
	u.Set(testsummary.FieldTotalNumCached, v)
	return u
}

// UpdateTotalNumCached sets the "total_num_cached" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateTotalNumCached() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldTotalNumCached)
	return u
}

// AddTotalNumCached adds v to the "total_num_cached" field.
func (u *TestSummaryUpsert) AddTotalNumCached(v int32) *TestSummaryUpsert {
	u.Add(testsummary.FieldTotalNumCached, v)
	return u
}

// ClearTotalNumCached clears the value of the "total_num_cached" field.
func (u *TestSummaryUpsert) ClearTotalNumCached() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldTotalNumCached)
	return u
}

// SetFirstStartTime sets the "first_start_time" field.
func (u *TestSummaryUpsert) SetFirstStartTime(v int64) *TestSummaryUpsert {
	u.Set(testsummary.FieldFirstStartTime, v)
	return u
}

// UpdateFirstStartTime sets the "first_start_time" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateFirstStartTime() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldFirstStartTime)
	return u
}

// AddFirstStartTime adds v to the "first_start_time" field.
func (u *TestSummaryUpsert) AddFirstStartTime(v int64) *TestSummaryUpsert {
	u.Add(testsummary.FieldFirstStartTime, v)
	return u
}

// ClearFirstStartTime clears the value of the "first_start_time" field.
func (u *TestSummaryUpsert) ClearFirstStartTime() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldFirstStartTime)
	return u
}

// SetLastStopTime sets the "last_stop_time" field.
func (u *TestSummaryUpsert) SetLastStopTime(v int64) *TestSummaryUpsert {
	u.Set(testsummary.FieldLastStopTime, v)
	return u
}

// UpdateLastStopTime sets the "last_stop_time" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateLastStopTime() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldLastStopTime)
	return u
}

// AddLastStopTime adds v to the "last_stop_time" field.
func (u *TestSummaryUpsert) AddLastStopTime(v int64) *TestSummaryUpsert {
	u.Add(testsummary.FieldLastStopTime, v)
	return u
}

// ClearLastStopTime clears the value of the "last_stop_time" field.
func (u *TestSummaryUpsert) ClearLastStopTime() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldLastStopTime)
	return u
}

// SetTotalRunDuration sets the "total_run_duration" field.
func (u *TestSummaryUpsert) SetTotalRunDuration(v int64) *TestSummaryUpsert {
	u.Set(testsummary.FieldTotalRunDuration, v)
	return u
}

// UpdateTotalRunDuration sets the "total_run_duration" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateTotalRunDuration() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldTotalRunDuration)
	return u
}

// AddTotalRunDuration adds v to the "total_run_duration" field.
func (u *TestSummaryUpsert) AddTotalRunDuration(v int64) *TestSummaryUpsert {
	u.Add(testsummary.FieldTotalRunDuration, v)
	return u
}

// ClearTotalRunDuration clears the value of the "total_run_duration" field.
func (u *TestSummaryUpsert) ClearTotalRunDuration() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldTotalRunDuration)
	return u
}

// SetLabel sets the "label" field.
func (u *TestSummaryUpsert) SetLabel(v string) *TestSummaryUpsert {
	u.Set(testsummary.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *TestSummaryUpsert) UpdateLabel() *TestSummaryUpsert {
	u.SetExcluded(testsummary.FieldLabel)
	return u
}

// ClearLabel clears the value of the "label" field.
func (u *TestSummaryUpsert) ClearLabel() *TestSummaryUpsert {
	u.SetNull(testsummary.FieldLabel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TestSummary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TestSummaryUpsertOne) UpdateNewValues() *TestSummaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestSummary.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TestSummaryUpsertOne) Ignore() *TestSummaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestSummaryUpsertOne) DoNothing() *TestSummaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestSummaryCreate.OnConflict
// documentation for more info.
func (u *TestSummaryUpsertOne) Update(set func(*TestSummaryUpsert)) *TestSummaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestSummaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetOverallStatus sets the "overall_status" field.
func (u *TestSummaryUpsertOne) SetOverallStatus(v testsummary.OverallStatus) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetOverallStatus(v)
	})
}

// UpdateOverallStatus sets the "overall_status" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateOverallStatus() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateOverallStatus()
	})
}

// ClearOverallStatus clears the value of the "overall_status" field.
func (u *TestSummaryUpsertOne) ClearOverallStatus() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearOverallStatus()
	})
}

// SetTotalRunCount sets the "total_run_count" field.
func (u *TestSummaryUpsertOne) SetTotalRunCount(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetTotalRunCount(v)
	})
}

// AddTotalRunCount adds v to the "total_run_count" field.
func (u *TestSummaryUpsertOne) AddTotalRunCount(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddTotalRunCount(v)
	})
}

// UpdateTotalRunCount sets the "total_run_count" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateTotalRunCount() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateTotalRunCount()
	})
}

// ClearTotalRunCount clears the value of the "total_run_count" field.
func (u *TestSummaryUpsertOne) ClearTotalRunCount() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearTotalRunCount()
	})
}

// SetRunCount sets the "run_count" field.
func (u *TestSummaryUpsertOne) SetRunCount(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetRunCount(v)
	})
}

// AddRunCount adds v to the "run_count" field.
func (u *TestSummaryUpsertOne) AddRunCount(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddRunCount(v)
	})
}

// UpdateRunCount sets the "run_count" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateRunCount() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateRunCount()
	})
}

// ClearRunCount clears the value of the "run_count" field.
func (u *TestSummaryUpsertOne) ClearRunCount() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearRunCount()
	})
}

// SetAttemptCount sets the "attempt_count" field.
func (u *TestSummaryUpsertOne) SetAttemptCount(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetAttemptCount(v)
	})
}

// AddAttemptCount adds v to the "attempt_count" field.
func (u *TestSummaryUpsertOne) AddAttemptCount(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddAttemptCount(v)
	})
}

// UpdateAttemptCount sets the "attempt_count" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateAttemptCount() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateAttemptCount()
	})
}

// ClearAttemptCount clears the value of the "attempt_count" field.
func (u *TestSummaryUpsertOne) ClearAttemptCount() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearAttemptCount()
	})
}

// SetShardCount sets the "shard_count" field.
func (u *TestSummaryUpsertOne) SetShardCount(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetShardCount(v)
	})
}

// AddShardCount adds v to the "shard_count" field.
func (u *TestSummaryUpsertOne) AddShardCount(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddShardCount(v)
	})
}

// UpdateShardCount sets the "shard_count" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateShardCount() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateShardCount()
	})
}

// ClearShardCount clears the value of the "shard_count" field.
func (u *TestSummaryUpsertOne) ClearShardCount() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearShardCount()
	})
}

// SetTotalNumCached sets the "total_num_cached" field.
func (u *TestSummaryUpsertOne) SetTotalNumCached(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetTotalNumCached(v)
	})
}

// AddTotalNumCached adds v to the "total_num_cached" field.
func (u *TestSummaryUpsertOne) AddTotalNumCached(v int32) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddTotalNumCached(v)
	})
}

// UpdateTotalNumCached sets the "total_num_cached" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateTotalNumCached() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateTotalNumCached()
	})
}

// ClearTotalNumCached clears the value of the "total_num_cached" field.
func (u *TestSummaryUpsertOne) ClearTotalNumCached() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearTotalNumCached()
	})
}

// SetFirstStartTime sets the "first_start_time" field.
func (u *TestSummaryUpsertOne) SetFirstStartTime(v int64) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetFirstStartTime(v)
	})
}

// AddFirstStartTime adds v to the "first_start_time" field.
func (u *TestSummaryUpsertOne) AddFirstStartTime(v int64) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddFirstStartTime(v)
	})
}

// UpdateFirstStartTime sets the "first_start_time" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateFirstStartTime() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateFirstStartTime()
	})
}

// ClearFirstStartTime clears the value of the "first_start_time" field.
func (u *TestSummaryUpsertOne) ClearFirstStartTime() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearFirstStartTime()
	})
}

// SetLastStopTime sets the "last_stop_time" field.
func (u *TestSummaryUpsertOne) SetLastStopTime(v int64) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetLastStopTime(v)
	})
}

// AddLastStopTime adds v to the "last_stop_time" field.
func (u *TestSummaryUpsertOne) AddLastStopTime(v int64) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddLastStopTime(v)
	})
}

// UpdateLastStopTime sets the "last_stop_time" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateLastStopTime() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateLastStopTime()
	})
}

// ClearLastStopTime clears the value of the "last_stop_time" field.
func (u *TestSummaryUpsertOne) ClearLastStopTime() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearLastStopTime()
	})
}

// SetTotalRunDuration sets the "total_run_duration" field.
func (u *TestSummaryUpsertOne) SetTotalRunDuration(v int64) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetTotalRunDuration(v)
	})
}

// AddTotalRunDuration adds v to the "total_run_duration" field.
func (u *TestSummaryUpsertOne) AddTotalRunDuration(v int64) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddTotalRunDuration(v)
	})
}

// UpdateTotalRunDuration sets the "total_run_duration" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateTotalRunDuration() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateTotalRunDuration()
	})
}

// ClearTotalRunDuration clears the value of the "total_run_duration" field.
func (u *TestSummaryUpsertOne) ClearTotalRunDuration() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearTotalRunDuration()
	})
}

// SetLabel sets the "label" field.
func (u *TestSummaryUpsertOne) SetLabel(v string) *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *TestSummaryUpsertOne) UpdateLabel() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateLabel()
	})
}

// ClearLabel clears the value of the "label" field.
func (u *TestSummaryUpsertOne) ClearLabel() *TestSummaryUpsertOne {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearLabel()
	})
}

// Exec executes the query.
func (u *TestSummaryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestSummaryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestSummaryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestSummaryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestSummaryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestSummaryCreateBulk is the builder for creating many TestSummary entities in bulk.
type TestSummaryCreateBulk struct {
	config
	err      error
	builders []*TestSummaryCreate
	conflict []sql.ConflictOption
}

// Save creates the TestSummary entities in the database.
func (tscb *TestSummaryCreateBulk) Save(ctx context.Context) ([]*TestSummary, error) {
	if tscb.err != nil {
		return nil, tscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TestSummary, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestSummaryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TestSummaryCreateBulk) SaveX(ctx context.Context) []*TestSummary {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TestSummaryCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TestSummaryCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestSummary.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestSummaryUpsert) {
//			SetOverallStatus(v+v).
//		}).
//		Exec(ctx)
func (tscb *TestSummaryCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestSummaryUpsertBulk {
	tscb.conflict = opts
	return &TestSummaryUpsertBulk{
		create: tscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestSummary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tscb *TestSummaryCreateBulk) OnConflictColumns(columns ...string) *TestSummaryUpsertBulk {
	tscb.conflict = append(tscb.conflict, sql.ConflictColumns(columns...))
	return &TestSummaryUpsertBulk{
		create: tscb,
	}
}

// TestSummaryUpsertBulk is the builder for "upsert"-ing
// a bulk of TestSummary nodes.
type TestSummaryUpsertBulk struct {
	create *TestSummaryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestSummary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TestSummaryUpsertBulk) UpdateNewValues() *TestSummaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestSummary.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TestSummaryUpsertBulk) Ignore() *TestSummaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestSummaryUpsertBulk) DoNothing() *TestSummaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestSummaryCreateBulk.OnConflict
// documentation for more info.
func (u *TestSummaryUpsertBulk) Update(set func(*TestSummaryUpsert)) *TestSummaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestSummaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetOverallStatus sets the "overall_status" field.
func (u *TestSummaryUpsertBulk) SetOverallStatus(v testsummary.OverallStatus) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetOverallStatus(v)
	})
}

// UpdateOverallStatus sets the "overall_status" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateOverallStatus() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateOverallStatus()
	})
}

// ClearOverallStatus clears the value of the "overall_status" field.
func (u *TestSummaryUpsertBulk) ClearOverallStatus() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearOverallStatus()
	})
}

// SetTotalRunCount sets the "total_run_count" field.
func (u *TestSummaryUpsertBulk) SetTotalRunCount(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetTotalRunCount(v)
	})
}

// AddTotalRunCount adds v to the "total_run_count" field.
func (u *TestSummaryUpsertBulk) AddTotalRunCount(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddTotalRunCount(v)
	})
}

// UpdateTotalRunCount sets the "total_run_count" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateTotalRunCount() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateTotalRunCount()
	})
}

// ClearTotalRunCount clears the value of the "total_run_count" field.
func (u *TestSummaryUpsertBulk) ClearTotalRunCount() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearTotalRunCount()
	})
}

// SetRunCount sets the "run_count" field.
func (u *TestSummaryUpsertBulk) SetRunCount(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetRunCount(v)
	})
}

// AddRunCount adds v to the "run_count" field.
func (u *TestSummaryUpsertBulk) AddRunCount(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddRunCount(v)
	})
}

// UpdateRunCount sets the "run_count" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateRunCount() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateRunCount()
	})
}

// ClearRunCount clears the value of the "run_count" field.
func (u *TestSummaryUpsertBulk) ClearRunCount() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearRunCount()
	})
}

// SetAttemptCount sets the "attempt_count" field.
func (u *TestSummaryUpsertBulk) SetAttemptCount(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetAttemptCount(v)
	})
}

// AddAttemptCount adds v to the "attempt_count" field.
func (u *TestSummaryUpsertBulk) AddAttemptCount(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddAttemptCount(v)
	})
}

// UpdateAttemptCount sets the "attempt_count" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateAttemptCount() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateAttemptCount()
	})
}

// ClearAttemptCount clears the value of the "attempt_count" field.
func (u *TestSummaryUpsertBulk) ClearAttemptCount() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearAttemptCount()
	})
}

// SetShardCount sets the "shard_count" field.
func (u *TestSummaryUpsertBulk) SetShardCount(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetShardCount(v)
	})
}

// AddShardCount adds v to the "shard_count" field.
func (u *TestSummaryUpsertBulk) AddShardCount(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddShardCount(v)
	})
}

// UpdateShardCount sets the "shard_count" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateShardCount() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateShardCount()
	})
}

// ClearShardCount clears the value of the "shard_count" field.
func (u *TestSummaryUpsertBulk) ClearShardCount() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearShardCount()
	})
}

// SetTotalNumCached sets the "total_num_cached" field.
func (u *TestSummaryUpsertBulk) SetTotalNumCached(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetTotalNumCached(v)
	})
}

// AddTotalNumCached adds v to the "total_num_cached" field.
func (u *TestSummaryUpsertBulk) AddTotalNumCached(v int32) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddTotalNumCached(v)
	})
}

// UpdateTotalNumCached sets the "total_num_cached" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateTotalNumCached() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateTotalNumCached()
	})
}

// ClearTotalNumCached clears the value of the "total_num_cached" field.
func (u *TestSummaryUpsertBulk) ClearTotalNumCached() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearTotalNumCached()
	})
}

// SetFirstStartTime sets the "first_start_time" field.
func (u *TestSummaryUpsertBulk) SetFirstStartTime(v int64) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetFirstStartTime(v)
	})
}

// AddFirstStartTime adds v to the "first_start_time" field.
func (u *TestSummaryUpsertBulk) AddFirstStartTime(v int64) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddFirstStartTime(v)
	})
}

// UpdateFirstStartTime sets the "first_start_time" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateFirstStartTime() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateFirstStartTime()
	})
}

// ClearFirstStartTime clears the value of the "first_start_time" field.
func (u *TestSummaryUpsertBulk) ClearFirstStartTime() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearFirstStartTime()
	})
}

// SetLastStopTime sets the "last_stop_time" field.
func (u *TestSummaryUpsertBulk) SetLastStopTime(v int64) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetLastStopTime(v)
	})
}

// AddLastStopTime adds v to the "last_stop_time" field.
func (u *TestSummaryUpsertBulk) AddLastStopTime(v int64) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddLastStopTime(v)
	})
}

// UpdateLastStopTime sets the "last_stop_time" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateLastStopTime() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateLastStopTime()
	})
}

// ClearLastStopTime clears the value of the "last_stop_time" field.
func (u *TestSummaryUpsertBulk) ClearLastStopTime() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearLastStopTime()
	})
}

// SetTotalRunDuration sets the "total_run_duration" field.
func (u *TestSummaryUpsertBulk) SetTotalRunDuration(v int64) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetTotalRunDuration(v)
	})
}

// AddTotalRunDuration adds v to the "total_run_duration" field.
func (u *TestSummaryUpsertBulk) AddTotalRunDuration(v int64) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.AddTotalRunDuration(v)
	})
}

// UpdateTotalRunDuration sets the "total_run_duration" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateTotalRunDuration() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateTotalRunDuration()
	})
}

// ClearTotalRunDuration clears the value of the "total_run_duration" field.
func (u *TestSummaryUpsertBulk) ClearTotalRunDuration() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearTotalRunDuration()
	})
}

// SetLabel sets the "label" field.
func (u *TestSummaryUpsertBulk) SetLabel(v string) *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *TestSummaryUpsertBulk) UpdateLabel() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.UpdateLabel()
	})
}

// ClearLabel clears the value of the "label" field.
func (u *TestSummaryUpsertBulk) ClearLabel() *TestSummaryUpsertBulk {
	return u.Update(func(s *TestSummaryUpsert) {
		s.ClearLabel()
	})
}

// Exec executes the query.
func (u *TestSummaryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestSummaryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestSummaryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestSummaryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
