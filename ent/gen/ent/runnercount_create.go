// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/actionsummary"
	"github.com/buildbarn/bb-portal/ent/gen/ent/runnercount"
)

// RunnerCountCreate is the builder for creating a RunnerCount entity.
type RunnerCountCreate struct {
	config
	mutation *RunnerCountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (rcc *RunnerCountCreate) SetName(s string) *RunnerCountCreate {
	rcc.mutation.SetName(s)
	return rcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcc *RunnerCountCreate) SetNillableName(s *string) *RunnerCountCreate {
	if s != nil {
		rcc.SetName(*s)
	}
	return rcc
}

// SetExecKind sets the "exec_kind" field.
func (rcc *RunnerCountCreate) SetExecKind(s string) *RunnerCountCreate {
	rcc.mutation.SetExecKind(s)
	return rcc
}

// SetNillableExecKind sets the "exec_kind" field if the given value is not nil.
func (rcc *RunnerCountCreate) SetNillableExecKind(s *string) *RunnerCountCreate {
	if s != nil {
		rcc.SetExecKind(*s)
	}
	return rcc
}

// SetActionsExecuted sets the "actions_executed" field.
func (rcc *RunnerCountCreate) SetActionsExecuted(i int64) *RunnerCountCreate {
	rcc.mutation.SetActionsExecuted(i)
	return rcc
}

// SetNillableActionsExecuted sets the "actions_executed" field if the given value is not nil.
func (rcc *RunnerCountCreate) SetNillableActionsExecuted(i *int64) *RunnerCountCreate {
	if i != nil {
		rcc.SetActionsExecuted(*i)
	}
	return rcc
}

// SetActionSummaryID sets the "action_summary" edge to the ActionSummary entity by ID.
func (rcc *RunnerCountCreate) SetActionSummaryID(id int) *RunnerCountCreate {
	rcc.mutation.SetActionSummaryID(id)
	return rcc
}

// SetNillableActionSummaryID sets the "action_summary" edge to the ActionSummary entity by ID if the given value is not nil.
func (rcc *RunnerCountCreate) SetNillableActionSummaryID(id *int) *RunnerCountCreate {
	if id != nil {
		rcc = rcc.SetActionSummaryID(*id)
	}
	return rcc
}

// SetActionSummary sets the "action_summary" edge to the ActionSummary entity.
func (rcc *RunnerCountCreate) SetActionSummary(a *ActionSummary) *RunnerCountCreate {
	return rcc.SetActionSummaryID(a.ID)
}

// Mutation returns the RunnerCountMutation object of the builder.
func (rcc *RunnerCountCreate) Mutation() *RunnerCountMutation {
	return rcc.mutation
}

// Save creates the RunnerCount in the database.
func (rcc *RunnerCountCreate) Save(ctx context.Context) (*RunnerCount, error) {
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RunnerCountCreate) SaveX(ctx context.Context) *RunnerCount {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RunnerCountCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RunnerCountCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RunnerCountCreate) check() error {
	return nil
}

func (rcc *RunnerCountCreate) sqlSave(ctx context.Context) (*RunnerCount, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RunnerCountCreate) createSpec() (*RunnerCount, *sqlgraph.CreateSpec) {
	var (
		_node = &RunnerCount{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(runnercount.Table, sqlgraph.NewFieldSpec(runnercount.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rcc.conflict
	if value, ok := rcc.mutation.Name(); ok {
		_spec.SetField(runnercount.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rcc.mutation.ExecKind(); ok {
		_spec.SetField(runnercount.FieldExecKind, field.TypeString, value)
		_node.ExecKind = value
	}
	if value, ok := rcc.mutation.ActionsExecuted(); ok {
		_spec.SetField(runnercount.FieldActionsExecuted, field.TypeInt64, value)
		_node.ActionsExecuted = value
	}
	if nodes := rcc.mutation.ActionSummaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   runnercount.ActionSummaryTable,
			Columns: []string{runnercount.ActionSummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionsummary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.action_summary_runner_count = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RunnerCount.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RunnerCountUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rcc *RunnerCountCreate) OnConflict(opts ...sql.ConflictOption) *RunnerCountUpsertOne {
	rcc.conflict = opts
	return &RunnerCountUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RunnerCount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *RunnerCountCreate) OnConflictColumns(columns ...string) *RunnerCountUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &RunnerCountUpsertOne{
		create: rcc,
	}
}

type (
	// RunnerCountUpsertOne is the builder for "upsert"-ing
	//  one RunnerCount node.
	RunnerCountUpsertOne struct {
		create *RunnerCountCreate
	}

	// RunnerCountUpsert is the "OnConflict" setter.
	RunnerCountUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *RunnerCountUpsert) SetName(v string) *RunnerCountUpsert {
	u.Set(runnercount.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RunnerCountUpsert) UpdateName() *RunnerCountUpsert {
	u.SetExcluded(runnercount.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *RunnerCountUpsert) ClearName() *RunnerCountUpsert {
	u.SetNull(runnercount.FieldName)
	return u
}

// SetExecKind sets the "exec_kind" field.
func (u *RunnerCountUpsert) SetExecKind(v string) *RunnerCountUpsert {
	u.Set(runnercount.FieldExecKind, v)
	return u
}

// UpdateExecKind sets the "exec_kind" field to the value that was provided on create.
func (u *RunnerCountUpsert) UpdateExecKind() *RunnerCountUpsert {
	u.SetExcluded(runnercount.FieldExecKind)
	return u
}

// ClearExecKind clears the value of the "exec_kind" field.
func (u *RunnerCountUpsert) ClearExecKind() *RunnerCountUpsert {
	u.SetNull(runnercount.FieldExecKind)
	return u
}

// SetActionsExecuted sets the "actions_executed" field.
func (u *RunnerCountUpsert) SetActionsExecuted(v int64) *RunnerCountUpsert {
	u.Set(runnercount.FieldActionsExecuted, v)
	return u
}

// UpdateActionsExecuted sets the "actions_executed" field to the value that was provided on create.
func (u *RunnerCountUpsert) UpdateActionsExecuted() *RunnerCountUpsert {
	u.SetExcluded(runnercount.FieldActionsExecuted)
	return u
}

// AddActionsExecuted adds v to the "actions_executed" field.
func (u *RunnerCountUpsert) AddActionsExecuted(v int64) *RunnerCountUpsert {
	u.Add(runnercount.FieldActionsExecuted, v)
	return u
}

// ClearActionsExecuted clears the value of the "actions_executed" field.
func (u *RunnerCountUpsert) ClearActionsExecuted() *RunnerCountUpsert {
	u.SetNull(runnercount.FieldActionsExecuted)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RunnerCount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RunnerCountUpsertOne) UpdateNewValues() *RunnerCountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RunnerCount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RunnerCountUpsertOne) Ignore() *RunnerCountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RunnerCountUpsertOne) DoNothing() *RunnerCountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RunnerCountCreate.OnConflict
// documentation for more info.
func (u *RunnerCountUpsertOne) Update(set func(*RunnerCountUpsert)) *RunnerCountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RunnerCountUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RunnerCountUpsertOne) SetName(v string) *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RunnerCountUpsertOne) UpdateName() *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RunnerCountUpsertOne) ClearName() *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.ClearName()
	})
}

// SetExecKind sets the "exec_kind" field.
func (u *RunnerCountUpsertOne) SetExecKind(v string) *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.SetExecKind(v)
	})
}

// UpdateExecKind sets the "exec_kind" field to the value that was provided on create.
func (u *RunnerCountUpsertOne) UpdateExecKind() *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.UpdateExecKind()
	})
}

// ClearExecKind clears the value of the "exec_kind" field.
func (u *RunnerCountUpsertOne) ClearExecKind() *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.ClearExecKind()
	})
}

// SetActionsExecuted sets the "actions_executed" field.
func (u *RunnerCountUpsertOne) SetActionsExecuted(v int64) *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.SetActionsExecuted(v)
	})
}

// AddActionsExecuted adds v to the "actions_executed" field.
func (u *RunnerCountUpsertOne) AddActionsExecuted(v int64) *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.AddActionsExecuted(v)
	})
}

// UpdateActionsExecuted sets the "actions_executed" field to the value that was provided on create.
func (u *RunnerCountUpsertOne) UpdateActionsExecuted() *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.UpdateActionsExecuted()
	})
}

// ClearActionsExecuted clears the value of the "actions_executed" field.
func (u *RunnerCountUpsertOne) ClearActionsExecuted() *RunnerCountUpsertOne {
	return u.Update(func(s *RunnerCountUpsert) {
		s.ClearActionsExecuted()
	})
}

// Exec executes the query.
func (u *RunnerCountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RunnerCountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RunnerCountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RunnerCountUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RunnerCountUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RunnerCountCreateBulk is the builder for creating many RunnerCount entities in bulk.
type RunnerCountCreateBulk struct {
	config
	err      error
	builders []*RunnerCountCreate
	conflict []sql.ConflictOption
}

// Save creates the RunnerCount entities in the database.
func (rccb *RunnerCountCreateBulk) Save(ctx context.Context) ([]*RunnerCount, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RunnerCount, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RunnerCountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RunnerCountCreateBulk) SaveX(ctx context.Context) []*RunnerCount {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RunnerCountCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RunnerCountCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RunnerCount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RunnerCountUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rccb *RunnerCountCreateBulk) OnConflict(opts ...sql.ConflictOption) *RunnerCountUpsertBulk {
	rccb.conflict = opts
	return &RunnerCountUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RunnerCount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *RunnerCountCreateBulk) OnConflictColumns(columns ...string) *RunnerCountUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &RunnerCountUpsertBulk{
		create: rccb,
	}
}

// RunnerCountUpsertBulk is the builder for "upsert"-ing
// a bulk of RunnerCount nodes.
type RunnerCountUpsertBulk struct {
	create *RunnerCountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RunnerCount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RunnerCountUpsertBulk) UpdateNewValues() *RunnerCountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RunnerCount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RunnerCountUpsertBulk) Ignore() *RunnerCountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RunnerCountUpsertBulk) DoNothing() *RunnerCountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RunnerCountCreateBulk.OnConflict
// documentation for more info.
func (u *RunnerCountUpsertBulk) Update(set func(*RunnerCountUpsert)) *RunnerCountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RunnerCountUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RunnerCountUpsertBulk) SetName(v string) *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RunnerCountUpsertBulk) UpdateName() *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RunnerCountUpsertBulk) ClearName() *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.ClearName()
	})
}

// SetExecKind sets the "exec_kind" field.
func (u *RunnerCountUpsertBulk) SetExecKind(v string) *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.SetExecKind(v)
	})
}

// UpdateExecKind sets the "exec_kind" field to the value that was provided on create.
func (u *RunnerCountUpsertBulk) UpdateExecKind() *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.UpdateExecKind()
	})
}

// ClearExecKind clears the value of the "exec_kind" field.
func (u *RunnerCountUpsertBulk) ClearExecKind() *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.ClearExecKind()
	})
}

// SetActionsExecuted sets the "actions_executed" field.
func (u *RunnerCountUpsertBulk) SetActionsExecuted(v int64) *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.SetActionsExecuted(v)
	})
}

// AddActionsExecuted adds v to the "actions_executed" field.
func (u *RunnerCountUpsertBulk) AddActionsExecuted(v int64) *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.AddActionsExecuted(v)
	})
}

// UpdateActionsExecuted sets the "actions_executed" field to the value that was provided on create.
func (u *RunnerCountUpsertBulk) UpdateActionsExecuted() *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.UpdateActionsExecuted()
	})
}

// ClearActionsExecuted clears the value of the "actions_executed" field.
func (u *RunnerCountUpsertBulk) ClearActionsExecuted() *RunnerCountUpsertBulk {
	return u.Update(func(s *RunnerCountUpsert) {
		s.ClearActionsExecuted()
	})
}

// Exec executes the query.
func (u *RunnerCountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RunnerCountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RunnerCountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RunnerCountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
