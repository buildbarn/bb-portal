// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/eventmetadata"
)

// EventMetadataCreate is the builder for creating a EventMetadata entity.
type EventMetadataCreate struct {
	config
	mutation *EventMetadataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSequenceNumber sets the "sequence_number" field.
func (emc *EventMetadataCreate) SetSequenceNumber(i int64) *EventMetadataCreate {
	emc.mutation.SetSequenceNumber(i)
	return emc
}

// SetEventReceivedAt sets the "event_received_at" field.
func (emc *EventMetadataCreate) SetEventReceivedAt(t time.Time) *EventMetadataCreate {
	emc.mutation.SetEventReceivedAt(t)
	return emc
}

// SetEventHash sets the "event_hash" field.
func (emc *EventMetadataCreate) SetEventHash(s string) *EventMetadataCreate {
	emc.mutation.SetEventHash(s)
	return emc
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (emc *EventMetadataCreate) SetBazelInvocationID(id int) *EventMetadataCreate {
	emc.mutation.SetBazelInvocationID(id)
	return emc
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (emc *EventMetadataCreate) SetBazelInvocation(b *BazelInvocation) *EventMetadataCreate {
	return emc.SetBazelInvocationID(b.ID)
}

// Mutation returns the EventMetadataMutation object of the builder.
func (emc *EventMetadataCreate) Mutation() *EventMetadataMutation {
	return emc.mutation
}

// Save creates the EventMetadata in the database.
func (emc *EventMetadataCreate) Save(ctx context.Context) (*EventMetadata, error) {
	return withHooks(ctx, emc.sqlSave, emc.mutation, emc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (emc *EventMetadataCreate) SaveX(ctx context.Context) *EventMetadata {
	v, err := emc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emc *EventMetadataCreate) Exec(ctx context.Context) error {
	_, err := emc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emc *EventMetadataCreate) ExecX(ctx context.Context) {
	if err := emc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emc *EventMetadataCreate) check() error {
	if _, ok := emc.mutation.SequenceNumber(); !ok {
		return &ValidationError{Name: "sequence_number", err: errors.New(`ent: missing required field "EventMetadata.sequence_number"`)}
	}
	if _, ok := emc.mutation.EventReceivedAt(); !ok {
		return &ValidationError{Name: "event_received_at", err: errors.New(`ent: missing required field "EventMetadata.event_received_at"`)}
	}
	if _, ok := emc.mutation.EventHash(); !ok {
		return &ValidationError{Name: "event_hash", err: errors.New(`ent: missing required field "EventMetadata.event_hash"`)}
	}
	if len(emc.mutation.BazelInvocationIDs()) == 0 {
		return &ValidationError{Name: "bazel_invocation", err: errors.New(`ent: missing required edge "EventMetadata.bazel_invocation"`)}
	}
	return nil
}

func (emc *EventMetadataCreate) sqlSave(ctx context.Context) (*EventMetadata, error) {
	if err := emc.check(); err != nil {
		return nil, err
	}
	_node, _spec := emc.createSpec()
	if err := sqlgraph.CreateNode(ctx, emc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	emc.mutation.id = &_node.ID
	emc.mutation.done = true
	return _node, nil
}

func (emc *EventMetadataCreate) createSpec() (*EventMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &EventMetadata{config: emc.config}
		_spec = sqlgraph.NewCreateSpec(eventmetadata.Table, sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt))
	)
	_spec.OnConflict = emc.conflict
	if value, ok := emc.mutation.SequenceNumber(); ok {
		_spec.SetField(eventmetadata.FieldSequenceNumber, field.TypeInt64, value)
		_node.SequenceNumber = value
	}
	if value, ok := emc.mutation.EventReceivedAt(); ok {
		_spec.SetField(eventmetadata.FieldEventReceivedAt, field.TypeTime, value)
		_node.EventReceivedAt = value
	}
	if value, ok := emc.mutation.EventHash(); ok {
		_spec.SetField(eventmetadata.FieldEventHash, field.TypeString, value)
		_node.EventHash = value
	}
	if nodes := emc.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventmetadata.BazelInvocationTable,
			Columns: []string{eventmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bazel_invocation_event_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventMetadata.Create().
//		SetSequenceNumber(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventMetadataUpsert) {
//			SetSequenceNumber(v+v).
//		}).
//		Exec(ctx)
func (emc *EventMetadataCreate) OnConflict(opts ...sql.ConflictOption) *EventMetadataUpsertOne {
	emc.conflict = opts
	return &EventMetadataUpsertOne{
		create: emc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (emc *EventMetadataCreate) OnConflictColumns(columns ...string) *EventMetadataUpsertOne {
	emc.conflict = append(emc.conflict, sql.ConflictColumns(columns...))
	return &EventMetadataUpsertOne{
		create: emc,
	}
}

type (
	// EventMetadataUpsertOne is the builder for "upsert"-ing
	//  one EventMetadata node.
	EventMetadataUpsertOne struct {
		create *EventMetadataCreate
	}

	// EventMetadataUpsert is the "OnConflict" setter.
	EventMetadataUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EventMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventMetadataUpsertOne) UpdateNewValues() *EventMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.SequenceNumber(); exists {
			s.SetIgnore(eventmetadata.FieldSequenceNumber)
		}
		if _, exists := u.create.mutation.EventReceivedAt(); exists {
			s.SetIgnore(eventmetadata.FieldEventReceivedAt)
		}
		if _, exists := u.create.mutation.EventHash(); exists {
			s.SetIgnore(eventmetadata.FieldEventHash)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventMetadata.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventMetadataUpsertOne) Ignore() *EventMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventMetadataUpsertOne) DoNothing() *EventMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventMetadataCreate.OnConflict
// documentation for more info.
func (u *EventMetadataUpsertOne) Update(set func(*EventMetadataUpsert)) *EventMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *EventMetadataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventMetadataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventMetadataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventMetadataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventMetadataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventMetadataCreateBulk is the builder for creating many EventMetadata entities in bulk.
type EventMetadataCreateBulk struct {
	config
	err      error
	builders []*EventMetadataCreate
	conflict []sql.ConflictOption
}

// Save creates the EventMetadata entities in the database.
func (emcb *EventMetadataCreateBulk) Save(ctx context.Context) ([]*EventMetadata, error) {
	if emcb.err != nil {
		return nil, emcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(emcb.builders))
	nodes := make([]*EventMetadata, len(emcb.builders))
	mutators := make([]Mutator, len(emcb.builders))
	for i := range emcb.builders {
		func(i int, root context.Context) {
			builder := emcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, emcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = emcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, emcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, emcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (emcb *EventMetadataCreateBulk) SaveX(ctx context.Context) []*EventMetadata {
	v, err := emcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emcb *EventMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := emcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emcb *EventMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := emcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventMetadata.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventMetadataUpsert) {
//			SetSequenceNumber(v+v).
//		}).
//		Exec(ctx)
func (emcb *EventMetadataCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventMetadataUpsertBulk {
	emcb.conflict = opts
	return &EventMetadataUpsertBulk{
		create: emcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (emcb *EventMetadataCreateBulk) OnConflictColumns(columns ...string) *EventMetadataUpsertBulk {
	emcb.conflict = append(emcb.conflict, sql.ConflictColumns(columns...))
	return &EventMetadataUpsertBulk{
		create: emcb,
	}
}

// EventMetadataUpsertBulk is the builder for "upsert"-ing
// a bulk of EventMetadata nodes.
type EventMetadataUpsertBulk struct {
	create *EventMetadataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventMetadataUpsertBulk) UpdateNewValues() *EventMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.SequenceNumber(); exists {
				s.SetIgnore(eventmetadata.FieldSequenceNumber)
			}
			if _, exists := b.mutation.EventReceivedAt(); exists {
				s.SetIgnore(eventmetadata.FieldEventReceivedAt)
			}
			if _, exists := b.mutation.EventHash(); exists {
				s.SetIgnore(eventmetadata.FieldEventHash)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventMetadata.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventMetadataUpsertBulk) Ignore() *EventMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventMetadataUpsertBulk) DoNothing() *EventMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventMetadataCreateBulk.OnConflict
// documentation for more info.
func (u *EventMetadataUpsertBulk) Update(set func(*EventMetadataUpsert)) *EventMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *EventMetadataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventMetadataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventMetadataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventMetadataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
