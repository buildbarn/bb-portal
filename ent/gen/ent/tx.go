// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	stdsql "database/sql"
	"fmt"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// ActionCacheStatistics is the client for interacting with the ActionCacheStatistics builders.
	ActionCacheStatistics *ActionCacheStatisticsClient
	// ActionData is the client for interacting with the ActionData builders.
	ActionData *ActionDataClient
	// ActionSummary is the client for interacting with the ActionSummary builders.
	ActionSummary *ActionSummaryClient
	// ArtifactMetrics is the client for interacting with the ArtifactMetrics builders.
	ArtifactMetrics *ArtifactMetricsClient
	// BazelInvocation is the client for interacting with the BazelInvocation builders.
	BazelInvocation *BazelInvocationClient
	// BazelInvocationProblem is the client for interacting with the BazelInvocationProblem builders.
	BazelInvocationProblem *BazelInvocationProblemClient
	// Blob is the client for interacting with the Blob builders.
	Blob *BlobClient
	// Build is the client for interacting with the Build builders.
	Build *BuildClient
	// BuildGraphMetrics is the client for interacting with the BuildGraphMetrics builders.
	BuildGraphMetrics *BuildGraphMetricsClient
	// ConnectionMetadata is the client for interacting with the ConnectionMetadata builders.
	ConnectionMetadata *ConnectionMetadataClient
	// CumulativeMetrics is the client for interacting with the CumulativeMetrics builders.
	CumulativeMetrics *CumulativeMetricsClient
	// EvaluationStat is the client for interacting with the EvaluationStat builders.
	EvaluationStat *EvaluationStatClient
	// EventMetadata is the client for interacting with the EventMetadata builders.
	EventMetadata *EventMetadataClient
	// ExectionInfo is the client for interacting with the ExectionInfo builders.
	ExectionInfo *ExectionInfoClient
	// FilesMetric is the client for interacting with the FilesMetric builders.
	FilesMetric *FilesMetricClient
	// GarbageMetrics is the client for interacting with the GarbageMetrics builders.
	GarbageMetrics *GarbageMetricsClient
	// IncompleteBuildLog is the client for interacting with the IncompleteBuildLog builders.
	IncompleteBuildLog *IncompleteBuildLogClient
	// InvocationFiles is the client for interacting with the InvocationFiles builders.
	InvocationFiles *InvocationFilesClient
	// MemoryMetrics is the client for interacting with the MemoryMetrics builders.
	MemoryMetrics *MemoryMetricsClient
	// Metrics is the client for interacting with the Metrics builders.
	Metrics *MetricsClient
	// MissDetail is the client for interacting with the MissDetail builders.
	MissDetail *MissDetailClient
	// NamedSetOfFiles is the client for interacting with the NamedSetOfFiles builders.
	NamedSetOfFiles *NamedSetOfFilesClient
	// NetworkMetrics is the client for interacting with the NetworkMetrics builders.
	NetworkMetrics *NetworkMetricsClient
	// OutputGroup is the client for interacting with the OutputGroup builders.
	OutputGroup *OutputGroupClient
	// PackageLoadMetrics is the client for interacting with the PackageLoadMetrics builders.
	PackageLoadMetrics *PackageLoadMetricsClient
	// PackageMetrics is the client for interacting with the PackageMetrics builders.
	PackageMetrics *PackageMetricsClient
	// ResourceUsage is the client for interacting with the ResourceUsage builders.
	ResourceUsage *ResourceUsageClient
	// RunnerCount is the client for interacting with the RunnerCount builders.
	RunnerCount *RunnerCountClient
	// SourceControl is the client for interacting with the SourceControl builders.
	SourceControl *SourceControlClient
	// SystemNetworkStats is the client for interacting with the SystemNetworkStats builders.
	SystemNetworkStats *SystemNetworkStatsClient
	// Target is the client for interacting with the Target builders.
	Target *TargetClient
	// TargetMetrics is the client for interacting with the TargetMetrics builders.
	TargetMetrics *TargetMetricsClient
	// TestCollection is the client for interacting with the TestCollection builders.
	TestCollection *TestCollectionClient
	// TestFile is the client for interacting with the TestFile builders.
	TestFile *TestFileClient
	// TestResultBES is the client for interacting with the TestResultBES builders.
	TestResultBES *TestResultBESClient
	// TestSummary is the client for interacting with the TestSummary builders.
	TestSummary *TestSummaryClient
	// TimingBreakdown is the client for interacting with the TimingBreakdown builders.
	TimingBreakdown *TimingBreakdownClient
	// TimingChild is the client for interacting with the TimingChild builders.
	TimingChild *TimingChildClient
	// TimingMetrics is the client for interacting with the TimingMetrics builders.
	TimingMetrics *TimingMetricsClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.ActionCacheStatistics = NewActionCacheStatisticsClient(tx.config)
	tx.ActionData = NewActionDataClient(tx.config)
	tx.ActionSummary = NewActionSummaryClient(tx.config)
	tx.ArtifactMetrics = NewArtifactMetricsClient(tx.config)
	tx.BazelInvocation = NewBazelInvocationClient(tx.config)
	tx.BazelInvocationProblem = NewBazelInvocationProblemClient(tx.config)
	tx.Blob = NewBlobClient(tx.config)
	tx.Build = NewBuildClient(tx.config)
	tx.BuildGraphMetrics = NewBuildGraphMetricsClient(tx.config)
	tx.ConnectionMetadata = NewConnectionMetadataClient(tx.config)
	tx.CumulativeMetrics = NewCumulativeMetricsClient(tx.config)
	tx.EvaluationStat = NewEvaluationStatClient(tx.config)
	tx.EventMetadata = NewEventMetadataClient(tx.config)
	tx.ExectionInfo = NewExectionInfoClient(tx.config)
	tx.FilesMetric = NewFilesMetricClient(tx.config)
	tx.GarbageMetrics = NewGarbageMetricsClient(tx.config)
	tx.IncompleteBuildLog = NewIncompleteBuildLogClient(tx.config)
	tx.InvocationFiles = NewInvocationFilesClient(tx.config)
	tx.MemoryMetrics = NewMemoryMetricsClient(tx.config)
	tx.Metrics = NewMetricsClient(tx.config)
	tx.MissDetail = NewMissDetailClient(tx.config)
	tx.NamedSetOfFiles = NewNamedSetOfFilesClient(tx.config)
	tx.NetworkMetrics = NewNetworkMetricsClient(tx.config)
	tx.OutputGroup = NewOutputGroupClient(tx.config)
	tx.PackageLoadMetrics = NewPackageLoadMetricsClient(tx.config)
	tx.PackageMetrics = NewPackageMetricsClient(tx.config)
	tx.ResourceUsage = NewResourceUsageClient(tx.config)
	tx.RunnerCount = NewRunnerCountClient(tx.config)
	tx.SourceControl = NewSourceControlClient(tx.config)
	tx.SystemNetworkStats = NewSystemNetworkStatsClient(tx.config)
	tx.Target = NewTargetClient(tx.config)
	tx.TargetMetrics = NewTargetMetricsClient(tx.config)
	tx.TestCollection = NewTestCollectionClient(tx.config)
	tx.TestFile = NewTestFileClient(tx.config)
	tx.TestResultBES = NewTestResultBESClient(tx.config)
	tx.TestSummary = NewTestSummaryClient(tx.config)
	tx.TimingBreakdown = NewTimingBreakdownClient(tx.config)
	tx.TimingChild = NewTimingChildClient(tx.config)
	tx.TimingMetrics = NewTimingMetricsClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: ActionCacheStatistics.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)

// ExecContext allows calling the underlying ExecContext method of the transaction if it is supported by it.
// See, database/sql#Tx.ExecContext for more information.
func (tx *txDriver) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := tx.tx.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Tx.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the transaction if it is supported by it.
// See, database/sql#Tx.QueryContext for more information.
func (tx *txDriver) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := tx.tx.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Tx.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
