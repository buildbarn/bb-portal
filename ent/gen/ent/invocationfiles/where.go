// Code generated by ent, DO NOT EDIT.

package invocationfiles

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldName, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldContent, v))
}

// Digest applies equality check predicate on the "digest" field. It's identical to DigestEQ.
func Digest(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldDigest, v))
}

// SizeBytes applies equality check predicate on the "size_bytes" field. It's identical to SizeBytesEQ.
func SizeBytes(v int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldSizeBytes, v))
}

// DigestFunction applies equality check predicate on the "digest_function" field. It's identical to DigestFunctionEQ.
func DigestFunction(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldDigestFunction, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldContainsFold(FieldName, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldContainsFold(FieldContent, v))
}

// DigestEQ applies the EQ predicate on the "digest" field.
func DigestEQ(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldDigest, v))
}

// DigestNEQ applies the NEQ predicate on the "digest" field.
func DigestNEQ(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNEQ(FieldDigest, v))
}

// DigestIn applies the In predicate on the "digest" field.
func DigestIn(vs ...string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIn(FieldDigest, vs...))
}

// DigestNotIn applies the NotIn predicate on the "digest" field.
func DigestNotIn(vs ...string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotIn(FieldDigest, vs...))
}

// DigestGT applies the GT predicate on the "digest" field.
func DigestGT(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGT(FieldDigest, v))
}

// DigestGTE applies the GTE predicate on the "digest" field.
func DigestGTE(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGTE(FieldDigest, v))
}

// DigestLT applies the LT predicate on the "digest" field.
func DigestLT(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLT(FieldDigest, v))
}

// DigestLTE applies the LTE predicate on the "digest" field.
func DigestLTE(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLTE(FieldDigest, v))
}

// DigestContains applies the Contains predicate on the "digest" field.
func DigestContains(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldContains(FieldDigest, v))
}

// DigestHasPrefix applies the HasPrefix predicate on the "digest" field.
func DigestHasPrefix(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldHasPrefix(FieldDigest, v))
}

// DigestHasSuffix applies the HasSuffix predicate on the "digest" field.
func DigestHasSuffix(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldHasSuffix(FieldDigest, v))
}

// DigestIsNil applies the IsNil predicate on the "digest" field.
func DigestIsNil() predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIsNull(FieldDigest))
}

// DigestNotNil applies the NotNil predicate on the "digest" field.
func DigestNotNil() predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotNull(FieldDigest))
}

// DigestEqualFold applies the EqualFold predicate on the "digest" field.
func DigestEqualFold(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEqualFold(FieldDigest, v))
}

// DigestContainsFold applies the ContainsFold predicate on the "digest" field.
func DigestContainsFold(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldContainsFold(FieldDigest, v))
}

// SizeBytesEQ applies the EQ predicate on the "size_bytes" field.
func SizeBytesEQ(v int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldSizeBytes, v))
}

// SizeBytesNEQ applies the NEQ predicate on the "size_bytes" field.
func SizeBytesNEQ(v int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNEQ(FieldSizeBytes, v))
}

// SizeBytesIn applies the In predicate on the "size_bytes" field.
func SizeBytesIn(vs ...int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIn(FieldSizeBytes, vs...))
}

// SizeBytesNotIn applies the NotIn predicate on the "size_bytes" field.
func SizeBytesNotIn(vs ...int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotIn(FieldSizeBytes, vs...))
}

// SizeBytesGT applies the GT predicate on the "size_bytes" field.
func SizeBytesGT(v int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGT(FieldSizeBytes, v))
}

// SizeBytesGTE applies the GTE predicate on the "size_bytes" field.
func SizeBytesGTE(v int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGTE(FieldSizeBytes, v))
}

// SizeBytesLT applies the LT predicate on the "size_bytes" field.
func SizeBytesLT(v int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLT(FieldSizeBytes, v))
}

// SizeBytesLTE applies the LTE predicate on the "size_bytes" field.
func SizeBytesLTE(v int64) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLTE(FieldSizeBytes, v))
}

// SizeBytesIsNil applies the IsNil predicate on the "size_bytes" field.
func SizeBytesIsNil() predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIsNull(FieldSizeBytes))
}

// SizeBytesNotNil applies the NotNil predicate on the "size_bytes" field.
func SizeBytesNotNil() predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotNull(FieldSizeBytes))
}

// DigestFunctionEQ applies the EQ predicate on the "digest_function" field.
func DigestFunctionEQ(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEQ(FieldDigestFunction, v))
}

// DigestFunctionNEQ applies the NEQ predicate on the "digest_function" field.
func DigestFunctionNEQ(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNEQ(FieldDigestFunction, v))
}

// DigestFunctionIn applies the In predicate on the "digest_function" field.
func DigestFunctionIn(vs ...string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIn(FieldDigestFunction, vs...))
}

// DigestFunctionNotIn applies the NotIn predicate on the "digest_function" field.
func DigestFunctionNotIn(vs ...string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotIn(FieldDigestFunction, vs...))
}

// DigestFunctionGT applies the GT predicate on the "digest_function" field.
func DigestFunctionGT(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGT(FieldDigestFunction, v))
}

// DigestFunctionGTE applies the GTE predicate on the "digest_function" field.
func DigestFunctionGTE(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldGTE(FieldDigestFunction, v))
}

// DigestFunctionLT applies the LT predicate on the "digest_function" field.
func DigestFunctionLT(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLT(FieldDigestFunction, v))
}

// DigestFunctionLTE applies the LTE predicate on the "digest_function" field.
func DigestFunctionLTE(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldLTE(FieldDigestFunction, v))
}

// DigestFunctionContains applies the Contains predicate on the "digest_function" field.
func DigestFunctionContains(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldContains(FieldDigestFunction, v))
}

// DigestFunctionHasPrefix applies the HasPrefix predicate on the "digest_function" field.
func DigestFunctionHasPrefix(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldHasPrefix(FieldDigestFunction, v))
}

// DigestFunctionHasSuffix applies the HasSuffix predicate on the "digest_function" field.
func DigestFunctionHasSuffix(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldHasSuffix(FieldDigestFunction, v))
}

// DigestFunctionIsNil applies the IsNil predicate on the "digest_function" field.
func DigestFunctionIsNil() predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldIsNull(FieldDigestFunction))
}

// DigestFunctionNotNil applies the NotNil predicate on the "digest_function" field.
func DigestFunctionNotNil() predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldNotNull(FieldDigestFunction))
}

// DigestFunctionEqualFold applies the EqualFold predicate on the "digest_function" field.
func DigestFunctionEqualFold(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldEqualFold(FieldDigestFunction, v))
}

// DigestFunctionContainsFold applies the ContainsFold predicate on the "digest_function" field.
func DigestFunctionContainsFold(v string) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.FieldContainsFold(FieldDigestFunction, v))
}

// HasBazelInvocation applies the HasEdge predicate on the "bazel_invocation" edge.
func HasBazelInvocation() predicate.InvocationFiles {
	return predicate.InvocationFiles(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BazelInvocationTable, BazelInvocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBazelInvocationWith applies the HasEdge predicate on the "bazel_invocation" edge with a given conditions (other predicates).
func HasBazelInvocationWith(preds ...predicate.BazelInvocation) predicate.InvocationFiles {
	return predicate.InvocationFiles(func(s *sql.Selector) {
		step := newBazelInvocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InvocationFiles) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InvocationFiles) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InvocationFiles) predicate.InvocationFiles {
	return predicate.InvocationFiles(sql.NotPredicates(p))
}
