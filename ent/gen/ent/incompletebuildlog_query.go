// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/incompletebuildlog"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// IncompleteBuildLogQuery is the builder for querying IncompleteBuildLog entities.
type IncompleteBuildLogQuery struct {
	config
	ctx                 *QueryContext
	order               []incompletebuildlog.OrderOption
	inters              []Interceptor
	predicates          []predicate.IncompleteBuildLog
	withBazelInvocation *BazelInvocationQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*IncompleteBuildLog) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncompleteBuildLogQuery builder.
func (iblq *IncompleteBuildLogQuery) Where(ps ...predicate.IncompleteBuildLog) *IncompleteBuildLogQuery {
	iblq.predicates = append(iblq.predicates, ps...)
	return iblq
}

// Limit the number of records to be returned by this query.
func (iblq *IncompleteBuildLogQuery) Limit(limit int) *IncompleteBuildLogQuery {
	iblq.ctx.Limit = &limit
	return iblq
}

// Offset to start from.
func (iblq *IncompleteBuildLogQuery) Offset(offset int) *IncompleteBuildLogQuery {
	iblq.ctx.Offset = &offset
	return iblq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iblq *IncompleteBuildLogQuery) Unique(unique bool) *IncompleteBuildLogQuery {
	iblq.ctx.Unique = &unique
	return iblq
}

// Order specifies how the records should be ordered.
func (iblq *IncompleteBuildLogQuery) Order(o ...incompletebuildlog.OrderOption) *IncompleteBuildLogQuery {
	iblq.order = append(iblq.order, o...)
	return iblq
}

// QueryBazelInvocation chains the current query on the "bazel_invocation" edge.
func (iblq *IncompleteBuildLogQuery) QueryBazelInvocation() *BazelInvocationQuery {
	query := (&BazelInvocationClient{config: iblq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iblq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iblq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incompletebuildlog.Table, incompletebuildlog.FieldID, selector),
			sqlgraph.To(bazelinvocation.Table, bazelinvocation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incompletebuildlog.BazelInvocationTable, incompletebuildlog.BazelInvocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(iblq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncompleteBuildLog entity from the query.
// Returns a *NotFoundError when no IncompleteBuildLog was found.
func (iblq *IncompleteBuildLogQuery) First(ctx context.Context) (*IncompleteBuildLog, error) {
	nodes, err := iblq.Limit(1).All(setContextOp(ctx, iblq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incompletebuildlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iblq *IncompleteBuildLogQuery) FirstX(ctx context.Context) *IncompleteBuildLog {
	node, err := iblq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncompleteBuildLog ID from the query.
// Returns a *NotFoundError when no IncompleteBuildLog ID was found.
func (iblq *IncompleteBuildLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = iblq.Limit(1).IDs(setContextOp(ctx, iblq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incompletebuildlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iblq *IncompleteBuildLogQuery) FirstIDX(ctx context.Context) int {
	id, err := iblq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncompleteBuildLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncompleteBuildLog entity is found.
// Returns a *NotFoundError when no IncompleteBuildLog entities are found.
func (iblq *IncompleteBuildLogQuery) Only(ctx context.Context) (*IncompleteBuildLog, error) {
	nodes, err := iblq.Limit(2).All(setContextOp(ctx, iblq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incompletebuildlog.Label}
	default:
		return nil, &NotSingularError{incompletebuildlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iblq *IncompleteBuildLogQuery) OnlyX(ctx context.Context) *IncompleteBuildLog {
	node, err := iblq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncompleteBuildLog ID in the query.
// Returns a *NotSingularError when more than one IncompleteBuildLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (iblq *IncompleteBuildLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = iblq.Limit(2).IDs(setContextOp(ctx, iblq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incompletebuildlog.Label}
	default:
		err = &NotSingularError{incompletebuildlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iblq *IncompleteBuildLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := iblq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncompleteBuildLogs.
func (iblq *IncompleteBuildLogQuery) All(ctx context.Context) ([]*IncompleteBuildLog, error) {
	ctx = setContextOp(ctx, iblq.ctx, ent.OpQueryAll)
	if err := iblq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncompleteBuildLog, *IncompleteBuildLogQuery]()
	return withInterceptors[[]*IncompleteBuildLog](ctx, iblq, qr, iblq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iblq *IncompleteBuildLogQuery) AllX(ctx context.Context) []*IncompleteBuildLog {
	nodes, err := iblq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncompleteBuildLog IDs.
func (iblq *IncompleteBuildLogQuery) IDs(ctx context.Context) (ids []int, err error) {
	if iblq.ctx.Unique == nil && iblq.path != nil {
		iblq.Unique(true)
	}
	ctx = setContextOp(ctx, iblq.ctx, ent.OpQueryIDs)
	if err = iblq.Select(incompletebuildlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iblq *IncompleteBuildLogQuery) IDsX(ctx context.Context) []int {
	ids, err := iblq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iblq *IncompleteBuildLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iblq.ctx, ent.OpQueryCount)
	if err := iblq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iblq, querierCount[*IncompleteBuildLogQuery](), iblq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iblq *IncompleteBuildLogQuery) CountX(ctx context.Context) int {
	count, err := iblq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iblq *IncompleteBuildLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iblq.ctx, ent.OpQueryExist)
	switch _, err := iblq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iblq *IncompleteBuildLogQuery) ExistX(ctx context.Context) bool {
	exist, err := iblq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncompleteBuildLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iblq *IncompleteBuildLogQuery) Clone() *IncompleteBuildLogQuery {
	if iblq == nil {
		return nil
	}
	return &IncompleteBuildLogQuery{
		config:              iblq.config,
		ctx:                 iblq.ctx.Clone(),
		order:               append([]incompletebuildlog.OrderOption{}, iblq.order...),
		inters:              append([]Interceptor{}, iblq.inters...),
		predicates:          append([]predicate.IncompleteBuildLog{}, iblq.predicates...),
		withBazelInvocation: iblq.withBazelInvocation.Clone(),
		// clone intermediate query.
		sql:  iblq.sql.Clone(),
		path: iblq.path,
	}
}

// WithBazelInvocation tells the query-builder to eager-load the nodes that are connected to
// the "bazel_invocation" edge. The optional arguments are used to configure the query builder of the edge.
func (iblq *IncompleteBuildLogQuery) WithBazelInvocation(opts ...func(*BazelInvocationQuery)) *IncompleteBuildLogQuery {
	query := (&BazelInvocationClient{config: iblq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iblq.withBazelInvocation = query
	return iblq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SnippetID int32 `json:"snippet_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncompleteBuildLog.Query().
//		GroupBy(incompletebuildlog.FieldSnippetID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iblq *IncompleteBuildLogQuery) GroupBy(field string, fields ...string) *IncompleteBuildLogGroupBy {
	iblq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncompleteBuildLogGroupBy{build: iblq}
	grbuild.flds = &iblq.ctx.Fields
	grbuild.label = incompletebuildlog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SnippetID int32 `json:"snippet_id,omitempty"`
//	}
//
//	client.IncompleteBuildLog.Query().
//		Select(incompletebuildlog.FieldSnippetID).
//		Scan(ctx, &v)
func (iblq *IncompleteBuildLogQuery) Select(fields ...string) *IncompleteBuildLogSelect {
	iblq.ctx.Fields = append(iblq.ctx.Fields, fields...)
	sbuild := &IncompleteBuildLogSelect{IncompleteBuildLogQuery: iblq}
	sbuild.label = incompletebuildlog.Label
	sbuild.flds, sbuild.scan = &iblq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncompleteBuildLogSelect configured with the given aggregations.
func (iblq *IncompleteBuildLogQuery) Aggregate(fns ...AggregateFunc) *IncompleteBuildLogSelect {
	return iblq.Select().Aggregate(fns...)
}

func (iblq *IncompleteBuildLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iblq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iblq); err != nil {
				return err
			}
		}
	}
	for _, f := range iblq.ctx.Fields {
		if !incompletebuildlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iblq.path != nil {
		prev, err := iblq.path(ctx)
		if err != nil {
			return err
		}
		iblq.sql = prev
	}
	return nil
}

func (iblq *IncompleteBuildLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncompleteBuildLog, error) {
	var (
		nodes       = []*IncompleteBuildLog{}
		withFKs     = iblq.withFKs
		_spec       = iblq.querySpec()
		loadedTypes = [1]bool{
			iblq.withBazelInvocation != nil,
		}
	)
	if iblq.withBazelInvocation != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, incompletebuildlog.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncompleteBuildLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncompleteBuildLog{config: iblq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iblq.modifiers) > 0 {
		_spec.Modifiers = iblq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iblq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iblq.withBazelInvocation; query != nil {
		if err := iblq.loadBazelInvocation(ctx, query, nodes, nil,
			func(n *IncompleteBuildLog, e *BazelInvocation) { n.Edges.BazelInvocation = e }); err != nil {
			return nil, err
		}
	}
	for i := range iblq.loadTotal {
		if err := iblq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iblq *IncompleteBuildLogQuery) loadBazelInvocation(ctx context.Context, query *BazelInvocationQuery, nodes []*IncompleteBuildLog, init func(*IncompleteBuildLog), assign func(*IncompleteBuildLog, *BazelInvocation)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IncompleteBuildLog)
	for i := range nodes {
		if nodes[i].bazel_invocation_incomplete_build_logs == nil {
			continue
		}
		fk := *nodes[i].bazel_invocation_incomplete_build_logs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(bazelinvocation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "bazel_invocation_incomplete_build_logs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iblq *IncompleteBuildLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iblq.querySpec()
	if len(iblq.modifiers) > 0 {
		_spec.Modifiers = iblq.modifiers
	}
	_spec.Node.Columns = iblq.ctx.Fields
	if len(iblq.ctx.Fields) > 0 {
		_spec.Unique = iblq.ctx.Unique != nil && *iblq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iblq.driver, _spec)
}

func (iblq *IncompleteBuildLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incompletebuildlog.Table, incompletebuildlog.Columns, sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt))
	_spec.From = iblq.sql
	if unique := iblq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iblq.path != nil {
		_spec.Unique = true
	}
	if fields := iblq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incompletebuildlog.FieldID)
		for i := range fields {
			if fields[i] != incompletebuildlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iblq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iblq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iblq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iblq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iblq *IncompleteBuildLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iblq.driver.Dialect())
	t1 := builder.Table(incompletebuildlog.Table)
	columns := iblq.ctx.Fields
	if len(columns) == 0 {
		columns = incompletebuildlog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iblq.sql != nil {
		selector = iblq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iblq.ctx.Unique != nil && *iblq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range iblq.predicates {
		p(selector)
	}
	for _, p := range iblq.order {
		p(selector)
	}
	if offset := iblq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iblq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IncompleteBuildLogGroupBy is the group-by builder for IncompleteBuildLog entities.
type IncompleteBuildLogGroupBy struct {
	selector
	build *IncompleteBuildLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iblgb *IncompleteBuildLogGroupBy) Aggregate(fns ...AggregateFunc) *IncompleteBuildLogGroupBy {
	iblgb.fns = append(iblgb.fns, fns...)
	return iblgb
}

// Scan applies the selector query and scans the result into the given value.
func (iblgb *IncompleteBuildLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iblgb.build.ctx, ent.OpQueryGroupBy)
	if err := iblgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncompleteBuildLogQuery, *IncompleteBuildLogGroupBy](ctx, iblgb.build, iblgb, iblgb.build.inters, v)
}

func (iblgb *IncompleteBuildLogGroupBy) sqlScan(ctx context.Context, root *IncompleteBuildLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iblgb.fns))
	for _, fn := range iblgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iblgb.flds)+len(iblgb.fns))
		for _, f := range *iblgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iblgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iblgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncompleteBuildLogSelect is the builder for selecting fields of IncompleteBuildLog entities.
type IncompleteBuildLogSelect struct {
	*IncompleteBuildLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ibls *IncompleteBuildLogSelect) Aggregate(fns ...AggregateFunc) *IncompleteBuildLogSelect {
	ibls.fns = append(ibls.fns, fns...)
	return ibls
}

// Scan applies the selector query and scans the result into the given value.
func (ibls *IncompleteBuildLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ibls.ctx, ent.OpQuerySelect)
	if err := ibls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncompleteBuildLogQuery, *IncompleteBuildLogSelect](ctx, ibls.IncompleteBuildLogQuery, ibls, ibls.inters, v)
}

func (ibls *IncompleteBuildLogSelect) sqlScan(ctx context.Context, root *IncompleteBuildLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ibls.fns))
	for _, fn := range ibls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ibls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ibls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
