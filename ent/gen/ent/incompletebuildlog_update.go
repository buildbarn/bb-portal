// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/incompletebuildlog"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// IncompleteBuildLogUpdate is the builder for updating IncompleteBuildLog entities.
type IncompleteBuildLogUpdate struct {
	config
	hooks    []Hook
	mutation *IncompleteBuildLogMutation
}

// Where appends a list predicates to the IncompleteBuildLogUpdate builder.
func (iblu *IncompleteBuildLogUpdate) Where(ps ...predicate.IncompleteBuildLog) *IncompleteBuildLogUpdate {
	iblu.mutation.Where(ps...)
	return iblu
}

// SetSnippetID sets the "snippet_id" field.
func (iblu *IncompleteBuildLogUpdate) SetSnippetID(i int32) *IncompleteBuildLogUpdate {
	iblu.mutation.ResetSnippetID()
	iblu.mutation.SetSnippetID(i)
	return iblu
}

// SetNillableSnippetID sets the "snippet_id" field if the given value is not nil.
func (iblu *IncompleteBuildLogUpdate) SetNillableSnippetID(i *int32) *IncompleteBuildLogUpdate {
	if i != nil {
		iblu.SetSnippetID(*i)
	}
	return iblu
}

// AddSnippetID adds i to the "snippet_id" field.
func (iblu *IncompleteBuildLogUpdate) AddSnippetID(i int32) *IncompleteBuildLogUpdate {
	iblu.mutation.AddSnippetID(i)
	return iblu
}

// SetLogSnippet sets the "log_snippet" field.
func (iblu *IncompleteBuildLogUpdate) SetLogSnippet(s string) *IncompleteBuildLogUpdate {
	iblu.mutation.SetLogSnippet(s)
	return iblu
}

// SetNillableLogSnippet sets the "log_snippet" field if the given value is not nil.
func (iblu *IncompleteBuildLogUpdate) SetNillableLogSnippet(s *string) *IncompleteBuildLogUpdate {
	if s != nil {
		iblu.SetLogSnippet(*s)
	}
	return iblu
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (iblu *IncompleteBuildLogUpdate) SetBazelInvocationID(id int) *IncompleteBuildLogUpdate {
	iblu.mutation.SetBazelInvocationID(id)
	return iblu
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (iblu *IncompleteBuildLogUpdate) SetNillableBazelInvocationID(id *int) *IncompleteBuildLogUpdate {
	if id != nil {
		iblu = iblu.SetBazelInvocationID(*id)
	}
	return iblu
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (iblu *IncompleteBuildLogUpdate) SetBazelInvocation(b *BazelInvocation) *IncompleteBuildLogUpdate {
	return iblu.SetBazelInvocationID(b.ID)
}

// Mutation returns the IncompleteBuildLogMutation object of the builder.
func (iblu *IncompleteBuildLogUpdate) Mutation() *IncompleteBuildLogMutation {
	return iblu.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (iblu *IncompleteBuildLogUpdate) ClearBazelInvocation() *IncompleteBuildLogUpdate {
	iblu.mutation.ClearBazelInvocation()
	return iblu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iblu *IncompleteBuildLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iblu.sqlSave, iblu.mutation, iblu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iblu *IncompleteBuildLogUpdate) SaveX(ctx context.Context) int {
	affected, err := iblu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iblu *IncompleteBuildLogUpdate) Exec(ctx context.Context) error {
	_, err := iblu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iblu *IncompleteBuildLogUpdate) ExecX(ctx context.Context) {
	if err := iblu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iblu *IncompleteBuildLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(incompletebuildlog.Table, incompletebuildlog.Columns, sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt))
	if ps := iblu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iblu.mutation.SnippetID(); ok {
		_spec.SetField(incompletebuildlog.FieldSnippetID, field.TypeInt32, value)
	}
	if value, ok := iblu.mutation.AddedSnippetID(); ok {
		_spec.AddField(incompletebuildlog.FieldSnippetID, field.TypeInt32, value)
	}
	if value, ok := iblu.mutation.LogSnippet(); ok {
		_spec.SetField(incompletebuildlog.FieldLogSnippet, field.TypeString, value)
	}
	if iblu.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incompletebuildlog.BazelInvocationTable,
			Columns: []string{incompletebuildlog.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iblu.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incompletebuildlog.BazelInvocationTable,
			Columns: []string{incompletebuildlog.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iblu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incompletebuildlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iblu.mutation.done = true
	return n, nil
}

// IncompleteBuildLogUpdateOne is the builder for updating a single IncompleteBuildLog entity.
type IncompleteBuildLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IncompleteBuildLogMutation
}

// SetSnippetID sets the "snippet_id" field.
func (ibluo *IncompleteBuildLogUpdateOne) SetSnippetID(i int32) *IncompleteBuildLogUpdateOne {
	ibluo.mutation.ResetSnippetID()
	ibluo.mutation.SetSnippetID(i)
	return ibluo
}

// SetNillableSnippetID sets the "snippet_id" field if the given value is not nil.
func (ibluo *IncompleteBuildLogUpdateOne) SetNillableSnippetID(i *int32) *IncompleteBuildLogUpdateOne {
	if i != nil {
		ibluo.SetSnippetID(*i)
	}
	return ibluo
}

// AddSnippetID adds i to the "snippet_id" field.
func (ibluo *IncompleteBuildLogUpdateOne) AddSnippetID(i int32) *IncompleteBuildLogUpdateOne {
	ibluo.mutation.AddSnippetID(i)
	return ibluo
}

// SetLogSnippet sets the "log_snippet" field.
func (ibluo *IncompleteBuildLogUpdateOne) SetLogSnippet(s string) *IncompleteBuildLogUpdateOne {
	ibluo.mutation.SetLogSnippet(s)
	return ibluo
}

// SetNillableLogSnippet sets the "log_snippet" field if the given value is not nil.
func (ibluo *IncompleteBuildLogUpdateOne) SetNillableLogSnippet(s *string) *IncompleteBuildLogUpdateOne {
	if s != nil {
		ibluo.SetLogSnippet(*s)
	}
	return ibluo
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (ibluo *IncompleteBuildLogUpdateOne) SetBazelInvocationID(id int) *IncompleteBuildLogUpdateOne {
	ibluo.mutation.SetBazelInvocationID(id)
	return ibluo
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (ibluo *IncompleteBuildLogUpdateOne) SetNillableBazelInvocationID(id *int) *IncompleteBuildLogUpdateOne {
	if id != nil {
		ibluo = ibluo.SetBazelInvocationID(*id)
	}
	return ibluo
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (ibluo *IncompleteBuildLogUpdateOne) SetBazelInvocation(b *BazelInvocation) *IncompleteBuildLogUpdateOne {
	return ibluo.SetBazelInvocationID(b.ID)
}

// Mutation returns the IncompleteBuildLogMutation object of the builder.
func (ibluo *IncompleteBuildLogUpdateOne) Mutation() *IncompleteBuildLogMutation {
	return ibluo.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (ibluo *IncompleteBuildLogUpdateOne) ClearBazelInvocation() *IncompleteBuildLogUpdateOne {
	ibluo.mutation.ClearBazelInvocation()
	return ibluo
}

// Where appends a list predicates to the IncompleteBuildLogUpdate builder.
func (ibluo *IncompleteBuildLogUpdateOne) Where(ps ...predicate.IncompleteBuildLog) *IncompleteBuildLogUpdateOne {
	ibluo.mutation.Where(ps...)
	return ibluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ibluo *IncompleteBuildLogUpdateOne) Select(field string, fields ...string) *IncompleteBuildLogUpdateOne {
	ibluo.fields = append([]string{field}, fields...)
	return ibluo
}

// Save executes the query and returns the updated IncompleteBuildLog entity.
func (ibluo *IncompleteBuildLogUpdateOne) Save(ctx context.Context) (*IncompleteBuildLog, error) {
	return withHooks(ctx, ibluo.sqlSave, ibluo.mutation, ibluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibluo *IncompleteBuildLogUpdateOne) SaveX(ctx context.Context) *IncompleteBuildLog {
	node, err := ibluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ibluo *IncompleteBuildLogUpdateOne) Exec(ctx context.Context) error {
	_, err := ibluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibluo *IncompleteBuildLogUpdateOne) ExecX(ctx context.Context) {
	if err := ibluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ibluo *IncompleteBuildLogUpdateOne) sqlSave(ctx context.Context) (_node *IncompleteBuildLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(incompletebuildlog.Table, incompletebuildlog.Columns, sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt))
	id, ok := ibluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncompleteBuildLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ibluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incompletebuildlog.FieldID)
		for _, f := range fields {
			if !incompletebuildlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incompletebuildlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ibluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ibluo.mutation.SnippetID(); ok {
		_spec.SetField(incompletebuildlog.FieldSnippetID, field.TypeInt32, value)
	}
	if value, ok := ibluo.mutation.AddedSnippetID(); ok {
		_spec.AddField(incompletebuildlog.FieldSnippetID, field.TypeInt32, value)
	}
	if value, ok := ibluo.mutation.LogSnippet(); ok {
		_spec.SetField(incompletebuildlog.FieldLogSnippet, field.TypeString, value)
	}
	if ibluo.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incompletebuildlog.BazelInvocationTable,
			Columns: []string{incompletebuildlog.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibluo.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incompletebuildlog.BazelInvocationTable,
			Columns: []string{incompletebuildlog.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IncompleteBuildLog{config: ibluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ibluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incompletebuildlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ibluo.mutation.done = true
	return _node, nil
}
