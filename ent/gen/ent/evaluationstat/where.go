// Code generated by ent, DO NOT EDIT.

package evaluationstat

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldLTE(FieldID, id))
}

// SkyfunctionName applies equality check predicate on the "skyfunction_name" field. It's identical to SkyfunctionNameEQ.
func SkyfunctionName(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEQ(FieldSkyfunctionName, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEQ(FieldCount, v))
}

// BuildGraphMetricsID applies equality check predicate on the "build_graph_metrics_id" field. It's identical to BuildGraphMetricsIDEQ.
func BuildGraphMetricsID(v int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEQ(FieldBuildGraphMetricsID, v))
}

// SkyfunctionNameEQ applies the EQ predicate on the "skyfunction_name" field.
func SkyfunctionNameEQ(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEQ(FieldSkyfunctionName, v))
}

// SkyfunctionNameNEQ applies the NEQ predicate on the "skyfunction_name" field.
func SkyfunctionNameNEQ(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNEQ(FieldSkyfunctionName, v))
}

// SkyfunctionNameIn applies the In predicate on the "skyfunction_name" field.
func SkyfunctionNameIn(vs ...string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldIn(FieldSkyfunctionName, vs...))
}

// SkyfunctionNameNotIn applies the NotIn predicate on the "skyfunction_name" field.
func SkyfunctionNameNotIn(vs ...string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNotIn(FieldSkyfunctionName, vs...))
}

// SkyfunctionNameGT applies the GT predicate on the "skyfunction_name" field.
func SkyfunctionNameGT(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldGT(FieldSkyfunctionName, v))
}

// SkyfunctionNameGTE applies the GTE predicate on the "skyfunction_name" field.
func SkyfunctionNameGTE(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldGTE(FieldSkyfunctionName, v))
}

// SkyfunctionNameLT applies the LT predicate on the "skyfunction_name" field.
func SkyfunctionNameLT(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldLT(FieldSkyfunctionName, v))
}

// SkyfunctionNameLTE applies the LTE predicate on the "skyfunction_name" field.
func SkyfunctionNameLTE(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldLTE(FieldSkyfunctionName, v))
}

// SkyfunctionNameContains applies the Contains predicate on the "skyfunction_name" field.
func SkyfunctionNameContains(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldContains(FieldSkyfunctionName, v))
}

// SkyfunctionNameHasPrefix applies the HasPrefix predicate on the "skyfunction_name" field.
func SkyfunctionNameHasPrefix(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldHasPrefix(FieldSkyfunctionName, v))
}

// SkyfunctionNameHasSuffix applies the HasSuffix predicate on the "skyfunction_name" field.
func SkyfunctionNameHasSuffix(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldHasSuffix(FieldSkyfunctionName, v))
}

// SkyfunctionNameIsNil applies the IsNil predicate on the "skyfunction_name" field.
func SkyfunctionNameIsNil() predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldIsNull(FieldSkyfunctionName))
}

// SkyfunctionNameNotNil applies the NotNil predicate on the "skyfunction_name" field.
func SkyfunctionNameNotNil() predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNotNull(FieldSkyfunctionName))
}

// SkyfunctionNameEqualFold applies the EqualFold predicate on the "skyfunction_name" field.
func SkyfunctionNameEqualFold(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEqualFold(FieldSkyfunctionName, v))
}

// SkyfunctionNameContainsFold applies the ContainsFold predicate on the "skyfunction_name" field.
func SkyfunctionNameContainsFold(v string) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldContainsFold(FieldSkyfunctionName, v))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int64) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldLTE(FieldCount, v))
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldIsNull(FieldCount))
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNotNull(FieldCount))
}

// BuildGraphMetricsIDEQ applies the EQ predicate on the "build_graph_metrics_id" field.
func BuildGraphMetricsIDEQ(v int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldEQ(FieldBuildGraphMetricsID, v))
}

// BuildGraphMetricsIDNEQ applies the NEQ predicate on the "build_graph_metrics_id" field.
func BuildGraphMetricsIDNEQ(v int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNEQ(FieldBuildGraphMetricsID, v))
}

// BuildGraphMetricsIDIn applies the In predicate on the "build_graph_metrics_id" field.
func BuildGraphMetricsIDIn(vs ...int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldIn(FieldBuildGraphMetricsID, vs...))
}

// BuildGraphMetricsIDNotIn applies the NotIn predicate on the "build_graph_metrics_id" field.
func BuildGraphMetricsIDNotIn(vs ...int) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNotIn(FieldBuildGraphMetricsID, vs...))
}

// BuildGraphMetricsIDIsNil applies the IsNil predicate on the "build_graph_metrics_id" field.
func BuildGraphMetricsIDIsNil() predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldIsNull(FieldBuildGraphMetricsID))
}

// BuildGraphMetricsIDNotNil applies the NotNil predicate on the "build_graph_metrics_id" field.
func BuildGraphMetricsIDNotNil() predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.FieldNotNull(FieldBuildGraphMetricsID))
}

// HasBuildGraphMetrics applies the HasEdge predicate on the "build_graph_metrics" edge.
func HasBuildGraphMetrics() predicate.EvaluationStat {
	return predicate.EvaluationStat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, BuildGraphMetricsTable, BuildGraphMetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildGraphMetricsWith applies the HasEdge predicate on the "build_graph_metrics" edge with a given conditions (other predicates).
func HasBuildGraphMetricsWith(preds ...predicate.BuildGraphMetrics) predicate.EvaluationStat {
	return predicate.EvaluationStat(func(s *sql.Selector) {
		step := newBuildGraphMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EvaluationStat) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EvaluationStat) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EvaluationStat) predicate.EvaluationStat {
	return predicate.EvaluationStat(sql.NotPredicates(p))
}
