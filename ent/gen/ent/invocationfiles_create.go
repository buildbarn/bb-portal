// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/invocationfiles"
)

// InvocationFilesCreate is the builder for creating a InvocationFiles entity.
type InvocationFilesCreate struct {
	config
	mutation *InvocationFilesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ifc *InvocationFilesCreate) SetName(s string) *InvocationFilesCreate {
	ifc.mutation.SetName(s)
	return ifc
}

// SetContent sets the "content" field.
func (ifc *InvocationFilesCreate) SetContent(s string) *InvocationFilesCreate {
	ifc.mutation.SetContent(s)
	return ifc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ifc *InvocationFilesCreate) SetNillableContent(s *string) *InvocationFilesCreate {
	if s != nil {
		ifc.SetContent(*s)
	}
	return ifc
}

// SetDigest sets the "digest" field.
func (ifc *InvocationFilesCreate) SetDigest(s string) *InvocationFilesCreate {
	ifc.mutation.SetDigest(s)
	return ifc
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (ifc *InvocationFilesCreate) SetNillableDigest(s *string) *InvocationFilesCreate {
	if s != nil {
		ifc.SetDigest(*s)
	}
	return ifc
}

// SetSizeBytes sets the "size_bytes" field.
func (ifc *InvocationFilesCreate) SetSizeBytes(i int64) *InvocationFilesCreate {
	ifc.mutation.SetSizeBytes(i)
	return ifc
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (ifc *InvocationFilesCreate) SetNillableSizeBytes(i *int64) *InvocationFilesCreate {
	if i != nil {
		ifc.SetSizeBytes(*i)
	}
	return ifc
}

// SetDigestFunction sets the "digest_function" field.
func (ifc *InvocationFilesCreate) SetDigestFunction(s string) *InvocationFilesCreate {
	ifc.mutation.SetDigestFunction(s)
	return ifc
}

// SetNillableDigestFunction sets the "digest_function" field if the given value is not nil.
func (ifc *InvocationFilesCreate) SetNillableDigestFunction(s *string) *InvocationFilesCreate {
	if s != nil {
		ifc.SetDigestFunction(*s)
	}
	return ifc
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (ifc *InvocationFilesCreate) SetBazelInvocationID(id int) *InvocationFilesCreate {
	ifc.mutation.SetBazelInvocationID(id)
	return ifc
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (ifc *InvocationFilesCreate) SetNillableBazelInvocationID(id *int) *InvocationFilesCreate {
	if id != nil {
		ifc = ifc.SetBazelInvocationID(*id)
	}
	return ifc
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (ifc *InvocationFilesCreate) SetBazelInvocation(b *BazelInvocation) *InvocationFilesCreate {
	return ifc.SetBazelInvocationID(b.ID)
}

// Mutation returns the InvocationFilesMutation object of the builder.
func (ifc *InvocationFilesCreate) Mutation() *InvocationFilesMutation {
	return ifc.mutation
}

// Save creates the InvocationFiles in the database.
func (ifc *InvocationFilesCreate) Save(ctx context.Context) (*InvocationFiles, error) {
	return withHooks(ctx, ifc.sqlSave, ifc.mutation, ifc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ifc *InvocationFilesCreate) SaveX(ctx context.Context) *InvocationFiles {
	v, err := ifc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifc *InvocationFilesCreate) Exec(ctx context.Context) error {
	_, err := ifc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifc *InvocationFilesCreate) ExecX(ctx context.Context) {
	if err := ifc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifc *InvocationFilesCreate) check() error {
	if _, ok := ifc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "InvocationFiles.name"`)}
	}
	return nil
}

func (ifc *InvocationFilesCreate) sqlSave(ctx context.Context) (*InvocationFiles, error) {
	if err := ifc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ifc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ifc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ifc.mutation.id = &_node.ID
	ifc.mutation.done = true
	return _node, nil
}

func (ifc *InvocationFilesCreate) createSpec() (*InvocationFiles, *sqlgraph.CreateSpec) {
	var (
		_node = &InvocationFiles{config: ifc.config}
		_spec = sqlgraph.NewCreateSpec(invocationfiles.Table, sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ifc.conflict
	if value, ok := ifc.mutation.Name(); ok {
		_spec.SetField(invocationfiles.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ifc.mutation.Content(); ok {
		_spec.SetField(invocationfiles.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := ifc.mutation.Digest(); ok {
		_spec.SetField(invocationfiles.FieldDigest, field.TypeString, value)
		_node.Digest = value
	}
	if value, ok := ifc.mutation.SizeBytes(); ok {
		_spec.SetField(invocationfiles.FieldSizeBytes, field.TypeInt64, value)
		_node.SizeBytes = value
	}
	if value, ok := ifc.mutation.DigestFunction(); ok {
		_spec.SetField(invocationfiles.FieldDigestFunction, field.TypeString, value)
		_node.DigestFunction = value
	}
	if nodes := ifc.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invocationfiles.BazelInvocationTable,
			Columns: []string{invocationfiles.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bazel_invocation_invocation_files = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvocationFiles.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvocationFilesUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ifc *InvocationFilesCreate) OnConflict(opts ...sql.ConflictOption) *InvocationFilesUpsertOne {
	ifc.conflict = opts
	return &InvocationFilesUpsertOne{
		create: ifc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvocationFiles.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ifc *InvocationFilesCreate) OnConflictColumns(columns ...string) *InvocationFilesUpsertOne {
	ifc.conflict = append(ifc.conflict, sql.ConflictColumns(columns...))
	return &InvocationFilesUpsertOne{
		create: ifc,
	}
}

type (
	// InvocationFilesUpsertOne is the builder for "upsert"-ing
	//  one InvocationFiles node.
	InvocationFilesUpsertOne struct {
		create *InvocationFilesCreate
	}

	// InvocationFilesUpsert is the "OnConflict" setter.
	InvocationFilesUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *InvocationFilesUpsert) SetName(v string) *InvocationFilesUpsert {
	u.Set(invocationfiles.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InvocationFilesUpsert) UpdateName() *InvocationFilesUpsert {
	u.SetExcluded(invocationfiles.FieldName)
	return u
}

// SetContent sets the "content" field.
func (u *InvocationFilesUpsert) SetContent(v string) *InvocationFilesUpsert {
	u.Set(invocationfiles.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *InvocationFilesUpsert) UpdateContent() *InvocationFilesUpsert {
	u.SetExcluded(invocationfiles.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *InvocationFilesUpsert) ClearContent() *InvocationFilesUpsert {
	u.SetNull(invocationfiles.FieldContent)
	return u
}

// SetDigest sets the "digest" field.
func (u *InvocationFilesUpsert) SetDigest(v string) *InvocationFilesUpsert {
	u.Set(invocationfiles.FieldDigest, v)
	return u
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *InvocationFilesUpsert) UpdateDigest() *InvocationFilesUpsert {
	u.SetExcluded(invocationfiles.FieldDigest)
	return u
}

// ClearDigest clears the value of the "digest" field.
func (u *InvocationFilesUpsert) ClearDigest() *InvocationFilesUpsert {
	u.SetNull(invocationfiles.FieldDigest)
	return u
}

// SetSizeBytes sets the "size_bytes" field.
func (u *InvocationFilesUpsert) SetSizeBytes(v int64) *InvocationFilesUpsert {
	u.Set(invocationfiles.FieldSizeBytes, v)
	return u
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *InvocationFilesUpsert) UpdateSizeBytes() *InvocationFilesUpsert {
	u.SetExcluded(invocationfiles.FieldSizeBytes)
	return u
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *InvocationFilesUpsert) AddSizeBytes(v int64) *InvocationFilesUpsert {
	u.Add(invocationfiles.FieldSizeBytes, v)
	return u
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (u *InvocationFilesUpsert) ClearSizeBytes() *InvocationFilesUpsert {
	u.SetNull(invocationfiles.FieldSizeBytes)
	return u
}

// SetDigestFunction sets the "digest_function" field.
func (u *InvocationFilesUpsert) SetDigestFunction(v string) *InvocationFilesUpsert {
	u.Set(invocationfiles.FieldDigestFunction, v)
	return u
}

// UpdateDigestFunction sets the "digest_function" field to the value that was provided on create.
func (u *InvocationFilesUpsert) UpdateDigestFunction() *InvocationFilesUpsert {
	u.SetExcluded(invocationfiles.FieldDigestFunction)
	return u
}

// ClearDigestFunction clears the value of the "digest_function" field.
func (u *InvocationFilesUpsert) ClearDigestFunction() *InvocationFilesUpsert {
	u.SetNull(invocationfiles.FieldDigestFunction)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.InvocationFiles.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InvocationFilesUpsertOne) UpdateNewValues() *InvocationFilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvocationFiles.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InvocationFilesUpsertOne) Ignore() *InvocationFilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvocationFilesUpsertOne) DoNothing() *InvocationFilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvocationFilesCreate.OnConflict
// documentation for more info.
func (u *InvocationFilesUpsertOne) Update(set func(*InvocationFilesUpsert)) *InvocationFilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvocationFilesUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *InvocationFilesUpsertOne) SetName(v string) *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InvocationFilesUpsertOne) UpdateName() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateName()
	})
}

// SetContent sets the "content" field.
func (u *InvocationFilesUpsertOne) SetContent(v string) *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *InvocationFilesUpsertOne) UpdateContent() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *InvocationFilesUpsertOne) ClearContent() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.ClearContent()
	})
}

// SetDigest sets the "digest" field.
func (u *InvocationFilesUpsertOne) SetDigest(v string) *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *InvocationFilesUpsertOne) UpdateDigest() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateDigest()
	})
}

// ClearDigest clears the value of the "digest" field.
func (u *InvocationFilesUpsertOne) ClearDigest() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.ClearDigest()
	})
}

// SetSizeBytes sets the "size_bytes" field.
func (u *InvocationFilesUpsertOne) SetSizeBytes(v int64) *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetSizeBytes(v)
	})
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *InvocationFilesUpsertOne) AddSizeBytes(v int64) *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.AddSizeBytes(v)
	})
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *InvocationFilesUpsertOne) UpdateSizeBytes() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateSizeBytes()
	})
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (u *InvocationFilesUpsertOne) ClearSizeBytes() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.ClearSizeBytes()
	})
}

// SetDigestFunction sets the "digest_function" field.
func (u *InvocationFilesUpsertOne) SetDigestFunction(v string) *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetDigestFunction(v)
	})
}

// UpdateDigestFunction sets the "digest_function" field to the value that was provided on create.
func (u *InvocationFilesUpsertOne) UpdateDigestFunction() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateDigestFunction()
	})
}

// ClearDigestFunction clears the value of the "digest_function" field.
func (u *InvocationFilesUpsertOne) ClearDigestFunction() *InvocationFilesUpsertOne {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.ClearDigestFunction()
	})
}

// Exec executes the query.
func (u *InvocationFilesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvocationFilesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvocationFilesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InvocationFilesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InvocationFilesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvocationFilesCreateBulk is the builder for creating many InvocationFiles entities in bulk.
type InvocationFilesCreateBulk struct {
	config
	err      error
	builders []*InvocationFilesCreate
	conflict []sql.ConflictOption
}

// Save creates the InvocationFiles entities in the database.
func (ifcb *InvocationFilesCreateBulk) Save(ctx context.Context) ([]*InvocationFiles, error) {
	if ifcb.err != nil {
		return nil, ifcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ifcb.builders))
	nodes := make([]*InvocationFiles, len(ifcb.builders))
	mutators := make([]Mutator, len(ifcb.builders))
	for i := range ifcb.builders {
		func(i int, root context.Context) {
			builder := ifcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvocationFilesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ifcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ifcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ifcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ifcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ifcb *InvocationFilesCreateBulk) SaveX(ctx context.Context) []*InvocationFiles {
	v, err := ifcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifcb *InvocationFilesCreateBulk) Exec(ctx context.Context) error {
	_, err := ifcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifcb *InvocationFilesCreateBulk) ExecX(ctx context.Context) {
	if err := ifcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvocationFiles.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvocationFilesUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ifcb *InvocationFilesCreateBulk) OnConflict(opts ...sql.ConflictOption) *InvocationFilesUpsertBulk {
	ifcb.conflict = opts
	return &InvocationFilesUpsertBulk{
		create: ifcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvocationFiles.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ifcb *InvocationFilesCreateBulk) OnConflictColumns(columns ...string) *InvocationFilesUpsertBulk {
	ifcb.conflict = append(ifcb.conflict, sql.ConflictColumns(columns...))
	return &InvocationFilesUpsertBulk{
		create: ifcb,
	}
}

// InvocationFilesUpsertBulk is the builder for "upsert"-ing
// a bulk of InvocationFiles nodes.
type InvocationFilesUpsertBulk struct {
	create *InvocationFilesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InvocationFiles.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InvocationFilesUpsertBulk) UpdateNewValues() *InvocationFilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvocationFiles.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InvocationFilesUpsertBulk) Ignore() *InvocationFilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvocationFilesUpsertBulk) DoNothing() *InvocationFilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvocationFilesCreateBulk.OnConflict
// documentation for more info.
func (u *InvocationFilesUpsertBulk) Update(set func(*InvocationFilesUpsert)) *InvocationFilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvocationFilesUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *InvocationFilesUpsertBulk) SetName(v string) *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InvocationFilesUpsertBulk) UpdateName() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateName()
	})
}

// SetContent sets the "content" field.
func (u *InvocationFilesUpsertBulk) SetContent(v string) *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *InvocationFilesUpsertBulk) UpdateContent() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *InvocationFilesUpsertBulk) ClearContent() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.ClearContent()
	})
}

// SetDigest sets the "digest" field.
func (u *InvocationFilesUpsertBulk) SetDigest(v string) *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *InvocationFilesUpsertBulk) UpdateDigest() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateDigest()
	})
}

// ClearDigest clears the value of the "digest" field.
func (u *InvocationFilesUpsertBulk) ClearDigest() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.ClearDigest()
	})
}

// SetSizeBytes sets the "size_bytes" field.
func (u *InvocationFilesUpsertBulk) SetSizeBytes(v int64) *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetSizeBytes(v)
	})
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *InvocationFilesUpsertBulk) AddSizeBytes(v int64) *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.AddSizeBytes(v)
	})
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *InvocationFilesUpsertBulk) UpdateSizeBytes() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateSizeBytes()
	})
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (u *InvocationFilesUpsertBulk) ClearSizeBytes() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.ClearSizeBytes()
	})
}

// SetDigestFunction sets the "digest_function" field.
func (u *InvocationFilesUpsertBulk) SetDigestFunction(v string) *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.SetDigestFunction(v)
	})
}

// UpdateDigestFunction sets the "digest_function" field to the value that was provided on create.
func (u *InvocationFilesUpsertBulk) UpdateDigestFunction() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.UpdateDigestFunction()
	})
}

// ClearDigestFunction clears the value of the "digest_function" field.
func (u *InvocationFilesUpsertBulk) ClearDigestFunction() *InvocationFilesUpsertBulk {
	return u.Update(func(s *InvocationFilesUpsert) {
		s.ClearDigestFunction()
	})
}

// Exec executes the query.
func (u *InvocationFilesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InvocationFilesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvocationFilesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvocationFilesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
