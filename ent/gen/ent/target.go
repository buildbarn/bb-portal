// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/target"
)

// Target is the model entity for the Target schema.
type Target struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag []string `json:"tag,omitempty"`
	// TargetKind holds the value of the "target_kind" field.
	TargetKind string `json:"target_kind,omitempty"`
	// TestSize holds the value of the "test_size" field.
	TestSize target.TestSize `json:"test_size,omitempty"`
	// Success holds the value of the "success" field.
	Success bool `json:"success,omitempty"`
	// TestTimeout holds the value of the "test_timeout" field.
	TestTimeout int64 `json:"test_timeout,omitempty"`
	// StartTimeInMs holds the value of the "start_time_in_ms" field.
	StartTimeInMs int64 `json:"start_time_in_ms,omitempty"`
	// EndTimeInMs holds the value of the "end_time_in_ms" field.
	EndTimeInMs int64 `json:"end_time_in_ms,omitempty"`
	// DurationInMs holds the value of the "duration_in_ms" field.
	DurationInMs int64 `json:"duration_in_ms,omitempty"`
	// AbortReason holds the value of the "abort_reason" field.
	AbortReason target.AbortReason `json:"abort_reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TargetQuery when eager-loading is set.
	Edges                    TargetEdges `json:"edges"`
	bazel_invocation_targets *int
	selectValues             sql.SelectValues
}

// TargetEdges holds the relations/edges for other nodes in the graph.
type TargetEdges struct {
	// BazelInvocation holds the value of the bazel_invocation edge.
	BazelInvocation *BazelInvocation `json:"bazel_invocation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// BazelInvocationOrErr returns the BazelInvocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TargetEdges) BazelInvocationOrErr() (*BazelInvocation, error) {
	if e.BazelInvocation != nil {
		return e.BazelInvocation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bazelinvocation.Label}
	}
	return nil, &NotLoadedError{edge: "bazel_invocation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Target) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case target.FieldTag:
			values[i] = new([]byte)
		case target.FieldSuccess:
			values[i] = new(sql.NullBool)
		case target.FieldID, target.FieldTestTimeout, target.FieldStartTimeInMs, target.FieldEndTimeInMs, target.FieldDurationInMs:
			values[i] = new(sql.NullInt64)
		case target.FieldLabel, target.FieldTargetKind, target.FieldTestSize, target.FieldAbortReason:
			values[i] = new(sql.NullString)
		case target.ForeignKeys[0]: // bazel_invocation_targets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Target fields.
func (t *Target) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case target.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case target.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				t.Label = value.String
			}
		case target.FieldTag:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Tag); err != nil {
					return fmt.Errorf("unmarshal field tag: %w", err)
				}
			}
		case target.FieldTargetKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_kind", values[i])
			} else if value.Valid {
				t.TargetKind = value.String
			}
		case target.FieldTestSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_size", values[i])
			} else if value.Valid {
				t.TestSize = target.TestSize(value.String)
			}
		case target.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				t.Success = value.Bool
			}
		case target.FieldTestTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field test_timeout", values[i])
			} else if value.Valid {
				t.TestTimeout = value.Int64
			}
		case target.FieldStartTimeInMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_time_in_ms", values[i])
			} else if value.Valid {
				t.StartTimeInMs = value.Int64
			}
		case target.FieldEndTimeInMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_time_in_ms", values[i])
			} else if value.Valid {
				t.EndTimeInMs = value.Int64
			}
		case target.FieldDurationInMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_in_ms", values[i])
			} else if value.Valid {
				t.DurationInMs = value.Int64
			}
		case target.FieldAbortReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abort_reason", values[i])
			} else if value.Valid {
				t.AbortReason = target.AbortReason(value.String)
			}
		case target.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bazel_invocation_targets", value)
			} else if value.Valid {
				t.bazel_invocation_targets = new(int)
				*t.bazel_invocation_targets = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Target.
// This includes values selected through modifiers, order, etc.
func (t *Target) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryBazelInvocation queries the "bazel_invocation" edge of the Target entity.
func (t *Target) QueryBazelInvocation() *BazelInvocationQuery {
	return NewTargetClient(t.config).QueryBazelInvocation(t)
}

// Update returns a builder for updating this Target.
// Note that you need to call Target.Unwrap() before calling this method if this Target
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Target) Update() *TargetUpdateOne {
	return NewTargetClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Target entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Target) Unwrap() *Target {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Target is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Target) String() string {
	var builder strings.Builder
	builder.WriteString("Target(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("label=")
	builder.WriteString(t.Label)
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(fmt.Sprintf("%v", t.Tag))
	builder.WriteString(", ")
	builder.WriteString("target_kind=")
	builder.WriteString(t.TargetKind)
	builder.WriteString(", ")
	builder.WriteString("test_size=")
	builder.WriteString(fmt.Sprintf("%v", t.TestSize))
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", t.Success))
	builder.WriteString(", ")
	builder.WriteString("test_timeout=")
	builder.WriteString(fmt.Sprintf("%v", t.TestTimeout))
	builder.WriteString(", ")
	builder.WriteString("start_time_in_ms=")
	builder.WriteString(fmt.Sprintf("%v", t.StartTimeInMs))
	builder.WriteString(", ")
	builder.WriteString("end_time_in_ms=")
	builder.WriteString(fmt.Sprintf("%v", t.EndTimeInMs))
	builder.WriteString(", ")
	builder.WriteString("duration_in_ms=")
	builder.WriteString(fmt.Sprintf("%v", t.DurationInMs))
	builder.WriteString(", ")
	builder.WriteString("abort_reason=")
	builder.WriteString(fmt.Sprintf("%v", t.AbortReason))
	builder.WriteByte(')')
	return builder.String()
}

// Targets is a parsable slice of Target.
type Targets []*Target
