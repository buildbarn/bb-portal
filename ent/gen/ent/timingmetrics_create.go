// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/timingmetrics"
)

// TimingMetricsCreate is the builder for creating a TimingMetrics entity.
type TimingMetricsCreate struct {
	config
	mutation *TimingMetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCPUTimeInMs sets the "cpu_time_in_ms" field.
func (tmc *TimingMetricsCreate) SetCPUTimeInMs(i int64) *TimingMetricsCreate {
	tmc.mutation.SetCPUTimeInMs(i)
	return tmc
}

// SetNillableCPUTimeInMs sets the "cpu_time_in_ms" field if the given value is not nil.
func (tmc *TimingMetricsCreate) SetNillableCPUTimeInMs(i *int64) *TimingMetricsCreate {
	if i != nil {
		tmc.SetCPUTimeInMs(*i)
	}
	return tmc
}

// SetWallTimeInMs sets the "wall_time_in_ms" field.
func (tmc *TimingMetricsCreate) SetWallTimeInMs(i int64) *TimingMetricsCreate {
	tmc.mutation.SetWallTimeInMs(i)
	return tmc
}

// SetNillableWallTimeInMs sets the "wall_time_in_ms" field if the given value is not nil.
func (tmc *TimingMetricsCreate) SetNillableWallTimeInMs(i *int64) *TimingMetricsCreate {
	if i != nil {
		tmc.SetWallTimeInMs(*i)
	}
	return tmc
}

// SetAnalysisPhaseTimeInMs sets the "analysis_phase_time_in_ms" field.
func (tmc *TimingMetricsCreate) SetAnalysisPhaseTimeInMs(i int64) *TimingMetricsCreate {
	tmc.mutation.SetAnalysisPhaseTimeInMs(i)
	return tmc
}

// SetNillableAnalysisPhaseTimeInMs sets the "analysis_phase_time_in_ms" field if the given value is not nil.
func (tmc *TimingMetricsCreate) SetNillableAnalysisPhaseTimeInMs(i *int64) *TimingMetricsCreate {
	if i != nil {
		tmc.SetAnalysisPhaseTimeInMs(*i)
	}
	return tmc
}

// SetExecutionPhaseTimeInMs sets the "execution_phase_time_in_ms" field.
func (tmc *TimingMetricsCreate) SetExecutionPhaseTimeInMs(i int64) *TimingMetricsCreate {
	tmc.mutation.SetExecutionPhaseTimeInMs(i)
	return tmc
}

// SetNillableExecutionPhaseTimeInMs sets the "execution_phase_time_in_ms" field if the given value is not nil.
func (tmc *TimingMetricsCreate) SetNillableExecutionPhaseTimeInMs(i *int64) *TimingMetricsCreate {
	if i != nil {
		tmc.SetExecutionPhaseTimeInMs(*i)
	}
	return tmc
}

// SetActionsExecutionStartInMs sets the "actions_execution_start_in_ms" field.
func (tmc *TimingMetricsCreate) SetActionsExecutionStartInMs(i int64) *TimingMetricsCreate {
	tmc.mutation.SetActionsExecutionStartInMs(i)
	return tmc
}

// SetNillableActionsExecutionStartInMs sets the "actions_execution_start_in_ms" field if the given value is not nil.
func (tmc *TimingMetricsCreate) SetNillableActionsExecutionStartInMs(i *int64) *TimingMetricsCreate {
	if i != nil {
		tmc.SetActionsExecutionStartInMs(*i)
	}
	return tmc
}

// SetMetricsID sets the "metrics" edge to the Metrics entity by ID.
func (tmc *TimingMetricsCreate) SetMetricsID(id int) *TimingMetricsCreate {
	tmc.mutation.SetMetricsID(id)
	return tmc
}

// SetNillableMetricsID sets the "metrics" edge to the Metrics entity by ID if the given value is not nil.
func (tmc *TimingMetricsCreate) SetNillableMetricsID(id *int) *TimingMetricsCreate {
	if id != nil {
		tmc = tmc.SetMetricsID(*id)
	}
	return tmc
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (tmc *TimingMetricsCreate) SetMetrics(m *Metrics) *TimingMetricsCreate {
	return tmc.SetMetricsID(m.ID)
}

// Mutation returns the TimingMetricsMutation object of the builder.
func (tmc *TimingMetricsCreate) Mutation() *TimingMetricsMutation {
	return tmc.mutation
}

// Save creates the TimingMetrics in the database.
func (tmc *TimingMetricsCreate) Save(ctx context.Context) (*TimingMetrics, error) {
	return withHooks(ctx, tmc.sqlSave, tmc.mutation, tmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TimingMetricsCreate) SaveX(ctx context.Context) *TimingMetrics {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TimingMetricsCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TimingMetricsCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TimingMetricsCreate) check() error {
	return nil
}

func (tmc *TimingMetricsCreate) sqlSave(ctx context.Context) (*TimingMetrics, error) {
	if err := tmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tmc.mutation.id = &_node.ID
	tmc.mutation.done = true
	return _node, nil
}

func (tmc *TimingMetricsCreate) createSpec() (*TimingMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &TimingMetrics{config: tmc.config}
		_spec = sqlgraph.NewCreateSpec(timingmetrics.Table, sqlgraph.NewFieldSpec(timingmetrics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tmc.conflict
	if value, ok := tmc.mutation.CPUTimeInMs(); ok {
		_spec.SetField(timingmetrics.FieldCPUTimeInMs, field.TypeInt64, value)
		_node.CPUTimeInMs = value
	}
	if value, ok := tmc.mutation.WallTimeInMs(); ok {
		_spec.SetField(timingmetrics.FieldWallTimeInMs, field.TypeInt64, value)
		_node.WallTimeInMs = value
	}
	if value, ok := tmc.mutation.AnalysisPhaseTimeInMs(); ok {
		_spec.SetField(timingmetrics.FieldAnalysisPhaseTimeInMs, field.TypeInt64, value)
		_node.AnalysisPhaseTimeInMs = value
	}
	if value, ok := tmc.mutation.ExecutionPhaseTimeInMs(); ok {
		_spec.SetField(timingmetrics.FieldExecutionPhaseTimeInMs, field.TypeInt64, value)
		_node.ExecutionPhaseTimeInMs = value
	}
	if value, ok := tmc.mutation.ActionsExecutionStartInMs(); ok {
		_spec.SetField(timingmetrics.FieldActionsExecutionStartInMs, field.TypeInt64, value)
		_node.ActionsExecutionStartInMs = value
	}
	if nodes := tmc.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   timingmetrics.MetricsTable,
			Columns: []string{timingmetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.metrics_timing_metrics = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TimingMetrics.Create().
//		SetCPUTimeInMs(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimingMetricsUpsert) {
//			SetCPUTimeInMs(v+v).
//		}).
//		Exec(ctx)
func (tmc *TimingMetricsCreate) OnConflict(opts ...sql.ConflictOption) *TimingMetricsUpsertOne {
	tmc.conflict = opts
	return &TimingMetricsUpsertOne{
		create: tmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TimingMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmc *TimingMetricsCreate) OnConflictColumns(columns ...string) *TimingMetricsUpsertOne {
	tmc.conflict = append(tmc.conflict, sql.ConflictColumns(columns...))
	return &TimingMetricsUpsertOne{
		create: tmc,
	}
}

type (
	// TimingMetricsUpsertOne is the builder for "upsert"-ing
	//  one TimingMetrics node.
	TimingMetricsUpsertOne struct {
		create *TimingMetricsCreate
	}

	// TimingMetricsUpsert is the "OnConflict" setter.
	TimingMetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetCPUTimeInMs sets the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsert) SetCPUTimeInMs(v int64) *TimingMetricsUpsert {
	u.Set(timingmetrics.FieldCPUTimeInMs, v)
	return u
}

// UpdateCPUTimeInMs sets the "cpu_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsert) UpdateCPUTimeInMs() *TimingMetricsUpsert {
	u.SetExcluded(timingmetrics.FieldCPUTimeInMs)
	return u
}

// AddCPUTimeInMs adds v to the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsert) AddCPUTimeInMs(v int64) *TimingMetricsUpsert {
	u.Add(timingmetrics.FieldCPUTimeInMs, v)
	return u
}

// ClearCPUTimeInMs clears the value of the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsert) ClearCPUTimeInMs() *TimingMetricsUpsert {
	u.SetNull(timingmetrics.FieldCPUTimeInMs)
	return u
}

// SetWallTimeInMs sets the "wall_time_in_ms" field.
func (u *TimingMetricsUpsert) SetWallTimeInMs(v int64) *TimingMetricsUpsert {
	u.Set(timingmetrics.FieldWallTimeInMs, v)
	return u
}

// UpdateWallTimeInMs sets the "wall_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsert) UpdateWallTimeInMs() *TimingMetricsUpsert {
	u.SetExcluded(timingmetrics.FieldWallTimeInMs)
	return u
}

// AddWallTimeInMs adds v to the "wall_time_in_ms" field.
func (u *TimingMetricsUpsert) AddWallTimeInMs(v int64) *TimingMetricsUpsert {
	u.Add(timingmetrics.FieldWallTimeInMs, v)
	return u
}

// ClearWallTimeInMs clears the value of the "wall_time_in_ms" field.
func (u *TimingMetricsUpsert) ClearWallTimeInMs() *TimingMetricsUpsert {
	u.SetNull(timingmetrics.FieldWallTimeInMs)
	return u
}

// SetAnalysisPhaseTimeInMs sets the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsert) SetAnalysisPhaseTimeInMs(v int64) *TimingMetricsUpsert {
	u.Set(timingmetrics.FieldAnalysisPhaseTimeInMs, v)
	return u
}

// UpdateAnalysisPhaseTimeInMs sets the "analysis_phase_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsert) UpdateAnalysisPhaseTimeInMs() *TimingMetricsUpsert {
	u.SetExcluded(timingmetrics.FieldAnalysisPhaseTimeInMs)
	return u
}

// AddAnalysisPhaseTimeInMs adds v to the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsert) AddAnalysisPhaseTimeInMs(v int64) *TimingMetricsUpsert {
	u.Add(timingmetrics.FieldAnalysisPhaseTimeInMs, v)
	return u
}

// ClearAnalysisPhaseTimeInMs clears the value of the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsert) ClearAnalysisPhaseTimeInMs() *TimingMetricsUpsert {
	u.SetNull(timingmetrics.FieldAnalysisPhaseTimeInMs)
	return u
}

// SetExecutionPhaseTimeInMs sets the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsert) SetExecutionPhaseTimeInMs(v int64) *TimingMetricsUpsert {
	u.Set(timingmetrics.FieldExecutionPhaseTimeInMs, v)
	return u
}

// UpdateExecutionPhaseTimeInMs sets the "execution_phase_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsert) UpdateExecutionPhaseTimeInMs() *TimingMetricsUpsert {
	u.SetExcluded(timingmetrics.FieldExecutionPhaseTimeInMs)
	return u
}

// AddExecutionPhaseTimeInMs adds v to the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsert) AddExecutionPhaseTimeInMs(v int64) *TimingMetricsUpsert {
	u.Add(timingmetrics.FieldExecutionPhaseTimeInMs, v)
	return u
}

// ClearExecutionPhaseTimeInMs clears the value of the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsert) ClearExecutionPhaseTimeInMs() *TimingMetricsUpsert {
	u.SetNull(timingmetrics.FieldExecutionPhaseTimeInMs)
	return u
}

// SetActionsExecutionStartInMs sets the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsert) SetActionsExecutionStartInMs(v int64) *TimingMetricsUpsert {
	u.Set(timingmetrics.FieldActionsExecutionStartInMs, v)
	return u
}

// UpdateActionsExecutionStartInMs sets the "actions_execution_start_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsert) UpdateActionsExecutionStartInMs() *TimingMetricsUpsert {
	u.SetExcluded(timingmetrics.FieldActionsExecutionStartInMs)
	return u
}

// AddActionsExecutionStartInMs adds v to the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsert) AddActionsExecutionStartInMs(v int64) *TimingMetricsUpsert {
	u.Add(timingmetrics.FieldActionsExecutionStartInMs, v)
	return u
}

// ClearActionsExecutionStartInMs clears the value of the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsert) ClearActionsExecutionStartInMs() *TimingMetricsUpsert {
	u.SetNull(timingmetrics.FieldActionsExecutionStartInMs)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TimingMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TimingMetricsUpsertOne) UpdateNewValues() *TimingMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TimingMetrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TimingMetricsUpsertOne) Ignore() *TimingMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimingMetricsUpsertOne) DoNothing() *TimingMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimingMetricsCreate.OnConflict
// documentation for more info.
func (u *TimingMetricsUpsertOne) Update(set func(*TimingMetricsUpsert)) *TimingMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimingMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetCPUTimeInMs sets the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsertOne) SetCPUTimeInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetCPUTimeInMs(v)
	})
}

// AddCPUTimeInMs adds v to the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsertOne) AddCPUTimeInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddCPUTimeInMs(v)
	})
}

// UpdateCPUTimeInMs sets the "cpu_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertOne) UpdateCPUTimeInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateCPUTimeInMs()
	})
}

// ClearCPUTimeInMs clears the value of the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsertOne) ClearCPUTimeInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearCPUTimeInMs()
	})
}

// SetWallTimeInMs sets the "wall_time_in_ms" field.
func (u *TimingMetricsUpsertOne) SetWallTimeInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetWallTimeInMs(v)
	})
}

// AddWallTimeInMs adds v to the "wall_time_in_ms" field.
func (u *TimingMetricsUpsertOne) AddWallTimeInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddWallTimeInMs(v)
	})
}

// UpdateWallTimeInMs sets the "wall_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertOne) UpdateWallTimeInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateWallTimeInMs()
	})
}

// ClearWallTimeInMs clears the value of the "wall_time_in_ms" field.
func (u *TimingMetricsUpsertOne) ClearWallTimeInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearWallTimeInMs()
	})
}

// SetAnalysisPhaseTimeInMs sets the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsertOne) SetAnalysisPhaseTimeInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetAnalysisPhaseTimeInMs(v)
	})
}

// AddAnalysisPhaseTimeInMs adds v to the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsertOne) AddAnalysisPhaseTimeInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddAnalysisPhaseTimeInMs(v)
	})
}

// UpdateAnalysisPhaseTimeInMs sets the "analysis_phase_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertOne) UpdateAnalysisPhaseTimeInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateAnalysisPhaseTimeInMs()
	})
}

// ClearAnalysisPhaseTimeInMs clears the value of the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsertOne) ClearAnalysisPhaseTimeInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearAnalysisPhaseTimeInMs()
	})
}

// SetExecutionPhaseTimeInMs sets the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsertOne) SetExecutionPhaseTimeInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetExecutionPhaseTimeInMs(v)
	})
}

// AddExecutionPhaseTimeInMs adds v to the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsertOne) AddExecutionPhaseTimeInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddExecutionPhaseTimeInMs(v)
	})
}

// UpdateExecutionPhaseTimeInMs sets the "execution_phase_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertOne) UpdateExecutionPhaseTimeInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateExecutionPhaseTimeInMs()
	})
}

// ClearExecutionPhaseTimeInMs clears the value of the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsertOne) ClearExecutionPhaseTimeInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearExecutionPhaseTimeInMs()
	})
}

// SetActionsExecutionStartInMs sets the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsertOne) SetActionsExecutionStartInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetActionsExecutionStartInMs(v)
	})
}

// AddActionsExecutionStartInMs adds v to the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsertOne) AddActionsExecutionStartInMs(v int64) *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddActionsExecutionStartInMs(v)
	})
}

// UpdateActionsExecutionStartInMs sets the "actions_execution_start_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertOne) UpdateActionsExecutionStartInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateActionsExecutionStartInMs()
	})
}

// ClearActionsExecutionStartInMs clears the value of the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsertOne) ClearActionsExecutionStartInMs() *TimingMetricsUpsertOne {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearActionsExecutionStartInMs()
	})
}

// Exec executes the query.
func (u *TimingMetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimingMetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimingMetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TimingMetricsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TimingMetricsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TimingMetricsCreateBulk is the builder for creating many TimingMetrics entities in bulk.
type TimingMetricsCreateBulk struct {
	config
	err      error
	builders []*TimingMetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the TimingMetrics entities in the database.
func (tmcb *TimingMetricsCreateBulk) Save(ctx context.Context) ([]*TimingMetrics, error) {
	if tmcb.err != nil {
		return nil, tmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TimingMetrics, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimingMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TimingMetricsCreateBulk) SaveX(ctx context.Context) []*TimingMetrics {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TimingMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TimingMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TimingMetrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimingMetricsUpsert) {
//			SetCPUTimeInMs(v+v).
//		}).
//		Exec(ctx)
func (tmcb *TimingMetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *TimingMetricsUpsertBulk {
	tmcb.conflict = opts
	return &TimingMetricsUpsertBulk{
		create: tmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TimingMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmcb *TimingMetricsCreateBulk) OnConflictColumns(columns ...string) *TimingMetricsUpsertBulk {
	tmcb.conflict = append(tmcb.conflict, sql.ConflictColumns(columns...))
	return &TimingMetricsUpsertBulk{
		create: tmcb,
	}
}

// TimingMetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of TimingMetrics nodes.
type TimingMetricsUpsertBulk struct {
	create *TimingMetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TimingMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TimingMetricsUpsertBulk) UpdateNewValues() *TimingMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TimingMetrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TimingMetricsUpsertBulk) Ignore() *TimingMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimingMetricsUpsertBulk) DoNothing() *TimingMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimingMetricsCreateBulk.OnConflict
// documentation for more info.
func (u *TimingMetricsUpsertBulk) Update(set func(*TimingMetricsUpsert)) *TimingMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimingMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetCPUTimeInMs sets the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) SetCPUTimeInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetCPUTimeInMs(v)
	})
}

// AddCPUTimeInMs adds v to the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) AddCPUTimeInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddCPUTimeInMs(v)
	})
}

// UpdateCPUTimeInMs sets the "cpu_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertBulk) UpdateCPUTimeInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateCPUTimeInMs()
	})
}

// ClearCPUTimeInMs clears the value of the "cpu_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) ClearCPUTimeInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearCPUTimeInMs()
	})
}

// SetWallTimeInMs sets the "wall_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) SetWallTimeInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetWallTimeInMs(v)
	})
}

// AddWallTimeInMs adds v to the "wall_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) AddWallTimeInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddWallTimeInMs(v)
	})
}

// UpdateWallTimeInMs sets the "wall_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertBulk) UpdateWallTimeInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateWallTimeInMs()
	})
}

// ClearWallTimeInMs clears the value of the "wall_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) ClearWallTimeInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearWallTimeInMs()
	})
}

// SetAnalysisPhaseTimeInMs sets the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) SetAnalysisPhaseTimeInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetAnalysisPhaseTimeInMs(v)
	})
}

// AddAnalysisPhaseTimeInMs adds v to the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) AddAnalysisPhaseTimeInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddAnalysisPhaseTimeInMs(v)
	})
}

// UpdateAnalysisPhaseTimeInMs sets the "analysis_phase_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertBulk) UpdateAnalysisPhaseTimeInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateAnalysisPhaseTimeInMs()
	})
}

// ClearAnalysisPhaseTimeInMs clears the value of the "analysis_phase_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) ClearAnalysisPhaseTimeInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearAnalysisPhaseTimeInMs()
	})
}

// SetExecutionPhaseTimeInMs sets the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) SetExecutionPhaseTimeInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetExecutionPhaseTimeInMs(v)
	})
}

// AddExecutionPhaseTimeInMs adds v to the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) AddExecutionPhaseTimeInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddExecutionPhaseTimeInMs(v)
	})
}

// UpdateExecutionPhaseTimeInMs sets the "execution_phase_time_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertBulk) UpdateExecutionPhaseTimeInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateExecutionPhaseTimeInMs()
	})
}

// ClearExecutionPhaseTimeInMs clears the value of the "execution_phase_time_in_ms" field.
func (u *TimingMetricsUpsertBulk) ClearExecutionPhaseTimeInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearExecutionPhaseTimeInMs()
	})
}

// SetActionsExecutionStartInMs sets the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsertBulk) SetActionsExecutionStartInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.SetActionsExecutionStartInMs(v)
	})
}

// AddActionsExecutionStartInMs adds v to the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsertBulk) AddActionsExecutionStartInMs(v int64) *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.AddActionsExecutionStartInMs(v)
	})
}

// UpdateActionsExecutionStartInMs sets the "actions_execution_start_in_ms" field to the value that was provided on create.
func (u *TimingMetricsUpsertBulk) UpdateActionsExecutionStartInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.UpdateActionsExecutionStartInMs()
	})
}

// ClearActionsExecutionStartInMs clears the value of the "actions_execution_start_in_ms" field.
func (u *TimingMetricsUpsertBulk) ClearActionsExecutionStartInMs() *TimingMetricsUpsertBulk {
	return u.Update(func(s *TimingMetricsUpsert) {
		s.ClearActionsExecutionStartInMs()
	})
}

// Exec executes the query.
func (u *TimingMetricsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TimingMetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimingMetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimingMetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
