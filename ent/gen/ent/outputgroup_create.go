// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/namedsetoffiles"
	"github.com/buildbarn/bb-portal/ent/gen/ent/outputgroup"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testfile"
)

// OutputGroupCreate is the builder for creating a OutputGroup entity.
type OutputGroupCreate struct {
	config
	mutation *OutputGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ogc *OutputGroupCreate) SetName(s string) *OutputGroupCreate {
	ogc.mutation.SetName(s)
	return ogc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ogc *OutputGroupCreate) SetNillableName(s *string) *OutputGroupCreate {
	if s != nil {
		ogc.SetName(*s)
	}
	return ogc
}

// SetIncomplete sets the "incomplete" field.
func (ogc *OutputGroupCreate) SetIncomplete(b bool) *OutputGroupCreate {
	ogc.mutation.SetIncomplete(b)
	return ogc
}

// SetNillableIncomplete sets the "incomplete" field if the given value is not nil.
func (ogc *OutputGroupCreate) SetNillableIncomplete(b *bool) *OutputGroupCreate {
	if b != nil {
		ogc.SetIncomplete(*b)
	}
	return ogc
}

// AddInlineFileIDs adds the "inline_files" edge to the TestFile entity by IDs.
func (ogc *OutputGroupCreate) AddInlineFileIDs(ids ...int) *OutputGroupCreate {
	ogc.mutation.AddInlineFileIDs(ids...)
	return ogc
}

// AddInlineFiles adds the "inline_files" edges to the TestFile entity.
func (ogc *OutputGroupCreate) AddInlineFiles(t ...*TestFile) *OutputGroupCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ogc.AddInlineFileIDs(ids...)
}

// SetFileSetsID sets the "file_sets" edge to the NamedSetOfFiles entity by ID.
func (ogc *OutputGroupCreate) SetFileSetsID(id int) *OutputGroupCreate {
	ogc.mutation.SetFileSetsID(id)
	return ogc
}

// SetNillableFileSetsID sets the "file_sets" edge to the NamedSetOfFiles entity by ID if the given value is not nil.
func (ogc *OutputGroupCreate) SetNillableFileSetsID(id *int) *OutputGroupCreate {
	if id != nil {
		ogc = ogc.SetFileSetsID(*id)
	}
	return ogc
}

// SetFileSets sets the "file_sets" edge to the NamedSetOfFiles entity.
func (ogc *OutputGroupCreate) SetFileSets(n *NamedSetOfFiles) *OutputGroupCreate {
	return ogc.SetFileSetsID(n.ID)
}

// Mutation returns the OutputGroupMutation object of the builder.
func (ogc *OutputGroupCreate) Mutation() *OutputGroupMutation {
	return ogc.mutation
}

// Save creates the OutputGroup in the database.
func (ogc *OutputGroupCreate) Save(ctx context.Context) (*OutputGroup, error) {
	return withHooks(ctx, ogc.sqlSave, ogc.mutation, ogc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ogc *OutputGroupCreate) SaveX(ctx context.Context) *OutputGroup {
	v, err := ogc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ogc *OutputGroupCreate) Exec(ctx context.Context) error {
	_, err := ogc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ogc *OutputGroupCreate) ExecX(ctx context.Context) {
	if err := ogc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ogc *OutputGroupCreate) check() error {
	return nil
}

func (ogc *OutputGroupCreate) sqlSave(ctx context.Context) (*OutputGroup, error) {
	if err := ogc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ogc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ogc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ogc.mutation.id = &_node.ID
	ogc.mutation.done = true
	return _node, nil
}

func (ogc *OutputGroupCreate) createSpec() (*OutputGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &OutputGroup{config: ogc.config}
		_spec = sqlgraph.NewCreateSpec(outputgroup.Table, sqlgraph.NewFieldSpec(outputgroup.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ogc.conflict
	if value, ok := ogc.mutation.Name(); ok {
		_spec.SetField(outputgroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ogc.mutation.Incomplete(); ok {
		_spec.SetField(outputgroup.FieldIncomplete, field.TypeBool, value)
		_node.Incomplete = value
	}
	if nodes := ogc.mutation.InlineFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outputgroup.InlineFilesTable,
			Columns: []string{outputgroup.InlineFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ogc.mutation.FileSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   outputgroup.FileSetsTable,
			Columns: []string{outputgroup.FileSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namedsetoffiles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OutputGroup.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OutputGroupUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ogc *OutputGroupCreate) OnConflict(opts ...sql.ConflictOption) *OutputGroupUpsertOne {
	ogc.conflict = opts
	return &OutputGroupUpsertOne{
		create: ogc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OutputGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ogc *OutputGroupCreate) OnConflictColumns(columns ...string) *OutputGroupUpsertOne {
	ogc.conflict = append(ogc.conflict, sql.ConflictColumns(columns...))
	return &OutputGroupUpsertOne{
		create: ogc,
	}
}

type (
	// OutputGroupUpsertOne is the builder for "upsert"-ing
	//  one OutputGroup node.
	OutputGroupUpsertOne struct {
		create *OutputGroupCreate
	}

	// OutputGroupUpsert is the "OnConflict" setter.
	OutputGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *OutputGroupUpsert) SetName(v string) *OutputGroupUpsert {
	u.Set(outputgroup.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OutputGroupUpsert) UpdateName() *OutputGroupUpsert {
	u.SetExcluded(outputgroup.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *OutputGroupUpsert) ClearName() *OutputGroupUpsert {
	u.SetNull(outputgroup.FieldName)
	return u
}

// SetIncomplete sets the "incomplete" field.
func (u *OutputGroupUpsert) SetIncomplete(v bool) *OutputGroupUpsert {
	u.Set(outputgroup.FieldIncomplete, v)
	return u
}

// UpdateIncomplete sets the "incomplete" field to the value that was provided on create.
func (u *OutputGroupUpsert) UpdateIncomplete() *OutputGroupUpsert {
	u.SetExcluded(outputgroup.FieldIncomplete)
	return u
}

// ClearIncomplete clears the value of the "incomplete" field.
func (u *OutputGroupUpsert) ClearIncomplete() *OutputGroupUpsert {
	u.SetNull(outputgroup.FieldIncomplete)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OutputGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OutputGroupUpsertOne) UpdateNewValues() *OutputGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OutputGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OutputGroupUpsertOne) Ignore() *OutputGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OutputGroupUpsertOne) DoNothing() *OutputGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OutputGroupCreate.OnConflict
// documentation for more info.
func (u *OutputGroupUpsertOne) Update(set func(*OutputGroupUpsert)) *OutputGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OutputGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *OutputGroupUpsertOne) SetName(v string) *OutputGroupUpsertOne {
	return u.Update(func(s *OutputGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OutputGroupUpsertOne) UpdateName() *OutputGroupUpsertOne {
	return u.Update(func(s *OutputGroupUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OutputGroupUpsertOne) ClearName() *OutputGroupUpsertOne {
	return u.Update(func(s *OutputGroupUpsert) {
		s.ClearName()
	})
}

// SetIncomplete sets the "incomplete" field.
func (u *OutputGroupUpsertOne) SetIncomplete(v bool) *OutputGroupUpsertOne {
	return u.Update(func(s *OutputGroupUpsert) {
		s.SetIncomplete(v)
	})
}

// UpdateIncomplete sets the "incomplete" field to the value that was provided on create.
func (u *OutputGroupUpsertOne) UpdateIncomplete() *OutputGroupUpsertOne {
	return u.Update(func(s *OutputGroupUpsert) {
		s.UpdateIncomplete()
	})
}

// ClearIncomplete clears the value of the "incomplete" field.
func (u *OutputGroupUpsertOne) ClearIncomplete() *OutputGroupUpsertOne {
	return u.Update(func(s *OutputGroupUpsert) {
		s.ClearIncomplete()
	})
}

// Exec executes the query.
func (u *OutputGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OutputGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OutputGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OutputGroupUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OutputGroupUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OutputGroupCreateBulk is the builder for creating many OutputGroup entities in bulk.
type OutputGroupCreateBulk struct {
	config
	err      error
	builders []*OutputGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the OutputGroup entities in the database.
func (ogcb *OutputGroupCreateBulk) Save(ctx context.Context) ([]*OutputGroup, error) {
	if ogcb.err != nil {
		return nil, ogcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ogcb.builders))
	nodes := make([]*OutputGroup, len(ogcb.builders))
	mutators := make([]Mutator, len(ogcb.builders))
	for i := range ogcb.builders {
		func(i int, root context.Context) {
			builder := ogcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutputGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ogcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ogcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ogcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ogcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ogcb *OutputGroupCreateBulk) SaveX(ctx context.Context) []*OutputGroup {
	v, err := ogcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ogcb *OutputGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := ogcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ogcb *OutputGroupCreateBulk) ExecX(ctx context.Context) {
	if err := ogcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OutputGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OutputGroupUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ogcb *OutputGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *OutputGroupUpsertBulk {
	ogcb.conflict = opts
	return &OutputGroupUpsertBulk{
		create: ogcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OutputGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ogcb *OutputGroupCreateBulk) OnConflictColumns(columns ...string) *OutputGroupUpsertBulk {
	ogcb.conflict = append(ogcb.conflict, sql.ConflictColumns(columns...))
	return &OutputGroupUpsertBulk{
		create: ogcb,
	}
}

// OutputGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of OutputGroup nodes.
type OutputGroupUpsertBulk struct {
	create *OutputGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OutputGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OutputGroupUpsertBulk) UpdateNewValues() *OutputGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OutputGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OutputGroupUpsertBulk) Ignore() *OutputGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OutputGroupUpsertBulk) DoNothing() *OutputGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OutputGroupCreateBulk.OnConflict
// documentation for more info.
func (u *OutputGroupUpsertBulk) Update(set func(*OutputGroupUpsert)) *OutputGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OutputGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *OutputGroupUpsertBulk) SetName(v string) *OutputGroupUpsertBulk {
	return u.Update(func(s *OutputGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OutputGroupUpsertBulk) UpdateName() *OutputGroupUpsertBulk {
	return u.Update(func(s *OutputGroupUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OutputGroupUpsertBulk) ClearName() *OutputGroupUpsertBulk {
	return u.Update(func(s *OutputGroupUpsert) {
		s.ClearName()
	})
}

// SetIncomplete sets the "incomplete" field.
func (u *OutputGroupUpsertBulk) SetIncomplete(v bool) *OutputGroupUpsertBulk {
	return u.Update(func(s *OutputGroupUpsert) {
		s.SetIncomplete(v)
	})
}

// UpdateIncomplete sets the "incomplete" field to the value that was provided on create.
func (u *OutputGroupUpsertBulk) UpdateIncomplete() *OutputGroupUpsertBulk {
	return u.Update(func(s *OutputGroupUpsert) {
		s.UpdateIncomplete()
	})
}

// ClearIncomplete clears the value of the "incomplete" field.
func (u *OutputGroupUpsertBulk) ClearIncomplete() *OutputGroupUpsertBulk {
	return u.Update(func(s *OutputGroupUpsert) {
		s.ClearIncomplete()
	})
}

// Exec executes the query.
func (u *OutputGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OutputGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OutputGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OutputGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
