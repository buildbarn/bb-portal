// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/invocationfiles"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// InvocationFilesUpdate is the builder for updating InvocationFiles entities.
type InvocationFilesUpdate struct {
	config
	hooks     []Hook
	mutation  *InvocationFilesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InvocationFilesUpdate builder.
func (ifu *InvocationFilesUpdate) Where(ps ...predicate.InvocationFiles) *InvocationFilesUpdate {
	ifu.mutation.Where(ps...)
	return ifu
}

// SetName sets the "name" field.
func (ifu *InvocationFilesUpdate) SetName(s string) *InvocationFilesUpdate {
	ifu.mutation.SetName(s)
	return ifu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ifu *InvocationFilesUpdate) SetNillableName(s *string) *InvocationFilesUpdate {
	if s != nil {
		ifu.SetName(*s)
	}
	return ifu
}

// SetContent sets the "content" field.
func (ifu *InvocationFilesUpdate) SetContent(s string) *InvocationFilesUpdate {
	ifu.mutation.SetContent(s)
	return ifu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ifu *InvocationFilesUpdate) SetNillableContent(s *string) *InvocationFilesUpdate {
	if s != nil {
		ifu.SetContent(*s)
	}
	return ifu
}

// ClearContent clears the value of the "content" field.
func (ifu *InvocationFilesUpdate) ClearContent() *InvocationFilesUpdate {
	ifu.mutation.ClearContent()
	return ifu
}

// SetDigest sets the "digest" field.
func (ifu *InvocationFilesUpdate) SetDigest(s string) *InvocationFilesUpdate {
	ifu.mutation.SetDigest(s)
	return ifu
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (ifu *InvocationFilesUpdate) SetNillableDigest(s *string) *InvocationFilesUpdate {
	if s != nil {
		ifu.SetDigest(*s)
	}
	return ifu
}

// ClearDigest clears the value of the "digest" field.
func (ifu *InvocationFilesUpdate) ClearDigest() *InvocationFilesUpdate {
	ifu.mutation.ClearDigest()
	return ifu
}

// SetSizeBytes sets the "size_bytes" field.
func (ifu *InvocationFilesUpdate) SetSizeBytes(i int64) *InvocationFilesUpdate {
	ifu.mutation.ResetSizeBytes()
	ifu.mutation.SetSizeBytes(i)
	return ifu
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (ifu *InvocationFilesUpdate) SetNillableSizeBytes(i *int64) *InvocationFilesUpdate {
	if i != nil {
		ifu.SetSizeBytes(*i)
	}
	return ifu
}

// AddSizeBytes adds i to the "size_bytes" field.
func (ifu *InvocationFilesUpdate) AddSizeBytes(i int64) *InvocationFilesUpdate {
	ifu.mutation.AddSizeBytes(i)
	return ifu
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (ifu *InvocationFilesUpdate) ClearSizeBytes() *InvocationFilesUpdate {
	ifu.mutation.ClearSizeBytes()
	return ifu
}

// SetDigestFunction sets the "digest_function" field.
func (ifu *InvocationFilesUpdate) SetDigestFunction(s string) *InvocationFilesUpdate {
	ifu.mutation.SetDigestFunction(s)
	return ifu
}

// SetNillableDigestFunction sets the "digest_function" field if the given value is not nil.
func (ifu *InvocationFilesUpdate) SetNillableDigestFunction(s *string) *InvocationFilesUpdate {
	if s != nil {
		ifu.SetDigestFunction(*s)
	}
	return ifu
}

// ClearDigestFunction clears the value of the "digest_function" field.
func (ifu *InvocationFilesUpdate) ClearDigestFunction() *InvocationFilesUpdate {
	ifu.mutation.ClearDigestFunction()
	return ifu
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (ifu *InvocationFilesUpdate) SetBazelInvocationID(id int) *InvocationFilesUpdate {
	ifu.mutation.SetBazelInvocationID(id)
	return ifu
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (ifu *InvocationFilesUpdate) SetNillableBazelInvocationID(id *int) *InvocationFilesUpdate {
	if id != nil {
		ifu = ifu.SetBazelInvocationID(*id)
	}
	return ifu
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (ifu *InvocationFilesUpdate) SetBazelInvocation(b *BazelInvocation) *InvocationFilesUpdate {
	return ifu.SetBazelInvocationID(b.ID)
}

// Mutation returns the InvocationFilesMutation object of the builder.
func (ifu *InvocationFilesUpdate) Mutation() *InvocationFilesMutation {
	return ifu.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (ifu *InvocationFilesUpdate) ClearBazelInvocation() *InvocationFilesUpdate {
	ifu.mutation.ClearBazelInvocation()
	return ifu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ifu *InvocationFilesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ifu.sqlSave, ifu.mutation, ifu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifu *InvocationFilesUpdate) SaveX(ctx context.Context) int {
	affected, err := ifu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ifu *InvocationFilesUpdate) Exec(ctx context.Context) error {
	_, err := ifu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifu *InvocationFilesUpdate) ExecX(ctx context.Context) {
	if err := ifu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ifu *InvocationFilesUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InvocationFilesUpdate {
	ifu.modifiers = append(ifu.modifiers, modifiers...)
	return ifu
}

func (ifu *InvocationFilesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(invocationfiles.Table, invocationfiles.Columns, sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt))
	if ps := ifu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifu.mutation.Name(); ok {
		_spec.SetField(invocationfiles.FieldName, field.TypeString, value)
	}
	if value, ok := ifu.mutation.Content(); ok {
		_spec.SetField(invocationfiles.FieldContent, field.TypeString, value)
	}
	if ifu.mutation.ContentCleared() {
		_spec.ClearField(invocationfiles.FieldContent, field.TypeString)
	}
	if value, ok := ifu.mutation.Digest(); ok {
		_spec.SetField(invocationfiles.FieldDigest, field.TypeString, value)
	}
	if ifu.mutation.DigestCleared() {
		_spec.ClearField(invocationfiles.FieldDigest, field.TypeString)
	}
	if value, ok := ifu.mutation.SizeBytes(); ok {
		_spec.SetField(invocationfiles.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := ifu.mutation.AddedSizeBytes(); ok {
		_spec.AddField(invocationfiles.FieldSizeBytes, field.TypeInt64, value)
	}
	if ifu.mutation.SizeBytesCleared() {
		_spec.ClearField(invocationfiles.FieldSizeBytes, field.TypeInt64)
	}
	if value, ok := ifu.mutation.DigestFunction(); ok {
		_spec.SetField(invocationfiles.FieldDigestFunction, field.TypeString, value)
	}
	if ifu.mutation.DigestFunctionCleared() {
		_spec.ClearField(invocationfiles.FieldDigestFunction, field.TypeString)
	}
	if ifu.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invocationfiles.BazelInvocationTable,
			Columns: []string{invocationfiles.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifu.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invocationfiles.BazelInvocationTable,
			Columns: []string{invocationfiles.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ifu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ifu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invocationfiles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ifu.mutation.done = true
	return n, nil
}

// InvocationFilesUpdateOne is the builder for updating a single InvocationFiles entity.
type InvocationFilesUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InvocationFilesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (ifuo *InvocationFilesUpdateOne) SetName(s string) *InvocationFilesUpdateOne {
	ifuo.mutation.SetName(s)
	return ifuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ifuo *InvocationFilesUpdateOne) SetNillableName(s *string) *InvocationFilesUpdateOne {
	if s != nil {
		ifuo.SetName(*s)
	}
	return ifuo
}

// SetContent sets the "content" field.
func (ifuo *InvocationFilesUpdateOne) SetContent(s string) *InvocationFilesUpdateOne {
	ifuo.mutation.SetContent(s)
	return ifuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ifuo *InvocationFilesUpdateOne) SetNillableContent(s *string) *InvocationFilesUpdateOne {
	if s != nil {
		ifuo.SetContent(*s)
	}
	return ifuo
}

// ClearContent clears the value of the "content" field.
func (ifuo *InvocationFilesUpdateOne) ClearContent() *InvocationFilesUpdateOne {
	ifuo.mutation.ClearContent()
	return ifuo
}

// SetDigest sets the "digest" field.
func (ifuo *InvocationFilesUpdateOne) SetDigest(s string) *InvocationFilesUpdateOne {
	ifuo.mutation.SetDigest(s)
	return ifuo
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (ifuo *InvocationFilesUpdateOne) SetNillableDigest(s *string) *InvocationFilesUpdateOne {
	if s != nil {
		ifuo.SetDigest(*s)
	}
	return ifuo
}

// ClearDigest clears the value of the "digest" field.
func (ifuo *InvocationFilesUpdateOne) ClearDigest() *InvocationFilesUpdateOne {
	ifuo.mutation.ClearDigest()
	return ifuo
}

// SetSizeBytes sets the "size_bytes" field.
func (ifuo *InvocationFilesUpdateOne) SetSizeBytes(i int64) *InvocationFilesUpdateOne {
	ifuo.mutation.ResetSizeBytes()
	ifuo.mutation.SetSizeBytes(i)
	return ifuo
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (ifuo *InvocationFilesUpdateOne) SetNillableSizeBytes(i *int64) *InvocationFilesUpdateOne {
	if i != nil {
		ifuo.SetSizeBytes(*i)
	}
	return ifuo
}

// AddSizeBytes adds i to the "size_bytes" field.
func (ifuo *InvocationFilesUpdateOne) AddSizeBytes(i int64) *InvocationFilesUpdateOne {
	ifuo.mutation.AddSizeBytes(i)
	return ifuo
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (ifuo *InvocationFilesUpdateOne) ClearSizeBytes() *InvocationFilesUpdateOne {
	ifuo.mutation.ClearSizeBytes()
	return ifuo
}

// SetDigestFunction sets the "digest_function" field.
func (ifuo *InvocationFilesUpdateOne) SetDigestFunction(s string) *InvocationFilesUpdateOne {
	ifuo.mutation.SetDigestFunction(s)
	return ifuo
}

// SetNillableDigestFunction sets the "digest_function" field if the given value is not nil.
func (ifuo *InvocationFilesUpdateOne) SetNillableDigestFunction(s *string) *InvocationFilesUpdateOne {
	if s != nil {
		ifuo.SetDigestFunction(*s)
	}
	return ifuo
}

// ClearDigestFunction clears the value of the "digest_function" field.
func (ifuo *InvocationFilesUpdateOne) ClearDigestFunction() *InvocationFilesUpdateOne {
	ifuo.mutation.ClearDigestFunction()
	return ifuo
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (ifuo *InvocationFilesUpdateOne) SetBazelInvocationID(id int) *InvocationFilesUpdateOne {
	ifuo.mutation.SetBazelInvocationID(id)
	return ifuo
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (ifuo *InvocationFilesUpdateOne) SetNillableBazelInvocationID(id *int) *InvocationFilesUpdateOne {
	if id != nil {
		ifuo = ifuo.SetBazelInvocationID(*id)
	}
	return ifuo
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (ifuo *InvocationFilesUpdateOne) SetBazelInvocation(b *BazelInvocation) *InvocationFilesUpdateOne {
	return ifuo.SetBazelInvocationID(b.ID)
}

// Mutation returns the InvocationFilesMutation object of the builder.
func (ifuo *InvocationFilesUpdateOne) Mutation() *InvocationFilesMutation {
	return ifuo.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (ifuo *InvocationFilesUpdateOne) ClearBazelInvocation() *InvocationFilesUpdateOne {
	ifuo.mutation.ClearBazelInvocation()
	return ifuo
}

// Where appends a list predicates to the InvocationFilesUpdate builder.
func (ifuo *InvocationFilesUpdateOne) Where(ps ...predicate.InvocationFiles) *InvocationFilesUpdateOne {
	ifuo.mutation.Where(ps...)
	return ifuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ifuo *InvocationFilesUpdateOne) Select(field string, fields ...string) *InvocationFilesUpdateOne {
	ifuo.fields = append([]string{field}, fields...)
	return ifuo
}

// Save executes the query and returns the updated InvocationFiles entity.
func (ifuo *InvocationFilesUpdateOne) Save(ctx context.Context) (*InvocationFiles, error) {
	return withHooks(ctx, ifuo.sqlSave, ifuo.mutation, ifuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifuo *InvocationFilesUpdateOne) SaveX(ctx context.Context) *InvocationFiles {
	node, err := ifuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ifuo *InvocationFilesUpdateOne) Exec(ctx context.Context) error {
	_, err := ifuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifuo *InvocationFilesUpdateOne) ExecX(ctx context.Context) {
	if err := ifuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ifuo *InvocationFilesUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InvocationFilesUpdateOne {
	ifuo.modifiers = append(ifuo.modifiers, modifiers...)
	return ifuo
}

func (ifuo *InvocationFilesUpdateOne) sqlSave(ctx context.Context) (_node *InvocationFiles, err error) {
	_spec := sqlgraph.NewUpdateSpec(invocationfiles.Table, invocationfiles.Columns, sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt))
	id, ok := ifuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvocationFiles.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ifuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invocationfiles.FieldID)
		for _, f := range fields {
			if !invocationfiles.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invocationfiles.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ifuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifuo.mutation.Name(); ok {
		_spec.SetField(invocationfiles.FieldName, field.TypeString, value)
	}
	if value, ok := ifuo.mutation.Content(); ok {
		_spec.SetField(invocationfiles.FieldContent, field.TypeString, value)
	}
	if ifuo.mutation.ContentCleared() {
		_spec.ClearField(invocationfiles.FieldContent, field.TypeString)
	}
	if value, ok := ifuo.mutation.Digest(); ok {
		_spec.SetField(invocationfiles.FieldDigest, field.TypeString, value)
	}
	if ifuo.mutation.DigestCleared() {
		_spec.ClearField(invocationfiles.FieldDigest, field.TypeString)
	}
	if value, ok := ifuo.mutation.SizeBytes(); ok {
		_spec.SetField(invocationfiles.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := ifuo.mutation.AddedSizeBytes(); ok {
		_spec.AddField(invocationfiles.FieldSizeBytes, field.TypeInt64, value)
	}
	if ifuo.mutation.SizeBytesCleared() {
		_spec.ClearField(invocationfiles.FieldSizeBytes, field.TypeInt64)
	}
	if value, ok := ifuo.mutation.DigestFunction(); ok {
		_spec.SetField(invocationfiles.FieldDigestFunction, field.TypeString, value)
	}
	if ifuo.mutation.DigestFunctionCleared() {
		_spec.ClearField(invocationfiles.FieldDigestFunction, field.TypeString)
	}
	if ifuo.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invocationfiles.BazelInvocationTable,
			Columns: []string{invocationfiles.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifuo.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invocationfiles.BazelInvocationTable,
			Columns: []string{invocationfiles.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ifuo.modifiers...)
	_node = &InvocationFiles{config: ifuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ifuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invocationfiles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ifuo.mutation.done = true
	return _node, nil
}
