// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/artifactmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ArtifactMetricsUpdate is the builder for updating ArtifactMetrics entities.
type ArtifactMetricsUpdate struct {
	config
	hooks    []Hook
	mutation *ArtifactMetricsMutation
}

// Where appends a list predicates to the ArtifactMetricsUpdate builder.
func (amu *ArtifactMetricsUpdate) Where(ps ...predicate.ArtifactMetrics) *ArtifactMetricsUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetSourceArtifactsReadSizeInBytes sets the "source_artifacts_read_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) SetSourceArtifactsReadSizeInBytes(i int64) *ArtifactMetricsUpdate {
	amu.mutation.ResetSourceArtifactsReadSizeInBytes()
	amu.mutation.SetSourceArtifactsReadSizeInBytes(i)
	return amu
}

// SetNillableSourceArtifactsReadSizeInBytes sets the "source_artifacts_read_size_in_bytes" field if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableSourceArtifactsReadSizeInBytes(i *int64) *ArtifactMetricsUpdate {
	if i != nil {
		amu.SetSourceArtifactsReadSizeInBytes(*i)
	}
	return amu
}

// AddSourceArtifactsReadSizeInBytes adds i to the "source_artifacts_read_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) AddSourceArtifactsReadSizeInBytes(i int64) *ArtifactMetricsUpdate {
	amu.mutation.AddSourceArtifactsReadSizeInBytes(i)
	return amu
}

// ClearSourceArtifactsReadSizeInBytes clears the value of the "source_artifacts_read_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) ClearSourceArtifactsReadSizeInBytes() *ArtifactMetricsUpdate {
	amu.mutation.ClearSourceArtifactsReadSizeInBytes()
	return amu
}

// SetSourceArtifactsReadCount sets the "source_artifacts_read_count" field.
func (amu *ArtifactMetricsUpdate) SetSourceArtifactsReadCount(i int32) *ArtifactMetricsUpdate {
	amu.mutation.ResetSourceArtifactsReadCount()
	amu.mutation.SetSourceArtifactsReadCount(i)
	return amu
}

// SetNillableSourceArtifactsReadCount sets the "source_artifacts_read_count" field if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableSourceArtifactsReadCount(i *int32) *ArtifactMetricsUpdate {
	if i != nil {
		amu.SetSourceArtifactsReadCount(*i)
	}
	return amu
}

// AddSourceArtifactsReadCount adds i to the "source_artifacts_read_count" field.
func (amu *ArtifactMetricsUpdate) AddSourceArtifactsReadCount(i int32) *ArtifactMetricsUpdate {
	amu.mutation.AddSourceArtifactsReadCount(i)
	return amu
}

// ClearSourceArtifactsReadCount clears the value of the "source_artifacts_read_count" field.
func (amu *ArtifactMetricsUpdate) ClearSourceArtifactsReadCount() *ArtifactMetricsUpdate {
	amu.mutation.ClearSourceArtifactsReadCount()
	return amu
}

// SetOutputArtifactsSeenSizeInBytes sets the "output_artifacts_seen_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) SetOutputArtifactsSeenSizeInBytes(i int64) *ArtifactMetricsUpdate {
	amu.mutation.ResetOutputArtifactsSeenSizeInBytes()
	amu.mutation.SetOutputArtifactsSeenSizeInBytes(i)
	return amu
}

// SetNillableOutputArtifactsSeenSizeInBytes sets the "output_artifacts_seen_size_in_bytes" field if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableOutputArtifactsSeenSizeInBytes(i *int64) *ArtifactMetricsUpdate {
	if i != nil {
		amu.SetOutputArtifactsSeenSizeInBytes(*i)
	}
	return amu
}

// AddOutputArtifactsSeenSizeInBytes adds i to the "output_artifacts_seen_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) AddOutputArtifactsSeenSizeInBytes(i int64) *ArtifactMetricsUpdate {
	amu.mutation.AddOutputArtifactsSeenSizeInBytes(i)
	return amu
}

// ClearOutputArtifactsSeenSizeInBytes clears the value of the "output_artifacts_seen_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) ClearOutputArtifactsSeenSizeInBytes() *ArtifactMetricsUpdate {
	amu.mutation.ClearOutputArtifactsSeenSizeInBytes()
	return amu
}

// SetOutputArtifactsSeenCount sets the "output_artifacts_seen_count" field.
func (amu *ArtifactMetricsUpdate) SetOutputArtifactsSeenCount(i int32) *ArtifactMetricsUpdate {
	amu.mutation.ResetOutputArtifactsSeenCount()
	amu.mutation.SetOutputArtifactsSeenCount(i)
	return amu
}

// SetNillableOutputArtifactsSeenCount sets the "output_artifacts_seen_count" field if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableOutputArtifactsSeenCount(i *int32) *ArtifactMetricsUpdate {
	if i != nil {
		amu.SetOutputArtifactsSeenCount(*i)
	}
	return amu
}

// AddOutputArtifactsSeenCount adds i to the "output_artifacts_seen_count" field.
func (amu *ArtifactMetricsUpdate) AddOutputArtifactsSeenCount(i int32) *ArtifactMetricsUpdate {
	amu.mutation.AddOutputArtifactsSeenCount(i)
	return amu
}

// ClearOutputArtifactsSeenCount clears the value of the "output_artifacts_seen_count" field.
func (amu *ArtifactMetricsUpdate) ClearOutputArtifactsSeenCount() *ArtifactMetricsUpdate {
	amu.mutation.ClearOutputArtifactsSeenCount()
	return amu
}

// SetOutputArtifactsFromActionCacheSizeInBytes sets the "output_artifacts_from_action_cache_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) SetOutputArtifactsFromActionCacheSizeInBytes(i int64) *ArtifactMetricsUpdate {
	amu.mutation.ResetOutputArtifactsFromActionCacheSizeInBytes()
	amu.mutation.SetOutputArtifactsFromActionCacheSizeInBytes(i)
	return amu
}

// SetNillableOutputArtifactsFromActionCacheSizeInBytes sets the "output_artifacts_from_action_cache_size_in_bytes" field if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableOutputArtifactsFromActionCacheSizeInBytes(i *int64) *ArtifactMetricsUpdate {
	if i != nil {
		amu.SetOutputArtifactsFromActionCacheSizeInBytes(*i)
	}
	return amu
}

// AddOutputArtifactsFromActionCacheSizeInBytes adds i to the "output_artifacts_from_action_cache_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) AddOutputArtifactsFromActionCacheSizeInBytes(i int64) *ArtifactMetricsUpdate {
	amu.mutation.AddOutputArtifactsFromActionCacheSizeInBytes(i)
	return amu
}

// ClearOutputArtifactsFromActionCacheSizeInBytes clears the value of the "output_artifacts_from_action_cache_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) ClearOutputArtifactsFromActionCacheSizeInBytes() *ArtifactMetricsUpdate {
	amu.mutation.ClearOutputArtifactsFromActionCacheSizeInBytes()
	return amu
}

// SetOutputArtifactsFromActionCacheCount sets the "output_artifacts_from_action_cache_count" field.
func (amu *ArtifactMetricsUpdate) SetOutputArtifactsFromActionCacheCount(i int32) *ArtifactMetricsUpdate {
	amu.mutation.ResetOutputArtifactsFromActionCacheCount()
	amu.mutation.SetOutputArtifactsFromActionCacheCount(i)
	return amu
}

// SetNillableOutputArtifactsFromActionCacheCount sets the "output_artifacts_from_action_cache_count" field if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableOutputArtifactsFromActionCacheCount(i *int32) *ArtifactMetricsUpdate {
	if i != nil {
		amu.SetOutputArtifactsFromActionCacheCount(*i)
	}
	return amu
}

// AddOutputArtifactsFromActionCacheCount adds i to the "output_artifacts_from_action_cache_count" field.
func (amu *ArtifactMetricsUpdate) AddOutputArtifactsFromActionCacheCount(i int32) *ArtifactMetricsUpdate {
	amu.mutation.AddOutputArtifactsFromActionCacheCount(i)
	return amu
}

// ClearOutputArtifactsFromActionCacheCount clears the value of the "output_artifacts_from_action_cache_count" field.
func (amu *ArtifactMetricsUpdate) ClearOutputArtifactsFromActionCacheCount() *ArtifactMetricsUpdate {
	amu.mutation.ClearOutputArtifactsFromActionCacheCount()
	return amu
}

// SetTopLevelArtifactsSizeInBytes sets the "top_level_artifacts_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) SetTopLevelArtifactsSizeInBytes(i int64) *ArtifactMetricsUpdate {
	amu.mutation.ResetTopLevelArtifactsSizeInBytes()
	amu.mutation.SetTopLevelArtifactsSizeInBytes(i)
	return amu
}

// SetNillableTopLevelArtifactsSizeInBytes sets the "top_level_artifacts_size_in_bytes" field if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableTopLevelArtifactsSizeInBytes(i *int64) *ArtifactMetricsUpdate {
	if i != nil {
		amu.SetTopLevelArtifactsSizeInBytes(*i)
	}
	return amu
}

// AddTopLevelArtifactsSizeInBytes adds i to the "top_level_artifacts_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) AddTopLevelArtifactsSizeInBytes(i int64) *ArtifactMetricsUpdate {
	amu.mutation.AddTopLevelArtifactsSizeInBytes(i)
	return amu
}

// ClearTopLevelArtifactsSizeInBytes clears the value of the "top_level_artifacts_size_in_bytes" field.
func (amu *ArtifactMetricsUpdate) ClearTopLevelArtifactsSizeInBytes() *ArtifactMetricsUpdate {
	amu.mutation.ClearTopLevelArtifactsSizeInBytes()
	return amu
}

// SetTopLevelArtifactsCount sets the "top_level_artifacts_count" field.
func (amu *ArtifactMetricsUpdate) SetTopLevelArtifactsCount(i int32) *ArtifactMetricsUpdate {
	amu.mutation.ResetTopLevelArtifactsCount()
	amu.mutation.SetTopLevelArtifactsCount(i)
	return amu
}

// SetNillableTopLevelArtifactsCount sets the "top_level_artifacts_count" field if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableTopLevelArtifactsCount(i *int32) *ArtifactMetricsUpdate {
	if i != nil {
		amu.SetTopLevelArtifactsCount(*i)
	}
	return amu
}

// AddTopLevelArtifactsCount adds i to the "top_level_artifacts_count" field.
func (amu *ArtifactMetricsUpdate) AddTopLevelArtifactsCount(i int32) *ArtifactMetricsUpdate {
	amu.mutation.AddTopLevelArtifactsCount(i)
	return amu
}

// ClearTopLevelArtifactsCount clears the value of the "top_level_artifacts_count" field.
func (amu *ArtifactMetricsUpdate) ClearTopLevelArtifactsCount() *ArtifactMetricsUpdate {
	amu.mutation.ClearTopLevelArtifactsCount()
	return amu
}

// SetMetricsID sets the "metrics" edge to the Metrics entity by ID.
func (amu *ArtifactMetricsUpdate) SetMetricsID(id int) *ArtifactMetricsUpdate {
	amu.mutation.SetMetricsID(id)
	return amu
}

// SetNillableMetricsID sets the "metrics" edge to the Metrics entity by ID if the given value is not nil.
func (amu *ArtifactMetricsUpdate) SetNillableMetricsID(id *int) *ArtifactMetricsUpdate {
	if id != nil {
		amu = amu.SetMetricsID(*id)
	}
	return amu
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (amu *ArtifactMetricsUpdate) SetMetrics(m *Metrics) *ArtifactMetricsUpdate {
	return amu.SetMetricsID(m.ID)
}

// Mutation returns the ArtifactMetricsMutation object of the builder.
func (amu *ArtifactMetricsUpdate) Mutation() *ArtifactMetricsMutation {
	return amu.mutation
}

// ClearMetrics clears the "metrics" edge to the Metrics entity.
func (amu *ArtifactMetricsUpdate) ClearMetrics() *ArtifactMetricsUpdate {
	amu.mutation.ClearMetrics()
	return amu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *ArtifactMetricsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *ArtifactMetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *ArtifactMetricsUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *ArtifactMetricsUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (amu *ArtifactMetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(artifactmetrics.Table, artifactmetrics.Columns, sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.SourceArtifactsReadSizeInBytes(); ok {
		_spec.SetField(artifactmetrics.FieldSourceArtifactsReadSizeInBytes, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedSourceArtifactsReadSizeInBytes(); ok {
		_spec.AddField(artifactmetrics.FieldSourceArtifactsReadSizeInBytes, field.TypeInt64, value)
	}
	if amu.mutation.SourceArtifactsReadSizeInBytesCleared() {
		_spec.ClearField(artifactmetrics.FieldSourceArtifactsReadSizeInBytes, field.TypeInt64)
	}
	if value, ok := amu.mutation.SourceArtifactsReadCount(); ok {
		_spec.SetField(artifactmetrics.FieldSourceArtifactsReadCount, field.TypeInt32, value)
	}
	if value, ok := amu.mutation.AddedSourceArtifactsReadCount(); ok {
		_spec.AddField(artifactmetrics.FieldSourceArtifactsReadCount, field.TypeInt32, value)
	}
	if amu.mutation.SourceArtifactsReadCountCleared() {
		_spec.ClearField(artifactmetrics.FieldSourceArtifactsReadCount, field.TypeInt32)
	}
	if value, ok := amu.mutation.OutputArtifactsSeenSizeInBytes(); ok {
		_spec.SetField(artifactmetrics.FieldOutputArtifactsSeenSizeInBytes, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedOutputArtifactsSeenSizeInBytes(); ok {
		_spec.AddField(artifactmetrics.FieldOutputArtifactsSeenSizeInBytes, field.TypeInt64, value)
	}
	if amu.mutation.OutputArtifactsSeenSizeInBytesCleared() {
		_spec.ClearField(artifactmetrics.FieldOutputArtifactsSeenSizeInBytes, field.TypeInt64)
	}
	if value, ok := amu.mutation.OutputArtifactsSeenCount(); ok {
		_spec.SetField(artifactmetrics.FieldOutputArtifactsSeenCount, field.TypeInt32, value)
	}
	if value, ok := amu.mutation.AddedOutputArtifactsSeenCount(); ok {
		_spec.AddField(artifactmetrics.FieldOutputArtifactsSeenCount, field.TypeInt32, value)
	}
	if amu.mutation.OutputArtifactsSeenCountCleared() {
		_spec.ClearField(artifactmetrics.FieldOutputArtifactsSeenCount, field.TypeInt32)
	}
	if value, ok := amu.mutation.OutputArtifactsFromActionCacheSizeInBytes(); ok {
		_spec.SetField(artifactmetrics.FieldOutputArtifactsFromActionCacheSizeInBytes, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedOutputArtifactsFromActionCacheSizeInBytes(); ok {
		_spec.AddField(artifactmetrics.FieldOutputArtifactsFromActionCacheSizeInBytes, field.TypeInt64, value)
	}
	if amu.mutation.OutputArtifactsFromActionCacheSizeInBytesCleared() {
		_spec.ClearField(artifactmetrics.FieldOutputArtifactsFromActionCacheSizeInBytes, field.TypeInt64)
	}
	if value, ok := amu.mutation.OutputArtifactsFromActionCacheCount(); ok {
		_spec.SetField(artifactmetrics.FieldOutputArtifactsFromActionCacheCount, field.TypeInt32, value)
	}
	if value, ok := amu.mutation.AddedOutputArtifactsFromActionCacheCount(); ok {
		_spec.AddField(artifactmetrics.FieldOutputArtifactsFromActionCacheCount, field.TypeInt32, value)
	}
	if amu.mutation.OutputArtifactsFromActionCacheCountCleared() {
		_spec.ClearField(artifactmetrics.FieldOutputArtifactsFromActionCacheCount, field.TypeInt32)
	}
	if value, ok := amu.mutation.TopLevelArtifactsSizeInBytes(); ok {
		_spec.SetField(artifactmetrics.FieldTopLevelArtifactsSizeInBytes, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedTopLevelArtifactsSizeInBytes(); ok {
		_spec.AddField(artifactmetrics.FieldTopLevelArtifactsSizeInBytes, field.TypeInt64, value)
	}
	if amu.mutation.TopLevelArtifactsSizeInBytesCleared() {
		_spec.ClearField(artifactmetrics.FieldTopLevelArtifactsSizeInBytes, field.TypeInt64)
	}
	if value, ok := amu.mutation.TopLevelArtifactsCount(); ok {
		_spec.SetField(artifactmetrics.FieldTopLevelArtifactsCount, field.TypeInt32, value)
	}
	if value, ok := amu.mutation.AddedTopLevelArtifactsCount(); ok {
		_spec.AddField(artifactmetrics.FieldTopLevelArtifactsCount, field.TypeInt32, value)
	}
	if amu.mutation.TopLevelArtifactsCountCleared() {
		_spec.ClearField(artifactmetrics.FieldTopLevelArtifactsCount, field.TypeInt32)
	}
	if amu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: []string{artifactmetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: []string{artifactmetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifactmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// ArtifactMetricsUpdateOne is the builder for updating a single ArtifactMetrics entity.
type ArtifactMetricsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtifactMetricsMutation
}

// SetSourceArtifactsReadSizeInBytes sets the "source_artifacts_read_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) SetSourceArtifactsReadSizeInBytes(i int64) *ArtifactMetricsUpdateOne {
	amuo.mutation.ResetSourceArtifactsReadSizeInBytes()
	amuo.mutation.SetSourceArtifactsReadSizeInBytes(i)
	return amuo
}

// SetNillableSourceArtifactsReadSizeInBytes sets the "source_artifacts_read_size_in_bytes" field if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableSourceArtifactsReadSizeInBytes(i *int64) *ArtifactMetricsUpdateOne {
	if i != nil {
		amuo.SetSourceArtifactsReadSizeInBytes(*i)
	}
	return amuo
}

// AddSourceArtifactsReadSizeInBytes adds i to the "source_artifacts_read_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) AddSourceArtifactsReadSizeInBytes(i int64) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddSourceArtifactsReadSizeInBytes(i)
	return amuo
}

// ClearSourceArtifactsReadSizeInBytes clears the value of the "source_artifacts_read_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) ClearSourceArtifactsReadSizeInBytes() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearSourceArtifactsReadSizeInBytes()
	return amuo
}

// SetSourceArtifactsReadCount sets the "source_artifacts_read_count" field.
func (amuo *ArtifactMetricsUpdateOne) SetSourceArtifactsReadCount(i int32) *ArtifactMetricsUpdateOne {
	amuo.mutation.ResetSourceArtifactsReadCount()
	amuo.mutation.SetSourceArtifactsReadCount(i)
	return amuo
}

// SetNillableSourceArtifactsReadCount sets the "source_artifacts_read_count" field if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableSourceArtifactsReadCount(i *int32) *ArtifactMetricsUpdateOne {
	if i != nil {
		amuo.SetSourceArtifactsReadCount(*i)
	}
	return amuo
}

// AddSourceArtifactsReadCount adds i to the "source_artifacts_read_count" field.
func (amuo *ArtifactMetricsUpdateOne) AddSourceArtifactsReadCount(i int32) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddSourceArtifactsReadCount(i)
	return amuo
}

// ClearSourceArtifactsReadCount clears the value of the "source_artifacts_read_count" field.
func (amuo *ArtifactMetricsUpdateOne) ClearSourceArtifactsReadCount() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearSourceArtifactsReadCount()
	return amuo
}

// SetOutputArtifactsSeenSizeInBytes sets the "output_artifacts_seen_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) SetOutputArtifactsSeenSizeInBytes(i int64) *ArtifactMetricsUpdateOne {
	amuo.mutation.ResetOutputArtifactsSeenSizeInBytes()
	amuo.mutation.SetOutputArtifactsSeenSizeInBytes(i)
	return amuo
}

// SetNillableOutputArtifactsSeenSizeInBytes sets the "output_artifacts_seen_size_in_bytes" field if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableOutputArtifactsSeenSizeInBytes(i *int64) *ArtifactMetricsUpdateOne {
	if i != nil {
		amuo.SetOutputArtifactsSeenSizeInBytes(*i)
	}
	return amuo
}

// AddOutputArtifactsSeenSizeInBytes adds i to the "output_artifacts_seen_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) AddOutputArtifactsSeenSizeInBytes(i int64) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddOutputArtifactsSeenSizeInBytes(i)
	return amuo
}

// ClearOutputArtifactsSeenSizeInBytes clears the value of the "output_artifacts_seen_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) ClearOutputArtifactsSeenSizeInBytes() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearOutputArtifactsSeenSizeInBytes()
	return amuo
}

// SetOutputArtifactsSeenCount sets the "output_artifacts_seen_count" field.
func (amuo *ArtifactMetricsUpdateOne) SetOutputArtifactsSeenCount(i int32) *ArtifactMetricsUpdateOne {
	amuo.mutation.ResetOutputArtifactsSeenCount()
	amuo.mutation.SetOutputArtifactsSeenCount(i)
	return amuo
}

// SetNillableOutputArtifactsSeenCount sets the "output_artifacts_seen_count" field if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableOutputArtifactsSeenCount(i *int32) *ArtifactMetricsUpdateOne {
	if i != nil {
		amuo.SetOutputArtifactsSeenCount(*i)
	}
	return amuo
}

// AddOutputArtifactsSeenCount adds i to the "output_artifacts_seen_count" field.
func (amuo *ArtifactMetricsUpdateOne) AddOutputArtifactsSeenCount(i int32) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddOutputArtifactsSeenCount(i)
	return amuo
}

// ClearOutputArtifactsSeenCount clears the value of the "output_artifacts_seen_count" field.
func (amuo *ArtifactMetricsUpdateOne) ClearOutputArtifactsSeenCount() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearOutputArtifactsSeenCount()
	return amuo
}

// SetOutputArtifactsFromActionCacheSizeInBytes sets the "output_artifacts_from_action_cache_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) SetOutputArtifactsFromActionCacheSizeInBytes(i int64) *ArtifactMetricsUpdateOne {
	amuo.mutation.ResetOutputArtifactsFromActionCacheSizeInBytes()
	amuo.mutation.SetOutputArtifactsFromActionCacheSizeInBytes(i)
	return amuo
}

// SetNillableOutputArtifactsFromActionCacheSizeInBytes sets the "output_artifacts_from_action_cache_size_in_bytes" field if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableOutputArtifactsFromActionCacheSizeInBytes(i *int64) *ArtifactMetricsUpdateOne {
	if i != nil {
		amuo.SetOutputArtifactsFromActionCacheSizeInBytes(*i)
	}
	return amuo
}

// AddOutputArtifactsFromActionCacheSizeInBytes adds i to the "output_artifacts_from_action_cache_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) AddOutputArtifactsFromActionCacheSizeInBytes(i int64) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddOutputArtifactsFromActionCacheSizeInBytes(i)
	return amuo
}

// ClearOutputArtifactsFromActionCacheSizeInBytes clears the value of the "output_artifacts_from_action_cache_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) ClearOutputArtifactsFromActionCacheSizeInBytes() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearOutputArtifactsFromActionCacheSizeInBytes()
	return amuo
}

// SetOutputArtifactsFromActionCacheCount sets the "output_artifacts_from_action_cache_count" field.
func (amuo *ArtifactMetricsUpdateOne) SetOutputArtifactsFromActionCacheCount(i int32) *ArtifactMetricsUpdateOne {
	amuo.mutation.ResetOutputArtifactsFromActionCacheCount()
	amuo.mutation.SetOutputArtifactsFromActionCacheCount(i)
	return amuo
}

// SetNillableOutputArtifactsFromActionCacheCount sets the "output_artifacts_from_action_cache_count" field if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableOutputArtifactsFromActionCacheCount(i *int32) *ArtifactMetricsUpdateOne {
	if i != nil {
		amuo.SetOutputArtifactsFromActionCacheCount(*i)
	}
	return amuo
}

// AddOutputArtifactsFromActionCacheCount adds i to the "output_artifacts_from_action_cache_count" field.
func (amuo *ArtifactMetricsUpdateOne) AddOutputArtifactsFromActionCacheCount(i int32) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddOutputArtifactsFromActionCacheCount(i)
	return amuo
}

// ClearOutputArtifactsFromActionCacheCount clears the value of the "output_artifacts_from_action_cache_count" field.
func (amuo *ArtifactMetricsUpdateOne) ClearOutputArtifactsFromActionCacheCount() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearOutputArtifactsFromActionCacheCount()
	return amuo
}

// SetTopLevelArtifactsSizeInBytes sets the "top_level_artifacts_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) SetTopLevelArtifactsSizeInBytes(i int64) *ArtifactMetricsUpdateOne {
	amuo.mutation.ResetTopLevelArtifactsSizeInBytes()
	amuo.mutation.SetTopLevelArtifactsSizeInBytes(i)
	return amuo
}

// SetNillableTopLevelArtifactsSizeInBytes sets the "top_level_artifacts_size_in_bytes" field if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableTopLevelArtifactsSizeInBytes(i *int64) *ArtifactMetricsUpdateOne {
	if i != nil {
		amuo.SetTopLevelArtifactsSizeInBytes(*i)
	}
	return amuo
}

// AddTopLevelArtifactsSizeInBytes adds i to the "top_level_artifacts_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) AddTopLevelArtifactsSizeInBytes(i int64) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddTopLevelArtifactsSizeInBytes(i)
	return amuo
}

// ClearTopLevelArtifactsSizeInBytes clears the value of the "top_level_artifacts_size_in_bytes" field.
func (amuo *ArtifactMetricsUpdateOne) ClearTopLevelArtifactsSizeInBytes() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearTopLevelArtifactsSizeInBytes()
	return amuo
}

// SetTopLevelArtifactsCount sets the "top_level_artifacts_count" field.
func (amuo *ArtifactMetricsUpdateOne) SetTopLevelArtifactsCount(i int32) *ArtifactMetricsUpdateOne {
	amuo.mutation.ResetTopLevelArtifactsCount()
	amuo.mutation.SetTopLevelArtifactsCount(i)
	return amuo
}

// SetNillableTopLevelArtifactsCount sets the "top_level_artifacts_count" field if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableTopLevelArtifactsCount(i *int32) *ArtifactMetricsUpdateOne {
	if i != nil {
		amuo.SetTopLevelArtifactsCount(*i)
	}
	return amuo
}

// AddTopLevelArtifactsCount adds i to the "top_level_artifacts_count" field.
func (amuo *ArtifactMetricsUpdateOne) AddTopLevelArtifactsCount(i int32) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddTopLevelArtifactsCount(i)
	return amuo
}

// ClearTopLevelArtifactsCount clears the value of the "top_level_artifacts_count" field.
func (amuo *ArtifactMetricsUpdateOne) ClearTopLevelArtifactsCount() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearTopLevelArtifactsCount()
	return amuo
}

// SetMetricsID sets the "metrics" edge to the Metrics entity by ID.
func (amuo *ArtifactMetricsUpdateOne) SetMetricsID(id int) *ArtifactMetricsUpdateOne {
	amuo.mutation.SetMetricsID(id)
	return amuo
}

// SetNillableMetricsID sets the "metrics" edge to the Metrics entity by ID if the given value is not nil.
func (amuo *ArtifactMetricsUpdateOne) SetNillableMetricsID(id *int) *ArtifactMetricsUpdateOne {
	if id != nil {
		amuo = amuo.SetMetricsID(*id)
	}
	return amuo
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (amuo *ArtifactMetricsUpdateOne) SetMetrics(m *Metrics) *ArtifactMetricsUpdateOne {
	return amuo.SetMetricsID(m.ID)
}

// Mutation returns the ArtifactMetricsMutation object of the builder.
func (amuo *ArtifactMetricsUpdateOne) Mutation() *ArtifactMetricsMutation {
	return amuo.mutation
}

// ClearMetrics clears the "metrics" edge to the Metrics entity.
func (amuo *ArtifactMetricsUpdateOne) ClearMetrics() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearMetrics()
	return amuo
}

// Where appends a list predicates to the ArtifactMetricsUpdate builder.
func (amuo *ArtifactMetricsUpdateOne) Where(ps ...predicate.ArtifactMetrics) *ArtifactMetricsUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *ArtifactMetricsUpdateOne) Select(field string, fields ...string) *ArtifactMetricsUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated ArtifactMetrics entity.
func (amuo *ArtifactMetricsUpdateOne) Save(ctx context.Context) (*ArtifactMetrics, error) {
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *ArtifactMetricsUpdateOne) SaveX(ctx context.Context) *ArtifactMetrics {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *ArtifactMetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *ArtifactMetricsUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (amuo *ArtifactMetricsUpdateOne) sqlSave(ctx context.Context) (_node *ArtifactMetrics, err error) {
	_spec := sqlgraph.NewUpdateSpec(artifactmetrics.Table, artifactmetrics.Columns, sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArtifactMetrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifactmetrics.FieldID)
		for _, f := range fields {
			if !artifactmetrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artifactmetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.SourceArtifactsReadSizeInBytes(); ok {
		_spec.SetField(artifactmetrics.FieldSourceArtifactsReadSizeInBytes, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedSourceArtifactsReadSizeInBytes(); ok {
		_spec.AddField(artifactmetrics.FieldSourceArtifactsReadSizeInBytes, field.TypeInt64, value)
	}
	if amuo.mutation.SourceArtifactsReadSizeInBytesCleared() {
		_spec.ClearField(artifactmetrics.FieldSourceArtifactsReadSizeInBytes, field.TypeInt64)
	}
	if value, ok := amuo.mutation.SourceArtifactsReadCount(); ok {
		_spec.SetField(artifactmetrics.FieldSourceArtifactsReadCount, field.TypeInt32, value)
	}
	if value, ok := amuo.mutation.AddedSourceArtifactsReadCount(); ok {
		_spec.AddField(artifactmetrics.FieldSourceArtifactsReadCount, field.TypeInt32, value)
	}
	if amuo.mutation.SourceArtifactsReadCountCleared() {
		_spec.ClearField(artifactmetrics.FieldSourceArtifactsReadCount, field.TypeInt32)
	}
	if value, ok := amuo.mutation.OutputArtifactsSeenSizeInBytes(); ok {
		_spec.SetField(artifactmetrics.FieldOutputArtifactsSeenSizeInBytes, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedOutputArtifactsSeenSizeInBytes(); ok {
		_spec.AddField(artifactmetrics.FieldOutputArtifactsSeenSizeInBytes, field.TypeInt64, value)
	}
	if amuo.mutation.OutputArtifactsSeenSizeInBytesCleared() {
		_spec.ClearField(artifactmetrics.FieldOutputArtifactsSeenSizeInBytes, field.TypeInt64)
	}
	if value, ok := amuo.mutation.OutputArtifactsSeenCount(); ok {
		_spec.SetField(artifactmetrics.FieldOutputArtifactsSeenCount, field.TypeInt32, value)
	}
	if value, ok := amuo.mutation.AddedOutputArtifactsSeenCount(); ok {
		_spec.AddField(artifactmetrics.FieldOutputArtifactsSeenCount, field.TypeInt32, value)
	}
	if amuo.mutation.OutputArtifactsSeenCountCleared() {
		_spec.ClearField(artifactmetrics.FieldOutputArtifactsSeenCount, field.TypeInt32)
	}
	if value, ok := amuo.mutation.OutputArtifactsFromActionCacheSizeInBytes(); ok {
		_spec.SetField(artifactmetrics.FieldOutputArtifactsFromActionCacheSizeInBytes, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedOutputArtifactsFromActionCacheSizeInBytes(); ok {
		_spec.AddField(artifactmetrics.FieldOutputArtifactsFromActionCacheSizeInBytes, field.TypeInt64, value)
	}
	if amuo.mutation.OutputArtifactsFromActionCacheSizeInBytesCleared() {
		_spec.ClearField(artifactmetrics.FieldOutputArtifactsFromActionCacheSizeInBytes, field.TypeInt64)
	}
	if value, ok := amuo.mutation.OutputArtifactsFromActionCacheCount(); ok {
		_spec.SetField(artifactmetrics.FieldOutputArtifactsFromActionCacheCount, field.TypeInt32, value)
	}
	if value, ok := amuo.mutation.AddedOutputArtifactsFromActionCacheCount(); ok {
		_spec.AddField(artifactmetrics.FieldOutputArtifactsFromActionCacheCount, field.TypeInt32, value)
	}
	if amuo.mutation.OutputArtifactsFromActionCacheCountCleared() {
		_spec.ClearField(artifactmetrics.FieldOutputArtifactsFromActionCacheCount, field.TypeInt32)
	}
	if value, ok := amuo.mutation.TopLevelArtifactsSizeInBytes(); ok {
		_spec.SetField(artifactmetrics.FieldTopLevelArtifactsSizeInBytes, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedTopLevelArtifactsSizeInBytes(); ok {
		_spec.AddField(artifactmetrics.FieldTopLevelArtifactsSizeInBytes, field.TypeInt64, value)
	}
	if amuo.mutation.TopLevelArtifactsSizeInBytesCleared() {
		_spec.ClearField(artifactmetrics.FieldTopLevelArtifactsSizeInBytes, field.TypeInt64)
	}
	if value, ok := amuo.mutation.TopLevelArtifactsCount(); ok {
		_spec.SetField(artifactmetrics.FieldTopLevelArtifactsCount, field.TypeInt32, value)
	}
	if value, ok := amuo.mutation.AddedTopLevelArtifactsCount(); ok {
		_spec.AddField(artifactmetrics.FieldTopLevelArtifactsCount, field.TypeInt32, value)
	}
	if amuo.mutation.TopLevelArtifactsCountCleared() {
		_spec.ClearField(artifactmetrics.FieldTopLevelArtifactsCount, field.TypeInt32)
	}
	if amuo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: []string{artifactmetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: []string{artifactmetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArtifactMetrics{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifactmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
