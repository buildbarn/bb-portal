// Code generated by ent, DO NOT EDIT.

package blob

import (
	"entgo.io/ent/dialect/sql"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Blob {
	return predicate.Blob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Blob {
	return predicate.Blob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Blob {
	return predicate.Blob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Blob {
	return predicate.Blob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Blob {
	return predicate.Blob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Blob {
	return predicate.Blob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Blob {
	return predicate.Blob(sql.FieldLTE(FieldID, id))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldURI, v))
}

// SizeBytes applies equality check predicate on the "size_bytes" field. It's identical to SizeBytesEQ.
func SizeBytes(v int64) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldSizeBytes, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldReason, v))
}

// ArchiveURL applies equality check predicate on the "archive_url" field. It's identical to ArchiveURLEQ.
func ArchiveURL(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldArchiveURL, v))
}

// InstanceName applies equality check predicate on the "instance_name" field. It's identical to InstanceNameEQ.
func InstanceName(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldInstanceName, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.Blob {
	return predicate.Blob(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.Blob {
	return predicate.Blob(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.Blob {
	return predicate.Blob(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.Blob {
	return predicate.Blob(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.Blob {
	return predicate.Blob(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.Blob {
	return predicate.Blob(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.Blob {
	return predicate.Blob(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.Blob {
	return predicate.Blob(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.Blob {
	return predicate.Blob(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.Blob {
	return predicate.Blob(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.Blob {
	return predicate.Blob(sql.FieldContainsFold(FieldURI, v))
}

// SizeBytesEQ applies the EQ predicate on the "size_bytes" field.
func SizeBytesEQ(v int64) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldSizeBytes, v))
}

// SizeBytesNEQ applies the NEQ predicate on the "size_bytes" field.
func SizeBytesNEQ(v int64) predicate.Blob {
	return predicate.Blob(sql.FieldNEQ(FieldSizeBytes, v))
}

// SizeBytesIn applies the In predicate on the "size_bytes" field.
func SizeBytesIn(vs ...int64) predicate.Blob {
	return predicate.Blob(sql.FieldIn(FieldSizeBytes, vs...))
}

// SizeBytesNotIn applies the NotIn predicate on the "size_bytes" field.
func SizeBytesNotIn(vs ...int64) predicate.Blob {
	return predicate.Blob(sql.FieldNotIn(FieldSizeBytes, vs...))
}

// SizeBytesGT applies the GT predicate on the "size_bytes" field.
func SizeBytesGT(v int64) predicate.Blob {
	return predicate.Blob(sql.FieldGT(FieldSizeBytes, v))
}

// SizeBytesGTE applies the GTE predicate on the "size_bytes" field.
func SizeBytesGTE(v int64) predicate.Blob {
	return predicate.Blob(sql.FieldGTE(FieldSizeBytes, v))
}

// SizeBytesLT applies the LT predicate on the "size_bytes" field.
func SizeBytesLT(v int64) predicate.Blob {
	return predicate.Blob(sql.FieldLT(FieldSizeBytes, v))
}

// SizeBytesLTE applies the LTE predicate on the "size_bytes" field.
func SizeBytesLTE(v int64) predicate.Blob {
	return predicate.Blob(sql.FieldLTE(FieldSizeBytes, v))
}

// SizeBytesIsNil applies the IsNil predicate on the "size_bytes" field.
func SizeBytesIsNil() predicate.Blob {
	return predicate.Blob(sql.FieldIsNull(FieldSizeBytes))
}

// SizeBytesNotNil applies the NotNil predicate on the "size_bytes" field.
func SizeBytesNotNil() predicate.Blob {
	return predicate.Blob(sql.FieldNotNull(FieldSizeBytes))
}

// ArchivingStatusEQ applies the EQ predicate on the "archiving_status" field.
func ArchivingStatusEQ(v ArchivingStatus) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldArchivingStatus, v))
}

// ArchivingStatusNEQ applies the NEQ predicate on the "archiving_status" field.
func ArchivingStatusNEQ(v ArchivingStatus) predicate.Blob {
	return predicate.Blob(sql.FieldNEQ(FieldArchivingStatus, v))
}

// ArchivingStatusIn applies the In predicate on the "archiving_status" field.
func ArchivingStatusIn(vs ...ArchivingStatus) predicate.Blob {
	return predicate.Blob(sql.FieldIn(FieldArchivingStatus, vs...))
}

// ArchivingStatusNotIn applies the NotIn predicate on the "archiving_status" field.
func ArchivingStatusNotIn(vs ...ArchivingStatus) predicate.Blob {
	return predicate.Blob(sql.FieldNotIn(FieldArchivingStatus, vs...))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Blob {
	return predicate.Blob(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Blob {
	return predicate.Blob(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Blob {
	return predicate.Blob(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Blob {
	return predicate.Blob(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Blob {
	return predicate.Blob(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Blob {
	return predicate.Blob(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Blob {
	return predicate.Blob(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Blob {
	return predicate.Blob(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Blob {
	return predicate.Blob(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Blob {
	return predicate.Blob(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.Blob {
	return predicate.Blob(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.Blob {
	return predicate.Blob(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Blob {
	return predicate.Blob(sql.FieldContainsFold(FieldReason, v))
}

// ArchiveURLEQ applies the EQ predicate on the "archive_url" field.
func ArchiveURLEQ(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldArchiveURL, v))
}

// ArchiveURLNEQ applies the NEQ predicate on the "archive_url" field.
func ArchiveURLNEQ(v string) predicate.Blob {
	return predicate.Blob(sql.FieldNEQ(FieldArchiveURL, v))
}

// ArchiveURLIn applies the In predicate on the "archive_url" field.
func ArchiveURLIn(vs ...string) predicate.Blob {
	return predicate.Blob(sql.FieldIn(FieldArchiveURL, vs...))
}

// ArchiveURLNotIn applies the NotIn predicate on the "archive_url" field.
func ArchiveURLNotIn(vs ...string) predicate.Blob {
	return predicate.Blob(sql.FieldNotIn(FieldArchiveURL, vs...))
}

// ArchiveURLGT applies the GT predicate on the "archive_url" field.
func ArchiveURLGT(v string) predicate.Blob {
	return predicate.Blob(sql.FieldGT(FieldArchiveURL, v))
}

// ArchiveURLGTE applies the GTE predicate on the "archive_url" field.
func ArchiveURLGTE(v string) predicate.Blob {
	return predicate.Blob(sql.FieldGTE(FieldArchiveURL, v))
}

// ArchiveURLLT applies the LT predicate on the "archive_url" field.
func ArchiveURLLT(v string) predicate.Blob {
	return predicate.Blob(sql.FieldLT(FieldArchiveURL, v))
}

// ArchiveURLLTE applies the LTE predicate on the "archive_url" field.
func ArchiveURLLTE(v string) predicate.Blob {
	return predicate.Blob(sql.FieldLTE(FieldArchiveURL, v))
}

// ArchiveURLContains applies the Contains predicate on the "archive_url" field.
func ArchiveURLContains(v string) predicate.Blob {
	return predicate.Blob(sql.FieldContains(FieldArchiveURL, v))
}

// ArchiveURLHasPrefix applies the HasPrefix predicate on the "archive_url" field.
func ArchiveURLHasPrefix(v string) predicate.Blob {
	return predicate.Blob(sql.FieldHasPrefix(FieldArchiveURL, v))
}

// ArchiveURLHasSuffix applies the HasSuffix predicate on the "archive_url" field.
func ArchiveURLHasSuffix(v string) predicate.Blob {
	return predicate.Blob(sql.FieldHasSuffix(FieldArchiveURL, v))
}

// ArchiveURLIsNil applies the IsNil predicate on the "archive_url" field.
func ArchiveURLIsNil() predicate.Blob {
	return predicate.Blob(sql.FieldIsNull(FieldArchiveURL))
}

// ArchiveURLNotNil applies the NotNil predicate on the "archive_url" field.
func ArchiveURLNotNil() predicate.Blob {
	return predicate.Blob(sql.FieldNotNull(FieldArchiveURL))
}

// ArchiveURLEqualFold applies the EqualFold predicate on the "archive_url" field.
func ArchiveURLEqualFold(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEqualFold(FieldArchiveURL, v))
}

// ArchiveURLContainsFold applies the ContainsFold predicate on the "archive_url" field.
func ArchiveURLContainsFold(v string) predicate.Blob {
	return predicate.Blob(sql.FieldContainsFold(FieldArchiveURL, v))
}

// InstanceNameEQ applies the EQ predicate on the "instance_name" field.
func InstanceNameEQ(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEQ(FieldInstanceName, v))
}

// InstanceNameNEQ applies the NEQ predicate on the "instance_name" field.
func InstanceNameNEQ(v string) predicate.Blob {
	return predicate.Blob(sql.FieldNEQ(FieldInstanceName, v))
}

// InstanceNameIn applies the In predicate on the "instance_name" field.
func InstanceNameIn(vs ...string) predicate.Blob {
	return predicate.Blob(sql.FieldIn(FieldInstanceName, vs...))
}

// InstanceNameNotIn applies the NotIn predicate on the "instance_name" field.
func InstanceNameNotIn(vs ...string) predicate.Blob {
	return predicate.Blob(sql.FieldNotIn(FieldInstanceName, vs...))
}

// InstanceNameGT applies the GT predicate on the "instance_name" field.
func InstanceNameGT(v string) predicate.Blob {
	return predicate.Blob(sql.FieldGT(FieldInstanceName, v))
}

// InstanceNameGTE applies the GTE predicate on the "instance_name" field.
func InstanceNameGTE(v string) predicate.Blob {
	return predicate.Blob(sql.FieldGTE(FieldInstanceName, v))
}

// InstanceNameLT applies the LT predicate on the "instance_name" field.
func InstanceNameLT(v string) predicate.Blob {
	return predicate.Blob(sql.FieldLT(FieldInstanceName, v))
}

// InstanceNameLTE applies the LTE predicate on the "instance_name" field.
func InstanceNameLTE(v string) predicate.Blob {
	return predicate.Blob(sql.FieldLTE(FieldInstanceName, v))
}

// InstanceNameContains applies the Contains predicate on the "instance_name" field.
func InstanceNameContains(v string) predicate.Blob {
	return predicate.Blob(sql.FieldContains(FieldInstanceName, v))
}

// InstanceNameHasPrefix applies the HasPrefix predicate on the "instance_name" field.
func InstanceNameHasPrefix(v string) predicate.Blob {
	return predicate.Blob(sql.FieldHasPrefix(FieldInstanceName, v))
}

// InstanceNameHasSuffix applies the HasSuffix predicate on the "instance_name" field.
func InstanceNameHasSuffix(v string) predicate.Blob {
	return predicate.Blob(sql.FieldHasSuffix(FieldInstanceName, v))
}

// InstanceNameEqualFold applies the EqualFold predicate on the "instance_name" field.
func InstanceNameEqualFold(v string) predicate.Blob {
	return predicate.Blob(sql.FieldEqualFold(FieldInstanceName, v))
}

// InstanceNameContainsFold applies the ContainsFold predicate on the "instance_name" field.
func InstanceNameContainsFold(v string) predicate.Blob {
	return predicate.Blob(sql.FieldContainsFold(FieldInstanceName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Blob) predicate.Blob {
	return predicate.Blob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Blob) predicate.Blob {
	return predicate.Blob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Blob) predicate.Blob {
	return predicate.Blob(sql.NotPredicates(p))
}
