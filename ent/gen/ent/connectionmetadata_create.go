// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/connectionmetadata"
)

// ConnectionMetadataCreate is the builder for creating a ConnectionMetadata entity.
type ConnectionMetadataCreate struct {
	config
	mutation *ConnectionMetadataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetConnectionLastOpenAt sets the "connection_last_open_at" field.
func (cmc *ConnectionMetadataCreate) SetConnectionLastOpenAt(t time.Time) *ConnectionMetadataCreate {
	cmc.mutation.SetConnectionLastOpenAt(t)
	return cmc
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (cmc *ConnectionMetadataCreate) SetBazelInvocationID(id int) *ConnectionMetadataCreate {
	cmc.mutation.SetBazelInvocationID(id)
	return cmc
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (cmc *ConnectionMetadataCreate) SetBazelInvocation(b *BazelInvocation) *ConnectionMetadataCreate {
	return cmc.SetBazelInvocationID(b.ID)
}

// Mutation returns the ConnectionMetadataMutation object of the builder.
func (cmc *ConnectionMetadataCreate) Mutation() *ConnectionMetadataMutation {
	return cmc.mutation
}

// Save creates the ConnectionMetadata in the database.
func (cmc *ConnectionMetadataCreate) Save(ctx context.Context) (*ConnectionMetadata, error) {
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *ConnectionMetadataCreate) SaveX(ctx context.Context) *ConnectionMetadata {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *ConnectionMetadataCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *ConnectionMetadataCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *ConnectionMetadataCreate) check() error {
	if _, ok := cmc.mutation.ConnectionLastOpenAt(); !ok {
		return &ValidationError{Name: "connection_last_open_at", err: errors.New(`ent: missing required field "ConnectionMetadata.connection_last_open_at"`)}
	}
	if len(cmc.mutation.BazelInvocationIDs()) == 0 {
		return &ValidationError{Name: "bazel_invocation", err: errors.New(`ent: missing required edge "ConnectionMetadata.bazel_invocation"`)}
	}
	return nil
}

func (cmc *ConnectionMetadataCreate) sqlSave(ctx context.Context) (*ConnectionMetadata, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *ConnectionMetadataCreate) createSpec() (*ConnectionMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &ConnectionMetadata{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(connectionmetadata.Table, sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cmc.conflict
	if value, ok := cmc.mutation.ConnectionLastOpenAt(); ok {
		_spec.SetField(connectionmetadata.FieldConnectionLastOpenAt, field.TypeTime, value)
		_node.ConnectionLastOpenAt = value
	}
	if nodes := cmc.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connectionmetadata.BazelInvocationTable,
			Columns: []string{connectionmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bazel_invocation_connection_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConnectionMetadata.Create().
//		SetConnectionLastOpenAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectionMetadataUpsert) {
//			SetConnectionLastOpenAt(v+v).
//		}).
//		Exec(ctx)
func (cmc *ConnectionMetadataCreate) OnConflict(opts ...sql.ConflictOption) *ConnectionMetadataUpsertOne {
	cmc.conflict = opts
	return &ConnectionMetadataUpsertOne{
		create: cmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConnectionMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmc *ConnectionMetadataCreate) OnConflictColumns(columns ...string) *ConnectionMetadataUpsertOne {
	cmc.conflict = append(cmc.conflict, sql.ConflictColumns(columns...))
	return &ConnectionMetadataUpsertOne{
		create: cmc,
	}
}

type (
	// ConnectionMetadataUpsertOne is the builder for "upsert"-ing
	//  one ConnectionMetadata node.
	ConnectionMetadataUpsertOne struct {
		create *ConnectionMetadataCreate
	}

	// ConnectionMetadataUpsert is the "OnConflict" setter.
	ConnectionMetadataUpsert struct {
		*sql.UpdateSet
	}
)

// SetConnectionLastOpenAt sets the "connection_last_open_at" field.
func (u *ConnectionMetadataUpsert) SetConnectionLastOpenAt(v time.Time) *ConnectionMetadataUpsert {
	u.Set(connectionmetadata.FieldConnectionLastOpenAt, v)
	return u
}

// UpdateConnectionLastOpenAt sets the "connection_last_open_at" field to the value that was provided on create.
func (u *ConnectionMetadataUpsert) UpdateConnectionLastOpenAt() *ConnectionMetadataUpsert {
	u.SetExcluded(connectionmetadata.FieldConnectionLastOpenAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ConnectionMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ConnectionMetadataUpsertOne) UpdateNewValues() *ConnectionMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConnectionMetadata.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConnectionMetadataUpsertOne) Ignore() *ConnectionMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectionMetadataUpsertOne) DoNothing() *ConnectionMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectionMetadataCreate.OnConflict
// documentation for more info.
func (u *ConnectionMetadataUpsertOne) Update(set func(*ConnectionMetadataUpsert)) *ConnectionMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectionMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetConnectionLastOpenAt sets the "connection_last_open_at" field.
func (u *ConnectionMetadataUpsertOne) SetConnectionLastOpenAt(v time.Time) *ConnectionMetadataUpsertOne {
	return u.Update(func(s *ConnectionMetadataUpsert) {
		s.SetConnectionLastOpenAt(v)
	})
}

// UpdateConnectionLastOpenAt sets the "connection_last_open_at" field to the value that was provided on create.
func (u *ConnectionMetadataUpsertOne) UpdateConnectionLastOpenAt() *ConnectionMetadataUpsertOne {
	return u.Update(func(s *ConnectionMetadataUpsert) {
		s.UpdateConnectionLastOpenAt()
	})
}

// Exec executes the query.
func (u *ConnectionMetadataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectionMetadataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectionMetadataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConnectionMetadataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConnectionMetadataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConnectionMetadataCreateBulk is the builder for creating many ConnectionMetadata entities in bulk.
type ConnectionMetadataCreateBulk struct {
	config
	err      error
	builders []*ConnectionMetadataCreate
	conflict []sql.ConflictOption
}

// Save creates the ConnectionMetadata entities in the database.
func (cmcb *ConnectionMetadataCreateBulk) Save(ctx context.Context) ([]*ConnectionMetadata, error) {
	if cmcb.err != nil {
		return nil, cmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*ConnectionMetadata, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectionMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *ConnectionMetadataCreateBulk) SaveX(ctx context.Context) []*ConnectionMetadata {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *ConnectionMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *ConnectionMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConnectionMetadata.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectionMetadataUpsert) {
//			SetConnectionLastOpenAt(v+v).
//		}).
//		Exec(ctx)
func (cmcb *ConnectionMetadataCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConnectionMetadataUpsertBulk {
	cmcb.conflict = opts
	return &ConnectionMetadataUpsertBulk{
		create: cmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConnectionMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmcb *ConnectionMetadataCreateBulk) OnConflictColumns(columns ...string) *ConnectionMetadataUpsertBulk {
	cmcb.conflict = append(cmcb.conflict, sql.ConflictColumns(columns...))
	return &ConnectionMetadataUpsertBulk{
		create: cmcb,
	}
}

// ConnectionMetadataUpsertBulk is the builder for "upsert"-ing
// a bulk of ConnectionMetadata nodes.
type ConnectionMetadataUpsertBulk struct {
	create *ConnectionMetadataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ConnectionMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ConnectionMetadataUpsertBulk) UpdateNewValues() *ConnectionMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConnectionMetadata.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConnectionMetadataUpsertBulk) Ignore() *ConnectionMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectionMetadataUpsertBulk) DoNothing() *ConnectionMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectionMetadataCreateBulk.OnConflict
// documentation for more info.
func (u *ConnectionMetadataUpsertBulk) Update(set func(*ConnectionMetadataUpsert)) *ConnectionMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectionMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetConnectionLastOpenAt sets the "connection_last_open_at" field.
func (u *ConnectionMetadataUpsertBulk) SetConnectionLastOpenAt(v time.Time) *ConnectionMetadataUpsertBulk {
	return u.Update(func(s *ConnectionMetadataUpsert) {
		s.SetConnectionLastOpenAt(v)
	})
}

// UpdateConnectionLastOpenAt sets the "connection_last_open_at" field to the value that was provided on create.
func (u *ConnectionMetadataUpsertBulk) UpdateConnectionLastOpenAt() *ConnectionMetadataUpsertBulk {
	return u.Update(func(s *ConnectionMetadataUpsert) {
		s.UpdateConnectionLastOpenAt()
	})
}

// Exec executes the query.
func (u *ConnectionMetadataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConnectionMetadataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectionMetadataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectionMetadataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
