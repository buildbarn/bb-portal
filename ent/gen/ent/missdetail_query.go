// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/actioncachestatistics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/missdetail"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// MissDetailQuery is the builder for querying MissDetail entities.
type MissDetailQuery struct {
	config
	ctx                       *QueryContext
	order                     []missdetail.OrderOption
	inters                    []Interceptor
	predicates                []predicate.MissDetail
	withActionCacheStatistics *ActionCacheStatisticsQuery
	withFKs                   bool
	loadTotal                 []func(context.Context, []*MissDetail) error
	modifiers                 []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MissDetailQuery builder.
func (mdq *MissDetailQuery) Where(ps ...predicate.MissDetail) *MissDetailQuery {
	mdq.predicates = append(mdq.predicates, ps...)
	return mdq
}

// Limit the number of records to be returned by this query.
func (mdq *MissDetailQuery) Limit(limit int) *MissDetailQuery {
	mdq.ctx.Limit = &limit
	return mdq
}

// Offset to start from.
func (mdq *MissDetailQuery) Offset(offset int) *MissDetailQuery {
	mdq.ctx.Offset = &offset
	return mdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mdq *MissDetailQuery) Unique(unique bool) *MissDetailQuery {
	mdq.ctx.Unique = &unique
	return mdq
}

// Order specifies how the records should be ordered.
func (mdq *MissDetailQuery) Order(o ...missdetail.OrderOption) *MissDetailQuery {
	mdq.order = append(mdq.order, o...)
	return mdq
}

// QueryActionCacheStatistics chains the current query on the "action_cache_statistics" edge.
func (mdq *MissDetailQuery) QueryActionCacheStatistics() *ActionCacheStatisticsQuery {
	query := (&ActionCacheStatisticsClient{config: mdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(missdetail.Table, missdetail.FieldID, selector),
			sqlgraph.To(actioncachestatistics.Table, actioncachestatistics.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, missdetail.ActionCacheStatisticsTable, missdetail.ActionCacheStatisticsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MissDetail entity from the query.
// Returns a *NotFoundError when no MissDetail was found.
func (mdq *MissDetailQuery) First(ctx context.Context) (*MissDetail, error) {
	nodes, err := mdq.Limit(1).All(setContextOp(ctx, mdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{missdetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mdq *MissDetailQuery) FirstX(ctx context.Context) *MissDetail {
	node, err := mdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MissDetail ID from the query.
// Returns a *NotFoundError when no MissDetail ID was found.
func (mdq *MissDetailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mdq.Limit(1).IDs(setContextOp(ctx, mdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{missdetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mdq *MissDetailQuery) FirstIDX(ctx context.Context) int {
	id, err := mdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MissDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MissDetail entity is found.
// Returns a *NotFoundError when no MissDetail entities are found.
func (mdq *MissDetailQuery) Only(ctx context.Context) (*MissDetail, error) {
	nodes, err := mdq.Limit(2).All(setContextOp(ctx, mdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{missdetail.Label}
	default:
		return nil, &NotSingularError{missdetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mdq *MissDetailQuery) OnlyX(ctx context.Context) *MissDetail {
	node, err := mdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MissDetail ID in the query.
// Returns a *NotSingularError when more than one MissDetail ID is found.
// Returns a *NotFoundError when no entities are found.
func (mdq *MissDetailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mdq.Limit(2).IDs(setContextOp(ctx, mdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{missdetail.Label}
	default:
		err = &NotSingularError{missdetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mdq *MissDetailQuery) OnlyIDX(ctx context.Context) int {
	id, err := mdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MissDetails.
func (mdq *MissDetailQuery) All(ctx context.Context) ([]*MissDetail, error) {
	ctx = setContextOp(ctx, mdq.ctx, ent.OpQueryAll)
	if err := mdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MissDetail, *MissDetailQuery]()
	return withInterceptors[[]*MissDetail](ctx, mdq, qr, mdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mdq *MissDetailQuery) AllX(ctx context.Context) []*MissDetail {
	nodes, err := mdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MissDetail IDs.
func (mdq *MissDetailQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mdq.ctx.Unique == nil && mdq.path != nil {
		mdq.Unique(true)
	}
	ctx = setContextOp(ctx, mdq.ctx, ent.OpQueryIDs)
	if err = mdq.Select(missdetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mdq *MissDetailQuery) IDsX(ctx context.Context) []int {
	ids, err := mdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mdq *MissDetailQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mdq.ctx, ent.OpQueryCount)
	if err := mdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mdq, querierCount[*MissDetailQuery](), mdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mdq *MissDetailQuery) CountX(ctx context.Context) int {
	count, err := mdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mdq *MissDetailQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mdq.ctx, ent.OpQueryExist)
	switch _, err := mdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mdq *MissDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := mdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MissDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mdq *MissDetailQuery) Clone() *MissDetailQuery {
	if mdq == nil {
		return nil
	}
	return &MissDetailQuery{
		config:                    mdq.config,
		ctx:                       mdq.ctx.Clone(),
		order:                     append([]missdetail.OrderOption{}, mdq.order...),
		inters:                    append([]Interceptor{}, mdq.inters...),
		predicates:                append([]predicate.MissDetail{}, mdq.predicates...),
		withActionCacheStatistics: mdq.withActionCacheStatistics.Clone(),
		// clone intermediate query.
		sql:       mdq.sql.Clone(),
		path:      mdq.path,
		modifiers: append([]func(*sql.Selector){}, mdq.modifiers...),
	}
}

// WithActionCacheStatistics tells the query-builder to eager-load the nodes that are connected to
// the "action_cache_statistics" edge. The optional arguments are used to configure the query builder of the edge.
func (mdq *MissDetailQuery) WithActionCacheStatistics(opts ...func(*ActionCacheStatisticsQuery)) *MissDetailQuery {
	query := (&ActionCacheStatisticsClient{config: mdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mdq.withActionCacheStatistics = query
	return mdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Reason missdetail.Reason `json:"reason,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MissDetail.Query().
//		GroupBy(missdetail.FieldReason).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mdq *MissDetailQuery) GroupBy(field string, fields ...string) *MissDetailGroupBy {
	mdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MissDetailGroupBy{build: mdq}
	grbuild.flds = &mdq.ctx.Fields
	grbuild.label = missdetail.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Reason missdetail.Reason `json:"reason,omitempty"`
//	}
//
//	client.MissDetail.Query().
//		Select(missdetail.FieldReason).
//		Scan(ctx, &v)
func (mdq *MissDetailQuery) Select(fields ...string) *MissDetailSelect {
	mdq.ctx.Fields = append(mdq.ctx.Fields, fields...)
	sbuild := &MissDetailSelect{MissDetailQuery: mdq}
	sbuild.label = missdetail.Label
	sbuild.flds, sbuild.scan = &mdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MissDetailSelect configured with the given aggregations.
func (mdq *MissDetailQuery) Aggregate(fns ...AggregateFunc) *MissDetailSelect {
	return mdq.Select().Aggregate(fns...)
}

func (mdq *MissDetailQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mdq); err != nil {
				return err
			}
		}
	}
	for _, f := range mdq.ctx.Fields {
		if !missdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mdq.path != nil {
		prev, err := mdq.path(ctx)
		if err != nil {
			return err
		}
		mdq.sql = prev
	}
	return nil
}

func (mdq *MissDetailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MissDetail, error) {
	var (
		nodes       = []*MissDetail{}
		withFKs     = mdq.withFKs
		_spec       = mdq.querySpec()
		loadedTypes = [1]bool{
			mdq.withActionCacheStatistics != nil,
		}
	)
	if mdq.withActionCacheStatistics != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, missdetail.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MissDetail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MissDetail{config: mdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mdq.modifiers) > 0 {
		_spec.Modifiers = mdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mdq.withActionCacheStatistics; query != nil {
		if err := mdq.loadActionCacheStatistics(ctx, query, nodes, nil,
			func(n *MissDetail, e *ActionCacheStatistics) { n.Edges.ActionCacheStatistics = e }); err != nil {
			return nil, err
		}
	}
	for i := range mdq.loadTotal {
		if err := mdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mdq *MissDetailQuery) loadActionCacheStatistics(ctx context.Context, query *ActionCacheStatisticsQuery, nodes []*MissDetail, init func(*MissDetail), assign func(*MissDetail, *ActionCacheStatistics)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MissDetail)
	for i := range nodes {
		if nodes[i].action_cache_statistics_miss_details == nil {
			continue
		}
		fk := *nodes[i].action_cache_statistics_miss_details
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(actioncachestatistics.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "action_cache_statistics_miss_details" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mdq *MissDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mdq.querySpec()
	if len(mdq.modifiers) > 0 {
		_spec.Modifiers = mdq.modifiers
	}
	_spec.Node.Columns = mdq.ctx.Fields
	if len(mdq.ctx.Fields) > 0 {
		_spec.Unique = mdq.ctx.Unique != nil && *mdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mdq.driver, _spec)
}

func (mdq *MissDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(missdetail.Table, missdetail.Columns, sqlgraph.NewFieldSpec(missdetail.FieldID, field.TypeInt))
	_spec.From = mdq.sql
	if unique := mdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mdq.path != nil {
		_spec.Unique = true
	}
	if fields := mdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, missdetail.FieldID)
		for i := range fields {
			if fields[i] != missdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mdq *MissDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mdq.driver.Dialect())
	t1 := builder.Table(missdetail.Table)
	columns := mdq.ctx.Fields
	if len(columns) == 0 {
		columns = missdetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mdq.sql != nil {
		selector = mdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mdq.ctx.Unique != nil && *mdq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range mdq.modifiers {
		m(selector)
	}
	for _, p := range mdq.predicates {
		p(selector)
	}
	for _, p := range mdq.order {
		p(selector)
	}
	if offset := mdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mdq *MissDetailQuery) Modify(modifiers ...func(s *sql.Selector)) *MissDetailSelect {
	mdq.modifiers = append(mdq.modifiers, modifiers...)
	return mdq.Select()
}

// MissDetailGroupBy is the group-by builder for MissDetail entities.
type MissDetailGroupBy struct {
	selector
	build *MissDetailQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mdgb *MissDetailGroupBy) Aggregate(fns ...AggregateFunc) *MissDetailGroupBy {
	mdgb.fns = append(mdgb.fns, fns...)
	return mdgb
}

// Scan applies the selector query and scans the result into the given value.
func (mdgb *MissDetailGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mdgb.build.ctx, ent.OpQueryGroupBy)
	if err := mdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissDetailQuery, *MissDetailGroupBy](ctx, mdgb.build, mdgb, mdgb.build.inters, v)
}

func (mdgb *MissDetailGroupBy) sqlScan(ctx context.Context, root *MissDetailQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mdgb.fns))
	for _, fn := range mdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mdgb.flds)+len(mdgb.fns))
		for _, f := range *mdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MissDetailSelect is the builder for selecting fields of MissDetail entities.
type MissDetailSelect struct {
	*MissDetailQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mds *MissDetailSelect) Aggregate(fns ...AggregateFunc) *MissDetailSelect {
	mds.fns = append(mds.fns, fns...)
	return mds
}

// Scan applies the selector query and scans the result into the given value.
func (mds *MissDetailSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mds.ctx, ent.OpQuerySelect)
	if err := mds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MissDetailQuery, *MissDetailSelect](ctx, mds.MissDetailQuery, mds, mds.inters, v)
}

func (mds *MissDetailSelect) sqlScan(ctx context.Context, root *MissDetailQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mds.fns))
	for _, fn := range mds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mds *MissDetailSelect) Modify(modifiers ...func(s *sql.Selector)) *MissDetailSelect {
	mds.modifiers = append(mds.modifiers, modifiers...)
	return mds
}
