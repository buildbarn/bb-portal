// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/actioncachestatistics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/actionsummary"
	"github.com/buildbarn/bb-portal/ent/gen/ent/missdetail"
)

// ActionCacheStatisticsCreate is the builder for creating a ActionCacheStatistics entity.
type ActionCacheStatisticsCreate struct {
	config
	mutation *ActionCacheStatisticsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSizeInBytes sets the "size_in_bytes" field.
func (acsc *ActionCacheStatisticsCreate) SetSizeInBytes(u uint64) *ActionCacheStatisticsCreate {
	acsc.mutation.SetSizeInBytes(u)
	return acsc
}

// SetNillableSizeInBytes sets the "size_in_bytes" field if the given value is not nil.
func (acsc *ActionCacheStatisticsCreate) SetNillableSizeInBytes(u *uint64) *ActionCacheStatisticsCreate {
	if u != nil {
		acsc.SetSizeInBytes(*u)
	}
	return acsc
}

// SetSaveTimeInMs sets the "save_time_in_ms" field.
func (acsc *ActionCacheStatisticsCreate) SetSaveTimeInMs(u uint64) *ActionCacheStatisticsCreate {
	acsc.mutation.SetSaveTimeInMs(u)
	return acsc
}

// SetNillableSaveTimeInMs sets the "save_time_in_ms" field if the given value is not nil.
func (acsc *ActionCacheStatisticsCreate) SetNillableSaveTimeInMs(u *uint64) *ActionCacheStatisticsCreate {
	if u != nil {
		acsc.SetSaveTimeInMs(*u)
	}
	return acsc
}

// SetLoadTimeInMs sets the "load_time_in_ms" field.
func (acsc *ActionCacheStatisticsCreate) SetLoadTimeInMs(i int64) *ActionCacheStatisticsCreate {
	acsc.mutation.SetLoadTimeInMs(i)
	return acsc
}

// SetNillableLoadTimeInMs sets the "load_time_in_ms" field if the given value is not nil.
func (acsc *ActionCacheStatisticsCreate) SetNillableLoadTimeInMs(i *int64) *ActionCacheStatisticsCreate {
	if i != nil {
		acsc.SetLoadTimeInMs(*i)
	}
	return acsc
}

// SetHits sets the "hits" field.
func (acsc *ActionCacheStatisticsCreate) SetHits(i int32) *ActionCacheStatisticsCreate {
	acsc.mutation.SetHits(i)
	return acsc
}

// SetNillableHits sets the "hits" field if the given value is not nil.
func (acsc *ActionCacheStatisticsCreate) SetNillableHits(i *int32) *ActionCacheStatisticsCreate {
	if i != nil {
		acsc.SetHits(*i)
	}
	return acsc
}

// SetMisses sets the "misses" field.
func (acsc *ActionCacheStatisticsCreate) SetMisses(i int32) *ActionCacheStatisticsCreate {
	acsc.mutation.SetMisses(i)
	return acsc
}

// SetNillableMisses sets the "misses" field if the given value is not nil.
func (acsc *ActionCacheStatisticsCreate) SetNillableMisses(i *int32) *ActionCacheStatisticsCreate {
	if i != nil {
		acsc.SetMisses(*i)
	}
	return acsc
}

// SetActionSummaryID sets the "action_summary" edge to the ActionSummary entity by ID.
func (acsc *ActionCacheStatisticsCreate) SetActionSummaryID(id int) *ActionCacheStatisticsCreate {
	acsc.mutation.SetActionSummaryID(id)
	return acsc
}

// SetNillableActionSummaryID sets the "action_summary" edge to the ActionSummary entity by ID if the given value is not nil.
func (acsc *ActionCacheStatisticsCreate) SetNillableActionSummaryID(id *int) *ActionCacheStatisticsCreate {
	if id != nil {
		acsc = acsc.SetActionSummaryID(*id)
	}
	return acsc
}

// SetActionSummary sets the "action_summary" edge to the ActionSummary entity.
func (acsc *ActionCacheStatisticsCreate) SetActionSummary(a *ActionSummary) *ActionCacheStatisticsCreate {
	return acsc.SetActionSummaryID(a.ID)
}

// AddMissDetailIDs adds the "miss_details" edge to the MissDetail entity by IDs.
func (acsc *ActionCacheStatisticsCreate) AddMissDetailIDs(ids ...int) *ActionCacheStatisticsCreate {
	acsc.mutation.AddMissDetailIDs(ids...)
	return acsc
}

// AddMissDetails adds the "miss_details" edges to the MissDetail entity.
func (acsc *ActionCacheStatisticsCreate) AddMissDetails(m ...*MissDetail) *ActionCacheStatisticsCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return acsc.AddMissDetailIDs(ids...)
}

// Mutation returns the ActionCacheStatisticsMutation object of the builder.
func (acsc *ActionCacheStatisticsCreate) Mutation() *ActionCacheStatisticsMutation {
	return acsc.mutation
}

// Save creates the ActionCacheStatistics in the database.
func (acsc *ActionCacheStatisticsCreate) Save(ctx context.Context) (*ActionCacheStatistics, error) {
	return withHooks(ctx, acsc.sqlSave, acsc.mutation, acsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acsc *ActionCacheStatisticsCreate) SaveX(ctx context.Context) *ActionCacheStatistics {
	v, err := acsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acsc *ActionCacheStatisticsCreate) Exec(ctx context.Context) error {
	_, err := acsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acsc *ActionCacheStatisticsCreate) ExecX(ctx context.Context) {
	if err := acsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acsc *ActionCacheStatisticsCreate) check() error {
	return nil
}

func (acsc *ActionCacheStatisticsCreate) sqlSave(ctx context.Context) (*ActionCacheStatistics, error) {
	if err := acsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	acsc.mutation.id = &_node.ID
	acsc.mutation.done = true
	return _node, nil
}

func (acsc *ActionCacheStatisticsCreate) createSpec() (*ActionCacheStatistics, *sqlgraph.CreateSpec) {
	var (
		_node = &ActionCacheStatistics{config: acsc.config}
		_spec = sqlgraph.NewCreateSpec(actioncachestatistics.Table, sqlgraph.NewFieldSpec(actioncachestatistics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = acsc.conflict
	if value, ok := acsc.mutation.SizeInBytes(); ok {
		_spec.SetField(actioncachestatistics.FieldSizeInBytes, field.TypeUint64, value)
		_node.SizeInBytes = value
	}
	if value, ok := acsc.mutation.SaveTimeInMs(); ok {
		_spec.SetField(actioncachestatistics.FieldSaveTimeInMs, field.TypeUint64, value)
		_node.SaveTimeInMs = value
	}
	if value, ok := acsc.mutation.LoadTimeInMs(); ok {
		_spec.SetField(actioncachestatistics.FieldLoadTimeInMs, field.TypeInt64, value)
		_node.LoadTimeInMs = value
	}
	if value, ok := acsc.mutation.Hits(); ok {
		_spec.SetField(actioncachestatistics.FieldHits, field.TypeInt32, value)
		_node.Hits = value
	}
	if value, ok := acsc.mutation.Misses(); ok {
		_spec.SetField(actioncachestatistics.FieldMisses, field.TypeInt32, value)
		_node.Misses = value
	}
	if nodes := acsc.mutation.ActionSummaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   actioncachestatistics.ActionSummaryTable,
			Columns: []string{actioncachestatistics.ActionSummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionsummary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.action_summary_action_cache_statistics = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acsc.mutation.MissDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actioncachestatistics.MissDetailsTable,
			Columns: []string{actioncachestatistics.MissDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(missdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActionCacheStatistics.Create().
//		SetSizeInBytes(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActionCacheStatisticsUpsert) {
//			SetSizeInBytes(v+v).
//		}).
//		Exec(ctx)
func (acsc *ActionCacheStatisticsCreate) OnConflict(opts ...sql.ConflictOption) *ActionCacheStatisticsUpsertOne {
	acsc.conflict = opts
	return &ActionCacheStatisticsUpsertOne{
		create: acsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActionCacheStatistics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acsc *ActionCacheStatisticsCreate) OnConflictColumns(columns ...string) *ActionCacheStatisticsUpsertOne {
	acsc.conflict = append(acsc.conflict, sql.ConflictColumns(columns...))
	return &ActionCacheStatisticsUpsertOne{
		create: acsc,
	}
}

type (
	// ActionCacheStatisticsUpsertOne is the builder for "upsert"-ing
	//  one ActionCacheStatistics node.
	ActionCacheStatisticsUpsertOne struct {
		create *ActionCacheStatisticsCreate
	}

	// ActionCacheStatisticsUpsert is the "OnConflict" setter.
	ActionCacheStatisticsUpsert struct {
		*sql.UpdateSet
	}
)

// SetSizeInBytes sets the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsert) SetSizeInBytes(v uint64) *ActionCacheStatisticsUpsert {
	u.Set(actioncachestatistics.FieldSizeInBytes, v)
	return u
}

// UpdateSizeInBytes sets the "size_in_bytes" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsert) UpdateSizeInBytes() *ActionCacheStatisticsUpsert {
	u.SetExcluded(actioncachestatistics.FieldSizeInBytes)
	return u
}

// AddSizeInBytes adds v to the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsert) AddSizeInBytes(v uint64) *ActionCacheStatisticsUpsert {
	u.Add(actioncachestatistics.FieldSizeInBytes, v)
	return u
}

// ClearSizeInBytes clears the value of the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsert) ClearSizeInBytes() *ActionCacheStatisticsUpsert {
	u.SetNull(actioncachestatistics.FieldSizeInBytes)
	return u
}

// SetSaveTimeInMs sets the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsert) SetSaveTimeInMs(v uint64) *ActionCacheStatisticsUpsert {
	u.Set(actioncachestatistics.FieldSaveTimeInMs, v)
	return u
}

// UpdateSaveTimeInMs sets the "save_time_in_ms" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsert) UpdateSaveTimeInMs() *ActionCacheStatisticsUpsert {
	u.SetExcluded(actioncachestatistics.FieldSaveTimeInMs)
	return u
}

// AddSaveTimeInMs adds v to the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsert) AddSaveTimeInMs(v uint64) *ActionCacheStatisticsUpsert {
	u.Add(actioncachestatistics.FieldSaveTimeInMs, v)
	return u
}

// ClearSaveTimeInMs clears the value of the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsert) ClearSaveTimeInMs() *ActionCacheStatisticsUpsert {
	u.SetNull(actioncachestatistics.FieldSaveTimeInMs)
	return u
}

// SetLoadTimeInMs sets the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsert) SetLoadTimeInMs(v int64) *ActionCacheStatisticsUpsert {
	u.Set(actioncachestatistics.FieldLoadTimeInMs, v)
	return u
}

// UpdateLoadTimeInMs sets the "load_time_in_ms" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsert) UpdateLoadTimeInMs() *ActionCacheStatisticsUpsert {
	u.SetExcluded(actioncachestatistics.FieldLoadTimeInMs)
	return u
}

// AddLoadTimeInMs adds v to the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsert) AddLoadTimeInMs(v int64) *ActionCacheStatisticsUpsert {
	u.Add(actioncachestatistics.FieldLoadTimeInMs, v)
	return u
}

// ClearLoadTimeInMs clears the value of the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsert) ClearLoadTimeInMs() *ActionCacheStatisticsUpsert {
	u.SetNull(actioncachestatistics.FieldLoadTimeInMs)
	return u
}

// SetHits sets the "hits" field.
func (u *ActionCacheStatisticsUpsert) SetHits(v int32) *ActionCacheStatisticsUpsert {
	u.Set(actioncachestatistics.FieldHits, v)
	return u
}

// UpdateHits sets the "hits" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsert) UpdateHits() *ActionCacheStatisticsUpsert {
	u.SetExcluded(actioncachestatistics.FieldHits)
	return u
}

// AddHits adds v to the "hits" field.
func (u *ActionCacheStatisticsUpsert) AddHits(v int32) *ActionCacheStatisticsUpsert {
	u.Add(actioncachestatistics.FieldHits, v)
	return u
}

// ClearHits clears the value of the "hits" field.
func (u *ActionCacheStatisticsUpsert) ClearHits() *ActionCacheStatisticsUpsert {
	u.SetNull(actioncachestatistics.FieldHits)
	return u
}

// SetMisses sets the "misses" field.
func (u *ActionCacheStatisticsUpsert) SetMisses(v int32) *ActionCacheStatisticsUpsert {
	u.Set(actioncachestatistics.FieldMisses, v)
	return u
}

// UpdateMisses sets the "misses" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsert) UpdateMisses() *ActionCacheStatisticsUpsert {
	u.SetExcluded(actioncachestatistics.FieldMisses)
	return u
}

// AddMisses adds v to the "misses" field.
func (u *ActionCacheStatisticsUpsert) AddMisses(v int32) *ActionCacheStatisticsUpsert {
	u.Add(actioncachestatistics.FieldMisses, v)
	return u
}

// ClearMisses clears the value of the "misses" field.
func (u *ActionCacheStatisticsUpsert) ClearMisses() *ActionCacheStatisticsUpsert {
	u.SetNull(actioncachestatistics.FieldMisses)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ActionCacheStatistics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ActionCacheStatisticsUpsertOne) UpdateNewValues() *ActionCacheStatisticsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActionCacheStatistics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActionCacheStatisticsUpsertOne) Ignore() *ActionCacheStatisticsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActionCacheStatisticsUpsertOne) DoNothing() *ActionCacheStatisticsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActionCacheStatisticsCreate.OnConflict
// documentation for more info.
func (u *ActionCacheStatisticsUpsertOne) Update(set func(*ActionCacheStatisticsUpsert)) *ActionCacheStatisticsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActionCacheStatisticsUpsert{UpdateSet: update})
	}))
	return u
}

// SetSizeInBytes sets the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsertOne) SetSizeInBytes(v uint64) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetSizeInBytes(v)
	})
}

// AddSizeInBytes adds v to the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsertOne) AddSizeInBytes(v uint64) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddSizeInBytes(v)
	})
}

// UpdateSizeInBytes sets the "size_in_bytes" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertOne) UpdateSizeInBytes() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateSizeInBytes()
	})
}

// ClearSizeInBytes clears the value of the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsertOne) ClearSizeInBytes() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearSizeInBytes()
	})
}

// SetSaveTimeInMs sets the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertOne) SetSaveTimeInMs(v uint64) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetSaveTimeInMs(v)
	})
}

// AddSaveTimeInMs adds v to the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertOne) AddSaveTimeInMs(v uint64) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddSaveTimeInMs(v)
	})
}

// UpdateSaveTimeInMs sets the "save_time_in_ms" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertOne) UpdateSaveTimeInMs() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateSaveTimeInMs()
	})
}

// ClearSaveTimeInMs clears the value of the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertOne) ClearSaveTimeInMs() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearSaveTimeInMs()
	})
}

// SetLoadTimeInMs sets the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertOne) SetLoadTimeInMs(v int64) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetLoadTimeInMs(v)
	})
}

// AddLoadTimeInMs adds v to the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertOne) AddLoadTimeInMs(v int64) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddLoadTimeInMs(v)
	})
}

// UpdateLoadTimeInMs sets the "load_time_in_ms" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertOne) UpdateLoadTimeInMs() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateLoadTimeInMs()
	})
}

// ClearLoadTimeInMs clears the value of the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertOne) ClearLoadTimeInMs() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearLoadTimeInMs()
	})
}

// SetHits sets the "hits" field.
func (u *ActionCacheStatisticsUpsertOne) SetHits(v int32) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetHits(v)
	})
}

// AddHits adds v to the "hits" field.
func (u *ActionCacheStatisticsUpsertOne) AddHits(v int32) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddHits(v)
	})
}

// UpdateHits sets the "hits" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertOne) UpdateHits() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateHits()
	})
}

// ClearHits clears the value of the "hits" field.
func (u *ActionCacheStatisticsUpsertOne) ClearHits() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearHits()
	})
}

// SetMisses sets the "misses" field.
func (u *ActionCacheStatisticsUpsertOne) SetMisses(v int32) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetMisses(v)
	})
}

// AddMisses adds v to the "misses" field.
func (u *ActionCacheStatisticsUpsertOne) AddMisses(v int32) *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddMisses(v)
	})
}

// UpdateMisses sets the "misses" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertOne) UpdateMisses() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateMisses()
	})
}

// ClearMisses clears the value of the "misses" field.
func (u *ActionCacheStatisticsUpsertOne) ClearMisses() *ActionCacheStatisticsUpsertOne {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearMisses()
	})
}

// Exec executes the query.
func (u *ActionCacheStatisticsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActionCacheStatisticsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActionCacheStatisticsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActionCacheStatisticsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActionCacheStatisticsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActionCacheStatisticsCreateBulk is the builder for creating many ActionCacheStatistics entities in bulk.
type ActionCacheStatisticsCreateBulk struct {
	config
	err      error
	builders []*ActionCacheStatisticsCreate
	conflict []sql.ConflictOption
}

// Save creates the ActionCacheStatistics entities in the database.
func (acscb *ActionCacheStatisticsCreateBulk) Save(ctx context.Context) ([]*ActionCacheStatistics, error) {
	if acscb.err != nil {
		return nil, acscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acscb.builders))
	nodes := make([]*ActionCacheStatistics, len(acscb.builders))
	mutators := make([]Mutator, len(acscb.builders))
	for i := range acscb.builders {
		func(i int, root context.Context) {
			builder := acscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActionCacheStatisticsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acscb *ActionCacheStatisticsCreateBulk) SaveX(ctx context.Context) []*ActionCacheStatistics {
	v, err := acscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acscb *ActionCacheStatisticsCreateBulk) Exec(ctx context.Context) error {
	_, err := acscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acscb *ActionCacheStatisticsCreateBulk) ExecX(ctx context.Context) {
	if err := acscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActionCacheStatistics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActionCacheStatisticsUpsert) {
//			SetSizeInBytes(v+v).
//		}).
//		Exec(ctx)
func (acscb *ActionCacheStatisticsCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActionCacheStatisticsUpsertBulk {
	acscb.conflict = opts
	return &ActionCacheStatisticsUpsertBulk{
		create: acscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActionCacheStatistics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acscb *ActionCacheStatisticsCreateBulk) OnConflictColumns(columns ...string) *ActionCacheStatisticsUpsertBulk {
	acscb.conflict = append(acscb.conflict, sql.ConflictColumns(columns...))
	return &ActionCacheStatisticsUpsertBulk{
		create: acscb,
	}
}

// ActionCacheStatisticsUpsertBulk is the builder for "upsert"-ing
// a bulk of ActionCacheStatistics nodes.
type ActionCacheStatisticsUpsertBulk struct {
	create *ActionCacheStatisticsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ActionCacheStatistics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ActionCacheStatisticsUpsertBulk) UpdateNewValues() *ActionCacheStatisticsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActionCacheStatistics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActionCacheStatisticsUpsertBulk) Ignore() *ActionCacheStatisticsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActionCacheStatisticsUpsertBulk) DoNothing() *ActionCacheStatisticsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActionCacheStatisticsCreateBulk.OnConflict
// documentation for more info.
func (u *ActionCacheStatisticsUpsertBulk) Update(set func(*ActionCacheStatisticsUpsert)) *ActionCacheStatisticsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActionCacheStatisticsUpsert{UpdateSet: update})
	}))
	return u
}

// SetSizeInBytes sets the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsertBulk) SetSizeInBytes(v uint64) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetSizeInBytes(v)
	})
}

// AddSizeInBytes adds v to the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsertBulk) AddSizeInBytes(v uint64) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddSizeInBytes(v)
	})
}

// UpdateSizeInBytes sets the "size_in_bytes" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertBulk) UpdateSizeInBytes() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateSizeInBytes()
	})
}

// ClearSizeInBytes clears the value of the "size_in_bytes" field.
func (u *ActionCacheStatisticsUpsertBulk) ClearSizeInBytes() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearSizeInBytes()
	})
}

// SetSaveTimeInMs sets the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertBulk) SetSaveTimeInMs(v uint64) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetSaveTimeInMs(v)
	})
}

// AddSaveTimeInMs adds v to the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertBulk) AddSaveTimeInMs(v uint64) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddSaveTimeInMs(v)
	})
}

// UpdateSaveTimeInMs sets the "save_time_in_ms" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertBulk) UpdateSaveTimeInMs() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateSaveTimeInMs()
	})
}

// ClearSaveTimeInMs clears the value of the "save_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertBulk) ClearSaveTimeInMs() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearSaveTimeInMs()
	})
}

// SetLoadTimeInMs sets the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertBulk) SetLoadTimeInMs(v int64) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetLoadTimeInMs(v)
	})
}

// AddLoadTimeInMs adds v to the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertBulk) AddLoadTimeInMs(v int64) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddLoadTimeInMs(v)
	})
}

// UpdateLoadTimeInMs sets the "load_time_in_ms" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertBulk) UpdateLoadTimeInMs() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateLoadTimeInMs()
	})
}

// ClearLoadTimeInMs clears the value of the "load_time_in_ms" field.
func (u *ActionCacheStatisticsUpsertBulk) ClearLoadTimeInMs() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearLoadTimeInMs()
	})
}

// SetHits sets the "hits" field.
func (u *ActionCacheStatisticsUpsertBulk) SetHits(v int32) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetHits(v)
	})
}

// AddHits adds v to the "hits" field.
func (u *ActionCacheStatisticsUpsertBulk) AddHits(v int32) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddHits(v)
	})
}

// UpdateHits sets the "hits" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertBulk) UpdateHits() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateHits()
	})
}

// ClearHits clears the value of the "hits" field.
func (u *ActionCacheStatisticsUpsertBulk) ClearHits() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearHits()
	})
}

// SetMisses sets the "misses" field.
func (u *ActionCacheStatisticsUpsertBulk) SetMisses(v int32) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.SetMisses(v)
	})
}

// AddMisses adds v to the "misses" field.
func (u *ActionCacheStatisticsUpsertBulk) AddMisses(v int32) *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.AddMisses(v)
	})
}

// UpdateMisses sets the "misses" field to the value that was provided on create.
func (u *ActionCacheStatisticsUpsertBulk) UpdateMisses() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.UpdateMisses()
	})
}

// ClearMisses clears the value of the "misses" field.
func (u *ActionCacheStatisticsUpsertBulk) ClearMisses() *ActionCacheStatisticsUpsertBulk {
	return u.Update(func(s *ActionCacheStatisticsUpsert) {
		s.ClearMisses()
	})
}

// Exec executes the query.
func (u *ActionCacheStatisticsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActionCacheStatisticsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActionCacheStatisticsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActionCacheStatisticsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
