// Code generated by ent, DO NOT EDIT.

package target

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldID, id))
}

// TargetKind applies equality check predicate on the "target_kind" field. It's identical to TargetKindEQ.
func TargetKind(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldTargetKind, v))
}

// Success applies equality check predicate on the "success" field. It's identical to SuccessEQ.
func Success(v bool) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldSuccess, v))
}

// TestTimeout applies equality check predicate on the "test_timeout" field. It's identical to TestTimeoutEQ.
func TestTimeout(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldTestTimeout, v))
}

// StartTimeInMs applies equality check predicate on the "start_time_in_ms" field. It's identical to StartTimeInMsEQ.
func StartTimeInMs(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldStartTimeInMs, v))
}

// EndTimeInMs applies equality check predicate on the "end_time_in_ms" field. It's identical to EndTimeInMsEQ.
func EndTimeInMs(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldEndTimeInMs, v))
}

// DurationInMs applies equality check predicate on the "duration_in_ms" field. It's identical to DurationInMsEQ.
func DurationInMs(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldDurationInMs, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.Target {
	return predicate.Target(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.Target {
	return predicate.Target(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.Target {
	return predicate.Target(sql.FieldContainsFold(FieldLabel, v))
}

// TagIsNil applies the IsNil predicate on the "tag" field.
func TagIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldTag))
}

// TagNotNil applies the NotNil predicate on the "tag" field.
func TagNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldTag))
}

// TargetKindEQ applies the EQ predicate on the "target_kind" field.
func TargetKindEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldTargetKind, v))
}

// TargetKindNEQ applies the NEQ predicate on the "target_kind" field.
func TargetKindNEQ(v string) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldTargetKind, v))
}

// TargetKindIn applies the In predicate on the "target_kind" field.
func TargetKindIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldTargetKind, vs...))
}

// TargetKindNotIn applies the NotIn predicate on the "target_kind" field.
func TargetKindNotIn(vs ...string) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldTargetKind, vs...))
}

// TargetKindGT applies the GT predicate on the "target_kind" field.
func TargetKindGT(v string) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldTargetKind, v))
}

// TargetKindGTE applies the GTE predicate on the "target_kind" field.
func TargetKindGTE(v string) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldTargetKind, v))
}

// TargetKindLT applies the LT predicate on the "target_kind" field.
func TargetKindLT(v string) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldTargetKind, v))
}

// TargetKindLTE applies the LTE predicate on the "target_kind" field.
func TargetKindLTE(v string) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldTargetKind, v))
}

// TargetKindContains applies the Contains predicate on the "target_kind" field.
func TargetKindContains(v string) predicate.Target {
	return predicate.Target(sql.FieldContains(FieldTargetKind, v))
}

// TargetKindHasPrefix applies the HasPrefix predicate on the "target_kind" field.
func TargetKindHasPrefix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasPrefix(FieldTargetKind, v))
}

// TargetKindHasSuffix applies the HasSuffix predicate on the "target_kind" field.
func TargetKindHasSuffix(v string) predicate.Target {
	return predicate.Target(sql.FieldHasSuffix(FieldTargetKind, v))
}

// TargetKindIsNil applies the IsNil predicate on the "target_kind" field.
func TargetKindIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldTargetKind))
}

// TargetKindNotNil applies the NotNil predicate on the "target_kind" field.
func TargetKindNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldTargetKind))
}

// TargetKindEqualFold applies the EqualFold predicate on the "target_kind" field.
func TargetKindEqualFold(v string) predicate.Target {
	return predicate.Target(sql.FieldEqualFold(FieldTargetKind, v))
}

// TargetKindContainsFold applies the ContainsFold predicate on the "target_kind" field.
func TargetKindContainsFold(v string) predicate.Target {
	return predicate.Target(sql.FieldContainsFold(FieldTargetKind, v))
}

// TestSizeEQ applies the EQ predicate on the "test_size" field.
func TestSizeEQ(v TestSize) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldTestSize, v))
}

// TestSizeNEQ applies the NEQ predicate on the "test_size" field.
func TestSizeNEQ(v TestSize) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldTestSize, v))
}

// TestSizeIn applies the In predicate on the "test_size" field.
func TestSizeIn(vs ...TestSize) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldTestSize, vs...))
}

// TestSizeNotIn applies the NotIn predicate on the "test_size" field.
func TestSizeNotIn(vs ...TestSize) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldTestSize, vs...))
}

// TestSizeIsNil applies the IsNil predicate on the "test_size" field.
func TestSizeIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldTestSize))
}

// TestSizeNotNil applies the NotNil predicate on the "test_size" field.
func TestSizeNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldTestSize))
}

// SuccessEQ applies the EQ predicate on the "success" field.
func SuccessEQ(v bool) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldSuccess, v))
}

// SuccessNEQ applies the NEQ predicate on the "success" field.
func SuccessNEQ(v bool) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldSuccess, v))
}

// SuccessIsNil applies the IsNil predicate on the "success" field.
func SuccessIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldSuccess))
}

// SuccessNotNil applies the NotNil predicate on the "success" field.
func SuccessNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldSuccess))
}

// TestTimeoutEQ applies the EQ predicate on the "test_timeout" field.
func TestTimeoutEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldTestTimeout, v))
}

// TestTimeoutNEQ applies the NEQ predicate on the "test_timeout" field.
func TestTimeoutNEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldTestTimeout, v))
}

// TestTimeoutIn applies the In predicate on the "test_timeout" field.
func TestTimeoutIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldTestTimeout, vs...))
}

// TestTimeoutNotIn applies the NotIn predicate on the "test_timeout" field.
func TestTimeoutNotIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldTestTimeout, vs...))
}

// TestTimeoutGT applies the GT predicate on the "test_timeout" field.
func TestTimeoutGT(v int64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldTestTimeout, v))
}

// TestTimeoutGTE applies the GTE predicate on the "test_timeout" field.
func TestTimeoutGTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldTestTimeout, v))
}

// TestTimeoutLT applies the LT predicate on the "test_timeout" field.
func TestTimeoutLT(v int64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldTestTimeout, v))
}

// TestTimeoutLTE applies the LTE predicate on the "test_timeout" field.
func TestTimeoutLTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldTestTimeout, v))
}

// TestTimeoutIsNil applies the IsNil predicate on the "test_timeout" field.
func TestTimeoutIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldTestTimeout))
}

// TestTimeoutNotNil applies the NotNil predicate on the "test_timeout" field.
func TestTimeoutNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldTestTimeout))
}

// StartTimeInMsEQ applies the EQ predicate on the "start_time_in_ms" field.
func StartTimeInMsEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldStartTimeInMs, v))
}

// StartTimeInMsNEQ applies the NEQ predicate on the "start_time_in_ms" field.
func StartTimeInMsNEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldStartTimeInMs, v))
}

// StartTimeInMsIn applies the In predicate on the "start_time_in_ms" field.
func StartTimeInMsIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldStartTimeInMs, vs...))
}

// StartTimeInMsNotIn applies the NotIn predicate on the "start_time_in_ms" field.
func StartTimeInMsNotIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldStartTimeInMs, vs...))
}

// StartTimeInMsGT applies the GT predicate on the "start_time_in_ms" field.
func StartTimeInMsGT(v int64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldStartTimeInMs, v))
}

// StartTimeInMsGTE applies the GTE predicate on the "start_time_in_ms" field.
func StartTimeInMsGTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldStartTimeInMs, v))
}

// StartTimeInMsLT applies the LT predicate on the "start_time_in_ms" field.
func StartTimeInMsLT(v int64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldStartTimeInMs, v))
}

// StartTimeInMsLTE applies the LTE predicate on the "start_time_in_ms" field.
func StartTimeInMsLTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldStartTimeInMs, v))
}

// StartTimeInMsIsNil applies the IsNil predicate on the "start_time_in_ms" field.
func StartTimeInMsIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldStartTimeInMs))
}

// StartTimeInMsNotNil applies the NotNil predicate on the "start_time_in_ms" field.
func StartTimeInMsNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldStartTimeInMs))
}

// EndTimeInMsEQ applies the EQ predicate on the "end_time_in_ms" field.
func EndTimeInMsEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldEndTimeInMs, v))
}

// EndTimeInMsNEQ applies the NEQ predicate on the "end_time_in_ms" field.
func EndTimeInMsNEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldEndTimeInMs, v))
}

// EndTimeInMsIn applies the In predicate on the "end_time_in_ms" field.
func EndTimeInMsIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldEndTimeInMs, vs...))
}

// EndTimeInMsNotIn applies the NotIn predicate on the "end_time_in_ms" field.
func EndTimeInMsNotIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldEndTimeInMs, vs...))
}

// EndTimeInMsGT applies the GT predicate on the "end_time_in_ms" field.
func EndTimeInMsGT(v int64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldEndTimeInMs, v))
}

// EndTimeInMsGTE applies the GTE predicate on the "end_time_in_ms" field.
func EndTimeInMsGTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldEndTimeInMs, v))
}

// EndTimeInMsLT applies the LT predicate on the "end_time_in_ms" field.
func EndTimeInMsLT(v int64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldEndTimeInMs, v))
}

// EndTimeInMsLTE applies the LTE predicate on the "end_time_in_ms" field.
func EndTimeInMsLTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldEndTimeInMs, v))
}

// EndTimeInMsIsNil applies the IsNil predicate on the "end_time_in_ms" field.
func EndTimeInMsIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldEndTimeInMs))
}

// EndTimeInMsNotNil applies the NotNil predicate on the "end_time_in_ms" field.
func EndTimeInMsNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldEndTimeInMs))
}

// DurationInMsEQ applies the EQ predicate on the "duration_in_ms" field.
func DurationInMsEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldDurationInMs, v))
}

// DurationInMsNEQ applies the NEQ predicate on the "duration_in_ms" field.
func DurationInMsNEQ(v int64) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldDurationInMs, v))
}

// DurationInMsIn applies the In predicate on the "duration_in_ms" field.
func DurationInMsIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldDurationInMs, vs...))
}

// DurationInMsNotIn applies the NotIn predicate on the "duration_in_ms" field.
func DurationInMsNotIn(vs ...int64) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldDurationInMs, vs...))
}

// DurationInMsGT applies the GT predicate on the "duration_in_ms" field.
func DurationInMsGT(v int64) predicate.Target {
	return predicate.Target(sql.FieldGT(FieldDurationInMs, v))
}

// DurationInMsGTE applies the GTE predicate on the "duration_in_ms" field.
func DurationInMsGTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldGTE(FieldDurationInMs, v))
}

// DurationInMsLT applies the LT predicate on the "duration_in_ms" field.
func DurationInMsLT(v int64) predicate.Target {
	return predicate.Target(sql.FieldLT(FieldDurationInMs, v))
}

// DurationInMsLTE applies the LTE predicate on the "duration_in_ms" field.
func DurationInMsLTE(v int64) predicate.Target {
	return predicate.Target(sql.FieldLTE(FieldDurationInMs, v))
}

// DurationInMsIsNil applies the IsNil predicate on the "duration_in_ms" field.
func DurationInMsIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldDurationInMs))
}

// DurationInMsNotNil applies the NotNil predicate on the "duration_in_ms" field.
func DurationInMsNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldDurationInMs))
}

// AbortReasonEQ applies the EQ predicate on the "abort_reason" field.
func AbortReasonEQ(v AbortReason) predicate.Target {
	return predicate.Target(sql.FieldEQ(FieldAbortReason, v))
}

// AbortReasonNEQ applies the NEQ predicate on the "abort_reason" field.
func AbortReasonNEQ(v AbortReason) predicate.Target {
	return predicate.Target(sql.FieldNEQ(FieldAbortReason, v))
}

// AbortReasonIn applies the In predicate on the "abort_reason" field.
func AbortReasonIn(vs ...AbortReason) predicate.Target {
	return predicate.Target(sql.FieldIn(FieldAbortReason, vs...))
}

// AbortReasonNotIn applies the NotIn predicate on the "abort_reason" field.
func AbortReasonNotIn(vs ...AbortReason) predicate.Target {
	return predicate.Target(sql.FieldNotIn(FieldAbortReason, vs...))
}

// AbortReasonIsNil applies the IsNil predicate on the "abort_reason" field.
func AbortReasonIsNil() predicate.Target {
	return predicate.Target(sql.FieldIsNull(FieldAbortReason))
}

// AbortReasonNotNil applies the NotNil predicate on the "abort_reason" field.
func AbortReasonNotNil() predicate.Target {
	return predicate.Target(sql.FieldNotNull(FieldAbortReason))
}

// HasBazelInvocation applies the HasEdge predicate on the "bazel_invocation" edge.
func HasBazelInvocation() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BazelInvocationTable, BazelInvocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBazelInvocationWith applies the HasEdge predicate on the "bazel_invocation" edge with a given conditions (other predicates).
func HasBazelInvocationWith(preds ...predicate.BazelInvocation) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		step := newBazelInvocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Target) predicate.Target {
	return predicate.Target(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Target) predicate.Target {
	return predicate.Target(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Target) predicate.Target {
	return predicate.Target(sql.NotPredicates(p))
}
