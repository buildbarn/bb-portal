// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/connectionmetadata"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ConnectionMetadataUpdate is the builder for updating ConnectionMetadata entities.
type ConnectionMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionMetadataMutation
}

// Where appends a list predicates to the ConnectionMetadataUpdate builder.
func (cmu *ConnectionMetadataUpdate) Where(ps ...predicate.ConnectionMetadata) *ConnectionMetadataUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetConnectionLastOpenAt sets the "connection_last_open_at" field.
func (cmu *ConnectionMetadataUpdate) SetConnectionLastOpenAt(t time.Time) *ConnectionMetadataUpdate {
	cmu.mutation.SetConnectionLastOpenAt(t)
	return cmu
}

// SetNillableConnectionLastOpenAt sets the "connection_last_open_at" field if the given value is not nil.
func (cmu *ConnectionMetadataUpdate) SetNillableConnectionLastOpenAt(t *time.Time) *ConnectionMetadataUpdate {
	if t != nil {
		cmu.SetConnectionLastOpenAt(*t)
	}
	return cmu
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (cmu *ConnectionMetadataUpdate) SetBazelInvocationID(id int) *ConnectionMetadataUpdate {
	cmu.mutation.SetBazelInvocationID(id)
	return cmu
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (cmu *ConnectionMetadataUpdate) SetBazelInvocation(b *BazelInvocation) *ConnectionMetadataUpdate {
	return cmu.SetBazelInvocationID(b.ID)
}

// Mutation returns the ConnectionMetadataMutation object of the builder.
func (cmu *ConnectionMetadataUpdate) Mutation() *ConnectionMetadataMutation {
	return cmu.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (cmu *ConnectionMetadataUpdate) ClearBazelInvocation() *ConnectionMetadataUpdate {
	cmu.mutation.ClearBazelInvocation()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ConnectionMetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ConnectionMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ConnectionMetadataUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ConnectionMetadataUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *ConnectionMetadataUpdate) check() error {
	if cmu.mutation.BazelInvocationCleared() && len(cmu.mutation.BazelInvocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionMetadata.bazel_invocation"`)
	}
	return nil
}

func (cmu *ConnectionMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionmetadata.Table, connectionmetadata.Columns, sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.ConnectionLastOpenAt(); ok {
		_spec.SetField(connectionmetadata.FieldConnectionLastOpenAt, field.TypeTime, value)
	}
	if cmu.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connectionmetadata.BazelInvocationTable,
			Columns: []string{connectionmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connectionmetadata.BazelInvocationTable,
			Columns: []string{connectionmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// ConnectionMetadataUpdateOne is the builder for updating a single ConnectionMetadata entity.
type ConnectionMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionMetadataMutation
}

// SetConnectionLastOpenAt sets the "connection_last_open_at" field.
func (cmuo *ConnectionMetadataUpdateOne) SetConnectionLastOpenAt(t time.Time) *ConnectionMetadataUpdateOne {
	cmuo.mutation.SetConnectionLastOpenAt(t)
	return cmuo
}

// SetNillableConnectionLastOpenAt sets the "connection_last_open_at" field if the given value is not nil.
func (cmuo *ConnectionMetadataUpdateOne) SetNillableConnectionLastOpenAt(t *time.Time) *ConnectionMetadataUpdateOne {
	if t != nil {
		cmuo.SetConnectionLastOpenAt(*t)
	}
	return cmuo
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (cmuo *ConnectionMetadataUpdateOne) SetBazelInvocationID(id int) *ConnectionMetadataUpdateOne {
	cmuo.mutation.SetBazelInvocationID(id)
	return cmuo
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (cmuo *ConnectionMetadataUpdateOne) SetBazelInvocation(b *BazelInvocation) *ConnectionMetadataUpdateOne {
	return cmuo.SetBazelInvocationID(b.ID)
}

// Mutation returns the ConnectionMetadataMutation object of the builder.
func (cmuo *ConnectionMetadataUpdateOne) Mutation() *ConnectionMetadataMutation {
	return cmuo.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (cmuo *ConnectionMetadataUpdateOne) ClearBazelInvocation() *ConnectionMetadataUpdateOne {
	cmuo.mutation.ClearBazelInvocation()
	return cmuo
}

// Where appends a list predicates to the ConnectionMetadataUpdate builder.
func (cmuo *ConnectionMetadataUpdateOne) Where(ps ...predicate.ConnectionMetadata) *ConnectionMetadataUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ConnectionMetadataUpdateOne) Select(field string, fields ...string) *ConnectionMetadataUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ConnectionMetadata entity.
func (cmuo *ConnectionMetadataUpdateOne) Save(ctx context.Context) (*ConnectionMetadata, error) {
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ConnectionMetadataUpdateOne) SaveX(ctx context.Context) *ConnectionMetadata {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ConnectionMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ConnectionMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *ConnectionMetadataUpdateOne) check() error {
	if cmuo.mutation.BazelInvocationCleared() && len(cmuo.mutation.BazelInvocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionMetadata.bazel_invocation"`)
	}
	return nil
}

func (cmuo *ConnectionMetadataUpdateOne) sqlSave(ctx context.Context) (_node *ConnectionMetadata, err error) {
	if err := cmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionmetadata.Table, connectionmetadata.Columns, sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectionMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectionmetadata.FieldID)
		for _, f := range fields {
			if !connectionmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectionmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.ConnectionLastOpenAt(); ok {
		_spec.SetField(connectionmetadata.FieldConnectionLastOpenAt, field.TypeTime, value)
	}
	if cmuo.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connectionmetadata.BazelInvocationTable,
			Columns: []string{connectionmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connectionmetadata.BazelInvocationTable,
			Columns: []string{connectionmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConnectionMetadata{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
