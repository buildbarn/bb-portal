// Code generated by ent, DO NOT EDIT.

package filesmetric

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldLTE(FieldID, id))
}

// SizeInBytes applies equality check predicate on the "size_in_bytes" field. It's identical to SizeInBytesEQ.
func SizeInBytes(v int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldEQ(FieldSizeInBytes, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldEQ(FieldCount, v))
}

// ArtifactMetricsID applies equality check predicate on the "artifact_metrics_id" field. It's identical to ArtifactMetricsIDEQ.
func ArtifactMetricsID(v int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldEQ(FieldArtifactMetricsID, v))
}

// SizeInBytesEQ applies the EQ predicate on the "size_in_bytes" field.
func SizeInBytesEQ(v int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldEQ(FieldSizeInBytes, v))
}

// SizeInBytesNEQ applies the NEQ predicate on the "size_in_bytes" field.
func SizeInBytesNEQ(v int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNEQ(FieldSizeInBytes, v))
}

// SizeInBytesIn applies the In predicate on the "size_in_bytes" field.
func SizeInBytesIn(vs ...int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldIn(FieldSizeInBytes, vs...))
}

// SizeInBytesNotIn applies the NotIn predicate on the "size_in_bytes" field.
func SizeInBytesNotIn(vs ...int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNotIn(FieldSizeInBytes, vs...))
}

// SizeInBytesGT applies the GT predicate on the "size_in_bytes" field.
func SizeInBytesGT(v int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldGT(FieldSizeInBytes, v))
}

// SizeInBytesGTE applies the GTE predicate on the "size_in_bytes" field.
func SizeInBytesGTE(v int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldGTE(FieldSizeInBytes, v))
}

// SizeInBytesLT applies the LT predicate on the "size_in_bytes" field.
func SizeInBytesLT(v int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldLT(FieldSizeInBytes, v))
}

// SizeInBytesLTE applies the LTE predicate on the "size_in_bytes" field.
func SizeInBytesLTE(v int64) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldLTE(FieldSizeInBytes, v))
}

// SizeInBytesIsNil applies the IsNil predicate on the "size_in_bytes" field.
func SizeInBytesIsNil() predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldIsNull(FieldSizeInBytes))
}

// SizeInBytesNotNil applies the NotNil predicate on the "size_in_bytes" field.
func SizeInBytesNotNil() predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNotNull(FieldSizeInBytes))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int32) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldLTE(FieldCount, v))
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldIsNull(FieldCount))
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNotNull(FieldCount))
}

// ArtifactMetricsIDEQ applies the EQ predicate on the "artifact_metrics_id" field.
func ArtifactMetricsIDEQ(v int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldEQ(FieldArtifactMetricsID, v))
}

// ArtifactMetricsIDNEQ applies the NEQ predicate on the "artifact_metrics_id" field.
func ArtifactMetricsIDNEQ(v int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNEQ(FieldArtifactMetricsID, v))
}

// ArtifactMetricsIDIn applies the In predicate on the "artifact_metrics_id" field.
func ArtifactMetricsIDIn(vs ...int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldIn(FieldArtifactMetricsID, vs...))
}

// ArtifactMetricsIDNotIn applies the NotIn predicate on the "artifact_metrics_id" field.
func ArtifactMetricsIDNotIn(vs ...int) predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNotIn(FieldArtifactMetricsID, vs...))
}

// ArtifactMetricsIDIsNil applies the IsNil predicate on the "artifact_metrics_id" field.
func ArtifactMetricsIDIsNil() predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldIsNull(FieldArtifactMetricsID))
}

// ArtifactMetricsIDNotNil applies the NotNil predicate on the "artifact_metrics_id" field.
func ArtifactMetricsIDNotNil() predicate.FilesMetric {
	return predicate.FilesMetric(sql.FieldNotNull(FieldArtifactMetricsID))
}

// HasArtifactMetrics applies the HasEdge predicate on the "artifact_metrics" edge.
func HasArtifactMetrics() predicate.FilesMetric {
	return predicate.FilesMetric(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ArtifactMetricsTable, ArtifactMetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtifactMetricsWith applies the HasEdge predicate on the "artifact_metrics" edge with a given conditions (other predicates).
func HasArtifactMetricsWith(preds ...predicate.ArtifactMetrics) predicate.FilesMetric {
	return predicate.FilesMetric(func(s *sql.Selector) {
		step := newArtifactMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FilesMetric) predicate.FilesMetric {
	return predicate.FilesMetric(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FilesMetric) predicate.FilesMetric {
	return predicate.FilesMetric(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FilesMetric) predicate.FilesMetric {
	return predicate.FilesMetric(sql.NotPredicates(p))
}
