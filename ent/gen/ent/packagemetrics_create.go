// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/packageloadmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/packagemetrics"
)

// PackageMetricsCreate is the builder for creating a PackageMetrics entity.
type PackageMetricsCreate struct {
	config
	mutation *PackageMetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackagesLoaded sets the "packages_loaded" field.
func (pmc *PackageMetricsCreate) SetPackagesLoaded(i int64) *PackageMetricsCreate {
	pmc.mutation.SetPackagesLoaded(i)
	return pmc
}

// SetNillablePackagesLoaded sets the "packages_loaded" field if the given value is not nil.
func (pmc *PackageMetricsCreate) SetNillablePackagesLoaded(i *int64) *PackageMetricsCreate {
	if i != nil {
		pmc.SetPackagesLoaded(*i)
	}
	return pmc
}

// SetMetricsID sets the "metrics" edge to the Metrics entity by ID.
func (pmc *PackageMetricsCreate) SetMetricsID(id int) *PackageMetricsCreate {
	pmc.mutation.SetMetricsID(id)
	return pmc
}

// SetNillableMetricsID sets the "metrics" edge to the Metrics entity by ID if the given value is not nil.
func (pmc *PackageMetricsCreate) SetNillableMetricsID(id *int) *PackageMetricsCreate {
	if id != nil {
		pmc = pmc.SetMetricsID(*id)
	}
	return pmc
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (pmc *PackageMetricsCreate) SetMetrics(m *Metrics) *PackageMetricsCreate {
	return pmc.SetMetricsID(m.ID)
}

// AddPackageLoadMetricIDs adds the "package_load_metrics" edge to the PackageLoadMetrics entity by IDs.
func (pmc *PackageMetricsCreate) AddPackageLoadMetricIDs(ids ...int) *PackageMetricsCreate {
	pmc.mutation.AddPackageLoadMetricIDs(ids...)
	return pmc
}

// AddPackageLoadMetrics adds the "package_load_metrics" edges to the PackageLoadMetrics entity.
func (pmc *PackageMetricsCreate) AddPackageLoadMetrics(p ...*PackageLoadMetrics) *PackageMetricsCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmc.AddPackageLoadMetricIDs(ids...)
}

// Mutation returns the PackageMetricsMutation object of the builder.
func (pmc *PackageMetricsCreate) Mutation() *PackageMetricsMutation {
	return pmc.mutation
}

// Save creates the PackageMetrics in the database.
func (pmc *PackageMetricsCreate) Save(ctx context.Context) (*PackageMetrics, error) {
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PackageMetricsCreate) SaveX(ctx context.Context) *PackageMetrics {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PackageMetricsCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PackageMetricsCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PackageMetricsCreate) check() error {
	return nil
}

func (pmc *PackageMetricsCreate) sqlSave(ctx context.Context) (*PackageMetrics, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PackageMetricsCreate) createSpec() (*PackageMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &PackageMetrics{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(packagemetrics.Table, sqlgraph.NewFieldSpec(packagemetrics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pmc.conflict
	if value, ok := pmc.mutation.PackagesLoaded(); ok {
		_spec.SetField(packagemetrics.FieldPackagesLoaded, field.TypeInt64, value)
		_node.PackagesLoaded = value
	}
	if nodes := pmc.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagemetrics.MetricsTable,
			Columns: []string{packagemetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.metrics_package_metrics = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.PackageLoadMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagemetrics.PackageLoadMetricsTable,
			Columns: []string{packagemetrics.PackageLoadMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageloadmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackageMetrics.Create().
//		SetPackagesLoaded(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackageMetricsUpsert) {
//			SetPackagesLoaded(v+v).
//		}).
//		Exec(ctx)
func (pmc *PackageMetricsCreate) OnConflict(opts ...sql.ConflictOption) *PackageMetricsUpsertOne {
	pmc.conflict = opts
	return &PackageMetricsUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackageMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *PackageMetricsCreate) OnConflictColumns(columns ...string) *PackageMetricsUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &PackageMetricsUpsertOne{
		create: pmc,
	}
}

type (
	// PackageMetricsUpsertOne is the builder for "upsert"-ing
	//  one PackageMetrics node.
	PackageMetricsUpsertOne struct {
		create *PackageMetricsCreate
	}

	// PackageMetricsUpsert is the "OnConflict" setter.
	PackageMetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackagesLoaded sets the "packages_loaded" field.
func (u *PackageMetricsUpsert) SetPackagesLoaded(v int64) *PackageMetricsUpsert {
	u.Set(packagemetrics.FieldPackagesLoaded, v)
	return u
}

// UpdatePackagesLoaded sets the "packages_loaded" field to the value that was provided on create.
func (u *PackageMetricsUpsert) UpdatePackagesLoaded() *PackageMetricsUpsert {
	u.SetExcluded(packagemetrics.FieldPackagesLoaded)
	return u
}

// AddPackagesLoaded adds v to the "packages_loaded" field.
func (u *PackageMetricsUpsert) AddPackagesLoaded(v int64) *PackageMetricsUpsert {
	u.Add(packagemetrics.FieldPackagesLoaded, v)
	return u
}

// ClearPackagesLoaded clears the value of the "packages_loaded" field.
func (u *PackageMetricsUpsert) ClearPackagesLoaded() *PackageMetricsUpsert {
	u.SetNull(packagemetrics.FieldPackagesLoaded)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PackageMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PackageMetricsUpsertOne) UpdateNewValues() *PackageMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackageMetrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PackageMetricsUpsertOne) Ignore() *PackageMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackageMetricsUpsertOne) DoNothing() *PackageMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackageMetricsCreate.OnConflict
// documentation for more info.
func (u *PackageMetricsUpsertOne) Update(set func(*PackageMetricsUpsert)) *PackageMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackageMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackagesLoaded sets the "packages_loaded" field.
func (u *PackageMetricsUpsertOne) SetPackagesLoaded(v int64) *PackageMetricsUpsertOne {
	return u.Update(func(s *PackageMetricsUpsert) {
		s.SetPackagesLoaded(v)
	})
}

// AddPackagesLoaded adds v to the "packages_loaded" field.
func (u *PackageMetricsUpsertOne) AddPackagesLoaded(v int64) *PackageMetricsUpsertOne {
	return u.Update(func(s *PackageMetricsUpsert) {
		s.AddPackagesLoaded(v)
	})
}

// UpdatePackagesLoaded sets the "packages_loaded" field to the value that was provided on create.
func (u *PackageMetricsUpsertOne) UpdatePackagesLoaded() *PackageMetricsUpsertOne {
	return u.Update(func(s *PackageMetricsUpsert) {
		s.UpdatePackagesLoaded()
	})
}

// ClearPackagesLoaded clears the value of the "packages_loaded" field.
func (u *PackageMetricsUpsertOne) ClearPackagesLoaded() *PackageMetricsUpsertOne {
	return u.Update(func(s *PackageMetricsUpsert) {
		s.ClearPackagesLoaded()
	})
}

// Exec executes the query.
func (u *PackageMetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackageMetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackageMetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackageMetricsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackageMetricsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackageMetricsCreateBulk is the builder for creating many PackageMetrics entities in bulk.
type PackageMetricsCreateBulk struct {
	config
	err      error
	builders []*PackageMetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the PackageMetrics entities in the database.
func (pmcb *PackageMetricsCreateBulk) Save(ctx context.Context) ([]*PackageMetrics, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PackageMetrics, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackageMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PackageMetricsCreateBulk) SaveX(ctx context.Context) []*PackageMetrics {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PackageMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PackageMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackageMetrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackageMetricsUpsert) {
//			SetPackagesLoaded(v+v).
//		}).
//		Exec(ctx)
func (pmcb *PackageMetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackageMetricsUpsertBulk {
	pmcb.conflict = opts
	return &PackageMetricsUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackageMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *PackageMetricsCreateBulk) OnConflictColumns(columns ...string) *PackageMetricsUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &PackageMetricsUpsertBulk{
		create: pmcb,
	}
}

// PackageMetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of PackageMetrics nodes.
type PackageMetricsUpsertBulk struct {
	create *PackageMetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PackageMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PackageMetricsUpsertBulk) UpdateNewValues() *PackageMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackageMetrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PackageMetricsUpsertBulk) Ignore() *PackageMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackageMetricsUpsertBulk) DoNothing() *PackageMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackageMetricsCreateBulk.OnConflict
// documentation for more info.
func (u *PackageMetricsUpsertBulk) Update(set func(*PackageMetricsUpsert)) *PackageMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackageMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackagesLoaded sets the "packages_loaded" field.
func (u *PackageMetricsUpsertBulk) SetPackagesLoaded(v int64) *PackageMetricsUpsertBulk {
	return u.Update(func(s *PackageMetricsUpsert) {
		s.SetPackagesLoaded(v)
	})
}

// AddPackagesLoaded adds v to the "packages_loaded" field.
func (u *PackageMetricsUpsertBulk) AddPackagesLoaded(v int64) *PackageMetricsUpsertBulk {
	return u.Update(func(s *PackageMetricsUpsert) {
		s.AddPackagesLoaded(v)
	})
}

// UpdatePackagesLoaded sets the "packages_loaded" field to the value that was provided on create.
func (u *PackageMetricsUpsertBulk) UpdatePackagesLoaded() *PackageMetricsUpsertBulk {
	return u.Update(func(s *PackageMetricsUpsert) {
		s.UpdatePackagesLoaded()
	})
}

// ClearPackagesLoaded clears the value of the "packages_loaded" field.
func (u *PackageMetricsUpsertBulk) ClearPackagesLoaded() *PackageMetricsUpsertBulk {
	return u.Update(func(s *PackageMetricsUpsert) {
		s.ClearPackagesLoaded()
	})
}

// Exec executes the query.
func (u *PackageMetricsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackageMetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackageMetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackageMetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
