// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/buildbarn/bb-portal/ent/gen/ent/artifactmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
)

// ArtifactMetrics is the model entity for the ArtifactMetrics schema.
type ArtifactMetrics struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SourceArtifactsReadSizeInBytes holds the value of the "source_artifacts_read_size_in_bytes" field.
	SourceArtifactsReadSizeInBytes int64 `json:"source_artifacts_read_size_in_bytes,omitempty"`
	// SourceArtifactsReadCount holds the value of the "source_artifacts_read_count" field.
	SourceArtifactsReadCount int32 `json:"source_artifacts_read_count,omitempty"`
	// OutputArtifactsSeenSizeInBytes holds the value of the "output_artifacts_seen_size_in_bytes" field.
	OutputArtifactsSeenSizeInBytes int64 `json:"output_artifacts_seen_size_in_bytes,omitempty"`
	// OutputArtifactsSeenCount holds the value of the "output_artifacts_seen_count" field.
	OutputArtifactsSeenCount int32 `json:"output_artifacts_seen_count,omitempty"`
	// OutputArtifactsFromActionCacheSizeInBytes holds the value of the "output_artifacts_from_action_cache_size_in_bytes" field.
	OutputArtifactsFromActionCacheSizeInBytes int64 `json:"output_artifacts_from_action_cache_size_in_bytes,omitempty"`
	// OutputArtifactsFromActionCacheCount holds the value of the "output_artifacts_from_action_cache_count" field.
	OutputArtifactsFromActionCacheCount int32 `json:"output_artifacts_from_action_cache_count,omitempty"`
	// TopLevelArtifactsSizeInBytes holds the value of the "top_level_artifacts_size_in_bytes" field.
	TopLevelArtifactsSizeInBytes int64 `json:"top_level_artifacts_size_in_bytes,omitempty"`
	// TopLevelArtifactsCount holds the value of the "top_level_artifacts_count" field.
	TopLevelArtifactsCount int32 `json:"top_level_artifacts_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtifactMetricsQuery when eager-loading is set.
	Edges                    ArtifactMetricsEdges `json:"edges"`
	metrics_artifact_metrics *int
	selectValues             sql.SelectValues
}

// ArtifactMetricsEdges holds the relations/edges for other nodes in the graph.
type ArtifactMetricsEdges struct {
	// Metrics holds the value of the metrics edge.
	Metrics *Metrics `json:"metrics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// MetricsOrErr returns the Metrics value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtifactMetricsEdges) MetricsOrErr() (*Metrics, error) {
	if e.Metrics != nil {
		return e.Metrics, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: metrics.Label}
	}
	return nil, &NotLoadedError{edge: "metrics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArtifactMetrics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case artifactmetrics.FieldID, artifactmetrics.FieldSourceArtifactsReadSizeInBytes, artifactmetrics.FieldSourceArtifactsReadCount, artifactmetrics.FieldOutputArtifactsSeenSizeInBytes, artifactmetrics.FieldOutputArtifactsSeenCount, artifactmetrics.FieldOutputArtifactsFromActionCacheSizeInBytes, artifactmetrics.FieldOutputArtifactsFromActionCacheCount, artifactmetrics.FieldTopLevelArtifactsSizeInBytes, artifactmetrics.FieldTopLevelArtifactsCount:
			values[i] = new(sql.NullInt64)
		case artifactmetrics.ForeignKeys[0]: // metrics_artifact_metrics
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArtifactMetrics fields.
func (am *ArtifactMetrics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artifactmetrics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = int(value.Int64)
		case artifactmetrics.FieldSourceArtifactsReadSizeInBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_artifacts_read_size_in_bytes", values[i])
			} else if value.Valid {
				am.SourceArtifactsReadSizeInBytes = value.Int64
			}
		case artifactmetrics.FieldSourceArtifactsReadCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_artifacts_read_count", values[i])
			} else if value.Valid {
				am.SourceArtifactsReadCount = int32(value.Int64)
			}
		case artifactmetrics.FieldOutputArtifactsSeenSizeInBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_artifacts_seen_size_in_bytes", values[i])
			} else if value.Valid {
				am.OutputArtifactsSeenSizeInBytes = value.Int64
			}
		case artifactmetrics.FieldOutputArtifactsSeenCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_artifacts_seen_count", values[i])
			} else if value.Valid {
				am.OutputArtifactsSeenCount = int32(value.Int64)
			}
		case artifactmetrics.FieldOutputArtifactsFromActionCacheSizeInBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_artifacts_from_action_cache_size_in_bytes", values[i])
			} else if value.Valid {
				am.OutputArtifactsFromActionCacheSizeInBytes = value.Int64
			}
		case artifactmetrics.FieldOutputArtifactsFromActionCacheCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_artifacts_from_action_cache_count", values[i])
			} else if value.Valid {
				am.OutputArtifactsFromActionCacheCount = int32(value.Int64)
			}
		case artifactmetrics.FieldTopLevelArtifactsSizeInBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field top_level_artifacts_size_in_bytes", values[i])
			} else if value.Valid {
				am.TopLevelArtifactsSizeInBytes = value.Int64
			}
		case artifactmetrics.FieldTopLevelArtifactsCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field top_level_artifacts_count", values[i])
			} else if value.Valid {
				am.TopLevelArtifactsCount = int32(value.Int64)
			}
		case artifactmetrics.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metrics_artifact_metrics", value)
			} else if value.Valid {
				am.metrics_artifact_metrics = new(int)
				*am.metrics_artifact_metrics = int(value.Int64)
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArtifactMetrics.
// This includes values selected through modifiers, order, etc.
func (am *ArtifactMetrics) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// QueryMetrics queries the "metrics" edge of the ArtifactMetrics entity.
func (am *ArtifactMetrics) QueryMetrics() *MetricsQuery {
	return NewArtifactMetricsClient(am.config).QueryMetrics(am)
}

// Update returns a builder for updating this ArtifactMetrics.
// Note that you need to call ArtifactMetrics.Unwrap() before calling this method if this ArtifactMetrics
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *ArtifactMetrics) Update() *ArtifactMetricsUpdateOne {
	return NewArtifactMetricsClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the ArtifactMetrics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *ArtifactMetrics) Unwrap() *ArtifactMetrics {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: ArtifactMetrics is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *ArtifactMetrics) String() string {
	var builder strings.Builder
	builder.WriteString("ArtifactMetrics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("source_artifacts_read_size_in_bytes=")
	builder.WriteString(fmt.Sprintf("%v", am.SourceArtifactsReadSizeInBytes))
	builder.WriteString(", ")
	builder.WriteString("source_artifacts_read_count=")
	builder.WriteString(fmt.Sprintf("%v", am.SourceArtifactsReadCount))
	builder.WriteString(", ")
	builder.WriteString("output_artifacts_seen_size_in_bytes=")
	builder.WriteString(fmt.Sprintf("%v", am.OutputArtifactsSeenSizeInBytes))
	builder.WriteString(", ")
	builder.WriteString("output_artifacts_seen_count=")
	builder.WriteString(fmt.Sprintf("%v", am.OutputArtifactsSeenCount))
	builder.WriteString(", ")
	builder.WriteString("output_artifacts_from_action_cache_size_in_bytes=")
	builder.WriteString(fmt.Sprintf("%v", am.OutputArtifactsFromActionCacheSizeInBytes))
	builder.WriteString(", ")
	builder.WriteString("output_artifacts_from_action_cache_count=")
	builder.WriteString(fmt.Sprintf("%v", am.OutputArtifactsFromActionCacheCount))
	builder.WriteString(", ")
	builder.WriteString("top_level_artifacts_size_in_bytes=")
	builder.WriteString(fmt.Sprintf("%v", am.TopLevelArtifactsSizeInBytes))
	builder.WriteString(", ")
	builder.WriteString("top_level_artifacts_count=")
	builder.WriteString(fmt.Sprintf("%v", am.TopLevelArtifactsCount))
	builder.WriteByte(')')
	return builder.String()
}

// ArtifactMetricsSlice is a parsable slice of ArtifactMetrics.
type ArtifactMetricsSlice []*ArtifactMetrics
