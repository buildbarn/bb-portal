// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/namedsetoffiles"
	"github.com/buildbarn/bb-portal/ent/gen/ent/outputgroup"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testfile"
)

// NamedSetOfFilesCreate is the builder for creating a NamedSetOfFiles entity.
type NamedSetOfFilesCreate struct {
	config
	mutation *NamedSetOfFilesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOutputGroupID sets the "output_group" edge to the OutputGroup entity by ID.
func (nsofc *NamedSetOfFilesCreate) SetOutputGroupID(id int) *NamedSetOfFilesCreate {
	nsofc.mutation.SetOutputGroupID(id)
	return nsofc
}

// SetNillableOutputGroupID sets the "output_group" edge to the OutputGroup entity by ID if the given value is not nil.
func (nsofc *NamedSetOfFilesCreate) SetNillableOutputGroupID(id *int) *NamedSetOfFilesCreate {
	if id != nil {
		nsofc = nsofc.SetOutputGroupID(*id)
	}
	return nsofc
}

// SetOutputGroup sets the "output_group" edge to the OutputGroup entity.
func (nsofc *NamedSetOfFilesCreate) SetOutputGroup(o *OutputGroup) *NamedSetOfFilesCreate {
	return nsofc.SetOutputGroupID(o.ID)
}

// AddFileIDs adds the "files" edge to the TestFile entity by IDs.
func (nsofc *NamedSetOfFilesCreate) AddFileIDs(ids ...int) *NamedSetOfFilesCreate {
	nsofc.mutation.AddFileIDs(ids...)
	return nsofc
}

// AddFiles adds the "files" edges to the TestFile entity.
func (nsofc *NamedSetOfFilesCreate) AddFiles(t ...*TestFile) *NamedSetOfFilesCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nsofc.AddFileIDs(ids...)
}

// SetFileSetsID sets the "file_sets" edge to the NamedSetOfFiles entity by ID.
func (nsofc *NamedSetOfFilesCreate) SetFileSetsID(id int) *NamedSetOfFilesCreate {
	nsofc.mutation.SetFileSetsID(id)
	return nsofc
}

// SetNillableFileSetsID sets the "file_sets" edge to the NamedSetOfFiles entity by ID if the given value is not nil.
func (nsofc *NamedSetOfFilesCreate) SetNillableFileSetsID(id *int) *NamedSetOfFilesCreate {
	if id != nil {
		nsofc = nsofc.SetFileSetsID(*id)
	}
	return nsofc
}

// SetFileSets sets the "file_sets" edge to the NamedSetOfFiles entity.
func (nsofc *NamedSetOfFilesCreate) SetFileSets(n *NamedSetOfFiles) *NamedSetOfFilesCreate {
	return nsofc.SetFileSetsID(n.ID)
}

// Mutation returns the NamedSetOfFilesMutation object of the builder.
func (nsofc *NamedSetOfFilesCreate) Mutation() *NamedSetOfFilesMutation {
	return nsofc.mutation
}

// Save creates the NamedSetOfFiles in the database.
func (nsofc *NamedSetOfFilesCreate) Save(ctx context.Context) (*NamedSetOfFiles, error) {
	return withHooks(ctx, nsofc.sqlSave, nsofc.mutation, nsofc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nsofc *NamedSetOfFilesCreate) SaveX(ctx context.Context) *NamedSetOfFiles {
	v, err := nsofc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nsofc *NamedSetOfFilesCreate) Exec(ctx context.Context) error {
	_, err := nsofc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsofc *NamedSetOfFilesCreate) ExecX(ctx context.Context) {
	if err := nsofc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsofc *NamedSetOfFilesCreate) check() error {
	return nil
}

func (nsofc *NamedSetOfFilesCreate) sqlSave(ctx context.Context) (*NamedSetOfFiles, error) {
	if err := nsofc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nsofc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nsofc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nsofc.mutation.id = &_node.ID
	nsofc.mutation.done = true
	return _node, nil
}

func (nsofc *NamedSetOfFilesCreate) createSpec() (*NamedSetOfFiles, *sqlgraph.CreateSpec) {
	var (
		_node = &NamedSetOfFiles{config: nsofc.config}
		_spec = sqlgraph.NewCreateSpec(namedsetoffiles.Table, sqlgraph.NewFieldSpec(namedsetoffiles.FieldID, field.TypeInt))
	)
	_spec.OnConflict = nsofc.conflict
	if nodes := nsofc.mutation.OutputGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   namedsetoffiles.OutputGroupTable,
			Columns: []string{namedsetoffiles.OutputGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(outputgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.output_group_file_sets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nsofc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namedsetoffiles.FilesTable,
			Columns: []string{namedsetoffiles.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nsofc.mutation.FileSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   namedsetoffiles.FileSetsTable,
			Columns: []string{namedsetoffiles.FileSetsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namedsetoffiles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.named_set_of_files_file_sets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NamedSetOfFiles.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (nsofc *NamedSetOfFilesCreate) OnConflict(opts ...sql.ConflictOption) *NamedSetOfFilesUpsertOne {
	nsofc.conflict = opts
	return &NamedSetOfFilesUpsertOne{
		create: nsofc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NamedSetOfFiles.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nsofc *NamedSetOfFilesCreate) OnConflictColumns(columns ...string) *NamedSetOfFilesUpsertOne {
	nsofc.conflict = append(nsofc.conflict, sql.ConflictColumns(columns...))
	return &NamedSetOfFilesUpsertOne{
		create: nsofc,
	}
}

type (
	// NamedSetOfFilesUpsertOne is the builder for "upsert"-ing
	//  one NamedSetOfFiles node.
	NamedSetOfFilesUpsertOne struct {
		create *NamedSetOfFilesCreate
	}

	// NamedSetOfFilesUpsert is the "OnConflict" setter.
	NamedSetOfFilesUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.NamedSetOfFiles.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NamedSetOfFilesUpsertOne) UpdateNewValues() *NamedSetOfFilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NamedSetOfFiles.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NamedSetOfFilesUpsertOne) Ignore() *NamedSetOfFilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NamedSetOfFilesUpsertOne) DoNothing() *NamedSetOfFilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NamedSetOfFilesCreate.OnConflict
// documentation for more info.
func (u *NamedSetOfFilesUpsertOne) Update(set func(*NamedSetOfFilesUpsert)) *NamedSetOfFilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NamedSetOfFilesUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *NamedSetOfFilesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NamedSetOfFilesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NamedSetOfFilesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NamedSetOfFilesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NamedSetOfFilesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NamedSetOfFilesCreateBulk is the builder for creating many NamedSetOfFiles entities in bulk.
type NamedSetOfFilesCreateBulk struct {
	config
	err      error
	builders []*NamedSetOfFilesCreate
	conflict []sql.ConflictOption
}

// Save creates the NamedSetOfFiles entities in the database.
func (nsofcb *NamedSetOfFilesCreateBulk) Save(ctx context.Context) ([]*NamedSetOfFiles, error) {
	if nsofcb.err != nil {
		return nil, nsofcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nsofcb.builders))
	nodes := make([]*NamedSetOfFiles, len(nsofcb.builders))
	mutators := make([]Mutator, len(nsofcb.builders))
	for i := range nsofcb.builders {
		func(i int, root context.Context) {
			builder := nsofcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NamedSetOfFilesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nsofcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nsofcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nsofcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nsofcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nsofcb *NamedSetOfFilesCreateBulk) SaveX(ctx context.Context) []*NamedSetOfFiles {
	v, err := nsofcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nsofcb *NamedSetOfFilesCreateBulk) Exec(ctx context.Context) error {
	_, err := nsofcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsofcb *NamedSetOfFilesCreateBulk) ExecX(ctx context.Context) {
	if err := nsofcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NamedSetOfFiles.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (nsofcb *NamedSetOfFilesCreateBulk) OnConflict(opts ...sql.ConflictOption) *NamedSetOfFilesUpsertBulk {
	nsofcb.conflict = opts
	return &NamedSetOfFilesUpsertBulk{
		create: nsofcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NamedSetOfFiles.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nsofcb *NamedSetOfFilesCreateBulk) OnConflictColumns(columns ...string) *NamedSetOfFilesUpsertBulk {
	nsofcb.conflict = append(nsofcb.conflict, sql.ConflictColumns(columns...))
	return &NamedSetOfFilesUpsertBulk{
		create: nsofcb,
	}
}

// NamedSetOfFilesUpsertBulk is the builder for "upsert"-ing
// a bulk of NamedSetOfFiles nodes.
type NamedSetOfFilesUpsertBulk struct {
	create *NamedSetOfFilesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NamedSetOfFiles.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NamedSetOfFilesUpsertBulk) UpdateNewValues() *NamedSetOfFilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NamedSetOfFiles.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NamedSetOfFilesUpsertBulk) Ignore() *NamedSetOfFilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NamedSetOfFilesUpsertBulk) DoNothing() *NamedSetOfFilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NamedSetOfFilesCreateBulk.OnConflict
// documentation for more info.
func (u *NamedSetOfFilesUpsertBulk) Update(set func(*NamedSetOfFilesUpsert)) *NamedSetOfFilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NamedSetOfFilesUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *NamedSetOfFilesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NamedSetOfFilesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NamedSetOfFilesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NamedSetOfFilesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
