// Code generated by ent, DO NOT EDIT.

package buildgraphmetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldID, id))
}

// ActionLookupValueCount applies equality check predicate on the "action_lookup_value_count" field. It's identical to ActionLookupValueCountEQ.
func ActionLookupValueCount(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldActionLookupValueCount, v))
}

// ActionLookupValueCountNotIncludingAspects applies equality check predicate on the "action_lookup_value_count_not_including_aspects" field. It's identical to ActionLookupValueCountNotIncludingAspectsEQ.
func ActionLookupValueCountNotIncludingAspects(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldActionLookupValueCountNotIncludingAspects, v))
}

// ActionCount applies equality check predicate on the "action_count" field. It's identical to ActionCountEQ.
func ActionCount(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldActionCount, v))
}

// ActionCountNotIncludingAspects applies equality check predicate on the "action_count_not_including_aspects" field. It's identical to ActionCountNotIncludingAspectsEQ.
func ActionCountNotIncludingAspects(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldActionCountNotIncludingAspects, v))
}

// InputFileConfiguredTargetCount applies equality check predicate on the "input_file_configured_target_count" field. It's identical to InputFileConfiguredTargetCountEQ.
func InputFileConfiguredTargetCount(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldInputFileConfiguredTargetCount, v))
}

// OutputFileConfiguredTargetCount applies equality check predicate on the "output_file_configured_target_count" field. It's identical to OutputFileConfiguredTargetCountEQ.
func OutputFileConfiguredTargetCount(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldOutputFileConfiguredTargetCount, v))
}

// OtherConfiguredTargetCount applies equality check predicate on the "other_configured_target_count" field. It's identical to OtherConfiguredTargetCountEQ.
func OtherConfiguredTargetCount(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldOtherConfiguredTargetCount, v))
}

// OutputArtifactCount applies equality check predicate on the "output_artifact_count" field. It's identical to OutputArtifactCountEQ.
func OutputArtifactCount(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldOutputArtifactCount, v))
}

// PostInvocationSkyframeNodeCount applies equality check predicate on the "post_invocation_skyframe_node_count" field. It's identical to PostInvocationSkyframeNodeCountEQ.
func PostInvocationSkyframeNodeCount(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldPostInvocationSkyframeNodeCount, v))
}

// MetricsID applies equality check predicate on the "metrics_id" field. It's identical to MetricsIDEQ.
func MetricsID(v int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldMetricsID, v))
}

// ActionLookupValueCountEQ applies the EQ predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldActionLookupValueCount, v))
}

// ActionLookupValueCountNEQ applies the NEQ predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldActionLookupValueCount, v))
}

// ActionLookupValueCountIn applies the In predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldActionLookupValueCount, vs...))
}

// ActionLookupValueCountNotIn applies the NotIn predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldActionLookupValueCount, vs...))
}

// ActionLookupValueCountGT applies the GT predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldActionLookupValueCount, v))
}

// ActionLookupValueCountGTE applies the GTE predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldActionLookupValueCount, v))
}

// ActionLookupValueCountLT applies the LT predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldActionLookupValueCount, v))
}

// ActionLookupValueCountLTE applies the LTE predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldActionLookupValueCount, v))
}

// ActionLookupValueCountIsNil applies the IsNil predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldActionLookupValueCount))
}

// ActionLookupValueCountNotNil applies the NotNil predicate on the "action_lookup_value_count" field.
func ActionLookupValueCountNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldActionLookupValueCount))
}

// ActionLookupValueCountNotIncludingAspectsEQ applies the EQ predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldActionLookupValueCountNotIncludingAspects, v))
}

// ActionLookupValueCountNotIncludingAspectsNEQ applies the NEQ predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldActionLookupValueCountNotIncludingAspects, v))
}

// ActionLookupValueCountNotIncludingAspectsIn applies the In predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldActionLookupValueCountNotIncludingAspects, vs...))
}

// ActionLookupValueCountNotIncludingAspectsNotIn applies the NotIn predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldActionLookupValueCountNotIncludingAspects, vs...))
}

// ActionLookupValueCountNotIncludingAspectsGT applies the GT predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldActionLookupValueCountNotIncludingAspects, v))
}

// ActionLookupValueCountNotIncludingAspectsGTE applies the GTE predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldActionLookupValueCountNotIncludingAspects, v))
}

// ActionLookupValueCountNotIncludingAspectsLT applies the LT predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldActionLookupValueCountNotIncludingAspects, v))
}

// ActionLookupValueCountNotIncludingAspectsLTE applies the LTE predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldActionLookupValueCountNotIncludingAspects, v))
}

// ActionLookupValueCountNotIncludingAspectsIsNil applies the IsNil predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldActionLookupValueCountNotIncludingAspects))
}

// ActionLookupValueCountNotIncludingAspectsNotNil applies the NotNil predicate on the "action_lookup_value_count_not_including_aspects" field.
func ActionLookupValueCountNotIncludingAspectsNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldActionLookupValueCountNotIncludingAspects))
}

// ActionCountEQ applies the EQ predicate on the "action_count" field.
func ActionCountEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldActionCount, v))
}

// ActionCountNEQ applies the NEQ predicate on the "action_count" field.
func ActionCountNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldActionCount, v))
}

// ActionCountIn applies the In predicate on the "action_count" field.
func ActionCountIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldActionCount, vs...))
}

// ActionCountNotIn applies the NotIn predicate on the "action_count" field.
func ActionCountNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldActionCount, vs...))
}

// ActionCountGT applies the GT predicate on the "action_count" field.
func ActionCountGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldActionCount, v))
}

// ActionCountGTE applies the GTE predicate on the "action_count" field.
func ActionCountGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldActionCount, v))
}

// ActionCountLT applies the LT predicate on the "action_count" field.
func ActionCountLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldActionCount, v))
}

// ActionCountLTE applies the LTE predicate on the "action_count" field.
func ActionCountLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldActionCount, v))
}

// ActionCountIsNil applies the IsNil predicate on the "action_count" field.
func ActionCountIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldActionCount))
}

// ActionCountNotNil applies the NotNil predicate on the "action_count" field.
func ActionCountNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldActionCount))
}

// ActionCountNotIncludingAspectsEQ applies the EQ predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldActionCountNotIncludingAspects, v))
}

// ActionCountNotIncludingAspectsNEQ applies the NEQ predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldActionCountNotIncludingAspects, v))
}

// ActionCountNotIncludingAspectsIn applies the In predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldActionCountNotIncludingAspects, vs...))
}

// ActionCountNotIncludingAspectsNotIn applies the NotIn predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldActionCountNotIncludingAspects, vs...))
}

// ActionCountNotIncludingAspectsGT applies the GT predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldActionCountNotIncludingAspects, v))
}

// ActionCountNotIncludingAspectsGTE applies the GTE predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldActionCountNotIncludingAspects, v))
}

// ActionCountNotIncludingAspectsLT applies the LT predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldActionCountNotIncludingAspects, v))
}

// ActionCountNotIncludingAspectsLTE applies the LTE predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldActionCountNotIncludingAspects, v))
}

// ActionCountNotIncludingAspectsIsNil applies the IsNil predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldActionCountNotIncludingAspects))
}

// ActionCountNotIncludingAspectsNotNil applies the NotNil predicate on the "action_count_not_including_aspects" field.
func ActionCountNotIncludingAspectsNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldActionCountNotIncludingAspects))
}

// InputFileConfiguredTargetCountEQ applies the EQ predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldInputFileConfiguredTargetCount, v))
}

// InputFileConfiguredTargetCountNEQ applies the NEQ predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldInputFileConfiguredTargetCount, v))
}

// InputFileConfiguredTargetCountIn applies the In predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldInputFileConfiguredTargetCount, vs...))
}

// InputFileConfiguredTargetCountNotIn applies the NotIn predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldInputFileConfiguredTargetCount, vs...))
}

// InputFileConfiguredTargetCountGT applies the GT predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldInputFileConfiguredTargetCount, v))
}

// InputFileConfiguredTargetCountGTE applies the GTE predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldInputFileConfiguredTargetCount, v))
}

// InputFileConfiguredTargetCountLT applies the LT predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldInputFileConfiguredTargetCount, v))
}

// InputFileConfiguredTargetCountLTE applies the LTE predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldInputFileConfiguredTargetCount, v))
}

// InputFileConfiguredTargetCountIsNil applies the IsNil predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldInputFileConfiguredTargetCount))
}

// InputFileConfiguredTargetCountNotNil applies the NotNil predicate on the "input_file_configured_target_count" field.
func InputFileConfiguredTargetCountNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldInputFileConfiguredTargetCount))
}

// OutputFileConfiguredTargetCountEQ applies the EQ predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldOutputFileConfiguredTargetCount, v))
}

// OutputFileConfiguredTargetCountNEQ applies the NEQ predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldOutputFileConfiguredTargetCount, v))
}

// OutputFileConfiguredTargetCountIn applies the In predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldOutputFileConfiguredTargetCount, vs...))
}

// OutputFileConfiguredTargetCountNotIn applies the NotIn predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldOutputFileConfiguredTargetCount, vs...))
}

// OutputFileConfiguredTargetCountGT applies the GT predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldOutputFileConfiguredTargetCount, v))
}

// OutputFileConfiguredTargetCountGTE applies the GTE predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldOutputFileConfiguredTargetCount, v))
}

// OutputFileConfiguredTargetCountLT applies the LT predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldOutputFileConfiguredTargetCount, v))
}

// OutputFileConfiguredTargetCountLTE applies the LTE predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldOutputFileConfiguredTargetCount, v))
}

// OutputFileConfiguredTargetCountIsNil applies the IsNil predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldOutputFileConfiguredTargetCount))
}

// OutputFileConfiguredTargetCountNotNil applies the NotNil predicate on the "output_file_configured_target_count" field.
func OutputFileConfiguredTargetCountNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldOutputFileConfiguredTargetCount))
}

// OtherConfiguredTargetCountEQ applies the EQ predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldOtherConfiguredTargetCount, v))
}

// OtherConfiguredTargetCountNEQ applies the NEQ predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldOtherConfiguredTargetCount, v))
}

// OtherConfiguredTargetCountIn applies the In predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldOtherConfiguredTargetCount, vs...))
}

// OtherConfiguredTargetCountNotIn applies the NotIn predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldOtherConfiguredTargetCount, vs...))
}

// OtherConfiguredTargetCountGT applies the GT predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldOtherConfiguredTargetCount, v))
}

// OtherConfiguredTargetCountGTE applies the GTE predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldOtherConfiguredTargetCount, v))
}

// OtherConfiguredTargetCountLT applies the LT predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldOtherConfiguredTargetCount, v))
}

// OtherConfiguredTargetCountLTE applies the LTE predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldOtherConfiguredTargetCount, v))
}

// OtherConfiguredTargetCountIsNil applies the IsNil predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldOtherConfiguredTargetCount))
}

// OtherConfiguredTargetCountNotNil applies the NotNil predicate on the "other_configured_target_count" field.
func OtherConfiguredTargetCountNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldOtherConfiguredTargetCount))
}

// OutputArtifactCountEQ applies the EQ predicate on the "output_artifact_count" field.
func OutputArtifactCountEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldOutputArtifactCount, v))
}

// OutputArtifactCountNEQ applies the NEQ predicate on the "output_artifact_count" field.
func OutputArtifactCountNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldOutputArtifactCount, v))
}

// OutputArtifactCountIn applies the In predicate on the "output_artifact_count" field.
func OutputArtifactCountIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldOutputArtifactCount, vs...))
}

// OutputArtifactCountNotIn applies the NotIn predicate on the "output_artifact_count" field.
func OutputArtifactCountNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldOutputArtifactCount, vs...))
}

// OutputArtifactCountGT applies the GT predicate on the "output_artifact_count" field.
func OutputArtifactCountGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldOutputArtifactCount, v))
}

// OutputArtifactCountGTE applies the GTE predicate on the "output_artifact_count" field.
func OutputArtifactCountGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldOutputArtifactCount, v))
}

// OutputArtifactCountLT applies the LT predicate on the "output_artifact_count" field.
func OutputArtifactCountLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldOutputArtifactCount, v))
}

// OutputArtifactCountLTE applies the LTE predicate on the "output_artifact_count" field.
func OutputArtifactCountLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldOutputArtifactCount, v))
}

// OutputArtifactCountIsNil applies the IsNil predicate on the "output_artifact_count" field.
func OutputArtifactCountIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldOutputArtifactCount))
}

// OutputArtifactCountNotNil applies the NotNil predicate on the "output_artifact_count" field.
func OutputArtifactCountNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldOutputArtifactCount))
}

// PostInvocationSkyframeNodeCountEQ applies the EQ predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldPostInvocationSkyframeNodeCount, v))
}

// PostInvocationSkyframeNodeCountNEQ applies the NEQ predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountNEQ(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldPostInvocationSkyframeNodeCount, v))
}

// PostInvocationSkyframeNodeCountIn applies the In predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldPostInvocationSkyframeNodeCount, vs...))
}

// PostInvocationSkyframeNodeCountNotIn applies the NotIn predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountNotIn(vs ...int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldPostInvocationSkyframeNodeCount, vs...))
}

// PostInvocationSkyframeNodeCountGT applies the GT predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountGT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGT(FieldPostInvocationSkyframeNodeCount, v))
}

// PostInvocationSkyframeNodeCountGTE applies the GTE predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountGTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldGTE(FieldPostInvocationSkyframeNodeCount, v))
}

// PostInvocationSkyframeNodeCountLT applies the LT predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountLT(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLT(FieldPostInvocationSkyframeNodeCount, v))
}

// PostInvocationSkyframeNodeCountLTE applies the LTE predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountLTE(v int32) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldLTE(FieldPostInvocationSkyframeNodeCount, v))
}

// PostInvocationSkyframeNodeCountIsNil applies the IsNil predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldPostInvocationSkyframeNodeCount))
}

// PostInvocationSkyframeNodeCountNotNil applies the NotNil predicate on the "post_invocation_skyframe_node_count" field.
func PostInvocationSkyframeNodeCountNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldPostInvocationSkyframeNodeCount))
}

// MetricsIDEQ applies the EQ predicate on the "metrics_id" field.
func MetricsIDEQ(v int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldEQ(FieldMetricsID, v))
}

// MetricsIDNEQ applies the NEQ predicate on the "metrics_id" field.
func MetricsIDNEQ(v int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNEQ(FieldMetricsID, v))
}

// MetricsIDIn applies the In predicate on the "metrics_id" field.
func MetricsIDIn(vs ...int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIn(FieldMetricsID, vs...))
}

// MetricsIDNotIn applies the NotIn predicate on the "metrics_id" field.
func MetricsIDNotIn(vs ...int) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotIn(FieldMetricsID, vs...))
}

// MetricsIDIsNil applies the IsNil predicate on the "metrics_id" field.
func MetricsIDIsNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldIsNull(FieldMetricsID))
}

// MetricsIDNotNil applies the NotNil predicate on the "metrics_id" field.
func MetricsIDNotNil() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.FieldNotNull(FieldMetricsID))
}

// HasMetrics applies the HasEdge predicate on the "metrics" edge.
func HasMetrics() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MetricsTable, MetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetricsWith applies the HasEdge predicate on the "metrics" edge with a given conditions (other predicates).
func HasMetricsWith(preds ...predicate.Metrics) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := newMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDirtiedValues applies the HasEdge predicate on the "dirtied_values" edge.
func HasDirtiedValues() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DirtiedValuesTable, DirtiedValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDirtiedValuesWith applies the HasEdge predicate on the "dirtied_values" edge with a given conditions (other predicates).
func HasDirtiedValuesWith(preds ...predicate.EvaluationStat) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := newDirtiedValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChangedValues applies the HasEdge predicate on the "changed_values" edge.
func HasChangedValues() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ChangedValuesTable, ChangedValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChangedValuesWith applies the HasEdge predicate on the "changed_values" edge with a given conditions (other predicates).
func HasChangedValuesWith(preds ...predicate.EvaluationStat) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := newChangedValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuiltValues applies the HasEdge predicate on the "built_values" edge.
func HasBuiltValues() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuiltValuesTable, BuiltValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuiltValuesWith applies the HasEdge predicate on the "built_values" edge with a given conditions (other predicates).
func HasBuiltValuesWith(preds ...predicate.EvaluationStat) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := newBuiltValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCleanedValues applies the HasEdge predicate on the "cleaned_values" edge.
func HasCleanedValues() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CleanedValuesTable, CleanedValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCleanedValuesWith applies the HasEdge predicate on the "cleaned_values" edge with a given conditions (other predicates).
func HasCleanedValuesWith(preds ...predicate.EvaluationStat) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := newCleanedValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvaluatedValues applies the HasEdge predicate on the "evaluated_values" edge.
func HasEvaluatedValues() predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EvaluatedValuesTable, EvaluatedValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEvaluatedValuesWith applies the HasEdge predicate on the "evaluated_values" edge with a given conditions (other predicates).
func HasEvaluatedValuesWith(preds ...predicate.EvaluationStat) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(func(s *sql.Selector) {
		step := newEvaluatedValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BuildGraphMetrics) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BuildGraphMetrics) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BuildGraphMetrics) predicate.BuildGraphMetrics {
	return predicate.BuildGraphMetrics(sql.NotPredicates(p))
}
