// Code generated by ent, DO NOT EDIT.

package garbagemetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEQ(FieldType, v))
}

// GarbageCollected applies equality check predicate on the "garbage_collected" field. It's identical to GarbageCollectedEQ.
func GarbageCollected(v int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEQ(FieldGarbageCollected, v))
}

// MemoryMetricsID applies equality check predicate on the "memory_metrics_id" field. It's identical to MemoryMetricsIDEQ.
func MemoryMetricsID(v int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEQ(FieldMemoryMetricsID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldContainsFold(FieldType, v))
}

// GarbageCollectedEQ applies the EQ predicate on the "garbage_collected" field.
func GarbageCollectedEQ(v int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEQ(FieldGarbageCollected, v))
}

// GarbageCollectedNEQ applies the NEQ predicate on the "garbage_collected" field.
func GarbageCollectedNEQ(v int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNEQ(FieldGarbageCollected, v))
}

// GarbageCollectedIn applies the In predicate on the "garbage_collected" field.
func GarbageCollectedIn(vs ...int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldIn(FieldGarbageCollected, vs...))
}

// GarbageCollectedNotIn applies the NotIn predicate on the "garbage_collected" field.
func GarbageCollectedNotIn(vs ...int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNotIn(FieldGarbageCollected, vs...))
}

// GarbageCollectedGT applies the GT predicate on the "garbage_collected" field.
func GarbageCollectedGT(v int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldGT(FieldGarbageCollected, v))
}

// GarbageCollectedGTE applies the GTE predicate on the "garbage_collected" field.
func GarbageCollectedGTE(v int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldGTE(FieldGarbageCollected, v))
}

// GarbageCollectedLT applies the LT predicate on the "garbage_collected" field.
func GarbageCollectedLT(v int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldLT(FieldGarbageCollected, v))
}

// GarbageCollectedLTE applies the LTE predicate on the "garbage_collected" field.
func GarbageCollectedLTE(v int64) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldLTE(FieldGarbageCollected, v))
}

// GarbageCollectedIsNil applies the IsNil predicate on the "garbage_collected" field.
func GarbageCollectedIsNil() predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldIsNull(FieldGarbageCollected))
}

// GarbageCollectedNotNil applies the NotNil predicate on the "garbage_collected" field.
func GarbageCollectedNotNil() predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNotNull(FieldGarbageCollected))
}

// MemoryMetricsIDEQ applies the EQ predicate on the "memory_metrics_id" field.
func MemoryMetricsIDEQ(v int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldEQ(FieldMemoryMetricsID, v))
}

// MemoryMetricsIDNEQ applies the NEQ predicate on the "memory_metrics_id" field.
func MemoryMetricsIDNEQ(v int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNEQ(FieldMemoryMetricsID, v))
}

// MemoryMetricsIDIn applies the In predicate on the "memory_metrics_id" field.
func MemoryMetricsIDIn(vs ...int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldIn(FieldMemoryMetricsID, vs...))
}

// MemoryMetricsIDNotIn applies the NotIn predicate on the "memory_metrics_id" field.
func MemoryMetricsIDNotIn(vs ...int) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNotIn(FieldMemoryMetricsID, vs...))
}

// MemoryMetricsIDIsNil applies the IsNil predicate on the "memory_metrics_id" field.
func MemoryMetricsIDIsNil() predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldIsNull(FieldMemoryMetricsID))
}

// MemoryMetricsIDNotNil applies the NotNil predicate on the "memory_metrics_id" field.
func MemoryMetricsIDNotNil() predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.FieldNotNull(FieldMemoryMetricsID))
}

// HasMemoryMetrics applies the HasEdge predicate on the "memory_metrics" edge.
func HasMemoryMetrics() predicate.GarbageMetrics {
	return predicate.GarbageMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemoryMetricsTable, MemoryMetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemoryMetricsWith applies the HasEdge predicate on the "memory_metrics" edge with a given conditions (other predicates).
func HasMemoryMetricsWith(preds ...predicate.MemoryMetrics) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(func(s *sql.Selector) {
		step := newMemoryMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GarbageMetrics) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GarbageMetrics) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GarbageMetrics) predicate.GarbageMetrics {
	return predicate.GarbageMetrics(sql.NotPredicates(p))
}
