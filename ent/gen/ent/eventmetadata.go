// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/eventmetadata"
)

// EventMetadata is the model entity for the EventMetadata schema.
type EventMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SequenceNumber holds the value of the "sequence_number" field.
	SequenceNumber int64 `json:"sequence_number,omitempty"`
	// EventReceivedAt holds the value of the "event_received_at" field.
	EventReceivedAt time.Time `json:"event_received_at,omitempty"`
	// EventHash holds the value of the "event_hash" field.
	EventHash string `json:"event_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventMetadataQuery when eager-loading is set.
	Edges                           EventMetadataEdges `json:"edges"`
	bazel_invocation_event_metadata *int
	selectValues                    sql.SelectValues
}

// EventMetadataEdges holds the relations/edges for other nodes in the graph.
type EventMetadataEdges struct {
	// BazelInvocation holds the value of the bazel_invocation edge.
	BazelInvocation *BazelInvocation `json:"bazel_invocation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// BazelInvocationOrErr returns the BazelInvocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventMetadataEdges) BazelInvocationOrErr() (*BazelInvocation, error) {
	if e.BazelInvocation != nil {
		return e.BazelInvocation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bazelinvocation.Label}
	}
	return nil, &NotLoadedError{edge: "bazel_invocation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventmetadata.FieldID, eventmetadata.FieldSequenceNumber:
			values[i] = new(sql.NullInt64)
		case eventmetadata.FieldEventHash:
			values[i] = new(sql.NullString)
		case eventmetadata.FieldEventReceivedAt:
			values[i] = new(sql.NullTime)
		case eventmetadata.ForeignKeys[0]: // bazel_invocation_event_metadata
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventMetadata fields.
func (em *EventMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventmetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			em.ID = int(value.Int64)
		case eventmetadata.FieldSequenceNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_number", values[i])
			} else if value.Valid {
				em.SequenceNumber = value.Int64
			}
		case eventmetadata.FieldEventReceivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field event_received_at", values[i])
			} else if value.Valid {
				em.EventReceivedAt = value.Time
			}
		case eventmetadata.FieldEventHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_hash", values[i])
			} else if value.Valid {
				em.EventHash = value.String
			}
		case eventmetadata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bazel_invocation_event_metadata", value)
			} else if value.Valid {
				em.bazel_invocation_event_metadata = new(int)
				*em.bazel_invocation_event_metadata = int(value.Int64)
			}
		default:
			em.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventMetadata.
// This includes values selected through modifiers, order, etc.
func (em *EventMetadata) Value(name string) (ent.Value, error) {
	return em.selectValues.Get(name)
}

// QueryBazelInvocation queries the "bazel_invocation" edge of the EventMetadata entity.
func (em *EventMetadata) QueryBazelInvocation() *BazelInvocationQuery {
	return NewEventMetadataClient(em.config).QueryBazelInvocation(em)
}

// Update returns a builder for updating this EventMetadata.
// Note that you need to call EventMetadata.Unwrap() before calling this method if this EventMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (em *EventMetadata) Update() *EventMetadataUpdateOne {
	return NewEventMetadataClient(em.config).UpdateOne(em)
}

// Unwrap unwraps the EventMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (em *EventMetadata) Unwrap() *EventMetadata {
	_tx, ok := em.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventMetadata is not a transactional entity")
	}
	em.config.driver = _tx.drv
	return em
}

// String implements the fmt.Stringer.
func (em *EventMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("EventMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", em.ID))
	builder.WriteString("sequence_number=")
	builder.WriteString(fmt.Sprintf("%v", em.SequenceNumber))
	builder.WriteString(", ")
	builder.WriteString("event_received_at=")
	builder.WriteString(em.EventReceivedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_hash=")
	builder.WriteString(em.EventHash)
	builder.WriteByte(')')
	return builder.String()
}

// EventMetadataSlice is a parsable slice of EventMetadata.
type EventMetadataSlice []*EventMetadata
