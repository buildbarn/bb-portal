// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
	"github.com/buildbarn/bb-portal/ent/gen/ent/target"
)

// TargetUpdate is the builder for updating Target entities.
type TargetUpdate struct {
	config
	hooks     []Hook
	mutation  *TargetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TargetUpdate builder.
func (tu *TargetUpdate) Where(ps ...predicate.Target) *TargetUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetLabel sets the "label" field.
func (tu *TargetUpdate) SetLabel(s string) *TargetUpdate {
	tu.mutation.SetLabel(s)
	return tu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableLabel(s *string) *TargetUpdate {
	if s != nil {
		tu.SetLabel(*s)
	}
	return tu
}

// SetTag sets the "tag" field.
func (tu *TargetUpdate) SetTag(s []string) *TargetUpdate {
	tu.mutation.SetTag(s)
	return tu
}

// AppendTag appends s to the "tag" field.
func (tu *TargetUpdate) AppendTag(s []string) *TargetUpdate {
	tu.mutation.AppendTag(s)
	return tu
}

// ClearTag clears the value of the "tag" field.
func (tu *TargetUpdate) ClearTag() *TargetUpdate {
	tu.mutation.ClearTag()
	return tu
}

// SetTargetKind sets the "target_kind" field.
func (tu *TargetUpdate) SetTargetKind(s string) *TargetUpdate {
	tu.mutation.SetTargetKind(s)
	return tu
}

// SetNillableTargetKind sets the "target_kind" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableTargetKind(s *string) *TargetUpdate {
	if s != nil {
		tu.SetTargetKind(*s)
	}
	return tu
}

// ClearTargetKind clears the value of the "target_kind" field.
func (tu *TargetUpdate) ClearTargetKind() *TargetUpdate {
	tu.mutation.ClearTargetKind()
	return tu
}

// SetTestSize sets the "test_size" field.
func (tu *TargetUpdate) SetTestSize(ts target.TestSize) *TargetUpdate {
	tu.mutation.SetTestSize(ts)
	return tu
}

// SetNillableTestSize sets the "test_size" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableTestSize(ts *target.TestSize) *TargetUpdate {
	if ts != nil {
		tu.SetTestSize(*ts)
	}
	return tu
}

// ClearTestSize clears the value of the "test_size" field.
func (tu *TargetUpdate) ClearTestSize() *TargetUpdate {
	tu.mutation.ClearTestSize()
	return tu
}

// SetSuccess sets the "success" field.
func (tu *TargetUpdate) SetSuccess(b bool) *TargetUpdate {
	tu.mutation.SetSuccess(b)
	return tu
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableSuccess(b *bool) *TargetUpdate {
	if b != nil {
		tu.SetSuccess(*b)
	}
	return tu
}

// ClearSuccess clears the value of the "success" field.
func (tu *TargetUpdate) ClearSuccess() *TargetUpdate {
	tu.mutation.ClearSuccess()
	return tu
}

// SetTestTimeout sets the "test_timeout" field.
func (tu *TargetUpdate) SetTestTimeout(i int64) *TargetUpdate {
	tu.mutation.ResetTestTimeout()
	tu.mutation.SetTestTimeout(i)
	return tu
}

// SetNillableTestTimeout sets the "test_timeout" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableTestTimeout(i *int64) *TargetUpdate {
	if i != nil {
		tu.SetTestTimeout(*i)
	}
	return tu
}

// AddTestTimeout adds i to the "test_timeout" field.
func (tu *TargetUpdate) AddTestTimeout(i int64) *TargetUpdate {
	tu.mutation.AddTestTimeout(i)
	return tu
}

// ClearTestTimeout clears the value of the "test_timeout" field.
func (tu *TargetUpdate) ClearTestTimeout() *TargetUpdate {
	tu.mutation.ClearTestTimeout()
	return tu
}

// SetStartTimeInMs sets the "start_time_in_ms" field.
func (tu *TargetUpdate) SetStartTimeInMs(i int64) *TargetUpdate {
	tu.mutation.ResetStartTimeInMs()
	tu.mutation.SetStartTimeInMs(i)
	return tu
}

// SetNillableStartTimeInMs sets the "start_time_in_ms" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableStartTimeInMs(i *int64) *TargetUpdate {
	if i != nil {
		tu.SetStartTimeInMs(*i)
	}
	return tu
}

// AddStartTimeInMs adds i to the "start_time_in_ms" field.
func (tu *TargetUpdate) AddStartTimeInMs(i int64) *TargetUpdate {
	tu.mutation.AddStartTimeInMs(i)
	return tu
}

// ClearStartTimeInMs clears the value of the "start_time_in_ms" field.
func (tu *TargetUpdate) ClearStartTimeInMs() *TargetUpdate {
	tu.mutation.ClearStartTimeInMs()
	return tu
}

// SetEndTimeInMs sets the "end_time_in_ms" field.
func (tu *TargetUpdate) SetEndTimeInMs(i int64) *TargetUpdate {
	tu.mutation.ResetEndTimeInMs()
	tu.mutation.SetEndTimeInMs(i)
	return tu
}

// SetNillableEndTimeInMs sets the "end_time_in_ms" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableEndTimeInMs(i *int64) *TargetUpdate {
	if i != nil {
		tu.SetEndTimeInMs(*i)
	}
	return tu
}

// AddEndTimeInMs adds i to the "end_time_in_ms" field.
func (tu *TargetUpdate) AddEndTimeInMs(i int64) *TargetUpdate {
	tu.mutation.AddEndTimeInMs(i)
	return tu
}

// ClearEndTimeInMs clears the value of the "end_time_in_ms" field.
func (tu *TargetUpdate) ClearEndTimeInMs() *TargetUpdate {
	tu.mutation.ClearEndTimeInMs()
	return tu
}

// SetDurationInMs sets the "duration_in_ms" field.
func (tu *TargetUpdate) SetDurationInMs(i int64) *TargetUpdate {
	tu.mutation.ResetDurationInMs()
	tu.mutation.SetDurationInMs(i)
	return tu
}

// SetNillableDurationInMs sets the "duration_in_ms" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableDurationInMs(i *int64) *TargetUpdate {
	if i != nil {
		tu.SetDurationInMs(*i)
	}
	return tu
}

// AddDurationInMs adds i to the "duration_in_ms" field.
func (tu *TargetUpdate) AddDurationInMs(i int64) *TargetUpdate {
	tu.mutation.AddDurationInMs(i)
	return tu
}

// ClearDurationInMs clears the value of the "duration_in_ms" field.
func (tu *TargetUpdate) ClearDurationInMs() *TargetUpdate {
	tu.mutation.ClearDurationInMs()
	return tu
}

// SetAbortReason sets the "abort_reason" field.
func (tu *TargetUpdate) SetAbortReason(tr target.AbortReason) *TargetUpdate {
	tu.mutation.SetAbortReason(tr)
	return tu
}

// SetNillableAbortReason sets the "abort_reason" field if the given value is not nil.
func (tu *TargetUpdate) SetNillableAbortReason(tr *target.AbortReason) *TargetUpdate {
	if tr != nil {
		tu.SetAbortReason(*tr)
	}
	return tu
}

// ClearAbortReason clears the value of the "abort_reason" field.
func (tu *TargetUpdate) ClearAbortReason() *TargetUpdate {
	tu.mutation.ClearAbortReason()
	return tu
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (tu *TargetUpdate) SetBazelInvocationID(id int) *TargetUpdate {
	tu.mutation.SetBazelInvocationID(id)
	return tu
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (tu *TargetUpdate) SetNillableBazelInvocationID(id *int) *TargetUpdate {
	if id != nil {
		tu = tu.SetBazelInvocationID(*id)
	}
	return tu
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (tu *TargetUpdate) SetBazelInvocation(b *BazelInvocation) *TargetUpdate {
	return tu.SetBazelInvocationID(b.ID)
}

// Mutation returns the TargetMutation object of the builder.
func (tu *TargetUpdate) Mutation() *TargetMutation {
	return tu.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (tu *TargetUpdate) ClearBazelInvocation() *TargetUpdate {
	tu.mutation.ClearBazelInvocation()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TargetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TargetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TargetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TargetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TargetUpdate) check() error {
	if v, ok := tu.mutation.TestSize(); ok {
		if err := target.TestSizeValidator(v); err != nil {
			return &ValidationError{Name: "test_size", err: fmt.Errorf(`ent: validator failed for field "Target.test_size": %w`, err)}
		}
	}
	if v, ok := tu.mutation.AbortReason(); ok {
		if err := target.AbortReasonValidator(v); err != nil {
			return &ValidationError{Name: "abort_reason", err: fmt.Errorf(`ent: validator failed for field "Target.abort_reason": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TargetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TargetUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TargetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(target.Table, target.Columns, sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Label(); ok {
		_spec.SetField(target.FieldLabel, field.TypeString, value)
	}
	if value, ok := tu.mutation.Tag(); ok {
		_spec.SetField(target.FieldTag, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedTag(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, target.FieldTag, value)
		})
	}
	if tu.mutation.TagCleared() {
		_spec.ClearField(target.FieldTag, field.TypeJSON)
	}
	if value, ok := tu.mutation.TargetKind(); ok {
		_spec.SetField(target.FieldTargetKind, field.TypeString, value)
	}
	if tu.mutation.TargetKindCleared() {
		_spec.ClearField(target.FieldTargetKind, field.TypeString)
	}
	if value, ok := tu.mutation.TestSize(); ok {
		_spec.SetField(target.FieldTestSize, field.TypeEnum, value)
	}
	if tu.mutation.TestSizeCleared() {
		_spec.ClearField(target.FieldTestSize, field.TypeEnum)
	}
	if value, ok := tu.mutation.Success(); ok {
		_spec.SetField(target.FieldSuccess, field.TypeBool, value)
	}
	if tu.mutation.SuccessCleared() {
		_spec.ClearField(target.FieldSuccess, field.TypeBool)
	}
	if value, ok := tu.mutation.TestTimeout(); ok {
		_spec.SetField(target.FieldTestTimeout, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedTestTimeout(); ok {
		_spec.AddField(target.FieldTestTimeout, field.TypeInt64, value)
	}
	if tu.mutation.TestTimeoutCleared() {
		_spec.ClearField(target.FieldTestTimeout, field.TypeInt64)
	}
	if value, ok := tu.mutation.StartTimeInMs(); ok {
		_spec.SetField(target.FieldStartTimeInMs, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedStartTimeInMs(); ok {
		_spec.AddField(target.FieldStartTimeInMs, field.TypeInt64, value)
	}
	if tu.mutation.StartTimeInMsCleared() {
		_spec.ClearField(target.FieldStartTimeInMs, field.TypeInt64)
	}
	if value, ok := tu.mutation.EndTimeInMs(); ok {
		_spec.SetField(target.FieldEndTimeInMs, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedEndTimeInMs(); ok {
		_spec.AddField(target.FieldEndTimeInMs, field.TypeInt64, value)
	}
	if tu.mutation.EndTimeInMsCleared() {
		_spec.ClearField(target.FieldEndTimeInMs, field.TypeInt64)
	}
	if value, ok := tu.mutation.DurationInMs(); ok {
		_spec.SetField(target.FieldDurationInMs, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedDurationInMs(); ok {
		_spec.AddField(target.FieldDurationInMs, field.TypeInt64, value)
	}
	if tu.mutation.DurationInMsCleared() {
		_spec.ClearField(target.FieldDurationInMs, field.TypeInt64)
	}
	if value, ok := tu.mutation.AbortReason(); ok {
		_spec.SetField(target.FieldAbortReason, field.TypeEnum, value)
	}
	if tu.mutation.AbortReasonCleared() {
		_spec.ClearField(target.FieldAbortReason, field.TypeEnum)
	}
	if tu.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.BazelInvocationTable,
			Columns: []string{target.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.BazelInvocationTable,
			Columns: []string{target.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{target.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TargetUpdateOne is the builder for updating a single Target entity.
type TargetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TargetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLabel sets the "label" field.
func (tuo *TargetUpdateOne) SetLabel(s string) *TargetUpdateOne {
	tuo.mutation.SetLabel(s)
	return tuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableLabel(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetLabel(*s)
	}
	return tuo
}

// SetTag sets the "tag" field.
func (tuo *TargetUpdateOne) SetTag(s []string) *TargetUpdateOne {
	tuo.mutation.SetTag(s)
	return tuo
}

// AppendTag appends s to the "tag" field.
func (tuo *TargetUpdateOne) AppendTag(s []string) *TargetUpdateOne {
	tuo.mutation.AppendTag(s)
	return tuo
}

// ClearTag clears the value of the "tag" field.
func (tuo *TargetUpdateOne) ClearTag() *TargetUpdateOne {
	tuo.mutation.ClearTag()
	return tuo
}

// SetTargetKind sets the "target_kind" field.
func (tuo *TargetUpdateOne) SetTargetKind(s string) *TargetUpdateOne {
	tuo.mutation.SetTargetKind(s)
	return tuo
}

// SetNillableTargetKind sets the "target_kind" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableTargetKind(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetTargetKind(*s)
	}
	return tuo
}

// ClearTargetKind clears the value of the "target_kind" field.
func (tuo *TargetUpdateOne) ClearTargetKind() *TargetUpdateOne {
	tuo.mutation.ClearTargetKind()
	return tuo
}

// SetTestSize sets the "test_size" field.
func (tuo *TargetUpdateOne) SetTestSize(ts target.TestSize) *TargetUpdateOne {
	tuo.mutation.SetTestSize(ts)
	return tuo
}

// SetNillableTestSize sets the "test_size" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableTestSize(ts *target.TestSize) *TargetUpdateOne {
	if ts != nil {
		tuo.SetTestSize(*ts)
	}
	return tuo
}

// ClearTestSize clears the value of the "test_size" field.
func (tuo *TargetUpdateOne) ClearTestSize() *TargetUpdateOne {
	tuo.mutation.ClearTestSize()
	return tuo
}

// SetSuccess sets the "success" field.
func (tuo *TargetUpdateOne) SetSuccess(b bool) *TargetUpdateOne {
	tuo.mutation.SetSuccess(b)
	return tuo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableSuccess(b *bool) *TargetUpdateOne {
	if b != nil {
		tuo.SetSuccess(*b)
	}
	return tuo
}

// ClearSuccess clears the value of the "success" field.
func (tuo *TargetUpdateOne) ClearSuccess() *TargetUpdateOne {
	tuo.mutation.ClearSuccess()
	return tuo
}

// SetTestTimeout sets the "test_timeout" field.
func (tuo *TargetUpdateOne) SetTestTimeout(i int64) *TargetUpdateOne {
	tuo.mutation.ResetTestTimeout()
	tuo.mutation.SetTestTimeout(i)
	return tuo
}

// SetNillableTestTimeout sets the "test_timeout" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableTestTimeout(i *int64) *TargetUpdateOne {
	if i != nil {
		tuo.SetTestTimeout(*i)
	}
	return tuo
}

// AddTestTimeout adds i to the "test_timeout" field.
func (tuo *TargetUpdateOne) AddTestTimeout(i int64) *TargetUpdateOne {
	tuo.mutation.AddTestTimeout(i)
	return tuo
}

// ClearTestTimeout clears the value of the "test_timeout" field.
func (tuo *TargetUpdateOne) ClearTestTimeout() *TargetUpdateOne {
	tuo.mutation.ClearTestTimeout()
	return tuo
}

// SetStartTimeInMs sets the "start_time_in_ms" field.
func (tuo *TargetUpdateOne) SetStartTimeInMs(i int64) *TargetUpdateOne {
	tuo.mutation.ResetStartTimeInMs()
	tuo.mutation.SetStartTimeInMs(i)
	return tuo
}

// SetNillableStartTimeInMs sets the "start_time_in_ms" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableStartTimeInMs(i *int64) *TargetUpdateOne {
	if i != nil {
		tuo.SetStartTimeInMs(*i)
	}
	return tuo
}

// AddStartTimeInMs adds i to the "start_time_in_ms" field.
func (tuo *TargetUpdateOne) AddStartTimeInMs(i int64) *TargetUpdateOne {
	tuo.mutation.AddStartTimeInMs(i)
	return tuo
}

// ClearStartTimeInMs clears the value of the "start_time_in_ms" field.
func (tuo *TargetUpdateOne) ClearStartTimeInMs() *TargetUpdateOne {
	tuo.mutation.ClearStartTimeInMs()
	return tuo
}

// SetEndTimeInMs sets the "end_time_in_ms" field.
func (tuo *TargetUpdateOne) SetEndTimeInMs(i int64) *TargetUpdateOne {
	tuo.mutation.ResetEndTimeInMs()
	tuo.mutation.SetEndTimeInMs(i)
	return tuo
}

// SetNillableEndTimeInMs sets the "end_time_in_ms" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableEndTimeInMs(i *int64) *TargetUpdateOne {
	if i != nil {
		tuo.SetEndTimeInMs(*i)
	}
	return tuo
}

// AddEndTimeInMs adds i to the "end_time_in_ms" field.
func (tuo *TargetUpdateOne) AddEndTimeInMs(i int64) *TargetUpdateOne {
	tuo.mutation.AddEndTimeInMs(i)
	return tuo
}

// ClearEndTimeInMs clears the value of the "end_time_in_ms" field.
func (tuo *TargetUpdateOne) ClearEndTimeInMs() *TargetUpdateOne {
	tuo.mutation.ClearEndTimeInMs()
	return tuo
}

// SetDurationInMs sets the "duration_in_ms" field.
func (tuo *TargetUpdateOne) SetDurationInMs(i int64) *TargetUpdateOne {
	tuo.mutation.ResetDurationInMs()
	tuo.mutation.SetDurationInMs(i)
	return tuo
}

// SetNillableDurationInMs sets the "duration_in_ms" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableDurationInMs(i *int64) *TargetUpdateOne {
	if i != nil {
		tuo.SetDurationInMs(*i)
	}
	return tuo
}

// AddDurationInMs adds i to the "duration_in_ms" field.
func (tuo *TargetUpdateOne) AddDurationInMs(i int64) *TargetUpdateOne {
	tuo.mutation.AddDurationInMs(i)
	return tuo
}

// ClearDurationInMs clears the value of the "duration_in_ms" field.
func (tuo *TargetUpdateOne) ClearDurationInMs() *TargetUpdateOne {
	tuo.mutation.ClearDurationInMs()
	return tuo
}

// SetAbortReason sets the "abort_reason" field.
func (tuo *TargetUpdateOne) SetAbortReason(tr target.AbortReason) *TargetUpdateOne {
	tuo.mutation.SetAbortReason(tr)
	return tuo
}

// SetNillableAbortReason sets the "abort_reason" field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableAbortReason(tr *target.AbortReason) *TargetUpdateOne {
	if tr != nil {
		tuo.SetAbortReason(*tr)
	}
	return tuo
}

// ClearAbortReason clears the value of the "abort_reason" field.
func (tuo *TargetUpdateOne) ClearAbortReason() *TargetUpdateOne {
	tuo.mutation.ClearAbortReason()
	return tuo
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (tuo *TargetUpdateOne) SetBazelInvocationID(id int) *TargetUpdateOne {
	tuo.mutation.SetBazelInvocationID(id)
	return tuo
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableBazelInvocationID(id *int) *TargetUpdateOne {
	if id != nil {
		tuo = tuo.SetBazelInvocationID(*id)
	}
	return tuo
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (tuo *TargetUpdateOne) SetBazelInvocation(b *BazelInvocation) *TargetUpdateOne {
	return tuo.SetBazelInvocationID(b.ID)
}

// Mutation returns the TargetMutation object of the builder.
func (tuo *TargetUpdateOne) Mutation() *TargetMutation {
	return tuo.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (tuo *TargetUpdateOne) ClearBazelInvocation() *TargetUpdateOne {
	tuo.mutation.ClearBazelInvocation()
	return tuo
}

// Where appends a list predicates to the TargetUpdate builder.
func (tuo *TargetUpdateOne) Where(ps ...predicate.Target) *TargetUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TargetUpdateOne) Select(field string, fields ...string) *TargetUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Target entity.
func (tuo *TargetUpdateOne) Save(ctx context.Context) (*Target, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TargetUpdateOne) SaveX(ctx context.Context) *Target {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TargetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TargetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TargetUpdateOne) check() error {
	if v, ok := tuo.mutation.TestSize(); ok {
		if err := target.TestSizeValidator(v); err != nil {
			return &ValidationError{Name: "test_size", err: fmt.Errorf(`ent: validator failed for field "Target.test_size": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.AbortReason(); ok {
		if err := target.AbortReasonValidator(v); err != nil {
			return &ValidationError{Name: "abort_reason", err: fmt.Errorf(`ent: validator failed for field "Target.abort_reason": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TargetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TargetUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TargetUpdateOne) sqlSave(ctx context.Context) (_node *Target, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(target.Table, target.Columns, sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Target.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, target.FieldID)
		for _, f := range fields {
			if !target.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != target.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Label(); ok {
		_spec.SetField(target.FieldLabel, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Tag(); ok {
		_spec.SetField(target.FieldTag, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedTag(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, target.FieldTag, value)
		})
	}
	if tuo.mutation.TagCleared() {
		_spec.ClearField(target.FieldTag, field.TypeJSON)
	}
	if value, ok := tuo.mutation.TargetKind(); ok {
		_spec.SetField(target.FieldTargetKind, field.TypeString, value)
	}
	if tuo.mutation.TargetKindCleared() {
		_spec.ClearField(target.FieldTargetKind, field.TypeString)
	}
	if value, ok := tuo.mutation.TestSize(); ok {
		_spec.SetField(target.FieldTestSize, field.TypeEnum, value)
	}
	if tuo.mutation.TestSizeCleared() {
		_spec.ClearField(target.FieldTestSize, field.TypeEnum)
	}
	if value, ok := tuo.mutation.Success(); ok {
		_spec.SetField(target.FieldSuccess, field.TypeBool, value)
	}
	if tuo.mutation.SuccessCleared() {
		_spec.ClearField(target.FieldSuccess, field.TypeBool)
	}
	if value, ok := tuo.mutation.TestTimeout(); ok {
		_spec.SetField(target.FieldTestTimeout, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedTestTimeout(); ok {
		_spec.AddField(target.FieldTestTimeout, field.TypeInt64, value)
	}
	if tuo.mutation.TestTimeoutCleared() {
		_spec.ClearField(target.FieldTestTimeout, field.TypeInt64)
	}
	if value, ok := tuo.mutation.StartTimeInMs(); ok {
		_spec.SetField(target.FieldStartTimeInMs, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedStartTimeInMs(); ok {
		_spec.AddField(target.FieldStartTimeInMs, field.TypeInt64, value)
	}
	if tuo.mutation.StartTimeInMsCleared() {
		_spec.ClearField(target.FieldStartTimeInMs, field.TypeInt64)
	}
	if value, ok := tuo.mutation.EndTimeInMs(); ok {
		_spec.SetField(target.FieldEndTimeInMs, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedEndTimeInMs(); ok {
		_spec.AddField(target.FieldEndTimeInMs, field.TypeInt64, value)
	}
	if tuo.mutation.EndTimeInMsCleared() {
		_spec.ClearField(target.FieldEndTimeInMs, field.TypeInt64)
	}
	if value, ok := tuo.mutation.DurationInMs(); ok {
		_spec.SetField(target.FieldDurationInMs, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedDurationInMs(); ok {
		_spec.AddField(target.FieldDurationInMs, field.TypeInt64, value)
	}
	if tuo.mutation.DurationInMsCleared() {
		_spec.ClearField(target.FieldDurationInMs, field.TypeInt64)
	}
	if value, ok := tuo.mutation.AbortReason(); ok {
		_spec.SetField(target.FieldAbortReason, field.TypeEnum, value)
	}
	if tuo.mutation.AbortReasonCleared() {
		_spec.ClearField(target.FieldAbortReason, field.TypeEnum)
	}
	if tuo.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.BazelInvocationTable,
			Columns: []string{target.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.BazelInvocationTable,
			Columns: []string{target.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Target{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{target.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
