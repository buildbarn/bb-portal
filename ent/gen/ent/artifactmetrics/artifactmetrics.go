// Code generated by ent, DO NOT EDIT.

package artifactmetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the artifactmetrics type in the database.
	Label = "artifact_metrics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceArtifactsReadSizeInBytes holds the string denoting the source_artifacts_read_size_in_bytes field in the database.
	FieldSourceArtifactsReadSizeInBytes = "source_artifacts_read_size_in_bytes"
	// FieldSourceArtifactsReadCount holds the string denoting the source_artifacts_read_count field in the database.
	FieldSourceArtifactsReadCount = "source_artifacts_read_count"
	// FieldOutputArtifactsSeenSizeInBytes holds the string denoting the output_artifacts_seen_size_in_bytes field in the database.
	FieldOutputArtifactsSeenSizeInBytes = "output_artifacts_seen_size_in_bytes"
	// FieldOutputArtifactsSeenCount holds the string denoting the output_artifacts_seen_count field in the database.
	FieldOutputArtifactsSeenCount = "output_artifacts_seen_count"
	// FieldOutputArtifactsFromActionCacheSizeInBytes holds the string denoting the output_artifacts_from_action_cache_size_in_bytes field in the database.
	FieldOutputArtifactsFromActionCacheSizeInBytes = "output_artifacts_from_action_cache_size_in_bytes"
	// FieldOutputArtifactsFromActionCacheCount holds the string denoting the output_artifacts_from_action_cache_count field in the database.
	FieldOutputArtifactsFromActionCacheCount = "output_artifacts_from_action_cache_count"
	// FieldTopLevelArtifactsSizeInBytes holds the string denoting the top_level_artifacts_size_in_bytes field in the database.
	FieldTopLevelArtifactsSizeInBytes = "top_level_artifacts_size_in_bytes"
	// FieldTopLevelArtifactsCount holds the string denoting the top_level_artifacts_count field in the database.
	FieldTopLevelArtifactsCount = "top_level_artifacts_count"
	// EdgeMetrics holds the string denoting the metrics edge name in mutations.
	EdgeMetrics = "metrics"
	// Table holds the table name of the artifactmetrics in the database.
	Table = "artifact_metrics"
	// MetricsTable is the table that holds the metrics relation/edge.
	MetricsTable = "artifact_metrics"
	// MetricsInverseTable is the table name for the Metrics entity.
	// It exists in this package in order to avoid circular dependency with the "metrics" package.
	MetricsInverseTable = "metrics"
	// MetricsColumn is the table column denoting the metrics relation/edge.
	MetricsColumn = "metrics_artifact_metrics"
)

// Columns holds all SQL columns for artifactmetrics fields.
var Columns = []string{
	FieldID,
	FieldSourceArtifactsReadSizeInBytes,
	FieldSourceArtifactsReadCount,
	FieldOutputArtifactsSeenSizeInBytes,
	FieldOutputArtifactsSeenCount,
	FieldOutputArtifactsFromActionCacheSizeInBytes,
	FieldOutputArtifactsFromActionCacheCount,
	FieldTopLevelArtifactsSizeInBytes,
	FieldTopLevelArtifactsCount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "artifact_metrics"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"metrics_artifact_metrics",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ArtifactMetrics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceArtifactsReadSizeInBytes orders the results by the source_artifacts_read_size_in_bytes field.
func BySourceArtifactsReadSizeInBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceArtifactsReadSizeInBytes, opts...).ToFunc()
}

// BySourceArtifactsReadCount orders the results by the source_artifacts_read_count field.
func BySourceArtifactsReadCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceArtifactsReadCount, opts...).ToFunc()
}

// ByOutputArtifactsSeenSizeInBytes orders the results by the output_artifacts_seen_size_in_bytes field.
func ByOutputArtifactsSeenSizeInBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputArtifactsSeenSizeInBytes, opts...).ToFunc()
}

// ByOutputArtifactsSeenCount orders the results by the output_artifacts_seen_count field.
func ByOutputArtifactsSeenCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputArtifactsSeenCount, opts...).ToFunc()
}

// ByOutputArtifactsFromActionCacheSizeInBytes orders the results by the output_artifacts_from_action_cache_size_in_bytes field.
func ByOutputArtifactsFromActionCacheSizeInBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputArtifactsFromActionCacheSizeInBytes, opts...).ToFunc()
}

// ByOutputArtifactsFromActionCacheCount orders the results by the output_artifacts_from_action_cache_count field.
func ByOutputArtifactsFromActionCacheCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputArtifactsFromActionCacheCount, opts...).ToFunc()
}

// ByTopLevelArtifactsSizeInBytes orders the results by the top_level_artifacts_size_in_bytes field.
func ByTopLevelArtifactsSizeInBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopLevelArtifactsSizeInBytes, opts...).ToFunc()
}

// ByTopLevelArtifactsCount orders the results by the top_level_artifacts_count field.
func ByTopLevelArtifactsCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopLevelArtifactsCount, opts...).ToFunc()
}

// ByMetricsField orders the results by metrics field.
func ByMetricsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricsStep(), sql.OrderByField(field, opts...))
	}
}
func newMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, MetricsTable, MetricsColumn),
	)
}
