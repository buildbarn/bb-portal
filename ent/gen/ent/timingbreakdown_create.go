// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/exectioninfo"
	"github.com/buildbarn/bb-portal/ent/gen/ent/timingbreakdown"
	"github.com/buildbarn/bb-portal/ent/gen/ent/timingchild"
)

// TimingBreakdownCreate is the builder for creating a TimingBreakdown entity.
type TimingBreakdownCreate struct {
	config
	mutation *TimingBreakdownMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tbc *TimingBreakdownCreate) SetName(s string) *TimingBreakdownCreate {
	tbc.mutation.SetName(s)
	return tbc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tbc *TimingBreakdownCreate) SetNillableName(s *string) *TimingBreakdownCreate {
	if s != nil {
		tbc.SetName(*s)
	}
	return tbc
}

// SetTime sets the "time" field.
func (tbc *TimingBreakdownCreate) SetTime(s string) *TimingBreakdownCreate {
	tbc.mutation.SetTime(s)
	return tbc
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (tbc *TimingBreakdownCreate) SetNillableTime(s *string) *TimingBreakdownCreate {
	if s != nil {
		tbc.SetTime(*s)
	}
	return tbc
}

// SetExecutionInfoID sets the "execution_info" edge to the ExectionInfo entity by ID.
func (tbc *TimingBreakdownCreate) SetExecutionInfoID(id int) *TimingBreakdownCreate {
	tbc.mutation.SetExecutionInfoID(id)
	return tbc
}

// SetNillableExecutionInfoID sets the "execution_info" edge to the ExectionInfo entity by ID if the given value is not nil.
func (tbc *TimingBreakdownCreate) SetNillableExecutionInfoID(id *int) *TimingBreakdownCreate {
	if id != nil {
		tbc = tbc.SetExecutionInfoID(*id)
	}
	return tbc
}

// SetExecutionInfo sets the "execution_info" edge to the ExectionInfo entity.
func (tbc *TimingBreakdownCreate) SetExecutionInfo(e *ExectionInfo) *TimingBreakdownCreate {
	return tbc.SetExecutionInfoID(e.ID)
}

// AddChildIDs adds the "child" edge to the TimingChild entity by IDs.
func (tbc *TimingBreakdownCreate) AddChildIDs(ids ...int) *TimingBreakdownCreate {
	tbc.mutation.AddChildIDs(ids...)
	return tbc
}

// AddChild adds the "child" edges to the TimingChild entity.
func (tbc *TimingBreakdownCreate) AddChild(t ...*TimingChild) *TimingBreakdownCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tbc.AddChildIDs(ids...)
}

// Mutation returns the TimingBreakdownMutation object of the builder.
func (tbc *TimingBreakdownCreate) Mutation() *TimingBreakdownMutation {
	return tbc.mutation
}

// Save creates the TimingBreakdown in the database.
func (tbc *TimingBreakdownCreate) Save(ctx context.Context) (*TimingBreakdown, error) {
	return withHooks(ctx, tbc.sqlSave, tbc.mutation, tbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tbc *TimingBreakdownCreate) SaveX(ctx context.Context) *TimingBreakdown {
	v, err := tbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tbc *TimingBreakdownCreate) Exec(ctx context.Context) error {
	_, err := tbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbc *TimingBreakdownCreate) ExecX(ctx context.Context) {
	if err := tbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tbc *TimingBreakdownCreate) check() error {
	return nil
}

func (tbc *TimingBreakdownCreate) sqlSave(ctx context.Context) (*TimingBreakdown, error) {
	if err := tbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tbc.mutation.id = &_node.ID
	tbc.mutation.done = true
	return _node, nil
}

func (tbc *TimingBreakdownCreate) createSpec() (*TimingBreakdown, *sqlgraph.CreateSpec) {
	var (
		_node = &TimingBreakdown{config: tbc.config}
		_spec = sqlgraph.NewCreateSpec(timingbreakdown.Table, sqlgraph.NewFieldSpec(timingbreakdown.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tbc.conflict
	if value, ok := tbc.mutation.Name(); ok {
		_spec.SetField(timingbreakdown.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tbc.mutation.Time(); ok {
		_spec.SetField(timingbreakdown.FieldTime, field.TypeString, value)
		_node.Time = value
	}
	if nodes := tbc.mutation.ExecutionInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   timingbreakdown.ExecutionInfoTable,
			Columns: []string{timingbreakdown.ExecutionInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exectioninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exection_info_timing_breakdown = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tbc.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   timingbreakdown.ChildTable,
			Columns: []string{timingbreakdown.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timingchild.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TimingBreakdown.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimingBreakdownUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tbc *TimingBreakdownCreate) OnConflict(opts ...sql.ConflictOption) *TimingBreakdownUpsertOne {
	tbc.conflict = opts
	return &TimingBreakdownUpsertOne{
		create: tbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TimingBreakdown.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tbc *TimingBreakdownCreate) OnConflictColumns(columns ...string) *TimingBreakdownUpsertOne {
	tbc.conflict = append(tbc.conflict, sql.ConflictColumns(columns...))
	return &TimingBreakdownUpsertOne{
		create: tbc,
	}
}

type (
	// TimingBreakdownUpsertOne is the builder for "upsert"-ing
	//  one TimingBreakdown node.
	TimingBreakdownUpsertOne struct {
		create *TimingBreakdownCreate
	}

	// TimingBreakdownUpsert is the "OnConflict" setter.
	TimingBreakdownUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TimingBreakdownUpsert) SetName(v string) *TimingBreakdownUpsert {
	u.Set(timingbreakdown.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimingBreakdownUpsert) UpdateName() *TimingBreakdownUpsert {
	u.SetExcluded(timingbreakdown.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TimingBreakdownUpsert) ClearName() *TimingBreakdownUpsert {
	u.SetNull(timingbreakdown.FieldName)
	return u
}

// SetTime sets the "time" field.
func (u *TimingBreakdownUpsert) SetTime(v string) *TimingBreakdownUpsert {
	u.Set(timingbreakdown.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *TimingBreakdownUpsert) UpdateTime() *TimingBreakdownUpsert {
	u.SetExcluded(timingbreakdown.FieldTime)
	return u
}

// ClearTime clears the value of the "time" field.
func (u *TimingBreakdownUpsert) ClearTime() *TimingBreakdownUpsert {
	u.SetNull(timingbreakdown.FieldTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TimingBreakdown.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TimingBreakdownUpsertOne) UpdateNewValues() *TimingBreakdownUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TimingBreakdown.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TimingBreakdownUpsertOne) Ignore() *TimingBreakdownUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimingBreakdownUpsertOne) DoNothing() *TimingBreakdownUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimingBreakdownCreate.OnConflict
// documentation for more info.
func (u *TimingBreakdownUpsertOne) Update(set func(*TimingBreakdownUpsert)) *TimingBreakdownUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimingBreakdownUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TimingBreakdownUpsertOne) SetName(v string) *TimingBreakdownUpsertOne {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimingBreakdownUpsertOne) UpdateName() *TimingBreakdownUpsertOne {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TimingBreakdownUpsertOne) ClearName() *TimingBreakdownUpsertOne {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.ClearName()
	})
}

// SetTime sets the "time" field.
func (u *TimingBreakdownUpsertOne) SetTime(v string) *TimingBreakdownUpsertOne {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *TimingBreakdownUpsertOne) UpdateTime() *TimingBreakdownUpsertOne {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.UpdateTime()
	})
}

// ClearTime clears the value of the "time" field.
func (u *TimingBreakdownUpsertOne) ClearTime() *TimingBreakdownUpsertOne {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.ClearTime()
	})
}

// Exec executes the query.
func (u *TimingBreakdownUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimingBreakdownCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimingBreakdownUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TimingBreakdownUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TimingBreakdownUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TimingBreakdownCreateBulk is the builder for creating many TimingBreakdown entities in bulk.
type TimingBreakdownCreateBulk struct {
	config
	err      error
	builders []*TimingBreakdownCreate
	conflict []sql.ConflictOption
}

// Save creates the TimingBreakdown entities in the database.
func (tbcb *TimingBreakdownCreateBulk) Save(ctx context.Context) ([]*TimingBreakdown, error) {
	if tbcb.err != nil {
		return nil, tbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tbcb.builders))
	nodes := make([]*TimingBreakdown, len(tbcb.builders))
	mutators := make([]Mutator, len(tbcb.builders))
	for i := range tbcb.builders {
		func(i int, root context.Context) {
			builder := tbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimingBreakdownMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tbcb *TimingBreakdownCreateBulk) SaveX(ctx context.Context) []*TimingBreakdown {
	v, err := tbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tbcb *TimingBreakdownCreateBulk) Exec(ctx context.Context) error {
	_, err := tbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbcb *TimingBreakdownCreateBulk) ExecX(ctx context.Context) {
	if err := tbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TimingBreakdown.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimingBreakdownUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tbcb *TimingBreakdownCreateBulk) OnConflict(opts ...sql.ConflictOption) *TimingBreakdownUpsertBulk {
	tbcb.conflict = opts
	return &TimingBreakdownUpsertBulk{
		create: tbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TimingBreakdown.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tbcb *TimingBreakdownCreateBulk) OnConflictColumns(columns ...string) *TimingBreakdownUpsertBulk {
	tbcb.conflict = append(tbcb.conflict, sql.ConflictColumns(columns...))
	return &TimingBreakdownUpsertBulk{
		create: tbcb,
	}
}

// TimingBreakdownUpsertBulk is the builder for "upsert"-ing
// a bulk of TimingBreakdown nodes.
type TimingBreakdownUpsertBulk struct {
	create *TimingBreakdownCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TimingBreakdown.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TimingBreakdownUpsertBulk) UpdateNewValues() *TimingBreakdownUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TimingBreakdown.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TimingBreakdownUpsertBulk) Ignore() *TimingBreakdownUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimingBreakdownUpsertBulk) DoNothing() *TimingBreakdownUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimingBreakdownCreateBulk.OnConflict
// documentation for more info.
func (u *TimingBreakdownUpsertBulk) Update(set func(*TimingBreakdownUpsert)) *TimingBreakdownUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimingBreakdownUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TimingBreakdownUpsertBulk) SetName(v string) *TimingBreakdownUpsertBulk {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimingBreakdownUpsertBulk) UpdateName() *TimingBreakdownUpsertBulk {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TimingBreakdownUpsertBulk) ClearName() *TimingBreakdownUpsertBulk {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.ClearName()
	})
}

// SetTime sets the "time" field.
func (u *TimingBreakdownUpsertBulk) SetTime(v string) *TimingBreakdownUpsertBulk {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *TimingBreakdownUpsertBulk) UpdateTime() *TimingBreakdownUpsertBulk {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.UpdateTime()
	})
}

// ClearTime clears the value of the "time" field.
func (u *TimingBreakdownUpsertBulk) ClearTime() *TimingBreakdownUpsertBulk {
	return u.Update(func(s *TimingBreakdownUpsert) {
		s.ClearTime()
	})
}

// Exec executes the query.
func (u *TimingBreakdownUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TimingBreakdownCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimingBreakdownCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimingBreakdownUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
