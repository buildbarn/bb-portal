// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/targetmetrics"
)

// TargetMetricsCreate is the builder for creating a TargetMetrics entity.
type TargetMetricsCreate struct {
	config
	mutation *TargetMetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTargetsLoaded sets the "targets_loaded" field.
func (tmc *TargetMetricsCreate) SetTargetsLoaded(i int64) *TargetMetricsCreate {
	tmc.mutation.SetTargetsLoaded(i)
	return tmc
}

// SetNillableTargetsLoaded sets the "targets_loaded" field if the given value is not nil.
func (tmc *TargetMetricsCreate) SetNillableTargetsLoaded(i *int64) *TargetMetricsCreate {
	if i != nil {
		tmc.SetTargetsLoaded(*i)
	}
	return tmc
}

// SetTargetsConfigured sets the "targets_configured" field.
func (tmc *TargetMetricsCreate) SetTargetsConfigured(i int64) *TargetMetricsCreate {
	tmc.mutation.SetTargetsConfigured(i)
	return tmc
}

// SetNillableTargetsConfigured sets the "targets_configured" field if the given value is not nil.
func (tmc *TargetMetricsCreate) SetNillableTargetsConfigured(i *int64) *TargetMetricsCreate {
	if i != nil {
		tmc.SetTargetsConfigured(*i)
	}
	return tmc
}

// SetTargetsConfiguredNotIncludingAspects sets the "targets_configured_not_including_aspects" field.
func (tmc *TargetMetricsCreate) SetTargetsConfiguredNotIncludingAspects(i int64) *TargetMetricsCreate {
	tmc.mutation.SetTargetsConfiguredNotIncludingAspects(i)
	return tmc
}

// SetNillableTargetsConfiguredNotIncludingAspects sets the "targets_configured_not_including_aspects" field if the given value is not nil.
func (tmc *TargetMetricsCreate) SetNillableTargetsConfiguredNotIncludingAspects(i *int64) *TargetMetricsCreate {
	if i != nil {
		tmc.SetTargetsConfiguredNotIncludingAspects(*i)
	}
	return tmc
}

// SetMetricsID sets the "metrics" edge to the Metrics entity by ID.
func (tmc *TargetMetricsCreate) SetMetricsID(id int) *TargetMetricsCreate {
	tmc.mutation.SetMetricsID(id)
	return tmc
}

// SetNillableMetricsID sets the "metrics" edge to the Metrics entity by ID if the given value is not nil.
func (tmc *TargetMetricsCreate) SetNillableMetricsID(id *int) *TargetMetricsCreate {
	if id != nil {
		tmc = tmc.SetMetricsID(*id)
	}
	return tmc
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (tmc *TargetMetricsCreate) SetMetrics(m *Metrics) *TargetMetricsCreate {
	return tmc.SetMetricsID(m.ID)
}

// Mutation returns the TargetMetricsMutation object of the builder.
func (tmc *TargetMetricsCreate) Mutation() *TargetMetricsMutation {
	return tmc.mutation
}

// Save creates the TargetMetrics in the database.
func (tmc *TargetMetricsCreate) Save(ctx context.Context) (*TargetMetrics, error) {
	return withHooks(ctx, tmc.sqlSave, tmc.mutation, tmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TargetMetricsCreate) SaveX(ctx context.Context) *TargetMetrics {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TargetMetricsCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TargetMetricsCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TargetMetricsCreate) check() error {
	return nil
}

func (tmc *TargetMetricsCreate) sqlSave(ctx context.Context) (*TargetMetrics, error) {
	if err := tmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tmc.mutation.id = &_node.ID
	tmc.mutation.done = true
	return _node, nil
}

func (tmc *TargetMetricsCreate) createSpec() (*TargetMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &TargetMetrics{config: tmc.config}
		_spec = sqlgraph.NewCreateSpec(targetmetrics.Table, sqlgraph.NewFieldSpec(targetmetrics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tmc.conflict
	if value, ok := tmc.mutation.TargetsLoaded(); ok {
		_spec.SetField(targetmetrics.FieldTargetsLoaded, field.TypeInt64, value)
		_node.TargetsLoaded = value
	}
	if value, ok := tmc.mutation.TargetsConfigured(); ok {
		_spec.SetField(targetmetrics.FieldTargetsConfigured, field.TypeInt64, value)
		_node.TargetsConfigured = value
	}
	if value, ok := tmc.mutation.TargetsConfiguredNotIncludingAspects(); ok {
		_spec.SetField(targetmetrics.FieldTargetsConfiguredNotIncludingAspects, field.TypeInt64, value)
		_node.TargetsConfiguredNotIncludingAspects = value
	}
	if nodes := tmc.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   targetmetrics.MetricsTable,
			Columns: []string{targetmetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.metrics_target_metrics = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TargetMetrics.Create().
//		SetTargetsLoaded(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TargetMetricsUpsert) {
//			SetTargetsLoaded(v+v).
//		}).
//		Exec(ctx)
func (tmc *TargetMetricsCreate) OnConflict(opts ...sql.ConflictOption) *TargetMetricsUpsertOne {
	tmc.conflict = opts
	return &TargetMetricsUpsertOne{
		create: tmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TargetMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmc *TargetMetricsCreate) OnConflictColumns(columns ...string) *TargetMetricsUpsertOne {
	tmc.conflict = append(tmc.conflict, sql.ConflictColumns(columns...))
	return &TargetMetricsUpsertOne{
		create: tmc,
	}
}

type (
	// TargetMetricsUpsertOne is the builder for "upsert"-ing
	//  one TargetMetrics node.
	TargetMetricsUpsertOne struct {
		create *TargetMetricsCreate
	}

	// TargetMetricsUpsert is the "OnConflict" setter.
	TargetMetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetTargetsLoaded sets the "targets_loaded" field.
func (u *TargetMetricsUpsert) SetTargetsLoaded(v int64) *TargetMetricsUpsert {
	u.Set(targetmetrics.FieldTargetsLoaded, v)
	return u
}

// UpdateTargetsLoaded sets the "targets_loaded" field to the value that was provided on create.
func (u *TargetMetricsUpsert) UpdateTargetsLoaded() *TargetMetricsUpsert {
	u.SetExcluded(targetmetrics.FieldTargetsLoaded)
	return u
}

// AddTargetsLoaded adds v to the "targets_loaded" field.
func (u *TargetMetricsUpsert) AddTargetsLoaded(v int64) *TargetMetricsUpsert {
	u.Add(targetmetrics.FieldTargetsLoaded, v)
	return u
}

// ClearTargetsLoaded clears the value of the "targets_loaded" field.
func (u *TargetMetricsUpsert) ClearTargetsLoaded() *TargetMetricsUpsert {
	u.SetNull(targetmetrics.FieldTargetsLoaded)
	return u
}

// SetTargetsConfigured sets the "targets_configured" field.
func (u *TargetMetricsUpsert) SetTargetsConfigured(v int64) *TargetMetricsUpsert {
	u.Set(targetmetrics.FieldTargetsConfigured, v)
	return u
}

// UpdateTargetsConfigured sets the "targets_configured" field to the value that was provided on create.
func (u *TargetMetricsUpsert) UpdateTargetsConfigured() *TargetMetricsUpsert {
	u.SetExcluded(targetmetrics.FieldTargetsConfigured)
	return u
}

// AddTargetsConfigured adds v to the "targets_configured" field.
func (u *TargetMetricsUpsert) AddTargetsConfigured(v int64) *TargetMetricsUpsert {
	u.Add(targetmetrics.FieldTargetsConfigured, v)
	return u
}

// ClearTargetsConfigured clears the value of the "targets_configured" field.
func (u *TargetMetricsUpsert) ClearTargetsConfigured() *TargetMetricsUpsert {
	u.SetNull(targetmetrics.FieldTargetsConfigured)
	return u
}

// SetTargetsConfiguredNotIncludingAspects sets the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsert) SetTargetsConfiguredNotIncludingAspects(v int64) *TargetMetricsUpsert {
	u.Set(targetmetrics.FieldTargetsConfiguredNotIncludingAspects, v)
	return u
}

// UpdateTargetsConfiguredNotIncludingAspects sets the "targets_configured_not_including_aspects" field to the value that was provided on create.
func (u *TargetMetricsUpsert) UpdateTargetsConfiguredNotIncludingAspects() *TargetMetricsUpsert {
	u.SetExcluded(targetmetrics.FieldTargetsConfiguredNotIncludingAspects)
	return u
}

// AddTargetsConfiguredNotIncludingAspects adds v to the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsert) AddTargetsConfiguredNotIncludingAspects(v int64) *TargetMetricsUpsert {
	u.Add(targetmetrics.FieldTargetsConfiguredNotIncludingAspects, v)
	return u
}

// ClearTargetsConfiguredNotIncludingAspects clears the value of the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsert) ClearTargetsConfiguredNotIncludingAspects() *TargetMetricsUpsert {
	u.SetNull(targetmetrics.FieldTargetsConfiguredNotIncludingAspects)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TargetMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TargetMetricsUpsertOne) UpdateNewValues() *TargetMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TargetMetrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TargetMetricsUpsertOne) Ignore() *TargetMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TargetMetricsUpsertOne) DoNothing() *TargetMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TargetMetricsCreate.OnConflict
// documentation for more info.
func (u *TargetMetricsUpsertOne) Update(set func(*TargetMetricsUpsert)) *TargetMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TargetMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTargetsLoaded sets the "targets_loaded" field.
func (u *TargetMetricsUpsertOne) SetTargetsLoaded(v int64) *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.SetTargetsLoaded(v)
	})
}

// AddTargetsLoaded adds v to the "targets_loaded" field.
func (u *TargetMetricsUpsertOne) AddTargetsLoaded(v int64) *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.AddTargetsLoaded(v)
	})
}

// UpdateTargetsLoaded sets the "targets_loaded" field to the value that was provided on create.
func (u *TargetMetricsUpsertOne) UpdateTargetsLoaded() *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.UpdateTargetsLoaded()
	})
}

// ClearTargetsLoaded clears the value of the "targets_loaded" field.
func (u *TargetMetricsUpsertOne) ClearTargetsLoaded() *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.ClearTargetsLoaded()
	})
}

// SetTargetsConfigured sets the "targets_configured" field.
func (u *TargetMetricsUpsertOne) SetTargetsConfigured(v int64) *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.SetTargetsConfigured(v)
	})
}

// AddTargetsConfigured adds v to the "targets_configured" field.
func (u *TargetMetricsUpsertOne) AddTargetsConfigured(v int64) *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.AddTargetsConfigured(v)
	})
}

// UpdateTargetsConfigured sets the "targets_configured" field to the value that was provided on create.
func (u *TargetMetricsUpsertOne) UpdateTargetsConfigured() *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.UpdateTargetsConfigured()
	})
}

// ClearTargetsConfigured clears the value of the "targets_configured" field.
func (u *TargetMetricsUpsertOne) ClearTargetsConfigured() *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.ClearTargetsConfigured()
	})
}

// SetTargetsConfiguredNotIncludingAspects sets the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsertOne) SetTargetsConfiguredNotIncludingAspects(v int64) *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.SetTargetsConfiguredNotIncludingAspects(v)
	})
}

// AddTargetsConfiguredNotIncludingAspects adds v to the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsertOne) AddTargetsConfiguredNotIncludingAspects(v int64) *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.AddTargetsConfiguredNotIncludingAspects(v)
	})
}

// UpdateTargetsConfiguredNotIncludingAspects sets the "targets_configured_not_including_aspects" field to the value that was provided on create.
func (u *TargetMetricsUpsertOne) UpdateTargetsConfiguredNotIncludingAspects() *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.UpdateTargetsConfiguredNotIncludingAspects()
	})
}

// ClearTargetsConfiguredNotIncludingAspects clears the value of the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsertOne) ClearTargetsConfiguredNotIncludingAspects() *TargetMetricsUpsertOne {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.ClearTargetsConfiguredNotIncludingAspects()
	})
}

// Exec executes the query.
func (u *TargetMetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TargetMetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TargetMetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TargetMetricsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TargetMetricsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TargetMetricsCreateBulk is the builder for creating many TargetMetrics entities in bulk.
type TargetMetricsCreateBulk struct {
	config
	err      error
	builders []*TargetMetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the TargetMetrics entities in the database.
func (tmcb *TargetMetricsCreateBulk) Save(ctx context.Context) ([]*TargetMetrics, error) {
	if tmcb.err != nil {
		return nil, tmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TargetMetrics, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TargetMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TargetMetricsCreateBulk) SaveX(ctx context.Context) []*TargetMetrics {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TargetMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TargetMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TargetMetrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TargetMetricsUpsert) {
//			SetTargetsLoaded(v+v).
//		}).
//		Exec(ctx)
func (tmcb *TargetMetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *TargetMetricsUpsertBulk {
	tmcb.conflict = opts
	return &TargetMetricsUpsertBulk{
		create: tmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TargetMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmcb *TargetMetricsCreateBulk) OnConflictColumns(columns ...string) *TargetMetricsUpsertBulk {
	tmcb.conflict = append(tmcb.conflict, sql.ConflictColumns(columns...))
	return &TargetMetricsUpsertBulk{
		create: tmcb,
	}
}

// TargetMetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of TargetMetrics nodes.
type TargetMetricsUpsertBulk struct {
	create *TargetMetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TargetMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TargetMetricsUpsertBulk) UpdateNewValues() *TargetMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TargetMetrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TargetMetricsUpsertBulk) Ignore() *TargetMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TargetMetricsUpsertBulk) DoNothing() *TargetMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TargetMetricsCreateBulk.OnConflict
// documentation for more info.
func (u *TargetMetricsUpsertBulk) Update(set func(*TargetMetricsUpsert)) *TargetMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TargetMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTargetsLoaded sets the "targets_loaded" field.
func (u *TargetMetricsUpsertBulk) SetTargetsLoaded(v int64) *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.SetTargetsLoaded(v)
	})
}

// AddTargetsLoaded adds v to the "targets_loaded" field.
func (u *TargetMetricsUpsertBulk) AddTargetsLoaded(v int64) *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.AddTargetsLoaded(v)
	})
}

// UpdateTargetsLoaded sets the "targets_loaded" field to the value that was provided on create.
func (u *TargetMetricsUpsertBulk) UpdateTargetsLoaded() *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.UpdateTargetsLoaded()
	})
}

// ClearTargetsLoaded clears the value of the "targets_loaded" field.
func (u *TargetMetricsUpsertBulk) ClearTargetsLoaded() *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.ClearTargetsLoaded()
	})
}

// SetTargetsConfigured sets the "targets_configured" field.
func (u *TargetMetricsUpsertBulk) SetTargetsConfigured(v int64) *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.SetTargetsConfigured(v)
	})
}

// AddTargetsConfigured adds v to the "targets_configured" field.
func (u *TargetMetricsUpsertBulk) AddTargetsConfigured(v int64) *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.AddTargetsConfigured(v)
	})
}

// UpdateTargetsConfigured sets the "targets_configured" field to the value that was provided on create.
func (u *TargetMetricsUpsertBulk) UpdateTargetsConfigured() *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.UpdateTargetsConfigured()
	})
}

// ClearTargetsConfigured clears the value of the "targets_configured" field.
func (u *TargetMetricsUpsertBulk) ClearTargetsConfigured() *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.ClearTargetsConfigured()
	})
}

// SetTargetsConfiguredNotIncludingAspects sets the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsertBulk) SetTargetsConfiguredNotIncludingAspects(v int64) *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.SetTargetsConfiguredNotIncludingAspects(v)
	})
}

// AddTargetsConfiguredNotIncludingAspects adds v to the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsertBulk) AddTargetsConfiguredNotIncludingAspects(v int64) *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.AddTargetsConfiguredNotIncludingAspects(v)
	})
}

// UpdateTargetsConfiguredNotIncludingAspects sets the "targets_configured_not_including_aspects" field to the value that was provided on create.
func (u *TargetMetricsUpsertBulk) UpdateTargetsConfiguredNotIncludingAspects() *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.UpdateTargetsConfiguredNotIncludingAspects()
	})
}

// ClearTargetsConfiguredNotIncludingAspects clears the value of the "targets_configured_not_including_aspects" field.
func (u *TargetMetricsUpsertBulk) ClearTargetsConfiguredNotIncludingAspects() *TargetMetricsUpsertBulk {
	return u.Update(func(s *TargetMetricsUpsert) {
		s.ClearTargetsConfiguredNotIncludingAspects()
	})
}

// Exec executes the query.
func (u *TargetMetricsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TargetMetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TargetMetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TargetMetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
