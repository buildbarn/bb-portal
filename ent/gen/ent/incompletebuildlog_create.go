// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/incompletebuildlog"
)

// IncompleteBuildLogCreate is the builder for creating a IncompleteBuildLog entity.
type IncompleteBuildLogCreate struct {
	config
	mutation *IncompleteBuildLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSnippetID sets the "snippet_id" field.
func (iblc *IncompleteBuildLogCreate) SetSnippetID(i int32) *IncompleteBuildLogCreate {
	iblc.mutation.SetSnippetID(i)
	return iblc
}

// SetLogSnippet sets the "log_snippet" field.
func (iblc *IncompleteBuildLogCreate) SetLogSnippet(s string) *IncompleteBuildLogCreate {
	iblc.mutation.SetLogSnippet(s)
	return iblc
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (iblc *IncompleteBuildLogCreate) SetBazelInvocationID(id int) *IncompleteBuildLogCreate {
	iblc.mutation.SetBazelInvocationID(id)
	return iblc
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (iblc *IncompleteBuildLogCreate) SetNillableBazelInvocationID(id *int) *IncompleteBuildLogCreate {
	if id != nil {
		iblc = iblc.SetBazelInvocationID(*id)
	}
	return iblc
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (iblc *IncompleteBuildLogCreate) SetBazelInvocation(b *BazelInvocation) *IncompleteBuildLogCreate {
	return iblc.SetBazelInvocationID(b.ID)
}

// Mutation returns the IncompleteBuildLogMutation object of the builder.
func (iblc *IncompleteBuildLogCreate) Mutation() *IncompleteBuildLogMutation {
	return iblc.mutation
}

// Save creates the IncompleteBuildLog in the database.
func (iblc *IncompleteBuildLogCreate) Save(ctx context.Context) (*IncompleteBuildLog, error) {
	return withHooks(ctx, iblc.sqlSave, iblc.mutation, iblc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iblc *IncompleteBuildLogCreate) SaveX(ctx context.Context) *IncompleteBuildLog {
	v, err := iblc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iblc *IncompleteBuildLogCreate) Exec(ctx context.Context) error {
	_, err := iblc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iblc *IncompleteBuildLogCreate) ExecX(ctx context.Context) {
	if err := iblc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iblc *IncompleteBuildLogCreate) check() error {
	if _, ok := iblc.mutation.SnippetID(); !ok {
		return &ValidationError{Name: "snippet_id", err: errors.New(`ent: missing required field "IncompleteBuildLog.snippet_id"`)}
	}
	if _, ok := iblc.mutation.LogSnippet(); !ok {
		return &ValidationError{Name: "log_snippet", err: errors.New(`ent: missing required field "IncompleteBuildLog.log_snippet"`)}
	}
	return nil
}

func (iblc *IncompleteBuildLogCreate) sqlSave(ctx context.Context) (*IncompleteBuildLog, error) {
	if err := iblc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iblc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iblc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iblc.mutation.id = &_node.ID
	iblc.mutation.done = true
	return _node, nil
}

func (iblc *IncompleteBuildLogCreate) createSpec() (*IncompleteBuildLog, *sqlgraph.CreateSpec) {
	var (
		_node = &IncompleteBuildLog{config: iblc.config}
		_spec = sqlgraph.NewCreateSpec(incompletebuildlog.Table, sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = iblc.conflict
	if value, ok := iblc.mutation.SnippetID(); ok {
		_spec.SetField(incompletebuildlog.FieldSnippetID, field.TypeInt32, value)
		_node.SnippetID = value
	}
	if value, ok := iblc.mutation.LogSnippet(); ok {
		_spec.SetField(incompletebuildlog.FieldLogSnippet, field.TypeString, value)
		_node.LogSnippet = value
	}
	if nodes := iblc.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incompletebuildlog.BazelInvocationTable,
			Columns: []string{incompletebuildlog.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bazel_invocation_incomplete_build_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncompleteBuildLog.Create().
//		SetSnippetID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncompleteBuildLogUpsert) {
//			SetSnippetID(v+v).
//		}).
//		Exec(ctx)
func (iblc *IncompleteBuildLogCreate) OnConflict(opts ...sql.ConflictOption) *IncompleteBuildLogUpsertOne {
	iblc.conflict = opts
	return &IncompleteBuildLogUpsertOne{
		create: iblc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncompleteBuildLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iblc *IncompleteBuildLogCreate) OnConflictColumns(columns ...string) *IncompleteBuildLogUpsertOne {
	iblc.conflict = append(iblc.conflict, sql.ConflictColumns(columns...))
	return &IncompleteBuildLogUpsertOne{
		create: iblc,
	}
}

type (
	// IncompleteBuildLogUpsertOne is the builder for "upsert"-ing
	//  one IncompleteBuildLog node.
	IncompleteBuildLogUpsertOne struct {
		create *IncompleteBuildLogCreate
	}

	// IncompleteBuildLogUpsert is the "OnConflict" setter.
	IncompleteBuildLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetSnippetID sets the "snippet_id" field.
func (u *IncompleteBuildLogUpsert) SetSnippetID(v int32) *IncompleteBuildLogUpsert {
	u.Set(incompletebuildlog.FieldSnippetID, v)
	return u
}

// UpdateSnippetID sets the "snippet_id" field to the value that was provided on create.
func (u *IncompleteBuildLogUpsert) UpdateSnippetID() *IncompleteBuildLogUpsert {
	u.SetExcluded(incompletebuildlog.FieldSnippetID)
	return u
}

// AddSnippetID adds v to the "snippet_id" field.
func (u *IncompleteBuildLogUpsert) AddSnippetID(v int32) *IncompleteBuildLogUpsert {
	u.Add(incompletebuildlog.FieldSnippetID, v)
	return u
}

// SetLogSnippet sets the "log_snippet" field.
func (u *IncompleteBuildLogUpsert) SetLogSnippet(v string) *IncompleteBuildLogUpsert {
	u.Set(incompletebuildlog.FieldLogSnippet, v)
	return u
}

// UpdateLogSnippet sets the "log_snippet" field to the value that was provided on create.
func (u *IncompleteBuildLogUpsert) UpdateLogSnippet() *IncompleteBuildLogUpsert {
	u.SetExcluded(incompletebuildlog.FieldLogSnippet)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IncompleteBuildLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IncompleteBuildLogUpsertOne) UpdateNewValues() *IncompleteBuildLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncompleteBuildLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncompleteBuildLogUpsertOne) Ignore() *IncompleteBuildLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncompleteBuildLogUpsertOne) DoNothing() *IncompleteBuildLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncompleteBuildLogCreate.OnConflict
// documentation for more info.
func (u *IncompleteBuildLogUpsertOne) Update(set func(*IncompleteBuildLogUpsert)) *IncompleteBuildLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncompleteBuildLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetSnippetID sets the "snippet_id" field.
func (u *IncompleteBuildLogUpsertOne) SetSnippetID(v int32) *IncompleteBuildLogUpsertOne {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.SetSnippetID(v)
	})
}

// AddSnippetID adds v to the "snippet_id" field.
func (u *IncompleteBuildLogUpsertOne) AddSnippetID(v int32) *IncompleteBuildLogUpsertOne {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.AddSnippetID(v)
	})
}

// UpdateSnippetID sets the "snippet_id" field to the value that was provided on create.
func (u *IncompleteBuildLogUpsertOne) UpdateSnippetID() *IncompleteBuildLogUpsertOne {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.UpdateSnippetID()
	})
}

// SetLogSnippet sets the "log_snippet" field.
func (u *IncompleteBuildLogUpsertOne) SetLogSnippet(v string) *IncompleteBuildLogUpsertOne {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.SetLogSnippet(v)
	})
}

// UpdateLogSnippet sets the "log_snippet" field to the value that was provided on create.
func (u *IncompleteBuildLogUpsertOne) UpdateLogSnippet() *IncompleteBuildLogUpsertOne {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.UpdateLogSnippet()
	})
}

// Exec executes the query.
func (u *IncompleteBuildLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncompleteBuildLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncompleteBuildLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncompleteBuildLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncompleteBuildLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncompleteBuildLogCreateBulk is the builder for creating many IncompleteBuildLog entities in bulk.
type IncompleteBuildLogCreateBulk struct {
	config
	err      error
	builders []*IncompleteBuildLogCreate
	conflict []sql.ConflictOption
}

// Save creates the IncompleteBuildLog entities in the database.
func (iblcb *IncompleteBuildLogCreateBulk) Save(ctx context.Context) ([]*IncompleteBuildLog, error) {
	if iblcb.err != nil {
		return nil, iblcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iblcb.builders))
	nodes := make([]*IncompleteBuildLog, len(iblcb.builders))
	mutators := make([]Mutator, len(iblcb.builders))
	for i := range iblcb.builders {
		func(i int, root context.Context) {
			builder := iblcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncompleteBuildLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iblcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iblcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iblcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iblcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iblcb *IncompleteBuildLogCreateBulk) SaveX(ctx context.Context) []*IncompleteBuildLog {
	v, err := iblcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iblcb *IncompleteBuildLogCreateBulk) Exec(ctx context.Context) error {
	_, err := iblcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iblcb *IncompleteBuildLogCreateBulk) ExecX(ctx context.Context) {
	if err := iblcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncompleteBuildLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncompleteBuildLogUpsert) {
//			SetSnippetID(v+v).
//		}).
//		Exec(ctx)
func (iblcb *IncompleteBuildLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncompleteBuildLogUpsertBulk {
	iblcb.conflict = opts
	return &IncompleteBuildLogUpsertBulk{
		create: iblcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncompleteBuildLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iblcb *IncompleteBuildLogCreateBulk) OnConflictColumns(columns ...string) *IncompleteBuildLogUpsertBulk {
	iblcb.conflict = append(iblcb.conflict, sql.ConflictColumns(columns...))
	return &IncompleteBuildLogUpsertBulk{
		create: iblcb,
	}
}

// IncompleteBuildLogUpsertBulk is the builder for "upsert"-ing
// a bulk of IncompleteBuildLog nodes.
type IncompleteBuildLogUpsertBulk struct {
	create *IncompleteBuildLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncompleteBuildLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IncompleteBuildLogUpsertBulk) UpdateNewValues() *IncompleteBuildLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncompleteBuildLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncompleteBuildLogUpsertBulk) Ignore() *IncompleteBuildLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncompleteBuildLogUpsertBulk) DoNothing() *IncompleteBuildLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncompleteBuildLogCreateBulk.OnConflict
// documentation for more info.
func (u *IncompleteBuildLogUpsertBulk) Update(set func(*IncompleteBuildLogUpsert)) *IncompleteBuildLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncompleteBuildLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetSnippetID sets the "snippet_id" field.
func (u *IncompleteBuildLogUpsertBulk) SetSnippetID(v int32) *IncompleteBuildLogUpsertBulk {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.SetSnippetID(v)
	})
}

// AddSnippetID adds v to the "snippet_id" field.
func (u *IncompleteBuildLogUpsertBulk) AddSnippetID(v int32) *IncompleteBuildLogUpsertBulk {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.AddSnippetID(v)
	})
}

// UpdateSnippetID sets the "snippet_id" field to the value that was provided on create.
func (u *IncompleteBuildLogUpsertBulk) UpdateSnippetID() *IncompleteBuildLogUpsertBulk {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.UpdateSnippetID()
	})
}

// SetLogSnippet sets the "log_snippet" field.
func (u *IncompleteBuildLogUpsertBulk) SetLogSnippet(v string) *IncompleteBuildLogUpsertBulk {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.SetLogSnippet(v)
	})
}

// UpdateLogSnippet sets the "log_snippet" field to the value that was provided on create.
func (u *IncompleteBuildLogUpsertBulk) UpdateLogSnippet() *IncompleteBuildLogUpsertBulk {
	return u.Update(func(s *IncompleteBuildLogUpsert) {
		s.UpdateLogSnippet()
	})
}

// Exec executes the query.
func (u *IncompleteBuildLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncompleteBuildLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncompleteBuildLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncompleteBuildLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
