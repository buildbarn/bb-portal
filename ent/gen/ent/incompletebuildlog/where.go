// Code generated by ent, DO NOT EDIT.

package incompletebuildlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldLTE(FieldID, id))
}

// SnippetID applies equality check predicate on the "snippet_id" field. It's identical to SnippetIDEQ.
func SnippetID(v int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldEQ(FieldSnippetID, v))
}

// LogSnippet applies equality check predicate on the "log_snippet" field. It's identical to LogSnippetEQ.
func LogSnippet(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldEQ(FieldLogSnippet, v))
}

// SnippetIDEQ applies the EQ predicate on the "snippet_id" field.
func SnippetIDEQ(v int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldEQ(FieldSnippetID, v))
}

// SnippetIDNEQ applies the NEQ predicate on the "snippet_id" field.
func SnippetIDNEQ(v int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldNEQ(FieldSnippetID, v))
}

// SnippetIDIn applies the In predicate on the "snippet_id" field.
func SnippetIDIn(vs ...int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldIn(FieldSnippetID, vs...))
}

// SnippetIDNotIn applies the NotIn predicate on the "snippet_id" field.
func SnippetIDNotIn(vs ...int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldNotIn(FieldSnippetID, vs...))
}

// SnippetIDGT applies the GT predicate on the "snippet_id" field.
func SnippetIDGT(v int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldGT(FieldSnippetID, v))
}

// SnippetIDGTE applies the GTE predicate on the "snippet_id" field.
func SnippetIDGTE(v int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldGTE(FieldSnippetID, v))
}

// SnippetIDLT applies the LT predicate on the "snippet_id" field.
func SnippetIDLT(v int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldLT(FieldSnippetID, v))
}

// SnippetIDLTE applies the LTE predicate on the "snippet_id" field.
func SnippetIDLTE(v int32) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldLTE(FieldSnippetID, v))
}

// LogSnippetEQ applies the EQ predicate on the "log_snippet" field.
func LogSnippetEQ(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldEQ(FieldLogSnippet, v))
}

// LogSnippetNEQ applies the NEQ predicate on the "log_snippet" field.
func LogSnippetNEQ(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldNEQ(FieldLogSnippet, v))
}

// LogSnippetIn applies the In predicate on the "log_snippet" field.
func LogSnippetIn(vs ...string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldIn(FieldLogSnippet, vs...))
}

// LogSnippetNotIn applies the NotIn predicate on the "log_snippet" field.
func LogSnippetNotIn(vs ...string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldNotIn(FieldLogSnippet, vs...))
}

// LogSnippetGT applies the GT predicate on the "log_snippet" field.
func LogSnippetGT(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldGT(FieldLogSnippet, v))
}

// LogSnippetGTE applies the GTE predicate on the "log_snippet" field.
func LogSnippetGTE(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldGTE(FieldLogSnippet, v))
}

// LogSnippetLT applies the LT predicate on the "log_snippet" field.
func LogSnippetLT(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldLT(FieldLogSnippet, v))
}

// LogSnippetLTE applies the LTE predicate on the "log_snippet" field.
func LogSnippetLTE(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldLTE(FieldLogSnippet, v))
}

// LogSnippetContains applies the Contains predicate on the "log_snippet" field.
func LogSnippetContains(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldContains(FieldLogSnippet, v))
}

// LogSnippetHasPrefix applies the HasPrefix predicate on the "log_snippet" field.
func LogSnippetHasPrefix(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldHasPrefix(FieldLogSnippet, v))
}

// LogSnippetHasSuffix applies the HasSuffix predicate on the "log_snippet" field.
func LogSnippetHasSuffix(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldHasSuffix(FieldLogSnippet, v))
}

// LogSnippetEqualFold applies the EqualFold predicate on the "log_snippet" field.
func LogSnippetEqualFold(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldEqualFold(FieldLogSnippet, v))
}

// LogSnippetContainsFold applies the ContainsFold predicate on the "log_snippet" field.
func LogSnippetContainsFold(v string) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.FieldContainsFold(FieldLogSnippet, v))
}

// HasBazelInvocation applies the HasEdge predicate on the "bazel_invocation" edge.
func HasBazelInvocation() predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BazelInvocationTable, BazelInvocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBazelInvocationWith applies the HasEdge predicate on the "bazel_invocation" edge with a given conditions (other predicates).
func HasBazelInvocationWith(preds ...predicate.BazelInvocation) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(func(s *sql.Selector) {
		step := newBazelInvocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncompleteBuildLog) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncompleteBuildLog) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncompleteBuildLog) predicate.IncompleteBuildLog {
	return predicate.IncompleteBuildLog(sql.NotPredicates(p))
}
