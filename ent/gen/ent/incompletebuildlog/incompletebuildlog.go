// Code generated by ent, DO NOT EDIT.

package incompletebuildlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the incompletebuildlog type in the database.
	Label = "incomplete_build_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSnippetID holds the string denoting the snippet_id field in the database.
	FieldSnippetID = "snippet_id"
	// FieldLogSnippet holds the string denoting the log_snippet field in the database.
	FieldLogSnippet = "log_snippet"
	// EdgeBazelInvocation holds the string denoting the bazel_invocation edge name in mutations.
	EdgeBazelInvocation = "bazel_invocation"
	// Table holds the table name of the incompletebuildlog in the database.
	Table = "incomplete_build_logs"
	// BazelInvocationTable is the table that holds the bazel_invocation relation/edge.
	BazelInvocationTable = "incomplete_build_logs"
	// BazelInvocationInverseTable is the table name for the BazelInvocation entity.
	// It exists in this package in order to avoid circular dependency with the "bazelinvocation" package.
	BazelInvocationInverseTable = "bazel_invocations"
	// BazelInvocationColumn is the table column denoting the bazel_invocation relation/edge.
	BazelInvocationColumn = "bazel_invocation_incomplete_build_logs"
)

// Columns holds all SQL columns for incompletebuildlog fields.
var Columns = []string{
	FieldID,
	FieldSnippetID,
	FieldLogSnippet,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "incomplete_build_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bazel_invocation_incomplete_build_logs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IncompleteBuildLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySnippetID orders the results by the snippet_id field.
func BySnippetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSnippetID, opts...).ToFunc()
}

// ByLogSnippet orders the results by the log_snippet field.
func ByLogSnippet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogSnippet, opts...).ToFunc()
}

// ByBazelInvocationField orders the results by bazel_invocation field.
func ByBazelInvocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBazelInvocationStep(), sql.OrderByField(field, opts...))
	}
}
func newBazelInvocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BazelInvocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BazelInvocationTable, BazelInvocationColumn),
	)
}
