// Code generated by ent, DO NOT EDIT.

package connectionmetadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldLTE(FieldID, id))
}

// ConnectionLastOpenAt applies equality check predicate on the "connection_last_open_at" field. It's identical to ConnectionLastOpenAtEQ.
func ConnectionLastOpenAt(v time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldEQ(FieldConnectionLastOpenAt, v))
}

// ConnectionLastOpenAtEQ applies the EQ predicate on the "connection_last_open_at" field.
func ConnectionLastOpenAtEQ(v time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldEQ(FieldConnectionLastOpenAt, v))
}

// ConnectionLastOpenAtNEQ applies the NEQ predicate on the "connection_last_open_at" field.
func ConnectionLastOpenAtNEQ(v time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldNEQ(FieldConnectionLastOpenAt, v))
}

// ConnectionLastOpenAtIn applies the In predicate on the "connection_last_open_at" field.
func ConnectionLastOpenAtIn(vs ...time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldIn(FieldConnectionLastOpenAt, vs...))
}

// ConnectionLastOpenAtNotIn applies the NotIn predicate on the "connection_last_open_at" field.
func ConnectionLastOpenAtNotIn(vs ...time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldNotIn(FieldConnectionLastOpenAt, vs...))
}

// ConnectionLastOpenAtGT applies the GT predicate on the "connection_last_open_at" field.
func ConnectionLastOpenAtGT(v time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldGT(FieldConnectionLastOpenAt, v))
}

// ConnectionLastOpenAtGTE applies the GTE predicate on the "connection_last_open_at" field.
func ConnectionLastOpenAtGTE(v time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldGTE(FieldConnectionLastOpenAt, v))
}

// ConnectionLastOpenAtLT applies the LT predicate on the "connection_last_open_at" field.
func ConnectionLastOpenAtLT(v time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldLT(FieldConnectionLastOpenAt, v))
}

// ConnectionLastOpenAtLTE applies the LTE predicate on the "connection_last_open_at" field.
func ConnectionLastOpenAtLTE(v time.Time) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.FieldLTE(FieldConnectionLastOpenAt, v))
}

// HasBazelInvocation applies the HasEdge predicate on the "bazel_invocation" edge.
func HasBazelInvocation() predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BazelInvocationTable, BazelInvocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBazelInvocationWith applies the HasEdge predicate on the "bazel_invocation" edge with a given conditions (other predicates).
func HasBazelInvocationWith(preds ...predicate.BazelInvocation) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(func(s *sql.Selector) {
		step := newBazelInvocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConnectionMetadata) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConnectionMetadata) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConnectionMetadata) predicate.ConnectionMetadata {
	return predicate.ConnectionMetadata(sql.NotPredicates(p))
}
