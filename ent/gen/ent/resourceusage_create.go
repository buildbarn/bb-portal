// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/exectioninfo"
	"github.com/buildbarn/bb-portal/ent/gen/ent/resourceusage"
)

// ResourceUsageCreate is the builder for creating a ResourceUsage entity.
type ResourceUsageCreate struct {
	config
	mutation *ResourceUsageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ruc *ResourceUsageCreate) SetName(s string) *ResourceUsageCreate {
	ruc.mutation.SetName(s)
	return ruc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruc *ResourceUsageCreate) SetNillableName(s *string) *ResourceUsageCreate {
	if s != nil {
		ruc.SetName(*s)
	}
	return ruc
}

// SetValue sets the "value" field.
func (ruc *ResourceUsageCreate) SetValue(s string) *ResourceUsageCreate {
	ruc.mutation.SetValue(s)
	return ruc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ruc *ResourceUsageCreate) SetNillableValue(s *string) *ResourceUsageCreate {
	if s != nil {
		ruc.SetValue(*s)
	}
	return ruc
}

// SetExecutionInfoID sets the "execution_info" edge to the ExectionInfo entity by ID.
func (ruc *ResourceUsageCreate) SetExecutionInfoID(id int) *ResourceUsageCreate {
	ruc.mutation.SetExecutionInfoID(id)
	return ruc
}

// SetNillableExecutionInfoID sets the "execution_info" edge to the ExectionInfo entity by ID if the given value is not nil.
func (ruc *ResourceUsageCreate) SetNillableExecutionInfoID(id *int) *ResourceUsageCreate {
	if id != nil {
		ruc = ruc.SetExecutionInfoID(*id)
	}
	return ruc
}

// SetExecutionInfo sets the "execution_info" edge to the ExectionInfo entity.
func (ruc *ResourceUsageCreate) SetExecutionInfo(e *ExectionInfo) *ResourceUsageCreate {
	return ruc.SetExecutionInfoID(e.ID)
}

// Mutation returns the ResourceUsageMutation object of the builder.
func (ruc *ResourceUsageCreate) Mutation() *ResourceUsageMutation {
	return ruc.mutation
}

// Save creates the ResourceUsage in the database.
func (ruc *ResourceUsageCreate) Save(ctx context.Context) (*ResourceUsage, error) {
	return withHooks(ctx, ruc.sqlSave, ruc.mutation, ruc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *ResourceUsageCreate) SaveX(ctx context.Context) *ResourceUsage {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ruc *ResourceUsageCreate) Exec(ctx context.Context) error {
	_, err := ruc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruc *ResourceUsageCreate) ExecX(ctx context.Context) {
	if err := ruc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruc *ResourceUsageCreate) check() error {
	return nil
}

func (ruc *ResourceUsageCreate) sqlSave(ctx context.Context) (*ResourceUsage, error) {
	if err := ruc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ruc.mutation.id = &_node.ID
	ruc.mutation.done = true
	return _node, nil
}

func (ruc *ResourceUsageCreate) createSpec() (*ResourceUsage, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceUsage{config: ruc.config}
		_spec = sqlgraph.NewCreateSpec(resourceusage.Table, sqlgraph.NewFieldSpec(resourceusage.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ruc.conflict
	if value, ok := ruc.mutation.Name(); ok {
		_spec.SetField(resourceusage.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ruc.mutation.Value(); ok {
		_spec.SetField(resourceusage.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := ruc.mutation.ExecutionInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceusage.ExecutionInfoTable,
			Columns: []string{resourceusage.ExecutionInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exectioninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exection_info_resource_usage = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceUsage.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceUsageUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ruc *ResourceUsageCreate) OnConflict(opts ...sql.ConflictOption) *ResourceUsageUpsertOne {
	ruc.conflict = opts
	return &ResourceUsageUpsertOne{
		create: ruc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceUsage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ruc *ResourceUsageCreate) OnConflictColumns(columns ...string) *ResourceUsageUpsertOne {
	ruc.conflict = append(ruc.conflict, sql.ConflictColumns(columns...))
	return &ResourceUsageUpsertOne{
		create: ruc,
	}
}

type (
	// ResourceUsageUpsertOne is the builder for "upsert"-ing
	//  one ResourceUsage node.
	ResourceUsageUpsertOne struct {
		create *ResourceUsageCreate
	}

	// ResourceUsageUpsert is the "OnConflict" setter.
	ResourceUsageUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ResourceUsageUpsert) SetName(v string) *ResourceUsageUpsert {
	u.Set(resourceusage.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResourceUsageUpsert) UpdateName() *ResourceUsageUpsert {
	u.SetExcluded(resourceusage.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *ResourceUsageUpsert) ClearName() *ResourceUsageUpsert {
	u.SetNull(resourceusage.FieldName)
	return u
}

// SetValue sets the "value" field.
func (u *ResourceUsageUpsert) SetValue(v string) *ResourceUsageUpsert {
	u.Set(resourceusage.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ResourceUsageUpsert) UpdateValue() *ResourceUsageUpsert {
	u.SetExcluded(resourceusage.FieldValue)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *ResourceUsageUpsert) ClearValue() *ResourceUsageUpsert {
	u.SetNull(resourceusage.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ResourceUsage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ResourceUsageUpsertOne) UpdateNewValues() *ResourceUsageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceUsage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResourceUsageUpsertOne) Ignore() *ResourceUsageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceUsageUpsertOne) DoNothing() *ResourceUsageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceUsageCreate.OnConflict
// documentation for more info.
func (u *ResourceUsageUpsertOne) Update(set func(*ResourceUsageUpsert)) *ResourceUsageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceUsageUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ResourceUsageUpsertOne) SetName(v string) *ResourceUsageUpsertOne {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResourceUsageUpsertOne) UpdateName() *ResourceUsageUpsertOne {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ResourceUsageUpsertOne) ClearName() *ResourceUsageUpsertOne {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.ClearName()
	})
}

// SetValue sets the "value" field.
func (u *ResourceUsageUpsertOne) SetValue(v string) *ResourceUsageUpsertOne {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ResourceUsageUpsertOne) UpdateValue() *ResourceUsageUpsertOne {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *ResourceUsageUpsertOne) ClearValue() *ResourceUsageUpsertOne {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *ResourceUsageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResourceUsageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceUsageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResourceUsageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResourceUsageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResourceUsageCreateBulk is the builder for creating many ResourceUsage entities in bulk.
type ResourceUsageCreateBulk struct {
	config
	err      error
	builders []*ResourceUsageCreate
	conflict []sql.ConflictOption
}

// Save creates the ResourceUsage entities in the database.
func (rucb *ResourceUsageCreateBulk) Save(ctx context.Context) ([]*ResourceUsage, error) {
	if rucb.err != nil {
		return nil, rucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rucb.builders))
	nodes := make([]*ResourceUsage, len(rucb.builders))
	mutators := make([]Mutator, len(rucb.builders))
	for i := range rucb.builders {
		func(i int, root context.Context) {
			builder := rucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceUsageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rucb *ResourceUsageCreateBulk) SaveX(ctx context.Context) []*ResourceUsage {
	v, err := rucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rucb *ResourceUsageCreateBulk) Exec(ctx context.Context) error {
	_, err := rucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rucb *ResourceUsageCreateBulk) ExecX(ctx context.Context) {
	if err := rucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceUsage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceUsageUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rucb *ResourceUsageCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResourceUsageUpsertBulk {
	rucb.conflict = opts
	return &ResourceUsageUpsertBulk{
		create: rucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceUsage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rucb *ResourceUsageCreateBulk) OnConflictColumns(columns ...string) *ResourceUsageUpsertBulk {
	rucb.conflict = append(rucb.conflict, sql.ConflictColumns(columns...))
	return &ResourceUsageUpsertBulk{
		create: rucb,
	}
}

// ResourceUsageUpsertBulk is the builder for "upsert"-ing
// a bulk of ResourceUsage nodes.
type ResourceUsageUpsertBulk struct {
	create *ResourceUsageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResourceUsage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ResourceUsageUpsertBulk) UpdateNewValues() *ResourceUsageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceUsage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResourceUsageUpsertBulk) Ignore() *ResourceUsageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceUsageUpsertBulk) DoNothing() *ResourceUsageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceUsageCreateBulk.OnConflict
// documentation for more info.
func (u *ResourceUsageUpsertBulk) Update(set func(*ResourceUsageUpsert)) *ResourceUsageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceUsageUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ResourceUsageUpsertBulk) SetName(v string) *ResourceUsageUpsertBulk {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ResourceUsageUpsertBulk) UpdateName() *ResourceUsageUpsertBulk {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ResourceUsageUpsertBulk) ClearName() *ResourceUsageUpsertBulk {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.ClearName()
	})
}

// SetValue sets the "value" field.
func (u *ResourceUsageUpsertBulk) SetValue(v string) *ResourceUsageUpsertBulk {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ResourceUsageUpsertBulk) UpdateValue() *ResourceUsageUpsertBulk {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *ResourceUsageUpsertBulk) ClearValue() *ResourceUsageUpsertBulk {
	return u.Update(func(s *ResourceUsageUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *ResourceUsageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ResourceUsageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResourceUsageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceUsageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
