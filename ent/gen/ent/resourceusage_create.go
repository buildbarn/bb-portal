// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/exectioninfo"
	"github.com/buildbarn/bb-portal/ent/gen/ent/resourceusage"
)

// ResourceUsageCreate is the builder for creating a ResourceUsage entity.
type ResourceUsageCreate struct {
	config
	mutation *ResourceUsageMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ruc *ResourceUsageCreate) SetName(s string) *ResourceUsageCreate {
	ruc.mutation.SetName(s)
	return ruc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruc *ResourceUsageCreate) SetNillableName(s *string) *ResourceUsageCreate {
	if s != nil {
		ruc.SetName(*s)
	}
	return ruc
}

// SetValue sets the "value" field.
func (ruc *ResourceUsageCreate) SetValue(s string) *ResourceUsageCreate {
	ruc.mutation.SetValue(s)
	return ruc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ruc *ResourceUsageCreate) SetNillableValue(s *string) *ResourceUsageCreate {
	if s != nil {
		ruc.SetValue(*s)
	}
	return ruc
}

// SetExecutionInfoID sets the "execution_info_id" field.
func (ruc *ResourceUsageCreate) SetExecutionInfoID(i int) *ResourceUsageCreate {
	ruc.mutation.SetExecutionInfoID(i)
	return ruc
}

// SetNillableExecutionInfoID sets the "execution_info_id" field if the given value is not nil.
func (ruc *ResourceUsageCreate) SetNillableExecutionInfoID(i *int) *ResourceUsageCreate {
	if i != nil {
		ruc.SetExecutionInfoID(*i)
	}
	return ruc
}

// SetExecutionInfo sets the "execution_info" edge to the ExectionInfo entity.
func (ruc *ResourceUsageCreate) SetExecutionInfo(e *ExectionInfo) *ResourceUsageCreate {
	return ruc.SetExecutionInfoID(e.ID)
}

// Mutation returns the ResourceUsageMutation object of the builder.
func (ruc *ResourceUsageCreate) Mutation() *ResourceUsageMutation {
	return ruc.mutation
}

// Save creates the ResourceUsage in the database.
func (ruc *ResourceUsageCreate) Save(ctx context.Context) (*ResourceUsage, error) {
	return withHooks(ctx, ruc.sqlSave, ruc.mutation, ruc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *ResourceUsageCreate) SaveX(ctx context.Context) *ResourceUsage {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ruc *ResourceUsageCreate) Exec(ctx context.Context) error {
	_, err := ruc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruc *ResourceUsageCreate) ExecX(ctx context.Context) {
	if err := ruc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruc *ResourceUsageCreate) check() error {
	return nil
}

func (ruc *ResourceUsageCreate) sqlSave(ctx context.Context) (*ResourceUsage, error) {
	if err := ruc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ruc.mutation.id = &_node.ID
	ruc.mutation.done = true
	return _node, nil
}

func (ruc *ResourceUsageCreate) createSpec() (*ResourceUsage, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceUsage{config: ruc.config}
		_spec = sqlgraph.NewCreateSpec(resourceusage.Table, sqlgraph.NewFieldSpec(resourceusage.FieldID, field.TypeInt))
	)
	if value, ok := ruc.mutation.Name(); ok {
		_spec.SetField(resourceusage.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ruc.mutation.Value(); ok {
		_spec.SetField(resourceusage.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := ruc.mutation.ExecutionInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceusage.ExecutionInfoTable,
			Columns: []string{resourceusage.ExecutionInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exectioninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExecutionInfoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResourceUsageCreateBulk is the builder for creating many ResourceUsage entities in bulk.
type ResourceUsageCreateBulk struct {
	config
	err      error
	builders []*ResourceUsageCreate
}

// Save creates the ResourceUsage entities in the database.
func (rucb *ResourceUsageCreateBulk) Save(ctx context.Context) ([]*ResourceUsage, error) {
	if rucb.err != nil {
		return nil, rucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rucb.builders))
	nodes := make([]*ResourceUsage, len(rucb.builders))
	mutators := make([]Mutator, len(rucb.builders))
	for i := range rucb.builders {
		func(i int, root context.Context) {
			builder := rucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceUsageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rucb *ResourceUsageCreateBulk) SaveX(ctx context.Context) []*ResourceUsage {
	v, err := rucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rucb *ResourceUsageCreateBulk) Exec(ctx context.Context) error {
	_, err := rucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rucb *ResourceUsageCreateBulk) ExecX(ctx context.Context) {
	if err := rucb.Exec(ctx); err != nil {
		panic(err)
	}
}
