// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/invocationfiles"
)

// InvocationFiles is the model entity for the InvocationFiles schema.
type InvocationFiles struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Digest holds the value of the "digest" field.
	Digest string `json:"digest,omitempty"`
	// SizeBytes holds the value of the "size_bytes" field.
	SizeBytes int64 `json:"size_bytes,omitempty"`
	// DigestFunction holds the value of the "digest_function" field.
	DigestFunction string `json:"digest_function,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvocationFilesQuery when eager-loading is set.
	Edges                             InvocationFilesEdges `json:"edges"`
	bazel_invocation_invocation_files *int
	selectValues                      sql.SelectValues
}

// InvocationFilesEdges holds the relations/edges for other nodes in the graph.
type InvocationFilesEdges struct {
	// BazelInvocation holds the value of the bazel_invocation edge.
	BazelInvocation *BazelInvocation `json:"bazel_invocation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// BazelInvocationOrErr returns the BazelInvocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvocationFilesEdges) BazelInvocationOrErr() (*BazelInvocation, error) {
	if e.BazelInvocation != nil {
		return e.BazelInvocation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bazelinvocation.Label}
	}
	return nil, &NotLoadedError{edge: "bazel_invocation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvocationFiles) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invocationfiles.FieldID, invocationfiles.FieldSizeBytes:
			values[i] = new(sql.NullInt64)
		case invocationfiles.FieldName, invocationfiles.FieldContent, invocationfiles.FieldDigest, invocationfiles.FieldDigestFunction:
			values[i] = new(sql.NullString)
		case invocationfiles.ForeignKeys[0]: // bazel_invocation_invocation_files
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvocationFiles fields.
func (_if *InvocationFiles) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invocationfiles.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_if.ID = int(value.Int64)
		case invocationfiles.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_if.Name = value.String
			}
		case invocationfiles.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_if.Content = value.String
			}
		case invocationfiles.FieldDigest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest", values[i])
			} else if value.Valid {
				_if.Digest = value.String
			}
		case invocationfiles.FieldSizeBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bytes", values[i])
			} else if value.Valid {
				_if.SizeBytes = value.Int64
			}
		case invocationfiles.FieldDigestFunction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest_function", values[i])
			} else if value.Valid {
				_if.DigestFunction = value.String
			}
		case invocationfiles.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bazel_invocation_invocation_files", value)
			} else if value.Valid {
				_if.bazel_invocation_invocation_files = new(int)
				*_if.bazel_invocation_invocation_files = int(value.Int64)
			}
		default:
			_if.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InvocationFiles.
// This includes values selected through modifiers, order, etc.
func (_if *InvocationFiles) Value(name string) (ent.Value, error) {
	return _if.selectValues.Get(name)
}

// QueryBazelInvocation queries the "bazel_invocation" edge of the InvocationFiles entity.
func (_if *InvocationFiles) QueryBazelInvocation() *BazelInvocationQuery {
	return NewInvocationFilesClient(_if.config).QueryBazelInvocation(_if)
}

// Update returns a builder for updating this InvocationFiles.
// Note that you need to call InvocationFiles.Unwrap() before calling this method if this InvocationFiles
// was returned from a transaction, and the transaction was committed or rolled back.
func (_if *InvocationFiles) Update() *InvocationFilesUpdateOne {
	return NewInvocationFilesClient(_if.config).UpdateOne(_if)
}

// Unwrap unwraps the InvocationFiles entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_if *InvocationFiles) Unwrap() *InvocationFiles {
	_tx, ok := _if.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvocationFiles is not a transactional entity")
	}
	_if.config.driver = _tx.drv
	return _if
}

// String implements the fmt.Stringer.
func (_if *InvocationFiles) String() string {
	var builder strings.Builder
	builder.WriteString("InvocationFiles(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _if.ID))
	builder.WriteString("name=")
	builder.WriteString(_if.Name)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(_if.Content)
	builder.WriteString(", ")
	builder.WriteString("digest=")
	builder.WriteString(_if.Digest)
	builder.WriteString(", ")
	builder.WriteString("size_bytes=")
	builder.WriteString(fmt.Sprintf("%v", _if.SizeBytes))
	builder.WriteString(", ")
	builder.WriteString("digest_function=")
	builder.WriteString(_if.DigestFunction)
	builder.WriteByte(')')
	return builder.String()
}

// InvocationFilesSlice is a parsable slice of InvocationFiles.
type InvocationFilesSlice []*InvocationFiles
