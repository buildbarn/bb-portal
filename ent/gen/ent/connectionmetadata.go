// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/connectionmetadata"
)

// ConnectionMetadata is the model entity for the ConnectionMetadata schema.
type ConnectionMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ConnectionLastOpenAt holds the value of the "connection_last_open_at" field.
	ConnectionLastOpenAt time.Time `json:"connection_last_open_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectionMetadataQuery when eager-loading is set.
	Edges                                ConnectionMetadataEdges `json:"edges"`
	bazel_invocation_connection_metadata *int
	selectValues                         sql.SelectValues
}

// ConnectionMetadataEdges holds the relations/edges for other nodes in the graph.
type ConnectionMetadataEdges struct {
	// BazelInvocation holds the value of the bazel_invocation edge.
	BazelInvocation *BazelInvocation `json:"bazel_invocation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// BazelInvocationOrErr returns the BazelInvocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionMetadataEdges) BazelInvocationOrErr() (*BazelInvocation, error) {
	if e.BazelInvocation != nil {
		return e.BazelInvocation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bazelinvocation.Label}
	}
	return nil, &NotLoadedError{edge: "bazel_invocation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConnectionMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case connectionmetadata.FieldID:
			values[i] = new(sql.NullInt64)
		case connectionmetadata.FieldConnectionLastOpenAt:
			values[i] = new(sql.NullTime)
		case connectionmetadata.ForeignKeys[0]: // bazel_invocation_connection_metadata
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConnectionMetadata fields.
func (cm *ConnectionMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connectionmetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case connectionmetadata.FieldConnectionLastOpenAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field connection_last_open_at", values[i])
			} else if value.Valid {
				cm.ConnectionLastOpenAt = value.Time
			}
		case connectionmetadata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bazel_invocation_connection_metadata", value)
			} else if value.Valid {
				cm.bazel_invocation_connection_metadata = new(int)
				*cm.bazel_invocation_connection_metadata = int(value.Int64)
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConnectionMetadata.
// This includes values selected through modifiers, order, etc.
func (cm *ConnectionMetadata) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QueryBazelInvocation queries the "bazel_invocation" edge of the ConnectionMetadata entity.
func (cm *ConnectionMetadata) QueryBazelInvocation() *BazelInvocationQuery {
	return NewConnectionMetadataClient(cm.config).QueryBazelInvocation(cm)
}

// Update returns a builder for updating this ConnectionMetadata.
// Note that you need to call ConnectionMetadata.Unwrap() before calling this method if this ConnectionMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ConnectionMetadata) Update() *ConnectionMetadataUpdateOne {
	return NewConnectionMetadataClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ConnectionMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ConnectionMetadata) Unwrap() *ConnectionMetadata {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConnectionMetadata is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ConnectionMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("ConnectionMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("connection_last_open_at=")
	builder.WriteString(cm.ConnectionLastOpenAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ConnectionMetadataSlice is a parsable slice of ConnectionMetadata.
type ConnectionMetadataSlice []*ConnectionMetadata
