// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/exectioninfo"
	"github.com/buildbarn/bb-portal/ent/gen/ent/resourceusage"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testresultbes"
	"github.com/buildbarn/bb-portal/ent/gen/ent/timingbreakdown"
)

// ExectionInfoCreate is the builder for creating a ExectionInfo entity.
type ExectionInfoCreate struct {
	config
	mutation *ExectionInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (eic *ExectionInfoCreate) SetTimeoutSeconds(i int32) *ExectionInfoCreate {
	eic.mutation.SetTimeoutSeconds(i)
	return eic
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (eic *ExectionInfoCreate) SetNillableTimeoutSeconds(i *int32) *ExectionInfoCreate {
	if i != nil {
		eic.SetTimeoutSeconds(*i)
	}
	return eic
}

// SetStrategy sets the "strategy" field.
func (eic *ExectionInfoCreate) SetStrategy(s string) *ExectionInfoCreate {
	eic.mutation.SetStrategy(s)
	return eic
}

// SetNillableStrategy sets the "strategy" field if the given value is not nil.
func (eic *ExectionInfoCreate) SetNillableStrategy(s *string) *ExectionInfoCreate {
	if s != nil {
		eic.SetStrategy(*s)
	}
	return eic
}

// SetCachedRemotely sets the "cached_remotely" field.
func (eic *ExectionInfoCreate) SetCachedRemotely(b bool) *ExectionInfoCreate {
	eic.mutation.SetCachedRemotely(b)
	return eic
}

// SetNillableCachedRemotely sets the "cached_remotely" field if the given value is not nil.
func (eic *ExectionInfoCreate) SetNillableCachedRemotely(b *bool) *ExectionInfoCreate {
	if b != nil {
		eic.SetCachedRemotely(*b)
	}
	return eic
}

// SetExitCode sets the "exit_code" field.
func (eic *ExectionInfoCreate) SetExitCode(i int32) *ExectionInfoCreate {
	eic.mutation.SetExitCode(i)
	return eic
}

// SetNillableExitCode sets the "exit_code" field if the given value is not nil.
func (eic *ExectionInfoCreate) SetNillableExitCode(i *int32) *ExectionInfoCreate {
	if i != nil {
		eic.SetExitCode(*i)
	}
	return eic
}

// SetHostname sets the "hostname" field.
func (eic *ExectionInfoCreate) SetHostname(s string) *ExectionInfoCreate {
	eic.mutation.SetHostname(s)
	return eic
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (eic *ExectionInfoCreate) SetNillableHostname(s *string) *ExectionInfoCreate {
	if s != nil {
		eic.SetHostname(*s)
	}
	return eic
}

// SetTestResultID sets the "test_result" edge to the TestResultBES entity by ID.
func (eic *ExectionInfoCreate) SetTestResultID(id int) *ExectionInfoCreate {
	eic.mutation.SetTestResultID(id)
	return eic
}

// SetNillableTestResultID sets the "test_result" edge to the TestResultBES entity by ID if the given value is not nil.
func (eic *ExectionInfoCreate) SetNillableTestResultID(id *int) *ExectionInfoCreate {
	if id != nil {
		eic = eic.SetTestResultID(*id)
	}
	return eic
}

// SetTestResult sets the "test_result" edge to the TestResultBES entity.
func (eic *ExectionInfoCreate) SetTestResult(t *TestResultBES) *ExectionInfoCreate {
	return eic.SetTestResultID(t.ID)
}

// SetTimingBreakdownID sets the "timing_breakdown" edge to the TimingBreakdown entity by ID.
func (eic *ExectionInfoCreate) SetTimingBreakdownID(id int) *ExectionInfoCreate {
	eic.mutation.SetTimingBreakdownID(id)
	return eic
}

// SetNillableTimingBreakdownID sets the "timing_breakdown" edge to the TimingBreakdown entity by ID if the given value is not nil.
func (eic *ExectionInfoCreate) SetNillableTimingBreakdownID(id *int) *ExectionInfoCreate {
	if id != nil {
		eic = eic.SetTimingBreakdownID(*id)
	}
	return eic
}

// SetTimingBreakdown sets the "timing_breakdown" edge to the TimingBreakdown entity.
func (eic *ExectionInfoCreate) SetTimingBreakdown(t *TimingBreakdown) *ExectionInfoCreate {
	return eic.SetTimingBreakdownID(t.ID)
}

// AddResourceUsageIDs adds the "resource_usage" edge to the ResourceUsage entity by IDs.
func (eic *ExectionInfoCreate) AddResourceUsageIDs(ids ...int) *ExectionInfoCreate {
	eic.mutation.AddResourceUsageIDs(ids...)
	return eic
}

// AddResourceUsage adds the "resource_usage" edges to the ResourceUsage entity.
func (eic *ExectionInfoCreate) AddResourceUsage(r ...*ResourceUsage) *ExectionInfoCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eic.AddResourceUsageIDs(ids...)
}

// Mutation returns the ExectionInfoMutation object of the builder.
func (eic *ExectionInfoCreate) Mutation() *ExectionInfoMutation {
	return eic.mutation
}

// Save creates the ExectionInfo in the database.
func (eic *ExectionInfoCreate) Save(ctx context.Context) (*ExectionInfo, error) {
	return withHooks(ctx, eic.sqlSave, eic.mutation, eic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eic *ExectionInfoCreate) SaveX(ctx context.Context) *ExectionInfo {
	v, err := eic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eic *ExectionInfoCreate) Exec(ctx context.Context) error {
	_, err := eic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eic *ExectionInfoCreate) ExecX(ctx context.Context) {
	if err := eic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eic *ExectionInfoCreate) check() error {
	return nil
}

func (eic *ExectionInfoCreate) sqlSave(ctx context.Context) (*ExectionInfo, error) {
	if err := eic.check(); err != nil {
		return nil, err
	}
	_node, _spec := eic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	eic.mutation.id = &_node.ID
	eic.mutation.done = true
	return _node, nil
}

func (eic *ExectionInfoCreate) createSpec() (*ExectionInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ExectionInfo{config: eic.config}
		_spec = sqlgraph.NewCreateSpec(exectioninfo.Table, sqlgraph.NewFieldSpec(exectioninfo.FieldID, field.TypeInt))
	)
	_spec.OnConflict = eic.conflict
	if value, ok := eic.mutation.TimeoutSeconds(); ok {
		_spec.SetField(exectioninfo.FieldTimeoutSeconds, field.TypeInt32, value)
		_node.TimeoutSeconds = value
	}
	if value, ok := eic.mutation.Strategy(); ok {
		_spec.SetField(exectioninfo.FieldStrategy, field.TypeString, value)
		_node.Strategy = value
	}
	if value, ok := eic.mutation.CachedRemotely(); ok {
		_spec.SetField(exectioninfo.FieldCachedRemotely, field.TypeBool, value)
		_node.CachedRemotely = value
	}
	if value, ok := eic.mutation.ExitCode(); ok {
		_spec.SetField(exectioninfo.FieldExitCode, field.TypeInt32, value)
		_node.ExitCode = value
	}
	if value, ok := eic.mutation.Hostname(); ok {
		_spec.SetField(exectioninfo.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if nodes := eic.mutation.TestResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   exectioninfo.TestResultTable,
			Columns: []string{exectioninfo.TestResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testresultbes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.test_result_bes_execution_info = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eic.mutation.TimingBreakdownIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   exectioninfo.TimingBreakdownTable,
			Columns: []string{exectioninfo.TimingBreakdownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timingbreakdown.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eic.mutation.ResourceUsageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exectioninfo.ResourceUsageTable,
			Columns: []string{exectioninfo.ResourceUsageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceusage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExectionInfo.Create().
//		SetTimeoutSeconds(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExectionInfoUpsert) {
//			SetTimeoutSeconds(v+v).
//		}).
//		Exec(ctx)
func (eic *ExectionInfoCreate) OnConflict(opts ...sql.ConflictOption) *ExectionInfoUpsertOne {
	eic.conflict = opts
	return &ExectionInfoUpsertOne{
		create: eic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExectionInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eic *ExectionInfoCreate) OnConflictColumns(columns ...string) *ExectionInfoUpsertOne {
	eic.conflict = append(eic.conflict, sql.ConflictColumns(columns...))
	return &ExectionInfoUpsertOne{
		create: eic,
	}
}

type (
	// ExectionInfoUpsertOne is the builder for "upsert"-ing
	//  one ExectionInfo node.
	ExectionInfoUpsertOne struct {
		create *ExectionInfoCreate
	}

	// ExectionInfoUpsert is the "OnConflict" setter.
	ExectionInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (u *ExectionInfoUpsert) SetTimeoutSeconds(v int32) *ExectionInfoUpsert {
	u.Set(exectioninfo.FieldTimeoutSeconds, v)
	return u
}

// UpdateTimeoutSeconds sets the "timeout_seconds" field to the value that was provided on create.
func (u *ExectionInfoUpsert) UpdateTimeoutSeconds() *ExectionInfoUpsert {
	u.SetExcluded(exectioninfo.FieldTimeoutSeconds)
	return u
}

// AddTimeoutSeconds adds v to the "timeout_seconds" field.
func (u *ExectionInfoUpsert) AddTimeoutSeconds(v int32) *ExectionInfoUpsert {
	u.Add(exectioninfo.FieldTimeoutSeconds, v)
	return u
}

// ClearTimeoutSeconds clears the value of the "timeout_seconds" field.
func (u *ExectionInfoUpsert) ClearTimeoutSeconds() *ExectionInfoUpsert {
	u.SetNull(exectioninfo.FieldTimeoutSeconds)
	return u
}

// SetStrategy sets the "strategy" field.
func (u *ExectionInfoUpsert) SetStrategy(v string) *ExectionInfoUpsert {
	u.Set(exectioninfo.FieldStrategy, v)
	return u
}

// UpdateStrategy sets the "strategy" field to the value that was provided on create.
func (u *ExectionInfoUpsert) UpdateStrategy() *ExectionInfoUpsert {
	u.SetExcluded(exectioninfo.FieldStrategy)
	return u
}

// ClearStrategy clears the value of the "strategy" field.
func (u *ExectionInfoUpsert) ClearStrategy() *ExectionInfoUpsert {
	u.SetNull(exectioninfo.FieldStrategy)
	return u
}

// SetCachedRemotely sets the "cached_remotely" field.
func (u *ExectionInfoUpsert) SetCachedRemotely(v bool) *ExectionInfoUpsert {
	u.Set(exectioninfo.FieldCachedRemotely, v)
	return u
}

// UpdateCachedRemotely sets the "cached_remotely" field to the value that was provided on create.
func (u *ExectionInfoUpsert) UpdateCachedRemotely() *ExectionInfoUpsert {
	u.SetExcluded(exectioninfo.FieldCachedRemotely)
	return u
}

// ClearCachedRemotely clears the value of the "cached_remotely" field.
func (u *ExectionInfoUpsert) ClearCachedRemotely() *ExectionInfoUpsert {
	u.SetNull(exectioninfo.FieldCachedRemotely)
	return u
}

// SetExitCode sets the "exit_code" field.
func (u *ExectionInfoUpsert) SetExitCode(v int32) *ExectionInfoUpsert {
	u.Set(exectioninfo.FieldExitCode, v)
	return u
}

// UpdateExitCode sets the "exit_code" field to the value that was provided on create.
func (u *ExectionInfoUpsert) UpdateExitCode() *ExectionInfoUpsert {
	u.SetExcluded(exectioninfo.FieldExitCode)
	return u
}

// AddExitCode adds v to the "exit_code" field.
func (u *ExectionInfoUpsert) AddExitCode(v int32) *ExectionInfoUpsert {
	u.Add(exectioninfo.FieldExitCode, v)
	return u
}

// ClearExitCode clears the value of the "exit_code" field.
func (u *ExectionInfoUpsert) ClearExitCode() *ExectionInfoUpsert {
	u.SetNull(exectioninfo.FieldExitCode)
	return u
}

// SetHostname sets the "hostname" field.
func (u *ExectionInfoUpsert) SetHostname(v string) *ExectionInfoUpsert {
	u.Set(exectioninfo.FieldHostname, v)
	return u
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ExectionInfoUpsert) UpdateHostname() *ExectionInfoUpsert {
	u.SetExcluded(exectioninfo.FieldHostname)
	return u
}

// ClearHostname clears the value of the "hostname" field.
func (u *ExectionInfoUpsert) ClearHostname() *ExectionInfoUpsert {
	u.SetNull(exectioninfo.FieldHostname)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ExectionInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExectionInfoUpsertOne) UpdateNewValues() *ExectionInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExectionInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExectionInfoUpsertOne) Ignore() *ExectionInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExectionInfoUpsertOne) DoNothing() *ExectionInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExectionInfoCreate.OnConflict
// documentation for more info.
func (u *ExectionInfoUpsertOne) Update(set func(*ExectionInfoUpsert)) *ExectionInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExectionInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (u *ExectionInfoUpsertOne) SetTimeoutSeconds(v int32) *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetTimeoutSeconds(v)
	})
}

// AddTimeoutSeconds adds v to the "timeout_seconds" field.
func (u *ExectionInfoUpsertOne) AddTimeoutSeconds(v int32) *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.AddTimeoutSeconds(v)
	})
}

// UpdateTimeoutSeconds sets the "timeout_seconds" field to the value that was provided on create.
func (u *ExectionInfoUpsertOne) UpdateTimeoutSeconds() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateTimeoutSeconds()
	})
}

// ClearTimeoutSeconds clears the value of the "timeout_seconds" field.
func (u *ExectionInfoUpsertOne) ClearTimeoutSeconds() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearTimeoutSeconds()
	})
}

// SetStrategy sets the "strategy" field.
func (u *ExectionInfoUpsertOne) SetStrategy(v string) *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetStrategy(v)
	})
}

// UpdateStrategy sets the "strategy" field to the value that was provided on create.
func (u *ExectionInfoUpsertOne) UpdateStrategy() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateStrategy()
	})
}

// ClearStrategy clears the value of the "strategy" field.
func (u *ExectionInfoUpsertOne) ClearStrategy() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearStrategy()
	})
}

// SetCachedRemotely sets the "cached_remotely" field.
func (u *ExectionInfoUpsertOne) SetCachedRemotely(v bool) *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetCachedRemotely(v)
	})
}

// UpdateCachedRemotely sets the "cached_remotely" field to the value that was provided on create.
func (u *ExectionInfoUpsertOne) UpdateCachedRemotely() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateCachedRemotely()
	})
}

// ClearCachedRemotely clears the value of the "cached_remotely" field.
func (u *ExectionInfoUpsertOne) ClearCachedRemotely() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearCachedRemotely()
	})
}

// SetExitCode sets the "exit_code" field.
func (u *ExectionInfoUpsertOne) SetExitCode(v int32) *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetExitCode(v)
	})
}

// AddExitCode adds v to the "exit_code" field.
func (u *ExectionInfoUpsertOne) AddExitCode(v int32) *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.AddExitCode(v)
	})
}

// UpdateExitCode sets the "exit_code" field to the value that was provided on create.
func (u *ExectionInfoUpsertOne) UpdateExitCode() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateExitCode()
	})
}

// ClearExitCode clears the value of the "exit_code" field.
func (u *ExectionInfoUpsertOne) ClearExitCode() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearExitCode()
	})
}

// SetHostname sets the "hostname" field.
func (u *ExectionInfoUpsertOne) SetHostname(v string) *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ExectionInfoUpsertOne) UpdateHostname() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateHostname()
	})
}

// ClearHostname clears the value of the "hostname" field.
func (u *ExectionInfoUpsertOne) ClearHostname() *ExectionInfoUpsertOne {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearHostname()
	})
}

// Exec executes the query.
func (u *ExectionInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExectionInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExectionInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExectionInfoUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExectionInfoUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExectionInfoCreateBulk is the builder for creating many ExectionInfo entities in bulk.
type ExectionInfoCreateBulk struct {
	config
	err      error
	builders []*ExectionInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the ExectionInfo entities in the database.
func (eicb *ExectionInfoCreateBulk) Save(ctx context.Context) ([]*ExectionInfo, error) {
	if eicb.err != nil {
		return nil, eicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eicb.builders))
	nodes := make([]*ExectionInfo, len(eicb.builders))
	mutators := make([]Mutator, len(eicb.builders))
	for i := range eicb.builders {
		func(i int, root context.Context) {
			builder := eicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExectionInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eicb *ExectionInfoCreateBulk) SaveX(ctx context.Context) []*ExectionInfo {
	v, err := eicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eicb *ExectionInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := eicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eicb *ExectionInfoCreateBulk) ExecX(ctx context.Context) {
	if err := eicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExectionInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExectionInfoUpsert) {
//			SetTimeoutSeconds(v+v).
//		}).
//		Exec(ctx)
func (eicb *ExectionInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExectionInfoUpsertBulk {
	eicb.conflict = opts
	return &ExectionInfoUpsertBulk{
		create: eicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExectionInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eicb *ExectionInfoCreateBulk) OnConflictColumns(columns ...string) *ExectionInfoUpsertBulk {
	eicb.conflict = append(eicb.conflict, sql.ConflictColumns(columns...))
	return &ExectionInfoUpsertBulk{
		create: eicb,
	}
}

// ExectionInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of ExectionInfo nodes.
type ExectionInfoUpsertBulk struct {
	create *ExectionInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ExectionInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExectionInfoUpsertBulk) UpdateNewValues() *ExectionInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExectionInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExectionInfoUpsertBulk) Ignore() *ExectionInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExectionInfoUpsertBulk) DoNothing() *ExectionInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExectionInfoCreateBulk.OnConflict
// documentation for more info.
func (u *ExectionInfoUpsertBulk) Update(set func(*ExectionInfoUpsert)) *ExectionInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExectionInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (u *ExectionInfoUpsertBulk) SetTimeoutSeconds(v int32) *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetTimeoutSeconds(v)
	})
}

// AddTimeoutSeconds adds v to the "timeout_seconds" field.
func (u *ExectionInfoUpsertBulk) AddTimeoutSeconds(v int32) *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.AddTimeoutSeconds(v)
	})
}

// UpdateTimeoutSeconds sets the "timeout_seconds" field to the value that was provided on create.
func (u *ExectionInfoUpsertBulk) UpdateTimeoutSeconds() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateTimeoutSeconds()
	})
}

// ClearTimeoutSeconds clears the value of the "timeout_seconds" field.
func (u *ExectionInfoUpsertBulk) ClearTimeoutSeconds() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearTimeoutSeconds()
	})
}

// SetStrategy sets the "strategy" field.
func (u *ExectionInfoUpsertBulk) SetStrategy(v string) *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetStrategy(v)
	})
}

// UpdateStrategy sets the "strategy" field to the value that was provided on create.
func (u *ExectionInfoUpsertBulk) UpdateStrategy() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateStrategy()
	})
}

// ClearStrategy clears the value of the "strategy" field.
func (u *ExectionInfoUpsertBulk) ClearStrategy() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearStrategy()
	})
}

// SetCachedRemotely sets the "cached_remotely" field.
func (u *ExectionInfoUpsertBulk) SetCachedRemotely(v bool) *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetCachedRemotely(v)
	})
}

// UpdateCachedRemotely sets the "cached_remotely" field to the value that was provided on create.
func (u *ExectionInfoUpsertBulk) UpdateCachedRemotely() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateCachedRemotely()
	})
}

// ClearCachedRemotely clears the value of the "cached_remotely" field.
func (u *ExectionInfoUpsertBulk) ClearCachedRemotely() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearCachedRemotely()
	})
}

// SetExitCode sets the "exit_code" field.
func (u *ExectionInfoUpsertBulk) SetExitCode(v int32) *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetExitCode(v)
	})
}

// AddExitCode adds v to the "exit_code" field.
func (u *ExectionInfoUpsertBulk) AddExitCode(v int32) *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.AddExitCode(v)
	})
}

// UpdateExitCode sets the "exit_code" field to the value that was provided on create.
func (u *ExectionInfoUpsertBulk) UpdateExitCode() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateExitCode()
	})
}

// ClearExitCode clears the value of the "exit_code" field.
func (u *ExectionInfoUpsertBulk) ClearExitCode() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearExitCode()
	})
}

// SetHostname sets the "hostname" field.
func (u *ExectionInfoUpsertBulk) SetHostname(v string) *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ExectionInfoUpsertBulk) UpdateHostname() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.UpdateHostname()
	})
}

// ClearHostname clears the value of the "hostname" field.
func (u *ExectionInfoUpsertBulk) ClearHostname() *ExectionInfoUpsertBulk {
	return u.Update(func(s *ExectionInfoUpsert) {
		s.ClearHostname()
	})
}

// Exec executes the query.
func (u *ExectionInfoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExectionInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExectionInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExectionInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
