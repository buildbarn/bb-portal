// Code generated by ent, DO NOT EDIT.

package actioncachestatistics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLTE(FieldID, id))
}

// SizeInBytes applies equality check predicate on the "size_in_bytes" field. It's identical to SizeInBytesEQ.
func SizeInBytes(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldSizeInBytes, v))
}

// SaveTimeInMs applies equality check predicate on the "save_time_in_ms" field. It's identical to SaveTimeInMsEQ.
func SaveTimeInMs(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldSaveTimeInMs, v))
}

// LoadTimeInMs applies equality check predicate on the "load_time_in_ms" field. It's identical to LoadTimeInMsEQ.
func LoadTimeInMs(v int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldLoadTimeInMs, v))
}

// Hits applies equality check predicate on the "hits" field. It's identical to HitsEQ.
func Hits(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldHits, v))
}

// Misses applies equality check predicate on the "misses" field. It's identical to MissesEQ.
func Misses(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldMisses, v))
}

// ActionSummaryID applies equality check predicate on the "action_summary_id" field. It's identical to ActionSummaryIDEQ.
func ActionSummaryID(v int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldActionSummaryID, v))
}

// SizeInBytesEQ applies the EQ predicate on the "size_in_bytes" field.
func SizeInBytesEQ(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldSizeInBytes, v))
}

// SizeInBytesNEQ applies the NEQ predicate on the "size_in_bytes" field.
func SizeInBytesNEQ(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNEQ(FieldSizeInBytes, v))
}

// SizeInBytesIn applies the In predicate on the "size_in_bytes" field.
func SizeInBytesIn(vs ...uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIn(FieldSizeInBytes, vs...))
}

// SizeInBytesNotIn applies the NotIn predicate on the "size_in_bytes" field.
func SizeInBytesNotIn(vs ...uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotIn(FieldSizeInBytes, vs...))
}

// SizeInBytesGT applies the GT predicate on the "size_in_bytes" field.
func SizeInBytesGT(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGT(FieldSizeInBytes, v))
}

// SizeInBytesGTE applies the GTE predicate on the "size_in_bytes" field.
func SizeInBytesGTE(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGTE(FieldSizeInBytes, v))
}

// SizeInBytesLT applies the LT predicate on the "size_in_bytes" field.
func SizeInBytesLT(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLT(FieldSizeInBytes, v))
}

// SizeInBytesLTE applies the LTE predicate on the "size_in_bytes" field.
func SizeInBytesLTE(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLTE(FieldSizeInBytes, v))
}

// SizeInBytesIsNil applies the IsNil predicate on the "size_in_bytes" field.
func SizeInBytesIsNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIsNull(FieldSizeInBytes))
}

// SizeInBytesNotNil applies the NotNil predicate on the "size_in_bytes" field.
func SizeInBytesNotNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotNull(FieldSizeInBytes))
}

// SaveTimeInMsEQ applies the EQ predicate on the "save_time_in_ms" field.
func SaveTimeInMsEQ(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldSaveTimeInMs, v))
}

// SaveTimeInMsNEQ applies the NEQ predicate on the "save_time_in_ms" field.
func SaveTimeInMsNEQ(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNEQ(FieldSaveTimeInMs, v))
}

// SaveTimeInMsIn applies the In predicate on the "save_time_in_ms" field.
func SaveTimeInMsIn(vs ...uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIn(FieldSaveTimeInMs, vs...))
}

// SaveTimeInMsNotIn applies the NotIn predicate on the "save_time_in_ms" field.
func SaveTimeInMsNotIn(vs ...uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotIn(FieldSaveTimeInMs, vs...))
}

// SaveTimeInMsGT applies the GT predicate on the "save_time_in_ms" field.
func SaveTimeInMsGT(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGT(FieldSaveTimeInMs, v))
}

// SaveTimeInMsGTE applies the GTE predicate on the "save_time_in_ms" field.
func SaveTimeInMsGTE(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGTE(FieldSaveTimeInMs, v))
}

// SaveTimeInMsLT applies the LT predicate on the "save_time_in_ms" field.
func SaveTimeInMsLT(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLT(FieldSaveTimeInMs, v))
}

// SaveTimeInMsLTE applies the LTE predicate on the "save_time_in_ms" field.
func SaveTimeInMsLTE(v uint64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLTE(FieldSaveTimeInMs, v))
}

// SaveTimeInMsIsNil applies the IsNil predicate on the "save_time_in_ms" field.
func SaveTimeInMsIsNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIsNull(FieldSaveTimeInMs))
}

// SaveTimeInMsNotNil applies the NotNil predicate on the "save_time_in_ms" field.
func SaveTimeInMsNotNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotNull(FieldSaveTimeInMs))
}

// LoadTimeInMsEQ applies the EQ predicate on the "load_time_in_ms" field.
func LoadTimeInMsEQ(v int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldLoadTimeInMs, v))
}

// LoadTimeInMsNEQ applies the NEQ predicate on the "load_time_in_ms" field.
func LoadTimeInMsNEQ(v int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNEQ(FieldLoadTimeInMs, v))
}

// LoadTimeInMsIn applies the In predicate on the "load_time_in_ms" field.
func LoadTimeInMsIn(vs ...int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIn(FieldLoadTimeInMs, vs...))
}

// LoadTimeInMsNotIn applies the NotIn predicate on the "load_time_in_ms" field.
func LoadTimeInMsNotIn(vs ...int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotIn(FieldLoadTimeInMs, vs...))
}

// LoadTimeInMsGT applies the GT predicate on the "load_time_in_ms" field.
func LoadTimeInMsGT(v int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGT(FieldLoadTimeInMs, v))
}

// LoadTimeInMsGTE applies the GTE predicate on the "load_time_in_ms" field.
func LoadTimeInMsGTE(v int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGTE(FieldLoadTimeInMs, v))
}

// LoadTimeInMsLT applies the LT predicate on the "load_time_in_ms" field.
func LoadTimeInMsLT(v int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLT(FieldLoadTimeInMs, v))
}

// LoadTimeInMsLTE applies the LTE predicate on the "load_time_in_ms" field.
func LoadTimeInMsLTE(v int64) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLTE(FieldLoadTimeInMs, v))
}

// LoadTimeInMsIsNil applies the IsNil predicate on the "load_time_in_ms" field.
func LoadTimeInMsIsNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIsNull(FieldLoadTimeInMs))
}

// LoadTimeInMsNotNil applies the NotNil predicate on the "load_time_in_ms" field.
func LoadTimeInMsNotNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotNull(FieldLoadTimeInMs))
}

// HitsEQ applies the EQ predicate on the "hits" field.
func HitsEQ(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldHits, v))
}

// HitsNEQ applies the NEQ predicate on the "hits" field.
func HitsNEQ(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNEQ(FieldHits, v))
}

// HitsIn applies the In predicate on the "hits" field.
func HitsIn(vs ...int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIn(FieldHits, vs...))
}

// HitsNotIn applies the NotIn predicate on the "hits" field.
func HitsNotIn(vs ...int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotIn(FieldHits, vs...))
}

// HitsGT applies the GT predicate on the "hits" field.
func HitsGT(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGT(FieldHits, v))
}

// HitsGTE applies the GTE predicate on the "hits" field.
func HitsGTE(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGTE(FieldHits, v))
}

// HitsLT applies the LT predicate on the "hits" field.
func HitsLT(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLT(FieldHits, v))
}

// HitsLTE applies the LTE predicate on the "hits" field.
func HitsLTE(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLTE(FieldHits, v))
}

// HitsIsNil applies the IsNil predicate on the "hits" field.
func HitsIsNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIsNull(FieldHits))
}

// HitsNotNil applies the NotNil predicate on the "hits" field.
func HitsNotNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotNull(FieldHits))
}

// MissesEQ applies the EQ predicate on the "misses" field.
func MissesEQ(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldMisses, v))
}

// MissesNEQ applies the NEQ predicate on the "misses" field.
func MissesNEQ(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNEQ(FieldMisses, v))
}

// MissesIn applies the In predicate on the "misses" field.
func MissesIn(vs ...int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIn(FieldMisses, vs...))
}

// MissesNotIn applies the NotIn predicate on the "misses" field.
func MissesNotIn(vs ...int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotIn(FieldMisses, vs...))
}

// MissesGT applies the GT predicate on the "misses" field.
func MissesGT(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGT(FieldMisses, v))
}

// MissesGTE applies the GTE predicate on the "misses" field.
func MissesGTE(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldGTE(FieldMisses, v))
}

// MissesLT applies the LT predicate on the "misses" field.
func MissesLT(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLT(FieldMisses, v))
}

// MissesLTE applies the LTE predicate on the "misses" field.
func MissesLTE(v int32) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldLTE(FieldMisses, v))
}

// MissesIsNil applies the IsNil predicate on the "misses" field.
func MissesIsNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIsNull(FieldMisses))
}

// MissesNotNil applies the NotNil predicate on the "misses" field.
func MissesNotNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotNull(FieldMisses))
}

// ActionSummaryIDEQ applies the EQ predicate on the "action_summary_id" field.
func ActionSummaryIDEQ(v int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldEQ(FieldActionSummaryID, v))
}

// ActionSummaryIDNEQ applies the NEQ predicate on the "action_summary_id" field.
func ActionSummaryIDNEQ(v int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNEQ(FieldActionSummaryID, v))
}

// ActionSummaryIDIn applies the In predicate on the "action_summary_id" field.
func ActionSummaryIDIn(vs ...int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIn(FieldActionSummaryID, vs...))
}

// ActionSummaryIDNotIn applies the NotIn predicate on the "action_summary_id" field.
func ActionSummaryIDNotIn(vs ...int) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotIn(FieldActionSummaryID, vs...))
}

// ActionSummaryIDIsNil applies the IsNil predicate on the "action_summary_id" field.
func ActionSummaryIDIsNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldIsNull(FieldActionSummaryID))
}

// ActionSummaryIDNotNil applies the NotNil predicate on the "action_summary_id" field.
func ActionSummaryIDNotNil() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.FieldNotNull(FieldActionSummaryID))
}

// HasActionSummary applies the HasEdge predicate on the "action_summary" edge.
func HasActionSummary() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ActionSummaryTable, ActionSummaryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionSummaryWith applies the HasEdge predicate on the "action_summary" edge with a given conditions (other predicates).
func HasActionSummaryWith(preds ...predicate.ActionSummary) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(func(s *sql.Selector) {
		step := newActionSummaryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMissDetails applies the HasEdge predicate on the "miss_details" edge.
func HasMissDetails() predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissDetailsTable, MissDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissDetailsWith applies the HasEdge predicate on the "miss_details" edge with a given conditions (other predicates).
func HasMissDetailsWith(preds ...predicate.MissDetail) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(func(s *sql.Selector) {
		step := newMissDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActionCacheStatistics) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActionCacheStatistics) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActionCacheStatistics) predicate.ActionCacheStatistics {
	return predicate.ActionCacheStatistics(sql.NotPredicates(p))
}
