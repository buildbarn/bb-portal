// Code generated by ent, DO NOT EDIT.

package timingchild

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEQ(FieldName, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEQ(FieldTime, v))
}

// TimingBreakdownID applies equality check predicate on the "timing_breakdown_id" field. It's identical to TimingBreakdownIDEQ.
func TimingBreakdownID(v int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEQ(FieldTimingBreakdownID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.TimingChild {
	return predicate.TimingChild(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldContainsFold(FieldName, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldLTE(FieldTime, v))
}

// TimeContains applies the Contains predicate on the "time" field.
func TimeContains(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldContains(FieldTime, v))
}

// TimeHasPrefix applies the HasPrefix predicate on the "time" field.
func TimeHasPrefix(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldHasPrefix(FieldTime, v))
}

// TimeHasSuffix applies the HasSuffix predicate on the "time" field.
func TimeHasSuffix(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldHasSuffix(FieldTime, v))
}

// TimeIsNil applies the IsNil predicate on the "time" field.
func TimeIsNil() predicate.TimingChild {
	return predicate.TimingChild(sql.FieldIsNull(FieldTime))
}

// TimeNotNil applies the NotNil predicate on the "time" field.
func TimeNotNil() predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNotNull(FieldTime))
}

// TimeEqualFold applies the EqualFold predicate on the "time" field.
func TimeEqualFold(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEqualFold(FieldTime, v))
}

// TimeContainsFold applies the ContainsFold predicate on the "time" field.
func TimeContainsFold(v string) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldContainsFold(FieldTime, v))
}

// TimingBreakdownIDEQ applies the EQ predicate on the "timing_breakdown_id" field.
func TimingBreakdownIDEQ(v int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldEQ(FieldTimingBreakdownID, v))
}

// TimingBreakdownIDNEQ applies the NEQ predicate on the "timing_breakdown_id" field.
func TimingBreakdownIDNEQ(v int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNEQ(FieldTimingBreakdownID, v))
}

// TimingBreakdownIDIn applies the In predicate on the "timing_breakdown_id" field.
func TimingBreakdownIDIn(vs ...int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldIn(FieldTimingBreakdownID, vs...))
}

// TimingBreakdownIDNotIn applies the NotIn predicate on the "timing_breakdown_id" field.
func TimingBreakdownIDNotIn(vs ...int) predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNotIn(FieldTimingBreakdownID, vs...))
}

// TimingBreakdownIDIsNil applies the IsNil predicate on the "timing_breakdown_id" field.
func TimingBreakdownIDIsNil() predicate.TimingChild {
	return predicate.TimingChild(sql.FieldIsNull(FieldTimingBreakdownID))
}

// TimingBreakdownIDNotNil applies the NotNil predicate on the "timing_breakdown_id" field.
func TimingBreakdownIDNotNil() predicate.TimingChild {
	return predicate.TimingChild(sql.FieldNotNull(FieldTimingBreakdownID))
}

// HasTimingBreakdown applies the HasEdge predicate on the "timing_breakdown" edge.
func HasTimingBreakdown() predicate.TimingChild {
	return predicate.TimingChild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TimingBreakdownTable, TimingBreakdownColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimingBreakdownWith applies the HasEdge predicate on the "timing_breakdown" edge with a given conditions (other predicates).
func HasTimingBreakdownWith(preds ...predicate.TimingBreakdown) predicate.TimingChild {
	return predicate.TimingChild(func(s *sql.Selector) {
		step := newTimingBreakdownStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TimingChild) predicate.TimingChild {
	return predicate.TimingChild(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TimingChild) predicate.TimingChild {
	return predicate.TimingChild(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TimingChild) predicate.TimingChild {
	return predicate.TimingChild(sql.NotPredicates(p))
}
