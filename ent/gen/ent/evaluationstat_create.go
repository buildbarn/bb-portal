// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/buildgraphmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/evaluationstat"
)

// EvaluationStatCreate is the builder for creating a EvaluationStat entity.
type EvaluationStatCreate struct {
	config
	mutation *EvaluationStatMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSkyfunctionName sets the "skyfunction_name" field.
func (esc *EvaluationStatCreate) SetSkyfunctionName(s string) *EvaluationStatCreate {
	esc.mutation.SetSkyfunctionName(s)
	return esc
}

// SetNillableSkyfunctionName sets the "skyfunction_name" field if the given value is not nil.
func (esc *EvaluationStatCreate) SetNillableSkyfunctionName(s *string) *EvaluationStatCreate {
	if s != nil {
		esc.SetSkyfunctionName(*s)
	}
	return esc
}

// SetCount sets the "count" field.
func (esc *EvaluationStatCreate) SetCount(i int64) *EvaluationStatCreate {
	esc.mutation.SetCount(i)
	return esc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (esc *EvaluationStatCreate) SetNillableCount(i *int64) *EvaluationStatCreate {
	if i != nil {
		esc.SetCount(*i)
	}
	return esc
}

// SetBuildGraphMetricsID sets the "build_graph_metrics" edge to the BuildGraphMetrics entity by ID.
func (esc *EvaluationStatCreate) SetBuildGraphMetricsID(id int) *EvaluationStatCreate {
	esc.mutation.SetBuildGraphMetricsID(id)
	return esc
}

// SetNillableBuildGraphMetricsID sets the "build_graph_metrics" edge to the BuildGraphMetrics entity by ID if the given value is not nil.
func (esc *EvaluationStatCreate) SetNillableBuildGraphMetricsID(id *int) *EvaluationStatCreate {
	if id != nil {
		esc = esc.SetBuildGraphMetricsID(*id)
	}
	return esc
}

// SetBuildGraphMetrics sets the "build_graph_metrics" edge to the BuildGraphMetrics entity.
func (esc *EvaluationStatCreate) SetBuildGraphMetrics(b *BuildGraphMetrics) *EvaluationStatCreate {
	return esc.SetBuildGraphMetricsID(b.ID)
}

// Mutation returns the EvaluationStatMutation object of the builder.
func (esc *EvaluationStatCreate) Mutation() *EvaluationStatMutation {
	return esc.mutation
}

// Save creates the EvaluationStat in the database.
func (esc *EvaluationStatCreate) Save(ctx context.Context) (*EvaluationStat, error) {
	return withHooks(ctx, esc.sqlSave, esc.mutation, esc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esc *EvaluationStatCreate) SaveX(ctx context.Context) *EvaluationStat {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *EvaluationStatCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *EvaluationStatCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *EvaluationStatCreate) check() error {
	return nil
}

func (esc *EvaluationStatCreate) sqlSave(ctx context.Context) (*EvaluationStat, error) {
	if err := esc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	esc.mutation.id = &_node.ID
	esc.mutation.done = true
	return _node, nil
}

func (esc *EvaluationStatCreate) createSpec() (*EvaluationStat, *sqlgraph.CreateSpec) {
	var (
		_node = &EvaluationStat{config: esc.config}
		_spec = sqlgraph.NewCreateSpec(evaluationstat.Table, sqlgraph.NewFieldSpec(evaluationstat.FieldID, field.TypeInt))
	)
	_spec.OnConflict = esc.conflict
	if value, ok := esc.mutation.SkyfunctionName(); ok {
		_spec.SetField(evaluationstat.FieldSkyfunctionName, field.TypeString, value)
		_node.SkyfunctionName = value
	}
	if value, ok := esc.mutation.Count(); ok {
		_spec.SetField(evaluationstat.FieldCount, field.TypeInt64, value)
		_node.Count = value
	}
	if nodes := esc.mutation.BuildGraphMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   evaluationstat.BuildGraphMetricsTable,
			Columns: []string{evaluationstat.BuildGraphMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildgraphmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.build_graph_metrics_evaluated_values = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EvaluationStat.Create().
//		SetSkyfunctionName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EvaluationStatUpsert) {
//			SetSkyfunctionName(v+v).
//		}).
//		Exec(ctx)
func (esc *EvaluationStatCreate) OnConflict(opts ...sql.ConflictOption) *EvaluationStatUpsertOne {
	esc.conflict = opts
	return &EvaluationStatUpsertOne{
		create: esc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EvaluationStat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (esc *EvaluationStatCreate) OnConflictColumns(columns ...string) *EvaluationStatUpsertOne {
	esc.conflict = append(esc.conflict, sql.ConflictColumns(columns...))
	return &EvaluationStatUpsertOne{
		create: esc,
	}
}

type (
	// EvaluationStatUpsertOne is the builder for "upsert"-ing
	//  one EvaluationStat node.
	EvaluationStatUpsertOne struct {
		create *EvaluationStatCreate
	}

	// EvaluationStatUpsert is the "OnConflict" setter.
	EvaluationStatUpsert struct {
		*sql.UpdateSet
	}
)

// SetSkyfunctionName sets the "skyfunction_name" field.
func (u *EvaluationStatUpsert) SetSkyfunctionName(v string) *EvaluationStatUpsert {
	u.Set(evaluationstat.FieldSkyfunctionName, v)
	return u
}

// UpdateSkyfunctionName sets the "skyfunction_name" field to the value that was provided on create.
func (u *EvaluationStatUpsert) UpdateSkyfunctionName() *EvaluationStatUpsert {
	u.SetExcluded(evaluationstat.FieldSkyfunctionName)
	return u
}

// ClearSkyfunctionName clears the value of the "skyfunction_name" field.
func (u *EvaluationStatUpsert) ClearSkyfunctionName() *EvaluationStatUpsert {
	u.SetNull(evaluationstat.FieldSkyfunctionName)
	return u
}

// SetCount sets the "count" field.
func (u *EvaluationStatUpsert) SetCount(v int64) *EvaluationStatUpsert {
	u.Set(evaluationstat.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *EvaluationStatUpsert) UpdateCount() *EvaluationStatUpsert {
	u.SetExcluded(evaluationstat.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *EvaluationStatUpsert) AddCount(v int64) *EvaluationStatUpsert {
	u.Add(evaluationstat.FieldCount, v)
	return u
}

// ClearCount clears the value of the "count" field.
func (u *EvaluationStatUpsert) ClearCount() *EvaluationStatUpsert {
	u.SetNull(evaluationstat.FieldCount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EvaluationStat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EvaluationStatUpsertOne) UpdateNewValues() *EvaluationStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EvaluationStat.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EvaluationStatUpsertOne) Ignore() *EvaluationStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EvaluationStatUpsertOne) DoNothing() *EvaluationStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EvaluationStatCreate.OnConflict
// documentation for more info.
func (u *EvaluationStatUpsertOne) Update(set func(*EvaluationStatUpsert)) *EvaluationStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EvaluationStatUpsert{UpdateSet: update})
	}))
	return u
}

// SetSkyfunctionName sets the "skyfunction_name" field.
func (u *EvaluationStatUpsertOne) SetSkyfunctionName(v string) *EvaluationStatUpsertOne {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.SetSkyfunctionName(v)
	})
}

// UpdateSkyfunctionName sets the "skyfunction_name" field to the value that was provided on create.
func (u *EvaluationStatUpsertOne) UpdateSkyfunctionName() *EvaluationStatUpsertOne {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.UpdateSkyfunctionName()
	})
}

// ClearSkyfunctionName clears the value of the "skyfunction_name" field.
func (u *EvaluationStatUpsertOne) ClearSkyfunctionName() *EvaluationStatUpsertOne {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.ClearSkyfunctionName()
	})
}

// SetCount sets the "count" field.
func (u *EvaluationStatUpsertOne) SetCount(v int64) *EvaluationStatUpsertOne {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *EvaluationStatUpsertOne) AddCount(v int64) *EvaluationStatUpsertOne {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *EvaluationStatUpsertOne) UpdateCount() *EvaluationStatUpsertOne {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *EvaluationStatUpsertOne) ClearCount() *EvaluationStatUpsertOne {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.ClearCount()
	})
}

// Exec executes the query.
func (u *EvaluationStatUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EvaluationStatCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EvaluationStatUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EvaluationStatUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EvaluationStatUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EvaluationStatCreateBulk is the builder for creating many EvaluationStat entities in bulk.
type EvaluationStatCreateBulk struct {
	config
	err      error
	builders []*EvaluationStatCreate
	conflict []sql.ConflictOption
}

// Save creates the EvaluationStat entities in the database.
func (escb *EvaluationStatCreateBulk) Save(ctx context.Context) ([]*EvaluationStat, error) {
	if escb.err != nil {
		return nil, escb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*EvaluationStat, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EvaluationStatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = escb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *EvaluationStatCreateBulk) SaveX(ctx context.Context) []*EvaluationStat {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *EvaluationStatCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *EvaluationStatCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EvaluationStat.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EvaluationStatUpsert) {
//			SetSkyfunctionName(v+v).
//		}).
//		Exec(ctx)
func (escb *EvaluationStatCreateBulk) OnConflict(opts ...sql.ConflictOption) *EvaluationStatUpsertBulk {
	escb.conflict = opts
	return &EvaluationStatUpsertBulk{
		create: escb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EvaluationStat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (escb *EvaluationStatCreateBulk) OnConflictColumns(columns ...string) *EvaluationStatUpsertBulk {
	escb.conflict = append(escb.conflict, sql.ConflictColumns(columns...))
	return &EvaluationStatUpsertBulk{
		create: escb,
	}
}

// EvaluationStatUpsertBulk is the builder for "upsert"-ing
// a bulk of EvaluationStat nodes.
type EvaluationStatUpsertBulk struct {
	create *EvaluationStatCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EvaluationStat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EvaluationStatUpsertBulk) UpdateNewValues() *EvaluationStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EvaluationStat.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EvaluationStatUpsertBulk) Ignore() *EvaluationStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EvaluationStatUpsertBulk) DoNothing() *EvaluationStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EvaluationStatCreateBulk.OnConflict
// documentation for more info.
func (u *EvaluationStatUpsertBulk) Update(set func(*EvaluationStatUpsert)) *EvaluationStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EvaluationStatUpsert{UpdateSet: update})
	}))
	return u
}

// SetSkyfunctionName sets the "skyfunction_name" field.
func (u *EvaluationStatUpsertBulk) SetSkyfunctionName(v string) *EvaluationStatUpsertBulk {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.SetSkyfunctionName(v)
	})
}

// UpdateSkyfunctionName sets the "skyfunction_name" field to the value that was provided on create.
func (u *EvaluationStatUpsertBulk) UpdateSkyfunctionName() *EvaluationStatUpsertBulk {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.UpdateSkyfunctionName()
	})
}

// ClearSkyfunctionName clears the value of the "skyfunction_name" field.
func (u *EvaluationStatUpsertBulk) ClearSkyfunctionName() *EvaluationStatUpsertBulk {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.ClearSkyfunctionName()
	})
}

// SetCount sets the "count" field.
func (u *EvaluationStatUpsertBulk) SetCount(v int64) *EvaluationStatUpsertBulk {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *EvaluationStatUpsertBulk) AddCount(v int64) *EvaluationStatUpsertBulk {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *EvaluationStatUpsertBulk) UpdateCount() *EvaluationStatUpsertBulk {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *EvaluationStatUpsertBulk) ClearCount() *EvaluationStatUpsertBulk {
	return u.Update(func(s *EvaluationStatUpsert) {
		s.ClearCount()
	})
}

// Exec executes the query.
func (u *EvaluationStatUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EvaluationStatCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EvaluationStatCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EvaluationStatUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
