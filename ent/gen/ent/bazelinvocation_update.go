// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocationproblem"
	"github.com/buildbarn/bb-portal/ent/gen/ent/build"
	"github.com/buildbarn/bb-portal/ent/gen/ent/connectionmetadata"
	"github.com/buildbarn/bb-portal/ent/gen/ent/eventmetadata"
	"github.com/buildbarn/bb-portal/ent/gen/ent/incompletebuildlog"
	"github.com/buildbarn/bb-portal/ent/gen/ent/invocationfiles"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
	"github.com/buildbarn/bb-portal/ent/gen/ent/sourcecontrol"
	"github.com/buildbarn/bb-portal/ent/gen/ent/target"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testcollection"
)

// BazelInvocationUpdate is the builder for updating BazelInvocation entities.
type BazelInvocationUpdate struct {
	config
	hooks    []Hook
	mutation *BazelInvocationMutation
}

// Where appends a list predicates to the BazelInvocationUpdate builder.
func (biu *BazelInvocationUpdate) Where(ps ...predicate.BazelInvocation) *BazelInvocationUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetStartedAt sets the "started_at" field.
func (biu *BazelInvocationUpdate) SetStartedAt(t time.Time) *BazelInvocationUpdate {
	biu.mutation.SetStartedAt(t)
	return biu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableStartedAt(t *time.Time) *BazelInvocationUpdate {
	if t != nil {
		biu.SetStartedAt(*t)
	}
	return biu
}

// ClearStartedAt clears the value of the "started_at" field.
func (biu *BazelInvocationUpdate) ClearStartedAt() *BazelInvocationUpdate {
	biu.mutation.ClearStartedAt()
	return biu
}

// SetEndedAt sets the "ended_at" field.
func (biu *BazelInvocationUpdate) SetEndedAt(t time.Time) *BazelInvocationUpdate {
	biu.mutation.SetEndedAt(t)
	return biu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableEndedAt(t *time.Time) *BazelInvocationUpdate {
	if t != nil {
		biu.SetEndedAt(*t)
	}
	return biu
}

// ClearEndedAt clears the value of the "ended_at" field.
func (biu *BazelInvocationUpdate) ClearEndedAt() *BazelInvocationUpdate {
	biu.mutation.ClearEndedAt()
	return biu
}

// SetChangeNumber sets the "change_number" field.
func (biu *BazelInvocationUpdate) SetChangeNumber(i int) *BazelInvocationUpdate {
	biu.mutation.ResetChangeNumber()
	biu.mutation.SetChangeNumber(i)
	return biu
}

// SetNillableChangeNumber sets the "change_number" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableChangeNumber(i *int) *BazelInvocationUpdate {
	if i != nil {
		biu.SetChangeNumber(*i)
	}
	return biu
}

// AddChangeNumber adds i to the "change_number" field.
func (biu *BazelInvocationUpdate) AddChangeNumber(i int) *BazelInvocationUpdate {
	biu.mutation.AddChangeNumber(i)
	return biu
}

// ClearChangeNumber clears the value of the "change_number" field.
func (biu *BazelInvocationUpdate) ClearChangeNumber() *BazelInvocationUpdate {
	biu.mutation.ClearChangeNumber()
	return biu
}

// SetPatchsetNumber sets the "patchset_number" field.
func (biu *BazelInvocationUpdate) SetPatchsetNumber(i int) *BazelInvocationUpdate {
	biu.mutation.ResetPatchsetNumber()
	biu.mutation.SetPatchsetNumber(i)
	return biu
}

// SetNillablePatchsetNumber sets the "patchset_number" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillablePatchsetNumber(i *int) *BazelInvocationUpdate {
	if i != nil {
		biu.SetPatchsetNumber(*i)
	}
	return biu
}

// AddPatchsetNumber adds i to the "patchset_number" field.
func (biu *BazelInvocationUpdate) AddPatchsetNumber(i int) *BazelInvocationUpdate {
	biu.mutation.AddPatchsetNumber(i)
	return biu
}

// ClearPatchsetNumber clears the value of the "patchset_number" field.
func (biu *BazelInvocationUpdate) ClearPatchsetNumber() *BazelInvocationUpdate {
	biu.mutation.ClearPatchsetNumber()
	return biu
}

// SetBepCompleted sets the "bep_completed" field.
func (biu *BazelInvocationUpdate) SetBepCompleted(b bool) *BazelInvocationUpdate {
	biu.mutation.SetBepCompleted(b)
	return biu
}

// SetNillableBepCompleted sets the "bep_completed" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableBepCompleted(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetBepCompleted(*b)
	}
	return biu
}

// SetStepLabel sets the "step_label" field.
func (biu *BazelInvocationUpdate) SetStepLabel(s string) *BazelInvocationUpdate {
	biu.mutation.SetStepLabel(s)
	return biu
}

// SetNillableStepLabel sets the "step_label" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableStepLabel(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetStepLabel(*s)
	}
	return biu
}

// ClearStepLabel clears the value of the "step_label" field.
func (biu *BazelInvocationUpdate) ClearStepLabel() *BazelInvocationUpdate {
	biu.mutation.ClearStepLabel()
	return biu
}

// SetUserEmail sets the "user_email" field.
func (biu *BazelInvocationUpdate) SetUserEmail(s string) *BazelInvocationUpdate {
	biu.mutation.SetUserEmail(s)
	return biu
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableUserEmail(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetUserEmail(*s)
	}
	return biu
}

// ClearUserEmail clears the value of the "user_email" field.
func (biu *BazelInvocationUpdate) ClearUserEmail() *BazelInvocationUpdate {
	biu.mutation.ClearUserEmail()
	return biu
}

// SetUserLdap sets the "user_ldap" field.
func (biu *BazelInvocationUpdate) SetUserLdap(s string) *BazelInvocationUpdate {
	biu.mutation.SetUserLdap(s)
	return biu
}

// SetNillableUserLdap sets the "user_ldap" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableUserLdap(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetUserLdap(*s)
	}
	return biu
}

// ClearUserLdap clears the value of the "user_ldap" field.
func (biu *BazelInvocationUpdate) ClearUserLdap() *BazelInvocationUpdate {
	biu.mutation.ClearUserLdap()
	return biu
}

// SetBuildLogs sets the "build_logs" field.
func (biu *BazelInvocationUpdate) SetBuildLogs(s string) *BazelInvocationUpdate {
	biu.mutation.SetBuildLogs(s)
	return biu
}

// SetNillableBuildLogs sets the "build_logs" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableBuildLogs(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetBuildLogs(*s)
	}
	return biu
}

// ClearBuildLogs clears the value of the "build_logs" field.
func (biu *BazelInvocationUpdate) ClearBuildLogs() *BazelInvocationUpdate {
	biu.mutation.ClearBuildLogs()
	return biu
}

// SetCPU sets the "cpu" field.
func (biu *BazelInvocationUpdate) SetCPU(s string) *BazelInvocationUpdate {
	biu.mutation.SetCPU(s)
	return biu
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableCPU(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetCPU(*s)
	}
	return biu
}

// ClearCPU clears the value of the "cpu" field.
func (biu *BazelInvocationUpdate) ClearCPU() *BazelInvocationUpdate {
	biu.mutation.ClearCPU()
	return biu
}

// SetPlatformName sets the "platform_name" field.
func (biu *BazelInvocationUpdate) SetPlatformName(s string) *BazelInvocationUpdate {
	biu.mutation.SetPlatformName(s)
	return biu
}

// SetNillablePlatformName sets the "platform_name" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillablePlatformName(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetPlatformName(*s)
	}
	return biu
}

// ClearPlatformName clears the value of the "platform_name" field.
func (biu *BazelInvocationUpdate) ClearPlatformName() *BazelInvocationUpdate {
	biu.mutation.ClearPlatformName()
	return biu
}

// SetHostname sets the "hostname" field.
func (biu *BazelInvocationUpdate) SetHostname(s string) *BazelInvocationUpdate {
	biu.mutation.SetHostname(s)
	return biu
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableHostname(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetHostname(*s)
	}
	return biu
}

// ClearHostname clears the value of the "hostname" field.
func (biu *BazelInvocationUpdate) ClearHostname() *BazelInvocationUpdate {
	biu.mutation.ClearHostname()
	return biu
}

// SetIsCiWorker sets the "is_ci_worker" field.
func (biu *BazelInvocationUpdate) SetIsCiWorker(b bool) *BazelInvocationUpdate {
	biu.mutation.SetIsCiWorker(b)
	return biu
}

// SetNillableIsCiWorker sets the "is_ci_worker" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableIsCiWorker(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetIsCiWorker(*b)
	}
	return biu
}

// ClearIsCiWorker clears the value of the "is_ci_worker" field.
func (biu *BazelInvocationUpdate) ClearIsCiWorker() *BazelInvocationUpdate {
	biu.mutation.ClearIsCiWorker()
	return biu
}

// SetConfigurationMnemonic sets the "configuration_mnemonic" field.
func (biu *BazelInvocationUpdate) SetConfigurationMnemonic(s string) *BazelInvocationUpdate {
	biu.mutation.SetConfigurationMnemonic(s)
	return biu
}

// SetNillableConfigurationMnemonic sets the "configuration_mnemonic" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableConfigurationMnemonic(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetConfigurationMnemonic(*s)
	}
	return biu
}

// ClearConfigurationMnemonic clears the value of the "configuration_mnemonic" field.
func (biu *BazelInvocationUpdate) ClearConfigurationMnemonic() *BazelInvocationUpdate {
	biu.mutation.ClearConfigurationMnemonic()
	return biu
}

// SetNumFetches sets the "num_fetches" field.
func (biu *BazelInvocationUpdate) SetNumFetches(i int64) *BazelInvocationUpdate {
	biu.mutation.ResetNumFetches()
	biu.mutation.SetNumFetches(i)
	return biu
}

// SetNillableNumFetches sets the "num_fetches" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableNumFetches(i *int64) *BazelInvocationUpdate {
	if i != nil {
		biu.SetNumFetches(*i)
	}
	return biu
}

// AddNumFetches adds i to the "num_fetches" field.
func (biu *BazelInvocationUpdate) AddNumFetches(i int64) *BazelInvocationUpdate {
	biu.mutation.AddNumFetches(i)
	return biu
}

// ClearNumFetches clears the value of the "num_fetches" field.
func (biu *BazelInvocationUpdate) ClearNumFetches() *BazelInvocationUpdate {
	biu.mutation.ClearNumFetches()
	return biu
}

// SetProfileName sets the "profile_name" field.
func (biu *BazelInvocationUpdate) SetProfileName(s string) *BazelInvocationUpdate {
	biu.mutation.SetProfileName(s)
	return biu
}

// SetNillableProfileName sets the "profile_name" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableProfileName(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetProfileName(*s)
	}
	return biu
}

// ClearProfileName clears the value of the "profile_name" field.
func (biu *BazelInvocationUpdate) ClearProfileName() *BazelInvocationUpdate {
	biu.mutation.ClearProfileName()
	return biu
}

// SetInstanceName sets the "instance_name" field.
func (biu *BazelInvocationUpdate) SetInstanceName(s string) *BazelInvocationUpdate {
	biu.mutation.SetInstanceName(s)
	return biu
}

// SetNillableInstanceName sets the "instance_name" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableInstanceName(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetInstanceName(*s)
	}
	return biu
}

// ClearInstanceName clears the value of the "instance_name" field.
func (biu *BazelInvocationUpdate) ClearInstanceName() *BazelInvocationUpdate {
	biu.mutation.ClearInstanceName()
	return biu
}

// SetBazelVersion sets the "bazel_version" field.
func (biu *BazelInvocationUpdate) SetBazelVersion(s string) *BazelInvocationUpdate {
	biu.mutation.SetBazelVersion(s)
	return biu
}

// SetNillableBazelVersion sets the "bazel_version" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableBazelVersion(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetBazelVersion(*s)
	}
	return biu
}

// ClearBazelVersion clears the value of the "bazel_version" field.
func (biu *BazelInvocationUpdate) ClearBazelVersion() *BazelInvocationUpdate {
	biu.mutation.ClearBazelVersion()
	return biu
}

// SetExitCodeName sets the "exit_code_name" field.
func (biu *BazelInvocationUpdate) SetExitCodeName(s string) *BazelInvocationUpdate {
	biu.mutation.SetExitCodeName(s)
	return biu
}

// SetNillableExitCodeName sets the "exit_code_name" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableExitCodeName(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetExitCodeName(*s)
	}
	return biu
}

// ClearExitCodeName clears the value of the "exit_code_name" field.
func (biu *BazelInvocationUpdate) ClearExitCodeName() *BazelInvocationUpdate {
	biu.mutation.ClearExitCodeName()
	return biu
}

// SetExitCodeCode sets the "exit_code_code" field.
func (biu *BazelInvocationUpdate) SetExitCodeCode(i int32) *BazelInvocationUpdate {
	biu.mutation.ResetExitCodeCode()
	biu.mutation.SetExitCodeCode(i)
	return biu
}

// SetNillableExitCodeCode sets the "exit_code_code" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableExitCodeCode(i *int32) *BazelInvocationUpdate {
	if i != nil {
		biu.SetExitCodeCode(*i)
	}
	return biu
}

// AddExitCodeCode adds i to the "exit_code_code" field.
func (biu *BazelInvocationUpdate) AddExitCodeCode(i int32) *BazelInvocationUpdate {
	biu.mutation.AddExitCodeCode(i)
	return biu
}

// ClearExitCodeCode clears the value of the "exit_code_code" field.
func (biu *BazelInvocationUpdate) ClearExitCodeCode() *BazelInvocationUpdate {
	biu.mutation.ClearExitCodeCode()
	return biu
}

// SetCommandLineCommand sets the "command_line_command" field.
func (biu *BazelInvocationUpdate) SetCommandLineCommand(s string) *BazelInvocationUpdate {
	biu.mutation.SetCommandLineCommand(s)
	return biu
}

// SetNillableCommandLineCommand sets the "command_line_command" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableCommandLineCommand(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetCommandLineCommand(*s)
	}
	return biu
}

// ClearCommandLineCommand clears the value of the "command_line_command" field.
func (biu *BazelInvocationUpdate) ClearCommandLineCommand() *BazelInvocationUpdate {
	biu.mutation.ClearCommandLineCommand()
	return biu
}

// SetCommandLineExecutable sets the "command_line_executable" field.
func (biu *BazelInvocationUpdate) SetCommandLineExecutable(s string) *BazelInvocationUpdate {
	biu.mutation.SetCommandLineExecutable(s)
	return biu
}

// SetNillableCommandLineExecutable sets the "command_line_executable" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableCommandLineExecutable(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetCommandLineExecutable(*s)
	}
	return biu
}

// ClearCommandLineExecutable clears the value of the "command_line_executable" field.
func (biu *BazelInvocationUpdate) ClearCommandLineExecutable() *BazelInvocationUpdate {
	biu.mutation.ClearCommandLineExecutable()
	return biu
}

// SetCommandLineResidual sets the "command_line_residual" field.
func (biu *BazelInvocationUpdate) SetCommandLineResidual(s string) *BazelInvocationUpdate {
	biu.mutation.SetCommandLineResidual(s)
	return biu
}

// SetNillableCommandLineResidual sets the "command_line_residual" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableCommandLineResidual(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetCommandLineResidual(*s)
	}
	return biu
}

// ClearCommandLineResidual clears the value of the "command_line_residual" field.
func (biu *BazelInvocationUpdate) ClearCommandLineResidual() *BazelInvocationUpdate {
	biu.mutation.ClearCommandLineResidual()
	return biu
}

// SetCommandLine sets the "command_line" field.
func (biu *BazelInvocationUpdate) SetCommandLine(s []string) *BazelInvocationUpdate {
	biu.mutation.SetCommandLine(s)
	return biu
}

// AppendCommandLine appends s to the "command_line" field.
func (biu *BazelInvocationUpdate) AppendCommandLine(s []string) *BazelInvocationUpdate {
	biu.mutation.AppendCommandLine(s)
	return biu
}

// ClearCommandLine clears the value of the "command_line" field.
func (biu *BazelInvocationUpdate) ClearCommandLine() *BazelInvocationUpdate {
	biu.mutation.ClearCommandLine()
	return biu
}

// SetExplicitCommandLine sets the "explicit_command_line" field.
func (biu *BazelInvocationUpdate) SetExplicitCommandLine(s []string) *BazelInvocationUpdate {
	biu.mutation.SetExplicitCommandLine(s)
	return biu
}

// AppendExplicitCommandLine appends s to the "explicit_command_line" field.
func (biu *BazelInvocationUpdate) AppendExplicitCommandLine(s []string) *BazelInvocationUpdate {
	biu.mutation.AppendExplicitCommandLine(s)
	return biu
}

// ClearExplicitCommandLine clears the value of the "explicit_command_line" field.
func (biu *BazelInvocationUpdate) ClearExplicitCommandLine() *BazelInvocationUpdate {
	biu.mutation.ClearExplicitCommandLine()
	return biu
}

// SetStartupOptions sets the "startup_options" field.
func (biu *BazelInvocationUpdate) SetStartupOptions(s []string) *BazelInvocationUpdate {
	biu.mutation.SetStartupOptions(s)
	return biu
}

// AppendStartupOptions appends s to the "startup_options" field.
func (biu *BazelInvocationUpdate) AppendStartupOptions(s []string) *BazelInvocationUpdate {
	biu.mutation.AppendStartupOptions(s)
	return biu
}

// ClearStartupOptions clears the value of the "startup_options" field.
func (biu *BazelInvocationUpdate) ClearStartupOptions() *BazelInvocationUpdate {
	biu.mutation.ClearStartupOptions()
	return biu
}

// SetExplicitStartupOptions sets the "explicit_startup_options" field.
func (biu *BazelInvocationUpdate) SetExplicitStartupOptions(s []string) *BazelInvocationUpdate {
	biu.mutation.SetExplicitStartupOptions(s)
	return biu
}

// AppendExplicitStartupOptions appends s to the "explicit_startup_options" field.
func (biu *BazelInvocationUpdate) AppendExplicitStartupOptions(s []string) *BazelInvocationUpdate {
	biu.mutation.AppendExplicitStartupOptions(s)
	return biu
}

// ClearExplicitStartupOptions clears the value of the "explicit_startup_options" field.
func (biu *BazelInvocationUpdate) ClearExplicitStartupOptions() *BazelInvocationUpdate {
	biu.mutation.ClearExplicitStartupOptions()
	return biu
}

// SetProcessedEventStarted sets the "processed_event_started" field.
func (biu *BazelInvocationUpdate) SetProcessedEventStarted(b bool) *BazelInvocationUpdate {
	biu.mutation.SetProcessedEventStarted(b)
	return biu
}

// SetNillableProcessedEventStarted sets the "processed_event_started" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableProcessedEventStarted(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetProcessedEventStarted(*b)
	}
	return biu
}

// SetProcessedEventBuildMetadata sets the "processed_event_build_metadata" field.
func (biu *BazelInvocationUpdate) SetProcessedEventBuildMetadata(b bool) *BazelInvocationUpdate {
	biu.mutation.SetProcessedEventBuildMetadata(b)
	return biu
}

// SetNillableProcessedEventBuildMetadata sets the "processed_event_build_metadata" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableProcessedEventBuildMetadata(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetProcessedEventBuildMetadata(*b)
	}
	return biu
}

// SetProcessedEventOptionsParsed sets the "processed_event_options_parsed" field.
func (biu *BazelInvocationUpdate) SetProcessedEventOptionsParsed(b bool) *BazelInvocationUpdate {
	biu.mutation.SetProcessedEventOptionsParsed(b)
	return biu
}

// SetNillableProcessedEventOptionsParsed sets the "processed_event_options_parsed" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableProcessedEventOptionsParsed(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetProcessedEventOptionsParsed(*b)
	}
	return biu
}

// SetProcessedEventBuildFinished sets the "processed_event_build_finished" field.
func (biu *BazelInvocationUpdate) SetProcessedEventBuildFinished(b bool) *BazelInvocationUpdate {
	biu.mutation.SetProcessedEventBuildFinished(b)
	return biu
}

// SetNillableProcessedEventBuildFinished sets the "processed_event_build_finished" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableProcessedEventBuildFinished(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetProcessedEventBuildFinished(*b)
	}
	return biu
}

// SetProcessedEventStructuredCommandLine sets the "processed_event_structured_command_line" field.
func (biu *BazelInvocationUpdate) SetProcessedEventStructuredCommandLine(b bool) *BazelInvocationUpdate {
	biu.mutation.SetProcessedEventStructuredCommandLine(b)
	return biu
}

// SetNillableProcessedEventStructuredCommandLine sets the "processed_event_structured_command_line" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableProcessedEventStructuredCommandLine(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetProcessedEventStructuredCommandLine(*b)
	}
	return biu
}

// SetProcessedEventWorkspaceStatus sets the "processed_event_workspace_status" field.
func (biu *BazelInvocationUpdate) SetProcessedEventWorkspaceStatus(b bool) *BazelInvocationUpdate {
	biu.mutation.SetProcessedEventWorkspaceStatus(b)
	return biu
}

// SetNillableProcessedEventWorkspaceStatus sets the "processed_event_workspace_status" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableProcessedEventWorkspaceStatus(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetProcessedEventWorkspaceStatus(*b)
	}
	return biu
}

// SetBuildID sets the "build" edge to the Build entity by ID.
func (biu *BazelInvocationUpdate) SetBuildID(id int) *BazelInvocationUpdate {
	biu.mutation.SetBuildID(id)
	return biu
}

// SetNillableBuildID sets the "build" edge to the Build entity by ID if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableBuildID(id *int) *BazelInvocationUpdate {
	if id != nil {
		biu = biu.SetBuildID(*id)
	}
	return biu
}

// SetBuild sets the "build" edge to the Build entity.
func (biu *BazelInvocationUpdate) SetBuild(b *Build) *BazelInvocationUpdate {
	return biu.SetBuildID(b.ID)
}

// AddEventMetadatumIDs adds the "event_metadata" edge to the EventMetadata entity by IDs.
func (biu *BazelInvocationUpdate) AddEventMetadatumIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.AddEventMetadatumIDs(ids...)
	return biu
}

// AddEventMetadata adds the "event_metadata" edges to the EventMetadata entity.
func (biu *BazelInvocationUpdate) AddEventMetadata(e ...*EventMetadata) *BazelInvocationUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return biu.AddEventMetadatumIDs(ids...)
}

// AddConnectionMetadatumIDs adds the "connection_metadata" edge to the ConnectionMetadata entity by IDs.
func (biu *BazelInvocationUpdate) AddConnectionMetadatumIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.AddConnectionMetadatumIDs(ids...)
	return biu
}

// AddConnectionMetadata adds the "connection_metadata" edges to the ConnectionMetadata entity.
func (biu *BazelInvocationUpdate) AddConnectionMetadata(c ...*ConnectionMetadata) *BazelInvocationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return biu.AddConnectionMetadatumIDs(ids...)
}

// AddProblemIDs adds the "problems" edge to the BazelInvocationProblem entity by IDs.
func (biu *BazelInvocationUpdate) AddProblemIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.AddProblemIDs(ids...)
	return biu
}

// AddProblems adds the "problems" edges to the BazelInvocationProblem entity.
func (biu *BazelInvocationUpdate) AddProblems(b ...*BazelInvocationProblem) *BazelInvocationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.AddProblemIDs(ids...)
}

// SetMetricsID sets the "metrics" edge to the Metrics entity by ID.
func (biu *BazelInvocationUpdate) SetMetricsID(id int) *BazelInvocationUpdate {
	biu.mutation.SetMetricsID(id)
	return biu
}

// SetNillableMetricsID sets the "metrics" edge to the Metrics entity by ID if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableMetricsID(id *int) *BazelInvocationUpdate {
	if id != nil {
		biu = biu.SetMetricsID(*id)
	}
	return biu
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (biu *BazelInvocationUpdate) SetMetrics(m *Metrics) *BazelInvocationUpdate {
	return biu.SetMetricsID(m.ID)
}

// AddIncompleteBuildLogIDs adds the "incomplete_build_logs" edge to the IncompleteBuildLog entity by IDs.
func (biu *BazelInvocationUpdate) AddIncompleteBuildLogIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.AddIncompleteBuildLogIDs(ids...)
	return biu
}

// AddIncompleteBuildLogs adds the "incomplete_build_logs" edges to the IncompleteBuildLog entity.
func (biu *BazelInvocationUpdate) AddIncompleteBuildLogs(i ...*IncompleteBuildLog) *BazelInvocationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return biu.AddIncompleteBuildLogIDs(ids...)
}

// AddInvocationFileIDs adds the "invocation_files" edge to the InvocationFiles entity by IDs.
func (biu *BazelInvocationUpdate) AddInvocationFileIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.AddInvocationFileIDs(ids...)
	return biu
}

// AddInvocationFiles adds the "invocation_files" edges to the InvocationFiles entity.
func (biu *BazelInvocationUpdate) AddInvocationFiles(i ...*InvocationFiles) *BazelInvocationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return biu.AddInvocationFileIDs(ids...)
}

// AddTestCollectionIDs adds the "test_collection" edge to the TestCollection entity by IDs.
func (biu *BazelInvocationUpdate) AddTestCollectionIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.AddTestCollectionIDs(ids...)
	return biu
}

// AddTestCollection adds the "test_collection" edges to the TestCollection entity.
func (biu *BazelInvocationUpdate) AddTestCollection(t ...*TestCollection) *BazelInvocationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return biu.AddTestCollectionIDs(ids...)
}

// AddTargetIDs adds the "targets" edge to the Target entity by IDs.
func (biu *BazelInvocationUpdate) AddTargetIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.AddTargetIDs(ids...)
	return biu
}

// AddTargets adds the "targets" edges to the Target entity.
func (biu *BazelInvocationUpdate) AddTargets(t ...*Target) *BazelInvocationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return biu.AddTargetIDs(ids...)
}

// SetSourceControlID sets the "source_control" edge to the SourceControl entity by ID.
func (biu *BazelInvocationUpdate) SetSourceControlID(id int) *BazelInvocationUpdate {
	biu.mutation.SetSourceControlID(id)
	return biu
}

// SetNillableSourceControlID sets the "source_control" edge to the SourceControl entity by ID if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableSourceControlID(id *int) *BazelInvocationUpdate {
	if id != nil {
		biu = biu.SetSourceControlID(*id)
	}
	return biu
}

// SetSourceControl sets the "source_control" edge to the SourceControl entity.
func (biu *BazelInvocationUpdate) SetSourceControl(s *SourceControl) *BazelInvocationUpdate {
	return biu.SetSourceControlID(s.ID)
}

// Mutation returns the BazelInvocationMutation object of the builder.
func (biu *BazelInvocationUpdate) Mutation() *BazelInvocationMutation {
	return biu.mutation
}

// ClearBuild clears the "build" edge to the Build entity.
func (biu *BazelInvocationUpdate) ClearBuild() *BazelInvocationUpdate {
	biu.mutation.ClearBuild()
	return biu
}

// ClearEventMetadata clears all "event_metadata" edges to the EventMetadata entity.
func (biu *BazelInvocationUpdate) ClearEventMetadata() *BazelInvocationUpdate {
	biu.mutation.ClearEventMetadata()
	return biu
}

// RemoveEventMetadatumIDs removes the "event_metadata" edge to EventMetadata entities by IDs.
func (biu *BazelInvocationUpdate) RemoveEventMetadatumIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.RemoveEventMetadatumIDs(ids...)
	return biu
}

// RemoveEventMetadata removes "event_metadata" edges to EventMetadata entities.
func (biu *BazelInvocationUpdate) RemoveEventMetadata(e ...*EventMetadata) *BazelInvocationUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return biu.RemoveEventMetadatumIDs(ids...)
}

// ClearConnectionMetadata clears all "connection_metadata" edges to the ConnectionMetadata entity.
func (biu *BazelInvocationUpdate) ClearConnectionMetadata() *BazelInvocationUpdate {
	biu.mutation.ClearConnectionMetadata()
	return biu
}

// RemoveConnectionMetadatumIDs removes the "connection_metadata" edge to ConnectionMetadata entities by IDs.
func (biu *BazelInvocationUpdate) RemoveConnectionMetadatumIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.RemoveConnectionMetadatumIDs(ids...)
	return biu
}

// RemoveConnectionMetadata removes "connection_metadata" edges to ConnectionMetadata entities.
func (biu *BazelInvocationUpdate) RemoveConnectionMetadata(c ...*ConnectionMetadata) *BazelInvocationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return biu.RemoveConnectionMetadatumIDs(ids...)
}

// ClearProblems clears all "problems" edges to the BazelInvocationProblem entity.
func (biu *BazelInvocationUpdate) ClearProblems() *BazelInvocationUpdate {
	biu.mutation.ClearProblems()
	return biu
}

// RemoveProblemIDs removes the "problems" edge to BazelInvocationProblem entities by IDs.
func (biu *BazelInvocationUpdate) RemoveProblemIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.RemoveProblemIDs(ids...)
	return biu
}

// RemoveProblems removes "problems" edges to BazelInvocationProblem entities.
func (biu *BazelInvocationUpdate) RemoveProblems(b ...*BazelInvocationProblem) *BazelInvocationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.RemoveProblemIDs(ids...)
}

// ClearMetrics clears the "metrics" edge to the Metrics entity.
func (biu *BazelInvocationUpdate) ClearMetrics() *BazelInvocationUpdate {
	biu.mutation.ClearMetrics()
	return biu
}

// ClearIncompleteBuildLogs clears all "incomplete_build_logs" edges to the IncompleteBuildLog entity.
func (biu *BazelInvocationUpdate) ClearIncompleteBuildLogs() *BazelInvocationUpdate {
	biu.mutation.ClearIncompleteBuildLogs()
	return biu
}

// RemoveIncompleteBuildLogIDs removes the "incomplete_build_logs" edge to IncompleteBuildLog entities by IDs.
func (biu *BazelInvocationUpdate) RemoveIncompleteBuildLogIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.RemoveIncompleteBuildLogIDs(ids...)
	return biu
}

// RemoveIncompleteBuildLogs removes "incomplete_build_logs" edges to IncompleteBuildLog entities.
func (biu *BazelInvocationUpdate) RemoveIncompleteBuildLogs(i ...*IncompleteBuildLog) *BazelInvocationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return biu.RemoveIncompleteBuildLogIDs(ids...)
}

// ClearInvocationFiles clears all "invocation_files" edges to the InvocationFiles entity.
func (biu *BazelInvocationUpdate) ClearInvocationFiles() *BazelInvocationUpdate {
	biu.mutation.ClearInvocationFiles()
	return biu
}

// RemoveInvocationFileIDs removes the "invocation_files" edge to InvocationFiles entities by IDs.
func (biu *BazelInvocationUpdate) RemoveInvocationFileIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.RemoveInvocationFileIDs(ids...)
	return biu
}

// RemoveInvocationFiles removes "invocation_files" edges to InvocationFiles entities.
func (biu *BazelInvocationUpdate) RemoveInvocationFiles(i ...*InvocationFiles) *BazelInvocationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return biu.RemoveInvocationFileIDs(ids...)
}

// ClearTestCollection clears all "test_collection" edges to the TestCollection entity.
func (biu *BazelInvocationUpdate) ClearTestCollection() *BazelInvocationUpdate {
	biu.mutation.ClearTestCollection()
	return biu
}

// RemoveTestCollectionIDs removes the "test_collection" edge to TestCollection entities by IDs.
func (biu *BazelInvocationUpdate) RemoveTestCollectionIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.RemoveTestCollectionIDs(ids...)
	return biu
}

// RemoveTestCollection removes "test_collection" edges to TestCollection entities.
func (biu *BazelInvocationUpdate) RemoveTestCollection(t ...*TestCollection) *BazelInvocationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return biu.RemoveTestCollectionIDs(ids...)
}

// ClearTargets clears all "targets" edges to the Target entity.
func (biu *BazelInvocationUpdate) ClearTargets() *BazelInvocationUpdate {
	biu.mutation.ClearTargets()
	return biu
}

// RemoveTargetIDs removes the "targets" edge to Target entities by IDs.
func (biu *BazelInvocationUpdate) RemoveTargetIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.RemoveTargetIDs(ids...)
	return biu
}

// RemoveTargets removes "targets" edges to Target entities.
func (biu *BazelInvocationUpdate) RemoveTargets(t ...*Target) *BazelInvocationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return biu.RemoveTargetIDs(ids...)
}

// ClearSourceControl clears the "source_control" edge to the SourceControl entity.
func (biu *BazelInvocationUpdate) ClearSourceControl() *BazelInvocationUpdate {
	biu.mutation.ClearSourceControl()
	return biu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BazelInvocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BazelInvocationUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BazelInvocationUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BazelInvocationUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (biu *BazelInvocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bazelinvocation.Table, bazelinvocation.Columns, sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.StartedAt(); ok {
		_spec.SetField(bazelinvocation.FieldStartedAt, field.TypeTime, value)
	}
	if biu.mutation.StartedAtCleared() {
		_spec.ClearField(bazelinvocation.FieldStartedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.EndedAt(); ok {
		_spec.SetField(bazelinvocation.FieldEndedAt, field.TypeTime, value)
	}
	if biu.mutation.EndedAtCleared() {
		_spec.ClearField(bazelinvocation.FieldEndedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.ChangeNumber(); ok {
		_spec.SetField(bazelinvocation.FieldChangeNumber, field.TypeInt, value)
	}
	if value, ok := biu.mutation.AddedChangeNumber(); ok {
		_spec.AddField(bazelinvocation.FieldChangeNumber, field.TypeInt, value)
	}
	if biu.mutation.ChangeNumberCleared() {
		_spec.ClearField(bazelinvocation.FieldChangeNumber, field.TypeInt)
	}
	if value, ok := biu.mutation.PatchsetNumber(); ok {
		_spec.SetField(bazelinvocation.FieldPatchsetNumber, field.TypeInt, value)
	}
	if value, ok := biu.mutation.AddedPatchsetNumber(); ok {
		_spec.AddField(bazelinvocation.FieldPatchsetNumber, field.TypeInt, value)
	}
	if biu.mutation.PatchsetNumberCleared() {
		_spec.ClearField(bazelinvocation.FieldPatchsetNumber, field.TypeInt)
	}
	if value, ok := biu.mutation.BepCompleted(); ok {
		_spec.SetField(bazelinvocation.FieldBepCompleted, field.TypeBool, value)
	}
	if value, ok := biu.mutation.StepLabel(); ok {
		_spec.SetField(bazelinvocation.FieldStepLabel, field.TypeString, value)
	}
	if biu.mutation.StepLabelCleared() {
		_spec.ClearField(bazelinvocation.FieldStepLabel, field.TypeString)
	}
	if value, ok := biu.mutation.UserEmail(); ok {
		_spec.SetField(bazelinvocation.FieldUserEmail, field.TypeString, value)
	}
	if biu.mutation.UserEmailCleared() {
		_spec.ClearField(bazelinvocation.FieldUserEmail, field.TypeString)
	}
	if value, ok := biu.mutation.UserLdap(); ok {
		_spec.SetField(bazelinvocation.FieldUserLdap, field.TypeString, value)
	}
	if biu.mutation.UserLdapCleared() {
		_spec.ClearField(bazelinvocation.FieldUserLdap, field.TypeString)
	}
	if value, ok := biu.mutation.BuildLogs(); ok {
		_spec.SetField(bazelinvocation.FieldBuildLogs, field.TypeString, value)
	}
	if biu.mutation.BuildLogsCleared() {
		_spec.ClearField(bazelinvocation.FieldBuildLogs, field.TypeString)
	}
	if value, ok := biu.mutation.CPU(); ok {
		_spec.SetField(bazelinvocation.FieldCPU, field.TypeString, value)
	}
	if biu.mutation.CPUCleared() {
		_spec.ClearField(bazelinvocation.FieldCPU, field.TypeString)
	}
	if value, ok := biu.mutation.PlatformName(); ok {
		_spec.SetField(bazelinvocation.FieldPlatformName, field.TypeString, value)
	}
	if biu.mutation.PlatformNameCleared() {
		_spec.ClearField(bazelinvocation.FieldPlatformName, field.TypeString)
	}
	if value, ok := biu.mutation.Hostname(); ok {
		_spec.SetField(bazelinvocation.FieldHostname, field.TypeString, value)
	}
	if biu.mutation.HostnameCleared() {
		_spec.ClearField(bazelinvocation.FieldHostname, field.TypeString)
	}
	if value, ok := biu.mutation.IsCiWorker(); ok {
		_spec.SetField(bazelinvocation.FieldIsCiWorker, field.TypeBool, value)
	}
	if biu.mutation.IsCiWorkerCleared() {
		_spec.ClearField(bazelinvocation.FieldIsCiWorker, field.TypeBool)
	}
	if value, ok := biu.mutation.ConfigurationMnemonic(); ok {
		_spec.SetField(bazelinvocation.FieldConfigurationMnemonic, field.TypeString, value)
	}
	if biu.mutation.ConfigurationMnemonicCleared() {
		_spec.ClearField(bazelinvocation.FieldConfigurationMnemonic, field.TypeString)
	}
	if value, ok := biu.mutation.NumFetches(); ok {
		_spec.SetField(bazelinvocation.FieldNumFetches, field.TypeInt64, value)
	}
	if value, ok := biu.mutation.AddedNumFetches(); ok {
		_spec.AddField(bazelinvocation.FieldNumFetches, field.TypeInt64, value)
	}
	if biu.mutation.NumFetchesCleared() {
		_spec.ClearField(bazelinvocation.FieldNumFetches, field.TypeInt64)
	}
	if value, ok := biu.mutation.ProfileName(); ok {
		_spec.SetField(bazelinvocation.FieldProfileName, field.TypeString, value)
	}
	if biu.mutation.ProfileNameCleared() {
		_spec.ClearField(bazelinvocation.FieldProfileName, field.TypeString)
	}
	if value, ok := biu.mutation.InstanceName(); ok {
		_spec.SetField(bazelinvocation.FieldInstanceName, field.TypeString, value)
	}
	if biu.mutation.InstanceNameCleared() {
		_spec.ClearField(bazelinvocation.FieldInstanceName, field.TypeString)
	}
	if value, ok := biu.mutation.BazelVersion(); ok {
		_spec.SetField(bazelinvocation.FieldBazelVersion, field.TypeString, value)
	}
	if biu.mutation.BazelVersionCleared() {
		_spec.ClearField(bazelinvocation.FieldBazelVersion, field.TypeString)
	}
	if value, ok := biu.mutation.ExitCodeName(); ok {
		_spec.SetField(bazelinvocation.FieldExitCodeName, field.TypeString, value)
	}
	if biu.mutation.ExitCodeNameCleared() {
		_spec.ClearField(bazelinvocation.FieldExitCodeName, field.TypeString)
	}
	if value, ok := biu.mutation.ExitCodeCode(); ok {
		_spec.SetField(bazelinvocation.FieldExitCodeCode, field.TypeInt32, value)
	}
	if value, ok := biu.mutation.AddedExitCodeCode(); ok {
		_spec.AddField(bazelinvocation.FieldExitCodeCode, field.TypeInt32, value)
	}
	if biu.mutation.ExitCodeCodeCleared() {
		_spec.ClearField(bazelinvocation.FieldExitCodeCode, field.TypeInt32)
	}
	if value, ok := biu.mutation.CommandLineCommand(); ok {
		_spec.SetField(bazelinvocation.FieldCommandLineCommand, field.TypeString, value)
	}
	if biu.mutation.CommandLineCommandCleared() {
		_spec.ClearField(bazelinvocation.FieldCommandLineCommand, field.TypeString)
	}
	if value, ok := biu.mutation.CommandLineExecutable(); ok {
		_spec.SetField(bazelinvocation.FieldCommandLineExecutable, field.TypeString, value)
	}
	if biu.mutation.CommandLineExecutableCleared() {
		_spec.ClearField(bazelinvocation.FieldCommandLineExecutable, field.TypeString)
	}
	if value, ok := biu.mutation.CommandLineResidual(); ok {
		_spec.SetField(bazelinvocation.FieldCommandLineResidual, field.TypeString, value)
	}
	if biu.mutation.CommandLineResidualCleared() {
		_spec.ClearField(bazelinvocation.FieldCommandLineResidual, field.TypeString)
	}
	if value, ok := biu.mutation.CommandLine(); ok {
		_spec.SetField(bazelinvocation.FieldCommandLine, field.TypeJSON, value)
	}
	if value, ok := biu.mutation.AppendedCommandLine(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bazelinvocation.FieldCommandLine, value)
		})
	}
	if biu.mutation.CommandLineCleared() {
		_spec.ClearField(bazelinvocation.FieldCommandLine, field.TypeJSON)
	}
	if value, ok := biu.mutation.ExplicitCommandLine(); ok {
		_spec.SetField(bazelinvocation.FieldExplicitCommandLine, field.TypeJSON, value)
	}
	if value, ok := biu.mutation.AppendedExplicitCommandLine(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bazelinvocation.FieldExplicitCommandLine, value)
		})
	}
	if biu.mutation.ExplicitCommandLineCleared() {
		_spec.ClearField(bazelinvocation.FieldExplicitCommandLine, field.TypeJSON)
	}
	if value, ok := biu.mutation.StartupOptions(); ok {
		_spec.SetField(bazelinvocation.FieldStartupOptions, field.TypeJSON, value)
	}
	if value, ok := biu.mutation.AppendedStartupOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bazelinvocation.FieldStartupOptions, value)
		})
	}
	if biu.mutation.StartupOptionsCleared() {
		_spec.ClearField(bazelinvocation.FieldStartupOptions, field.TypeJSON)
	}
	if value, ok := biu.mutation.ExplicitStartupOptions(); ok {
		_spec.SetField(bazelinvocation.FieldExplicitStartupOptions, field.TypeJSON, value)
	}
	if value, ok := biu.mutation.AppendedExplicitStartupOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bazelinvocation.FieldExplicitStartupOptions, value)
		})
	}
	if biu.mutation.ExplicitStartupOptionsCleared() {
		_spec.ClearField(bazelinvocation.FieldExplicitStartupOptions, field.TypeJSON)
	}
	if value, ok := biu.mutation.ProcessedEventStarted(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventStarted, field.TypeBool, value)
	}
	if value, ok := biu.mutation.ProcessedEventBuildMetadata(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventBuildMetadata, field.TypeBool, value)
	}
	if value, ok := biu.mutation.ProcessedEventOptionsParsed(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventOptionsParsed, field.TypeBool, value)
	}
	if value, ok := biu.mutation.ProcessedEventBuildFinished(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventBuildFinished, field.TypeBool, value)
	}
	if value, ok := biu.mutation.ProcessedEventStructuredCommandLine(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventStructuredCommandLine, field.TypeBool, value)
	}
	if value, ok := biu.mutation.ProcessedEventWorkspaceStatus(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventWorkspaceStatus, field.TypeBool, value)
	}
	if biu.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bazelinvocation.BuildTable,
			Columns: []string{bazelinvocation.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bazelinvocation.BuildTable,
			Columns: []string{bazelinvocation.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.EventMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.EventMetadataTable,
			Columns: []string{bazelinvocation.EventMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedEventMetadataIDs(); len(nodes) > 0 && !biu.mutation.EventMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.EventMetadataTable,
			Columns: []string{bazelinvocation.EventMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.EventMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.EventMetadataTable,
			Columns: []string{bazelinvocation.EventMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.ConnectionMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ConnectionMetadataTable,
			Columns: []string{bazelinvocation.ConnectionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedConnectionMetadataIDs(); len(nodes) > 0 && !biu.mutation.ConnectionMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ConnectionMetadataTable,
			Columns: []string{bazelinvocation.ConnectionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.ConnectionMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ConnectionMetadataTable,
			Columns: []string{bazelinvocation.ConnectionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !biu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bazelinvocation.MetricsTable,
			Columns: []string{bazelinvocation.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bazelinvocation.MetricsTable,
			Columns: []string{bazelinvocation.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.IncompleteBuildLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.IncompleteBuildLogsTable,
			Columns: []string{bazelinvocation.IncompleteBuildLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedIncompleteBuildLogsIDs(); len(nodes) > 0 && !biu.mutation.IncompleteBuildLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.IncompleteBuildLogsTable,
			Columns: []string{bazelinvocation.IncompleteBuildLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.IncompleteBuildLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.IncompleteBuildLogsTable,
			Columns: []string{bazelinvocation.IncompleteBuildLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.InvocationFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.InvocationFilesTable,
			Columns: []string{bazelinvocation.InvocationFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedInvocationFilesIDs(); len(nodes) > 0 && !biu.mutation.InvocationFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.InvocationFilesTable,
			Columns: []string{bazelinvocation.InvocationFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.InvocationFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.InvocationFilesTable,
			Columns: []string{bazelinvocation.InvocationFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.TestCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TestCollectionTable,
			Columns: []string{bazelinvocation.TestCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedTestCollectionIDs(); len(nodes) > 0 && !biu.mutation.TestCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TestCollectionTable,
			Columns: []string{bazelinvocation.TestCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.TestCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TestCollectionTable,
			Columns: []string{bazelinvocation.TestCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TargetsTable,
			Columns: []string{bazelinvocation.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedTargetsIDs(); len(nodes) > 0 && !biu.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TargetsTable,
			Columns: []string{bazelinvocation.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.TargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TargetsTable,
			Columns: []string{bazelinvocation.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.SourceControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bazelinvocation.SourceControlTable,
			Columns: []string{bazelinvocation.SourceControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcecontrol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.SourceControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bazelinvocation.SourceControlTable,
			Columns: []string{bazelinvocation.SourceControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcecontrol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bazelinvocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BazelInvocationUpdateOne is the builder for updating a single BazelInvocation entity.
type BazelInvocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BazelInvocationMutation
}

// SetStartedAt sets the "started_at" field.
func (biuo *BazelInvocationUpdateOne) SetStartedAt(t time.Time) *BazelInvocationUpdateOne {
	biuo.mutation.SetStartedAt(t)
	return biuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableStartedAt(t *time.Time) *BazelInvocationUpdateOne {
	if t != nil {
		biuo.SetStartedAt(*t)
	}
	return biuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (biuo *BazelInvocationUpdateOne) ClearStartedAt() *BazelInvocationUpdateOne {
	biuo.mutation.ClearStartedAt()
	return biuo
}

// SetEndedAt sets the "ended_at" field.
func (biuo *BazelInvocationUpdateOne) SetEndedAt(t time.Time) *BazelInvocationUpdateOne {
	biuo.mutation.SetEndedAt(t)
	return biuo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableEndedAt(t *time.Time) *BazelInvocationUpdateOne {
	if t != nil {
		biuo.SetEndedAt(*t)
	}
	return biuo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (biuo *BazelInvocationUpdateOne) ClearEndedAt() *BazelInvocationUpdateOne {
	biuo.mutation.ClearEndedAt()
	return biuo
}

// SetChangeNumber sets the "change_number" field.
func (biuo *BazelInvocationUpdateOne) SetChangeNumber(i int) *BazelInvocationUpdateOne {
	biuo.mutation.ResetChangeNumber()
	biuo.mutation.SetChangeNumber(i)
	return biuo
}

// SetNillableChangeNumber sets the "change_number" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableChangeNumber(i *int) *BazelInvocationUpdateOne {
	if i != nil {
		biuo.SetChangeNumber(*i)
	}
	return biuo
}

// AddChangeNumber adds i to the "change_number" field.
func (biuo *BazelInvocationUpdateOne) AddChangeNumber(i int) *BazelInvocationUpdateOne {
	biuo.mutation.AddChangeNumber(i)
	return biuo
}

// ClearChangeNumber clears the value of the "change_number" field.
func (biuo *BazelInvocationUpdateOne) ClearChangeNumber() *BazelInvocationUpdateOne {
	biuo.mutation.ClearChangeNumber()
	return biuo
}

// SetPatchsetNumber sets the "patchset_number" field.
func (biuo *BazelInvocationUpdateOne) SetPatchsetNumber(i int) *BazelInvocationUpdateOne {
	biuo.mutation.ResetPatchsetNumber()
	biuo.mutation.SetPatchsetNumber(i)
	return biuo
}

// SetNillablePatchsetNumber sets the "patchset_number" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillablePatchsetNumber(i *int) *BazelInvocationUpdateOne {
	if i != nil {
		biuo.SetPatchsetNumber(*i)
	}
	return biuo
}

// AddPatchsetNumber adds i to the "patchset_number" field.
func (biuo *BazelInvocationUpdateOne) AddPatchsetNumber(i int) *BazelInvocationUpdateOne {
	biuo.mutation.AddPatchsetNumber(i)
	return biuo
}

// ClearPatchsetNumber clears the value of the "patchset_number" field.
func (biuo *BazelInvocationUpdateOne) ClearPatchsetNumber() *BazelInvocationUpdateOne {
	biuo.mutation.ClearPatchsetNumber()
	return biuo
}

// SetBepCompleted sets the "bep_completed" field.
func (biuo *BazelInvocationUpdateOne) SetBepCompleted(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetBepCompleted(b)
	return biuo
}

// SetNillableBepCompleted sets the "bep_completed" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableBepCompleted(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetBepCompleted(*b)
	}
	return biuo
}

// SetStepLabel sets the "step_label" field.
func (biuo *BazelInvocationUpdateOne) SetStepLabel(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetStepLabel(s)
	return biuo
}

// SetNillableStepLabel sets the "step_label" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableStepLabel(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetStepLabel(*s)
	}
	return biuo
}

// ClearStepLabel clears the value of the "step_label" field.
func (biuo *BazelInvocationUpdateOne) ClearStepLabel() *BazelInvocationUpdateOne {
	biuo.mutation.ClearStepLabel()
	return biuo
}

// SetUserEmail sets the "user_email" field.
func (biuo *BazelInvocationUpdateOne) SetUserEmail(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetUserEmail(s)
	return biuo
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableUserEmail(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetUserEmail(*s)
	}
	return biuo
}

// ClearUserEmail clears the value of the "user_email" field.
func (biuo *BazelInvocationUpdateOne) ClearUserEmail() *BazelInvocationUpdateOne {
	biuo.mutation.ClearUserEmail()
	return biuo
}

// SetUserLdap sets the "user_ldap" field.
func (biuo *BazelInvocationUpdateOne) SetUserLdap(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetUserLdap(s)
	return biuo
}

// SetNillableUserLdap sets the "user_ldap" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableUserLdap(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetUserLdap(*s)
	}
	return biuo
}

// ClearUserLdap clears the value of the "user_ldap" field.
func (biuo *BazelInvocationUpdateOne) ClearUserLdap() *BazelInvocationUpdateOne {
	biuo.mutation.ClearUserLdap()
	return biuo
}

// SetBuildLogs sets the "build_logs" field.
func (biuo *BazelInvocationUpdateOne) SetBuildLogs(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetBuildLogs(s)
	return biuo
}

// SetNillableBuildLogs sets the "build_logs" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableBuildLogs(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetBuildLogs(*s)
	}
	return biuo
}

// ClearBuildLogs clears the value of the "build_logs" field.
func (biuo *BazelInvocationUpdateOne) ClearBuildLogs() *BazelInvocationUpdateOne {
	biuo.mutation.ClearBuildLogs()
	return biuo
}

// SetCPU sets the "cpu" field.
func (biuo *BazelInvocationUpdateOne) SetCPU(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetCPU(s)
	return biuo
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableCPU(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetCPU(*s)
	}
	return biuo
}

// ClearCPU clears the value of the "cpu" field.
func (biuo *BazelInvocationUpdateOne) ClearCPU() *BazelInvocationUpdateOne {
	biuo.mutation.ClearCPU()
	return biuo
}

// SetPlatformName sets the "platform_name" field.
func (biuo *BazelInvocationUpdateOne) SetPlatformName(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetPlatformName(s)
	return biuo
}

// SetNillablePlatformName sets the "platform_name" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillablePlatformName(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetPlatformName(*s)
	}
	return biuo
}

// ClearPlatformName clears the value of the "platform_name" field.
func (biuo *BazelInvocationUpdateOne) ClearPlatformName() *BazelInvocationUpdateOne {
	biuo.mutation.ClearPlatformName()
	return biuo
}

// SetHostname sets the "hostname" field.
func (biuo *BazelInvocationUpdateOne) SetHostname(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetHostname(s)
	return biuo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableHostname(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetHostname(*s)
	}
	return biuo
}

// ClearHostname clears the value of the "hostname" field.
func (biuo *BazelInvocationUpdateOne) ClearHostname() *BazelInvocationUpdateOne {
	biuo.mutation.ClearHostname()
	return biuo
}

// SetIsCiWorker sets the "is_ci_worker" field.
func (biuo *BazelInvocationUpdateOne) SetIsCiWorker(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetIsCiWorker(b)
	return biuo
}

// SetNillableIsCiWorker sets the "is_ci_worker" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableIsCiWorker(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetIsCiWorker(*b)
	}
	return biuo
}

// ClearIsCiWorker clears the value of the "is_ci_worker" field.
func (biuo *BazelInvocationUpdateOne) ClearIsCiWorker() *BazelInvocationUpdateOne {
	biuo.mutation.ClearIsCiWorker()
	return biuo
}

// SetConfigurationMnemonic sets the "configuration_mnemonic" field.
func (biuo *BazelInvocationUpdateOne) SetConfigurationMnemonic(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetConfigurationMnemonic(s)
	return biuo
}

// SetNillableConfigurationMnemonic sets the "configuration_mnemonic" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableConfigurationMnemonic(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetConfigurationMnemonic(*s)
	}
	return biuo
}

// ClearConfigurationMnemonic clears the value of the "configuration_mnemonic" field.
func (biuo *BazelInvocationUpdateOne) ClearConfigurationMnemonic() *BazelInvocationUpdateOne {
	biuo.mutation.ClearConfigurationMnemonic()
	return biuo
}

// SetNumFetches sets the "num_fetches" field.
func (biuo *BazelInvocationUpdateOne) SetNumFetches(i int64) *BazelInvocationUpdateOne {
	biuo.mutation.ResetNumFetches()
	biuo.mutation.SetNumFetches(i)
	return biuo
}

// SetNillableNumFetches sets the "num_fetches" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableNumFetches(i *int64) *BazelInvocationUpdateOne {
	if i != nil {
		biuo.SetNumFetches(*i)
	}
	return biuo
}

// AddNumFetches adds i to the "num_fetches" field.
func (biuo *BazelInvocationUpdateOne) AddNumFetches(i int64) *BazelInvocationUpdateOne {
	biuo.mutation.AddNumFetches(i)
	return biuo
}

// ClearNumFetches clears the value of the "num_fetches" field.
func (biuo *BazelInvocationUpdateOne) ClearNumFetches() *BazelInvocationUpdateOne {
	biuo.mutation.ClearNumFetches()
	return biuo
}

// SetProfileName sets the "profile_name" field.
func (biuo *BazelInvocationUpdateOne) SetProfileName(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetProfileName(s)
	return biuo
}

// SetNillableProfileName sets the "profile_name" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableProfileName(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetProfileName(*s)
	}
	return biuo
}

// ClearProfileName clears the value of the "profile_name" field.
func (biuo *BazelInvocationUpdateOne) ClearProfileName() *BazelInvocationUpdateOne {
	biuo.mutation.ClearProfileName()
	return biuo
}

// SetInstanceName sets the "instance_name" field.
func (biuo *BazelInvocationUpdateOne) SetInstanceName(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetInstanceName(s)
	return biuo
}

// SetNillableInstanceName sets the "instance_name" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableInstanceName(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetInstanceName(*s)
	}
	return biuo
}

// ClearInstanceName clears the value of the "instance_name" field.
func (biuo *BazelInvocationUpdateOne) ClearInstanceName() *BazelInvocationUpdateOne {
	biuo.mutation.ClearInstanceName()
	return biuo
}

// SetBazelVersion sets the "bazel_version" field.
func (biuo *BazelInvocationUpdateOne) SetBazelVersion(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetBazelVersion(s)
	return biuo
}

// SetNillableBazelVersion sets the "bazel_version" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableBazelVersion(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetBazelVersion(*s)
	}
	return biuo
}

// ClearBazelVersion clears the value of the "bazel_version" field.
func (biuo *BazelInvocationUpdateOne) ClearBazelVersion() *BazelInvocationUpdateOne {
	biuo.mutation.ClearBazelVersion()
	return biuo
}

// SetExitCodeName sets the "exit_code_name" field.
func (biuo *BazelInvocationUpdateOne) SetExitCodeName(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetExitCodeName(s)
	return biuo
}

// SetNillableExitCodeName sets the "exit_code_name" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableExitCodeName(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetExitCodeName(*s)
	}
	return biuo
}

// ClearExitCodeName clears the value of the "exit_code_name" field.
func (biuo *BazelInvocationUpdateOne) ClearExitCodeName() *BazelInvocationUpdateOne {
	biuo.mutation.ClearExitCodeName()
	return biuo
}

// SetExitCodeCode sets the "exit_code_code" field.
func (biuo *BazelInvocationUpdateOne) SetExitCodeCode(i int32) *BazelInvocationUpdateOne {
	biuo.mutation.ResetExitCodeCode()
	biuo.mutation.SetExitCodeCode(i)
	return biuo
}

// SetNillableExitCodeCode sets the "exit_code_code" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableExitCodeCode(i *int32) *BazelInvocationUpdateOne {
	if i != nil {
		biuo.SetExitCodeCode(*i)
	}
	return biuo
}

// AddExitCodeCode adds i to the "exit_code_code" field.
func (biuo *BazelInvocationUpdateOne) AddExitCodeCode(i int32) *BazelInvocationUpdateOne {
	biuo.mutation.AddExitCodeCode(i)
	return biuo
}

// ClearExitCodeCode clears the value of the "exit_code_code" field.
func (biuo *BazelInvocationUpdateOne) ClearExitCodeCode() *BazelInvocationUpdateOne {
	biuo.mutation.ClearExitCodeCode()
	return biuo
}

// SetCommandLineCommand sets the "command_line_command" field.
func (biuo *BazelInvocationUpdateOne) SetCommandLineCommand(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetCommandLineCommand(s)
	return biuo
}

// SetNillableCommandLineCommand sets the "command_line_command" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableCommandLineCommand(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetCommandLineCommand(*s)
	}
	return biuo
}

// ClearCommandLineCommand clears the value of the "command_line_command" field.
func (biuo *BazelInvocationUpdateOne) ClearCommandLineCommand() *BazelInvocationUpdateOne {
	biuo.mutation.ClearCommandLineCommand()
	return biuo
}

// SetCommandLineExecutable sets the "command_line_executable" field.
func (biuo *BazelInvocationUpdateOne) SetCommandLineExecutable(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetCommandLineExecutable(s)
	return biuo
}

// SetNillableCommandLineExecutable sets the "command_line_executable" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableCommandLineExecutable(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetCommandLineExecutable(*s)
	}
	return biuo
}

// ClearCommandLineExecutable clears the value of the "command_line_executable" field.
func (biuo *BazelInvocationUpdateOne) ClearCommandLineExecutable() *BazelInvocationUpdateOne {
	biuo.mutation.ClearCommandLineExecutable()
	return biuo
}

// SetCommandLineResidual sets the "command_line_residual" field.
func (biuo *BazelInvocationUpdateOne) SetCommandLineResidual(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetCommandLineResidual(s)
	return biuo
}

// SetNillableCommandLineResidual sets the "command_line_residual" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableCommandLineResidual(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetCommandLineResidual(*s)
	}
	return biuo
}

// ClearCommandLineResidual clears the value of the "command_line_residual" field.
func (biuo *BazelInvocationUpdateOne) ClearCommandLineResidual() *BazelInvocationUpdateOne {
	biuo.mutation.ClearCommandLineResidual()
	return biuo
}

// SetCommandLine sets the "command_line" field.
func (biuo *BazelInvocationUpdateOne) SetCommandLine(s []string) *BazelInvocationUpdateOne {
	biuo.mutation.SetCommandLine(s)
	return biuo
}

// AppendCommandLine appends s to the "command_line" field.
func (biuo *BazelInvocationUpdateOne) AppendCommandLine(s []string) *BazelInvocationUpdateOne {
	biuo.mutation.AppendCommandLine(s)
	return biuo
}

// ClearCommandLine clears the value of the "command_line" field.
func (biuo *BazelInvocationUpdateOne) ClearCommandLine() *BazelInvocationUpdateOne {
	biuo.mutation.ClearCommandLine()
	return biuo
}

// SetExplicitCommandLine sets the "explicit_command_line" field.
func (biuo *BazelInvocationUpdateOne) SetExplicitCommandLine(s []string) *BazelInvocationUpdateOne {
	biuo.mutation.SetExplicitCommandLine(s)
	return biuo
}

// AppendExplicitCommandLine appends s to the "explicit_command_line" field.
func (biuo *BazelInvocationUpdateOne) AppendExplicitCommandLine(s []string) *BazelInvocationUpdateOne {
	biuo.mutation.AppendExplicitCommandLine(s)
	return biuo
}

// ClearExplicitCommandLine clears the value of the "explicit_command_line" field.
func (biuo *BazelInvocationUpdateOne) ClearExplicitCommandLine() *BazelInvocationUpdateOne {
	biuo.mutation.ClearExplicitCommandLine()
	return biuo
}

// SetStartupOptions sets the "startup_options" field.
func (biuo *BazelInvocationUpdateOne) SetStartupOptions(s []string) *BazelInvocationUpdateOne {
	biuo.mutation.SetStartupOptions(s)
	return biuo
}

// AppendStartupOptions appends s to the "startup_options" field.
func (biuo *BazelInvocationUpdateOne) AppendStartupOptions(s []string) *BazelInvocationUpdateOne {
	biuo.mutation.AppendStartupOptions(s)
	return biuo
}

// ClearStartupOptions clears the value of the "startup_options" field.
func (biuo *BazelInvocationUpdateOne) ClearStartupOptions() *BazelInvocationUpdateOne {
	biuo.mutation.ClearStartupOptions()
	return biuo
}

// SetExplicitStartupOptions sets the "explicit_startup_options" field.
func (biuo *BazelInvocationUpdateOne) SetExplicitStartupOptions(s []string) *BazelInvocationUpdateOne {
	biuo.mutation.SetExplicitStartupOptions(s)
	return biuo
}

// AppendExplicitStartupOptions appends s to the "explicit_startup_options" field.
func (biuo *BazelInvocationUpdateOne) AppendExplicitStartupOptions(s []string) *BazelInvocationUpdateOne {
	biuo.mutation.AppendExplicitStartupOptions(s)
	return biuo
}

// ClearExplicitStartupOptions clears the value of the "explicit_startup_options" field.
func (biuo *BazelInvocationUpdateOne) ClearExplicitStartupOptions() *BazelInvocationUpdateOne {
	biuo.mutation.ClearExplicitStartupOptions()
	return biuo
}

// SetProcessedEventStarted sets the "processed_event_started" field.
func (biuo *BazelInvocationUpdateOne) SetProcessedEventStarted(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetProcessedEventStarted(b)
	return biuo
}

// SetNillableProcessedEventStarted sets the "processed_event_started" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableProcessedEventStarted(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetProcessedEventStarted(*b)
	}
	return biuo
}

// SetProcessedEventBuildMetadata sets the "processed_event_build_metadata" field.
func (biuo *BazelInvocationUpdateOne) SetProcessedEventBuildMetadata(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetProcessedEventBuildMetadata(b)
	return biuo
}

// SetNillableProcessedEventBuildMetadata sets the "processed_event_build_metadata" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableProcessedEventBuildMetadata(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetProcessedEventBuildMetadata(*b)
	}
	return biuo
}

// SetProcessedEventOptionsParsed sets the "processed_event_options_parsed" field.
func (biuo *BazelInvocationUpdateOne) SetProcessedEventOptionsParsed(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetProcessedEventOptionsParsed(b)
	return biuo
}

// SetNillableProcessedEventOptionsParsed sets the "processed_event_options_parsed" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableProcessedEventOptionsParsed(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetProcessedEventOptionsParsed(*b)
	}
	return biuo
}

// SetProcessedEventBuildFinished sets the "processed_event_build_finished" field.
func (biuo *BazelInvocationUpdateOne) SetProcessedEventBuildFinished(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetProcessedEventBuildFinished(b)
	return biuo
}

// SetNillableProcessedEventBuildFinished sets the "processed_event_build_finished" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableProcessedEventBuildFinished(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetProcessedEventBuildFinished(*b)
	}
	return biuo
}

// SetProcessedEventStructuredCommandLine sets the "processed_event_structured_command_line" field.
func (biuo *BazelInvocationUpdateOne) SetProcessedEventStructuredCommandLine(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetProcessedEventStructuredCommandLine(b)
	return biuo
}

// SetNillableProcessedEventStructuredCommandLine sets the "processed_event_structured_command_line" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableProcessedEventStructuredCommandLine(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetProcessedEventStructuredCommandLine(*b)
	}
	return biuo
}

// SetProcessedEventWorkspaceStatus sets the "processed_event_workspace_status" field.
func (biuo *BazelInvocationUpdateOne) SetProcessedEventWorkspaceStatus(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetProcessedEventWorkspaceStatus(b)
	return biuo
}

// SetNillableProcessedEventWorkspaceStatus sets the "processed_event_workspace_status" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableProcessedEventWorkspaceStatus(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetProcessedEventWorkspaceStatus(*b)
	}
	return biuo
}

// SetBuildID sets the "build" edge to the Build entity by ID.
func (biuo *BazelInvocationUpdateOne) SetBuildID(id int) *BazelInvocationUpdateOne {
	biuo.mutation.SetBuildID(id)
	return biuo
}

// SetNillableBuildID sets the "build" edge to the Build entity by ID if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableBuildID(id *int) *BazelInvocationUpdateOne {
	if id != nil {
		biuo = biuo.SetBuildID(*id)
	}
	return biuo
}

// SetBuild sets the "build" edge to the Build entity.
func (biuo *BazelInvocationUpdateOne) SetBuild(b *Build) *BazelInvocationUpdateOne {
	return biuo.SetBuildID(b.ID)
}

// AddEventMetadatumIDs adds the "event_metadata" edge to the EventMetadata entity by IDs.
func (biuo *BazelInvocationUpdateOne) AddEventMetadatumIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.AddEventMetadatumIDs(ids...)
	return biuo
}

// AddEventMetadata adds the "event_metadata" edges to the EventMetadata entity.
func (biuo *BazelInvocationUpdateOne) AddEventMetadata(e ...*EventMetadata) *BazelInvocationUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return biuo.AddEventMetadatumIDs(ids...)
}

// AddConnectionMetadatumIDs adds the "connection_metadata" edge to the ConnectionMetadata entity by IDs.
func (biuo *BazelInvocationUpdateOne) AddConnectionMetadatumIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.AddConnectionMetadatumIDs(ids...)
	return biuo
}

// AddConnectionMetadata adds the "connection_metadata" edges to the ConnectionMetadata entity.
func (biuo *BazelInvocationUpdateOne) AddConnectionMetadata(c ...*ConnectionMetadata) *BazelInvocationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return biuo.AddConnectionMetadatumIDs(ids...)
}

// AddProblemIDs adds the "problems" edge to the BazelInvocationProblem entity by IDs.
func (biuo *BazelInvocationUpdateOne) AddProblemIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.AddProblemIDs(ids...)
	return biuo
}

// AddProblems adds the "problems" edges to the BazelInvocationProblem entity.
func (biuo *BazelInvocationUpdateOne) AddProblems(b ...*BazelInvocationProblem) *BazelInvocationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.AddProblemIDs(ids...)
}

// SetMetricsID sets the "metrics" edge to the Metrics entity by ID.
func (biuo *BazelInvocationUpdateOne) SetMetricsID(id int) *BazelInvocationUpdateOne {
	biuo.mutation.SetMetricsID(id)
	return biuo
}

// SetNillableMetricsID sets the "metrics" edge to the Metrics entity by ID if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableMetricsID(id *int) *BazelInvocationUpdateOne {
	if id != nil {
		biuo = biuo.SetMetricsID(*id)
	}
	return biuo
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (biuo *BazelInvocationUpdateOne) SetMetrics(m *Metrics) *BazelInvocationUpdateOne {
	return biuo.SetMetricsID(m.ID)
}

// AddIncompleteBuildLogIDs adds the "incomplete_build_logs" edge to the IncompleteBuildLog entity by IDs.
func (biuo *BazelInvocationUpdateOne) AddIncompleteBuildLogIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.AddIncompleteBuildLogIDs(ids...)
	return biuo
}

// AddIncompleteBuildLogs adds the "incomplete_build_logs" edges to the IncompleteBuildLog entity.
func (biuo *BazelInvocationUpdateOne) AddIncompleteBuildLogs(i ...*IncompleteBuildLog) *BazelInvocationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return biuo.AddIncompleteBuildLogIDs(ids...)
}

// AddInvocationFileIDs adds the "invocation_files" edge to the InvocationFiles entity by IDs.
func (biuo *BazelInvocationUpdateOne) AddInvocationFileIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.AddInvocationFileIDs(ids...)
	return biuo
}

// AddInvocationFiles adds the "invocation_files" edges to the InvocationFiles entity.
func (biuo *BazelInvocationUpdateOne) AddInvocationFiles(i ...*InvocationFiles) *BazelInvocationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return biuo.AddInvocationFileIDs(ids...)
}

// AddTestCollectionIDs adds the "test_collection" edge to the TestCollection entity by IDs.
func (biuo *BazelInvocationUpdateOne) AddTestCollectionIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.AddTestCollectionIDs(ids...)
	return biuo
}

// AddTestCollection adds the "test_collection" edges to the TestCollection entity.
func (biuo *BazelInvocationUpdateOne) AddTestCollection(t ...*TestCollection) *BazelInvocationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return biuo.AddTestCollectionIDs(ids...)
}

// AddTargetIDs adds the "targets" edge to the Target entity by IDs.
func (biuo *BazelInvocationUpdateOne) AddTargetIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.AddTargetIDs(ids...)
	return biuo
}

// AddTargets adds the "targets" edges to the Target entity.
func (biuo *BazelInvocationUpdateOne) AddTargets(t ...*Target) *BazelInvocationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return biuo.AddTargetIDs(ids...)
}

// SetSourceControlID sets the "source_control" edge to the SourceControl entity by ID.
func (biuo *BazelInvocationUpdateOne) SetSourceControlID(id int) *BazelInvocationUpdateOne {
	biuo.mutation.SetSourceControlID(id)
	return biuo
}

// SetNillableSourceControlID sets the "source_control" edge to the SourceControl entity by ID if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableSourceControlID(id *int) *BazelInvocationUpdateOne {
	if id != nil {
		biuo = biuo.SetSourceControlID(*id)
	}
	return biuo
}

// SetSourceControl sets the "source_control" edge to the SourceControl entity.
func (biuo *BazelInvocationUpdateOne) SetSourceControl(s *SourceControl) *BazelInvocationUpdateOne {
	return biuo.SetSourceControlID(s.ID)
}

// Mutation returns the BazelInvocationMutation object of the builder.
func (biuo *BazelInvocationUpdateOne) Mutation() *BazelInvocationMutation {
	return biuo.mutation
}

// ClearBuild clears the "build" edge to the Build entity.
func (biuo *BazelInvocationUpdateOne) ClearBuild() *BazelInvocationUpdateOne {
	biuo.mutation.ClearBuild()
	return biuo
}

// ClearEventMetadata clears all "event_metadata" edges to the EventMetadata entity.
func (biuo *BazelInvocationUpdateOne) ClearEventMetadata() *BazelInvocationUpdateOne {
	biuo.mutation.ClearEventMetadata()
	return biuo
}

// RemoveEventMetadatumIDs removes the "event_metadata" edge to EventMetadata entities by IDs.
func (biuo *BazelInvocationUpdateOne) RemoveEventMetadatumIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.RemoveEventMetadatumIDs(ids...)
	return biuo
}

// RemoveEventMetadata removes "event_metadata" edges to EventMetadata entities.
func (biuo *BazelInvocationUpdateOne) RemoveEventMetadata(e ...*EventMetadata) *BazelInvocationUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return biuo.RemoveEventMetadatumIDs(ids...)
}

// ClearConnectionMetadata clears all "connection_metadata" edges to the ConnectionMetadata entity.
func (biuo *BazelInvocationUpdateOne) ClearConnectionMetadata() *BazelInvocationUpdateOne {
	biuo.mutation.ClearConnectionMetadata()
	return biuo
}

// RemoveConnectionMetadatumIDs removes the "connection_metadata" edge to ConnectionMetadata entities by IDs.
func (biuo *BazelInvocationUpdateOne) RemoveConnectionMetadatumIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.RemoveConnectionMetadatumIDs(ids...)
	return biuo
}

// RemoveConnectionMetadata removes "connection_metadata" edges to ConnectionMetadata entities.
func (biuo *BazelInvocationUpdateOne) RemoveConnectionMetadata(c ...*ConnectionMetadata) *BazelInvocationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return biuo.RemoveConnectionMetadatumIDs(ids...)
}

// ClearProblems clears all "problems" edges to the BazelInvocationProblem entity.
func (biuo *BazelInvocationUpdateOne) ClearProblems() *BazelInvocationUpdateOne {
	biuo.mutation.ClearProblems()
	return biuo
}

// RemoveProblemIDs removes the "problems" edge to BazelInvocationProblem entities by IDs.
func (biuo *BazelInvocationUpdateOne) RemoveProblemIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.RemoveProblemIDs(ids...)
	return biuo
}

// RemoveProblems removes "problems" edges to BazelInvocationProblem entities.
func (biuo *BazelInvocationUpdateOne) RemoveProblems(b ...*BazelInvocationProblem) *BazelInvocationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.RemoveProblemIDs(ids...)
}

// ClearMetrics clears the "metrics" edge to the Metrics entity.
func (biuo *BazelInvocationUpdateOne) ClearMetrics() *BazelInvocationUpdateOne {
	biuo.mutation.ClearMetrics()
	return biuo
}

// ClearIncompleteBuildLogs clears all "incomplete_build_logs" edges to the IncompleteBuildLog entity.
func (biuo *BazelInvocationUpdateOne) ClearIncompleteBuildLogs() *BazelInvocationUpdateOne {
	biuo.mutation.ClearIncompleteBuildLogs()
	return biuo
}

// RemoveIncompleteBuildLogIDs removes the "incomplete_build_logs" edge to IncompleteBuildLog entities by IDs.
func (biuo *BazelInvocationUpdateOne) RemoveIncompleteBuildLogIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.RemoveIncompleteBuildLogIDs(ids...)
	return biuo
}

// RemoveIncompleteBuildLogs removes "incomplete_build_logs" edges to IncompleteBuildLog entities.
func (biuo *BazelInvocationUpdateOne) RemoveIncompleteBuildLogs(i ...*IncompleteBuildLog) *BazelInvocationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return biuo.RemoveIncompleteBuildLogIDs(ids...)
}

// ClearInvocationFiles clears all "invocation_files" edges to the InvocationFiles entity.
func (biuo *BazelInvocationUpdateOne) ClearInvocationFiles() *BazelInvocationUpdateOne {
	biuo.mutation.ClearInvocationFiles()
	return biuo
}

// RemoveInvocationFileIDs removes the "invocation_files" edge to InvocationFiles entities by IDs.
func (biuo *BazelInvocationUpdateOne) RemoveInvocationFileIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.RemoveInvocationFileIDs(ids...)
	return biuo
}

// RemoveInvocationFiles removes "invocation_files" edges to InvocationFiles entities.
func (biuo *BazelInvocationUpdateOne) RemoveInvocationFiles(i ...*InvocationFiles) *BazelInvocationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return biuo.RemoveInvocationFileIDs(ids...)
}

// ClearTestCollection clears all "test_collection" edges to the TestCollection entity.
func (biuo *BazelInvocationUpdateOne) ClearTestCollection() *BazelInvocationUpdateOne {
	biuo.mutation.ClearTestCollection()
	return biuo
}

// RemoveTestCollectionIDs removes the "test_collection" edge to TestCollection entities by IDs.
func (biuo *BazelInvocationUpdateOne) RemoveTestCollectionIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.RemoveTestCollectionIDs(ids...)
	return biuo
}

// RemoveTestCollection removes "test_collection" edges to TestCollection entities.
func (biuo *BazelInvocationUpdateOne) RemoveTestCollection(t ...*TestCollection) *BazelInvocationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return biuo.RemoveTestCollectionIDs(ids...)
}

// ClearTargets clears all "targets" edges to the Target entity.
func (biuo *BazelInvocationUpdateOne) ClearTargets() *BazelInvocationUpdateOne {
	biuo.mutation.ClearTargets()
	return biuo
}

// RemoveTargetIDs removes the "targets" edge to Target entities by IDs.
func (biuo *BazelInvocationUpdateOne) RemoveTargetIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.RemoveTargetIDs(ids...)
	return biuo
}

// RemoveTargets removes "targets" edges to Target entities.
func (biuo *BazelInvocationUpdateOne) RemoveTargets(t ...*Target) *BazelInvocationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return biuo.RemoveTargetIDs(ids...)
}

// ClearSourceControl clears the "source_control" edge to the SourceControl entity.
func (biuo *BazelInvocationUpdateOne) ClearSourceControl() *BazelInvocationUpdateOne {
	biuo.mutation.ClearSourceControl()
	return biuo
}

// Where appends a list predicates to the BazelInvocationUpdate builder.
func (biuo *BazelInvocationUpdateOne) Where(ps ...predicate.BazelInvocation) *BazelInvocationUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BazelInvocationUpdateOne) Select(field string, fields ...string) *BazelInvocationUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BazelInvocation entity.
func (biuo *BazelInvocationUpdateOne) Save(ctx context.Context) (*BazelInvocation, error) {
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BazelInvocationUpdateOne) SaveX(ctx context.Context) *BazelInvocation {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BazelInvocationUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BazelInvocationUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (biuo *BazelInvocationUpdateOne) sqlSave(ctx context.Context) (_node *BazelInvocation, err error) {
	_spec := sqlgraph.NewUpdateSpec(bazelinvocation.Table, bazelinvocation.Columns, sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BazelInvocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bazelinvocation.FieldID)
		for _, f := range fields {
			if !bazelinvocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bazelinvocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.StartedAt(); ok {
		_spec.SetField(bazelinvocation.FieldStartedAt, field.TypeTime, value)
	}
	if biuo.mutation.StartedAtCleared() {
		_spec.ClearField(bazelinvocation.FieldStartedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.EndedAt(); ok {
		_spec.SetField(bazelinvocation.FieldEndedAt, field.TypeTime, value)
	}
	if biuo.mutation.EndedAtCleared() {
		_spec.ClearField(bazelinvocation.FieldEndedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.ChangeNumber(); ok {
		_spec.SetField(bazelinvocation.FieldChangeNumber, field.TypeInt, value)
	}
	if value, ok := biuo.mutation.AddedChangeNumber(); ok {
		_spec.AddField(bazelinvocation.FieldChangeNumber, field.TypeInt, value)
	}
	if biuo.mutation.ChangeNumberCleared() {
		_spec.ClearField(bazelinvocation.FieldChangeNumber, field.TypeInt)
	}
	if value, ok := biuo.mutation.PatchsetNumber(); ok {
		_spec.SetField(bazelinvocation.FieldPatchsetNumber, field.TypeInt, value)
	}
	if value, ok := biuo.mutation.AddedPatchsetNumber(); ok {
		_spec.AddField(bazelinvocation.FieldPatchsetNumber, field.TypeInt, value)
	}
	if biuo.mutation.PatchsetNumberCleared() {
		_spec.ClearField(bazelinvocation.FieldPatchsetNumber, field.TypeInt)
	}
	if value, ok := biuo.mutation.BepCompleted(); ok {
		_spec.SetField(bazelinvocation.FieldBepCompleted, field.TypeBool, value)
	}
	if value, ok := biuo.mutation.StepLabel(); ok {
		_spec.SetField(bazelinvocation.FieldStepLabel, field.TypeString, value)
	}
	if biuo.mutation.StepLabelCleared() {
		_spec.ClearField(bazelinvocation.FieldStepLabel, field.TypeString)
	}
	if value, ok := biuo.mutation.UserEmail(); ok {
		_spec.SetField(bazelinvocation.FieldUserEmail, field.TypeString, value)
	}
	if biuo.mutation.UserEmailCleared() {
		_spec.ClearField(bazelinvocation.FieldUserEmail, field.TypeString)
	}
	if value, ok := biuo.mutation.UserLdap(); ok {
		_spec.SetField(bazelinvocation.FieldUserLdap, field.TypeString, value)
	}
	if biuo.mutation.UserLdapCleared() {
		_spec.ClearField(bazelinvocation.FieldUserLdap, field.TypeString)
	}
	if value, ok := biuo.mutation.BuildLogs(); ok {
		_spec.SetField(bazelinvocation.FieldBuildLogs, field.TypeString, value)
	}
	if biuo.mutation.BuildLogsCleared() {
		_spec.ClearField(bazelinvocation.FieldBuildLogs, field.TypeString)
	}
	if value, ok := biuo.mutation.CPU(); ok {
		_spec.SetField(bazelinvocation.FieldCPU, field.TypeString, value)
	}
	if biuo.mutation.CPUCleared() {
		_spec.ClearField(bazelinvocation.FieldCPU, field.TypeString)
	}
	if value, ok := biuo.mutation.PlatformName(); ok {
		_spec.SetField(bazelinvocation.FieldPlatformName, field.TypeString, value)
	}
	if biuo.mutation.PlatformNameCleared() {
		_spec.ClearField(bazelinvocation.FieldPlatformName, field.TypeString)
	}
	if value, ok := biuo.mutation.Hostname(); ok {
		_spec.SetField(bazelinvocation.FieldHostname, field.TypeString, value)
	}
	if biuo.mutation.HostnameCleared() {
		_spec.ClearField(bazelinvocation.FieldHostname, field.TypeString)
	}
	if value, ok := biuo.mutation.IsCiWorker(); ok {
		_spec.SetField(bazelinvocation.FieldIsCiWorker, field.TypeBool, value)
	}
	if biuo.mutation.IsCiWorkerCleared() {
		_spec.ClearField(bazelinvocation.FieldIsCiWorker, field.TypeBool)
	}
	if value, ok := biuo.mutation.ConfigurationMnemonic(); ok {
		_spec.SetField(bazelinvocation.FieldConfigurationMnemonic, field.TypeString, value)
	}
	if biuo.mutation.ConfigurationMnemonicCleared() {
		_spec.ClearField(bazelinvocation.FieldConfigurationMnemonic, field.TypeString)
	}
	if value, ok := biuo.mutation.NumFetches(); ok {
		_spec.SetField(bazelinvocation.FieldNumFetches, field.TypeInt64, value)
	}
	if value, ok := biuo.mutation.AddedNumFetches(); ok {
		_spec.AddField(bazelinvocation.FieldNumFetches, field.TypeInt64, value)
	}
	if biuo.mutation.NumFetchesCleared() {
		_spec.ClearField(bazelinvocation.FieldNumFetches, field.TypeInt64)
	}
	if value, ok := biuo.mutation.ProfileName(); ok {
		_spec.SetField(bazelinvocation.FieldProfileName, field.TypeString, value)
	}
	if biuo.mutation.ProfileNameCleared() {
		_spec.ClearField(bazelinvocation.FieldProfileName, field.TypeString)
	}
	if value, ok := biuo.mutation.InstanceName(); ok {
		_spec.SetField(bazelinvocation.FieldInstanceName, field.TypeString, value)
	}
	if biuo.mutation.InstanceNameCleared() {
		_spec.ClearField(bazelinvocation.FieldInstanceName, field.TypeString)
	}
	if value, ok := biuo.mutation.BazelVersion(); ok {
		_spec.SetField(bazelinvocation.FieldBazelVersion, field.TypeString, value)
	}
	if biuo.mutation.BazelVersionCleared() {
		_spec.ClearField(bazelinvocation.FieldBazelVersion, field.TypeString)
	}
	if value, ok := biuo.mutation.ExitCodeName(); ok {
		_spec.SetField(bazelinvocation.FieldExitCodeName, field.TypeString, value)
	}
	if biuo.mutation.ExitCodeNameCleared() {
		_spec.ClearField(bazelinvocation.FieldExitCodeName, field.TypeString)
	}
	if value, ok := biuo.mutation.ExitCodeCode(); ok {
		_spec.SetField(bazelinvocation.FieldExitCodeCode, field.TypeInt32, value)
	}
	if value, ok := biuo.mutation.AddedExitCodeCode(); ok {
		_spec.AddField(bazelinvocation.FieldExitCodeCode, field.TypeInt32, value)
	}
	if biuo.mutation.ExitCodeCodeCleared() {
		_spec.ClearField(bazelinvocation.FieldExitCodeCode, field.TypeInt32)
	}
	if value, ok := biuo.mutation.CommandLineCommand(); ok {
		_spec.SetField(bazelinvocation.FieldCommandLineCommand, field.TypeString, value)
	}
	if biuo.mutation.CommandLineCommandCleared() {
		_spec.ClearField(bazelinvocation.FieldCommandLineCommand, field.TypeString)
	}
	if value, ok := biuo.mutation.CommandLineExecutable(); ok {
		_spec.SetField(bazelinvocation.FieldCommandLineExecutable, field.TypeString, value)
	}
	if biuo.mutation.CommandLineExecutableCleared() {
		_spec.ClearField(bazelinvocation.FieldCommandLineExecutable, field.TypeString)
	}
	if value, ok := biuo.mutation.CommandLineResidual(); ok {
		_spec.SetField(bazelinvocation.FieldCommandLineResidual, field.TypeString, value)
	}
	if biuo.mutation.CommandLineResidualCleared() {
		_spec.ClearField(bazelinvocation.FieldCommandLineResidual, field.TypeString)
	}
	if value, ok := biuo.mutation.CommandLine(); ok {
		_spec.SetField(bazelinvocation.FieldCommandLine, field.TypeJSON, value)
	}
	if value, ok := biuo.mutation.AppendedCommandLine(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bazelinvocation.FieldCommandLine, value)
		})
	}
	if biuo.mutation.CommandLineCleared() {
		_spec.ClearField(bazelinvocation.FieldCommandLine, field.TypeJSON)
	}
	if value, ok := biuo.mutation.ExplicitCommandLine(); ok {
		_spec.SetField(bazelinvocation.FieldExplicitCommandLine, field.TypeJSON, value)
	}
	if value, ok := biuo.mutation.AppendedExplicitCommandLine(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bazelinvocation.FieldExplicitCommandLine, value)
		})
	}
	if biuo.mutation.ExplicitCommandLineCleared() {
		_spec.ClearField(bazelinvocation.FieldExplicitCommandLine, field.TypeJSON)
	}
	if value, ok := biuo.mutation.StartupOptions(); ok {
		_spec.SetField(bazelinvocation.FieldStartupOptions, field.TypeJSON, value)
	}
	if value, ok := biuo.mutation.AppendedStartupOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bazelinvocation.FieldStartupOptions, value)
		})
	}
	if biuo.mutation.StartupOptionsCleared() {
		_spec.ClearField(bazelinvocation.FieldStartupOptions, field.TypeJSON)
	}
	if value, ok := biuo.mutation.ExplicitStartupOptions(); ok {
		_spec.SetField(bazelinvocation.FieldExplicitStartupOptions, field.TypeJSON, value)
	}
	if value, ok := biuo.mutation.AppendedExplicitStartupOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bazelinvocation.FieldExplicitStartupOptions, value)
		})
	}
	if biuo.mutation.ExplicitStartupOptionsCleared() {
		_spec.ClearField(bazelinvocation.FieldExplicitStartupOptions, field.TypeJSON)
	}
	if value, ok := biuo.mutation.ProcessedEventStarted(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventStarted, field.TypeBool, value)
	}
	if value, ok := biuo.mutation.ProcessedEventBuildMetadata(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventBuildMetadata, field.TypeBool, value)
	}
	if value, ok := biuo.mutation.ProcessedEventOptionsParsed(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventOptionsParsed, field.TypeBool, value)
	}
	if value, ok := biuo.mutation.ProcessedEventBuildFinished(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventBuildFinished, field.TypeBool, value)
	}
	if value, ok := biuo.mutation.ProcessedEventStructuredCommandLine(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventStructuredCommandLine, field.TypeBool, value)
	}
	if value, ok := biuo.mutation.ProcessedEventWorkspaceStatus(); ok {
		_spec.SetField(bazelinvocation.FieldProcessedEventWorkspaceStatus, field.TypeBool, value)
	}
	if biuo.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bazelinvocation.BuildTable,
			Columns: []string{bazelinvocation.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bazelinvocation.BuildTable,
			Columns: []string{bazelinvocation.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.EventMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.EventMetadataTable,
			Columns: []string{bazelinvocation.EventMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedEventMetadataIDs(); len(nodes) > 0 && !biuo.mutation.EventMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.EventMetadataTable,
			Columns: []string{bazelinvocation.EventMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.EventMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.EventMetadataTable,
			Columns: []string{bazelinvocation.EventMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.ConnectionMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ConnectionMetadataTable,
			Columns: []string{bazelinvocation.ConnectionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedConnectionMetadataIDs(); len(nodes) > 0 && !biuo.mutation.ConnectionMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ConnectionMetadataTable,
			Columns: []string{bazelinvocation.ConnectionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.ConnectionMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ConnectionMetadataTable,
			Columns: []string{bazelinvocation.ConnectionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !biuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bazelinvocation.MetricsTable,
			Columns: []string{bazelinvocation.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bazelinvocation.MetricsTable,
			Columns: []string{bazelinvocation.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.IncompleteBuildLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.IncompleteBuildLogsTable,
			Columns: []string{bazelinvocation.IncompleteBuildLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedIncompleteBuildLogsIDs(); len(nodes) > 0 && !biuo.mutation.IncompleteBuildLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.IncompleteBuildLogsTable,
			Columns: []string{bazelinvocation.IncompleteBuildLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.IncompleteBuildLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.IncompleteBuildLogsTable,
			Columns: []string{bazelinvocation.IncompleteBuildLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incompletebuildlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.InvocationFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.InvocationFilesTable,
			Columns: []string{bazelinvocation.InvocationFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedInvocationFilesIDs(); len(nodes) > 0 && !biuo.mutation.InvocationFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.InvocationFilesTable,
			Columns: []string{bazelinvocation.InvocationFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.InvocationFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.InvocationFilesTable,
			Columns: []string{bazelinvocation.InvocationFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invocationfiles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.TestCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TestCollectionTable,
			Columns: []string{bazelinvocation.TestCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedTestCollectionIDs(); len(nodes) > 0 && !biuo.mutation.TestCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TestCollectionTable,
			Columns: []string{bazelinvocation.TestCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.TestCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TestCollectionTable,
			Columns: []string{bazelinvocation.TestCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TargetsTable,
			Columns: []string{bazelinvocation.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedTargetsIDs(); len(nodes) > 0 && !biuo.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TargetsTable,
			Columns: []string{bazelinvocation.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.TargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.TargetsTable,
			Columns: []string{bazelinvocation.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.SourceControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bazelinvocation.SourceControlTable,
			Columns: []string{bazelinvocation.SourceControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcecontrol.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.SourceControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bazelinvocation.SourceControlTable,
			Columns: []string{bazelinvocation.SourceControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcecontrol.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BazelInvocation{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bazelinvocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}
