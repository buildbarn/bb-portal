// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/eventmetadata"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// EventMetadataUpdate is the builder for updating EventMetadata entities.
type EventMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *EventMetadataMutation
}

// Where appends a list predicates to the EventMetadataUpdate builder.
func (emu *EventMetadataUpdate) Where(ps ...predicate.EventMetadata) *EventMetadataUpdate {
	emu.mutation.Where(ps...)
	return emu
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (emu *EventMetadataUpdate) SetBazelInvocationID(id int) *EventMetadataUpdate {
	emu.mutation.SetBazelInvocationID(id)
	return emu
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (emu *EventMetadataUpdate) SetBazelInvocation(b *BazelInvocation) *EventMetadataUpdate {
	return emu.SetBazelInvocationID(b.ID)
}

// Mutation returns the EventMetadataMutation object of the builder.
func (emu *EventMetadataUpdate) Mutation() *EventMetadataMutation {
	return emu.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (emu *EventMetadataUpdate) ClearBazelInvocation() *EventMetadataUpdate {
	emu.mutation.ClearBazelInvocation()
	return emu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (emu *EventMetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, emu.sqlSave, emu.mutation, emu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emu *EventMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := emu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (emu *EventMetadataUpdate) Exec(ctx context.Context) error {
	_, err := emu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emu *EventMetadataUpdate) ExecX(ctx context.Context) {
	if err := emu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emu *EventMetadataUpdate) check() error {
	if emu.mutation.BazelInvocationCleared() && len(emu.mutation.BazelInvocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventMetadata.bazel_invocation"`)
	}
	return nil
}

func (emu *EventMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := emu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventmetadata.Table, eventmetadata.Columns, sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt))
	if ps := emu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if emu.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventmetadata.BazelInvocationTable,
			Columns: []string{eventmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventmetadata.BazelInvocationTable,
			Columns: []string{eventmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, emu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	emu.mutation.done = true
	return n, nil
}

// EventMetadataUpdateOne is the builder for updating a single EventMetadata entity.
type EventMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMetadataMutation
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (emuo *EventMetadataUpdateOne) SetBazelInvocationID(id int) *EventMetadataUpdateOne {
	emuo.mutation.SetBazelInvocationID(id)
	return emuo
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (emuo *EventMetadataUpdateOne) SetBazelInvocation(b *BazelInvocation) *EventMetadataUpdateOne {
	return emuo.SetBazelInvocationID(b.ID)
}

// Mutation returns the EventMetadataMutation object of the builder.
func (emuo *EventMetadataUpdateOne) Mutation() *EventMetadataMutation {
	return emuo.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (emuo *EventMetadataUpdateOne) ClearBazelInvocation() *EventMetadataUpdateOne {
	emuo.mutation.ClearBazelInvocation()
	return emuo
}

// Where appends a list predicates to the EventMetadataUpdate builder.
func (emuo *EventMetadataUpdateOne) Where(ps ...predicate.EventMetadata) *EventMetadataUpdateOne {
	emuo.mutation.Where(ps...)
	return emuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (emuo *EventMetadataUpdateOne) Select(field string, fields ...string) *EventMetadataUpdateOne {
	emuo.fields = append([]string{field}, fields...)
	return emuo
}

// Save executes the query and returns the updated EventMetadata entity.
func (emuo *EventMetadataUpdateOne) Save(ctx context.Context) (*EventMetadata, error) {
	return withHooks(ctx, emuo.sqlSave, emuo.mutation, emuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emuo *EventMetadataUpdateOne) SaveX(ctx context.Context) *EventMetadata {
	node, err := emuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (emuo *EventMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := emuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emuo *EventMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := emuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emuo *EventMetadataUpdateOne) check() error {
	if emuo.mutation.BazelInvocationCleared() && len(emuo.mutation.BazelInvocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventMetadata.bazel_invocation"`)
	}
	return nil
}

func (emuo *EventMetadataUpdateOne) sqlSave(ctx context.Context) (_node *EventMetadata, err error) {
	if err := emuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventmetadata.Table, eventmetadata.Columns, sqlgraph.NewFieldSpec(eventmetadata.FieldID, field.TypeInt))
	id, ok := emuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := emuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventmetadata.FieldID)
		for _, f := range fields {
			if !eventmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := emuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if emuo.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventmetadata.BazelInvocationTable,
			Columns: []string{eventmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventmetadata.BazelInvocationTable,
			Columns: []string{eventmetadata.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventMetadata{config: emuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, emuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	emuo.mutation.done = true
	return _node, nil
}
