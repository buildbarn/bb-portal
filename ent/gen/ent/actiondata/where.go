// Code generated by ent, DO NOT EDIT.

package actiondata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ActionData {
	return predicate.ActionData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ActionData {
	return predicate.ActionData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ActionData {
	return predicate.ActionData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ActionData {
	return predicate.ActionData(sql.FieldLTE(FieldID, id))
}

// Mnemonic applies equality check predicate on the "mnemonic" field. It's identical to MnemonicEQ.
func Mnemonic(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldMnemonic, v))
}

// ActionsExecuted applies equality check predicate on the "actions_executed" field. It's identical to ActionsExecutedEQ.
func ActionsExecuted(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldActionsExecuted, v))
}

// ActionsCreated applies equality check predicate on the "actions_created" field. It's identical to ActionsCreatedEQ.
func ActionsCreated(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldActionsCreated, v))
}

// FirstStartedMs applies equality check predicate on the "first_started_ms" field. It's identical to FirstStartedMsEQ.
func FirstStartedMs(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldFirstStartedMs, v))
}

// LastEndedMs applies equality check predicate on the "last_ended_ms" field. It's identical to LastEndedMsEQ.
func LastEndedMs(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldLastEndedMs, v))
}

// SystemTime applies equality check predicate on the "system_time" field. It's identical to SystemTimeEQ.
func SystemTime(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldSystemTime, v))
}

// UserTime applies equality check predicate on the "user_time" field. It's identical to UserTimeEQ.
func UserTime(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldUserTime, v))
}

// ActionSummaryID applies equality check predicate on the "action_summary_id" field. It's identical to ActionSummaryIDEQ.
func ActionSummaryID(v int) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldActionSummaryID, v))
}

// MnemonicEQ applies the EQ predicate on the "mnemonic" field.
func MnemonicEQ(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldMnemonic, v))
}

// MnemonicNEQ applies the NEQ predicate on the "mnemonic" field.
func MnemonicNEQ(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldMnemonic, v))
}

// MnemonicIn applies the In predicate on the "mnemonic" field.
func MnemonicIn(vs ...string) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldMnemonic, vs...))
}

// MnemonicNotIn applies the NotIn predicate on the "mnemonic" field.
func MnemonicNotIn(vs ...string) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldMnemonic, vs...))
}

// MnemonicGT applies the GT predicate on the "mnemonic" field.
func MnemonicGT(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldGT(FieldMnemonic, v))
}

// MnemonicGTE applies the GTE predicate on the "mnemonic" field.
func MnemonicGTE(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldGTE(FieldMnemonic, v))
}

// MnemonicLT applies the LT predicate on the "mnemonic" field.
func MnemonicLT(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldLT(FieldMnemonic, v))
}

// MnemonicLTE applies the LTE predicate on the "mnemonic" field.
func MnemonicLTE(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldLTE(FieldMnemonic, v))
}

// MnemonicContains applies the Contains predicate on the "mnemonic" field.
func MnemonicContains(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldContains(FieldMnemonic, v))
}

// MnemonicHasPrefix applies the HasPrefix predicate on the "mnemonic" field.
func MnemonicHasPrefix(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldHasPrefix(FieldMnemonic, v))
}

// MnemonicHasSuffix applies the HasSuffix predicate on the "mnemonic" field.
func MnemonicHasSuffix(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldHasSuffix(FieldMnemonic, v))
}

// MnemonicIsNil applies the IsNil predicate on the "mnemonic" field.
func MnemonicIsNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldIsNull(FieldMnemonic))
}

// MnemonicNotNil applies the NotNil predicate on the "mnemonic" field.
func MnemonicNotNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldNotNull(FieldMnemonic))
}

// MnemonicEqualFold applies the EqualFold predicate on the "mnemonic" field.
func MnemonicEqualFold(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldEqualFold(FieldMnemonic, v))
}

// MnemonicContainsFold applies the ContainsFold predicate on the "mnemonic" field.
func MnemonicContainsFold(v string) predicate.ActionData {
	return predicate.ActionData(sql.FieldContainsFold(FieldMnemonic, v))
}

// ActionsExecutedEQ applies the EQ predicate on the "actions_executed" field.
func ActionsExecutedEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldActionsExecuted, v))
}

// ActionsExecutedNEQ applies the NEQ predicate on the "actions_executed" field.
func ActionsExecutedNEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldActionsExecuted, v))
}

// ActionsExecutedIn applies the In predicate on the "actions_executed" field.
func ActionsExecutedIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldActionsExecuted, vs...))
}

// ActionsExecutedNotIn applies the NotIn predicate on the "actions_executed" field.
func ActionsExecutedNotIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldActionsExecuted, vs...))
}

// ActionsExecutedGT applies the GT predicate on the "actions_executed" field.
func ActionsExecutedGT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGT(FieldActionsExecuted, v))
}

// ActionsExecutedGTE applies the GTE predicate on the "actions_executed" field.
func ActionsExecutedGTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGTE(FieldActionsExecuted, v))
}

// ActionsExecutedLT applies the LT predicate on the "actions_executed" field.
func ActionsExecutedLT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLT(FieldActionsExecuted, v))
}

// ActionsExecutedLTE applies the LTE predicate on the "actions_executed" field.
func ActionsExecutedLTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLTE(FieldActionsExecuted, v))
}

// ActionsExecutedIsNil applies the IsNil predicate on the "actions_executed" field.
func ActionsExecutedIsNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldIsNull(FieldActionsExecuted))
}

// ActionsExecutedNotNil applies the NotNil predicate on the "actions_executed" field.
func ActionsExecutedNotNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldNotNull(FieldActionsExecuted))
}

// ActionsCreatedEQ applies the EQ predicate on the "actions_created" field.
func ActionsCreatedEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldActionsCreated, v))
}

// ActionsCreatedNEQ applies the NEQ predicate on the "actions_created" field.
func ActionsCreatedNEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldActionsCreated, v))
}

// ActionsCreatedIn applies the In predicate on the "actions_created" field.
func ActionsCreatedIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldActionsCreated, vs...))
}

// ActionsCreatedNotIn applies the NotIn predicate on the "actions_created" field.
func ActionsCreatedNotIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldActionsCreated, vs...))
}

// ActionsCreatedGT applies the GT predicate on the "actions_created" field.
func ActionsCreatedGT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGT(FieldActionsCreated, v))
}

// ActionsCreatedGTE applies the GTE predicate on the "actions_created" field.
func ActionsCreatedGTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGTE(FieldActionsCreated, v))
}

// ActionsCreatedLT applies the LT predicate on the "actions_created" field.
func ActionsCreatedLT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLT(FieldActionsCreated, v))
}

// ActionsCreatedLTE applies the LTE predicate on the "actions_created" field.
func ActionsCreatedLTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLTE(FieldActionsCreated, v))
}

// ActionsCreatedIsNil applies the IsNil predicate on the "actions_created" field.
func ActionsCreatedIsNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldIsNull(FieldActionsCreated))
}

// ActionsCreatedNotNil applies the NotNil predicate on the "actions_created" field.
func ActionsCreatedNotNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldNotNull(FieldActionsCreated))
}

// FirstStartedMsEQ applies the EQ predicate on the "first_started_ms" field.
func FirstStartedMsEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldFirstStartedMs, v))
}

// FirstStartedMsNEQ applies the NEQ predicate on the "first_started_ms" field.
func FirstStartedMsNEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldFirstStartedMs, v))
}

// FirstStartedMsIn applies the In predicate on the "first_started_ms" field.
func FirstStartedMsIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldFirstStartedMs, vs...))
}

// FirstStartedMsNotIn applies the NotIn predicate on the "first_started_ms" field.
func FirstStartedMsNotIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldFirstStartedMs, vs...))
}

// FirstStartedMsGT applies the GT predicate on the "first_started_ms" field.
func FirstStartedMsGT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGT(FieldFirstStartedMs, v))
}

// FirstStartedMsGTE applies the GTE predicate on the "first_started_ms" field.
func FirstStartedMsGTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGTE(FieldFirstStartedMs, v))
}

// FirstStartedMsLT applies the LT predicate on the "first_started_ms" field.
func FirstStartedMsLT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLT(FieldFirstStartedMs, v))
}

// FirstStartedMsLTE applies the LTE predicate on the "first_started_ms" field.
func FirstStartedMsLTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLTE(FieldFirstStartedMs, v))
}

// FirstStartedMsIsNil applies the IsNil predicate on the "first_started_ms" field.
func FirstStartedMsIsNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldIsNull(FieldFirstStartedMs))
}

// FirstStartedMsNotNil applies the NotNil predicate on the "first_started_ms" field.
func FirstStartedMsNotNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldNotNull(FieldFirstStartedMs))
}

// LastEndedMsEQ applies the EQ predicate on the "last_ended_ms" field.
func LastEndedMsEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldLastEndedMs, v))
}

// LastEndedMsNEQ applies the NEQ predicate on the "last_ended_ms" field.
func LastEndedMsNEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldLastEndedMs, v))
}

// LastEndedMsIn applies the In predicate on the "last_ended_ms" field.
func LastEndedMsIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldLastEndedMs, vs...))
}

// LastEndedMsNotIn applies the NotIn predicate on the "last_ended_ms" field.
func LastEndedMsNotIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldLastEndedMs, vs...))
}

// LastEndedMsGT applies the GT predicate on the "last_ended_ms" field.
func LastEndedMsGT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGT(FieldLastEndedMs, v))
}

// LastEndedMsGTE applies the GTE predicate on the "last_ended_ms" field.
func LastEndedMsGTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGTE(FieldLastEndedMs, v))
}

// LastEndedMsLT applies the LT predicate on the "last_ended_ms" field.
func LastEndedMsLT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLT(FieldLastEndedMs, v))
}

// LastEndedMsLTE applies the LTE predicate on the "last_ended_ms" field.
func LastEndedMsLTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLTE(FieldLastEndedMs, v))
}

// LastEndedMsIsNil applies the IsNil predicate on the "last_ended_ms" field.
func LastEndedMsIsNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldIsNull(FieldLastEndedMs))
}

// LastEndedMsNotNil applies the NotNil predicate on the "last_ended_ms" field.
func LastEndedMsNotNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldNotNull(FieldLastEndedMs))
}

// SystemTimeEQ applies the EQ predicate on the "system_time" field.
func SystemTimeEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldSystemTime, v))
}

// SystemTimeNEQ applies the NEQ predicate on the "system_time" field.
func SystemTimeNEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldSystemTime, v))
}

// SystemTimeIn applies the In predicate on the "system_time" field.
func SystemTimeIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldSystemTime, vs...))
}

// SystemTimeNotIn applies the NotIn predicate on the "system_time" field.
func SystemTimeNotIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldSystemTime, vs...))
}

// SystemTimeGT applies the GT predicate on the "system_time" field.
func SystemTimeGT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGT(FieldSystemTime, v))
}

// SystemTimeGTE applies the GTE predicate on the "system_time" field.
func SystemTimeGTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGTE(FieldSystemTime, v))
}

// SystemTimeLT applies the LT predicate on the "system_time" field.
func SystemTimeLT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLT(FieldSystemTime, v))
}

// SystemTimeLTE applies the LTE predicate on the "system_time" field.
func SystemTimeLTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLTE(FieldSystemTime, v))
}

// SystemTimeIsNil applies the IsNil predicate on the "system_time" field.
func SystemTimeIsNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldIsNull(FieldSystemTime))
}

// SystemTimeNotNil applies the NotNil predicate on the "system_time" field.
func SystemTimeNotNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldNotNull(FieldSystemTime))
}

// UserTimeEQ applies the EQ predicate on the "user_time" field.
func UserTimeEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldUserTime, v))
}

// UserTimeNEQ applies the NEQ predicate on the "user_time" field.
func UserTimeNEQ(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldUserTime, v))
}

// UserTimeIn applies the In predicate on the "user_time" field.
func UserTimeIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldUserTime, vs...))
}

// UserTimeNotIn applies the NotIn predicate on the "user_time" field.
func UserTimeNotIn(vs ...int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldUserTime, vs...))
}

// UserTimeGT applies the GT predicate on the "user_time" field.
func UserTimeGT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGT(FieldUserTime, v))
}

// UserTimeGTE applies the GTE predicate on the "user_time" field.
func UserTimeGTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldGTE(FieldUserTime, v))
}

// UserTimeLT applies the LT predicate on the "user_time" field.
func UserTimeLT(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLT(FieldUserTime, v))
}

// UserTimeLTE applies the LTE predicate on the "user_time" field.
func UserTimeLTE(v int64) predicate.ActionData {
	return predicate.ActionData(sql.FieldLTE(FieldUserTime, v))
}

// UserTimeIsNil applies the IsNil predicate on the "user_time" field.
func UserTimeIsNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldIsNull(FieldUserTime))
}

// UserTimeNotNil applies the NotNil predicate on the "user_time" field.
func UserTimeNotNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldNotNull(FieldUserTime))
}

// ActionSummaryIDEQ applies the EQ predicate on the "action_summary_id" field.
func ActionSummaryIDEQ(v int) predicate.ActionData {
	return predicate.ActionData(sql.FieldEQ(FieldActionSummaryID, v))
}

// ActionSummaryIDNEQ applies the NEQ predicate on the "action_summary_id" field.
func ActionSummaryIDNEQ(v int) predicate.ActionData {
	return predicate.ActionData(sql.FieldNEQ(FieldActionSummaryID, v))
}

// ActionSummaryIDIn applies the In predicate on the "action_summary_id" field.
func ActionSummaryIDIn(vs ...int) predicate.ActionData {
	return predicate.ActionData(sql.FieldIn(FieldActionSummaryID, vs...))
}

// ActionSummaryIDNotIn applies the NotIn predicate on the "action_summary_id" field.
func ActionSummaryIDNotIn(vs ...int) predicate.ActionData {
	return predicate.ActionData(sql.FieldNotIn(FieldActionSummaryID, vs...))
}

// ActionSummaryIDIsNil applies the IsNil predicate on the "action_summary_id" field.
func ActionSummaryIDIsNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldIsNull(FieldActionSummaryID))
}

// ActionSummaryIDNotNil applies the NotNil predicate on the "action_summary_id" field.
func ActionSummaryIDNotNil() predicate.ActionData {
	return predicate.ActionData(sql.FieldNotNull(FieldActionSummaryID))
}

// HasActionSummary applies the HasEdge predicate on the "action_summary" edge.
func HasActionSummary() predicate.ActionData {
	return predicate.ActionData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActionSummaryTable, ActionSummaryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionSummaryWith applies the HasEdge predicate on the "action_summary" edge with a given conditions (other predicates).
func HasActionSummaryWith(preds ...predicate.ActionSummary) predicate.ActionData {
	return predicate.ActionData(func(s *sql.Selector) {
		step := newActionSummaryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActionData) predicate.ActionData {
	return predicate.ActionData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActionData) predicate.ActionData {
	return predicate.ActionData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActionData) predicate.ActionData {
	return predicate.ActionData(sql.NotPredicates(p))
}
