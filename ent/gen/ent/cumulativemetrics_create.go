// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/cumulativemetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
)

// CumulativeMetricsCreate is the builder for creating a CumulativeMetrics entity.
type CumulativeMetricsCreate struct {
	config
	mutation *CumulativeMetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNumAnalyses sets the "num_analyses" field.
func (cmc *CumulativeMetricsCreate) SetNumAnalyses(i int32) *CumulativeMetricsCreate {
	cmc.mutation.SetNumAnalyses(i)
	return cmc
}

// SetNillableNumAnalyses sets the "num_analyses" field if the given value is not nil.
func (cmc *CumulativeMetricsCreate) SetNillableNumAnalyses(i *int32) *CumulativeMetricsCreate {
	if i != nil {
		cmc.SetNumAnalyses(*i)
	}
	return cmc
}

// SetNumBuilds sets the "num_builds" field.
func (cmc *CumulativeMetricsCreate) SetNumBuilds(i int32) *CumulativeMetricsCreate {
	cmc.mutation.SetNumBuilds(i)
	return cmc
}

// SetNillableNumBuilds sets the "num_builds" field if the given value is not nil.
func (cmc *CumulativeMetricsCreate) SetNillableNumBuilds(i *int32) *CumulativeMetricsCreate {
	if i != nil {
		cmc.SetNumBuilds(*i)
	}
	return cmc
}

// SetMetricsID sets the "metrics" edge to the Metrics entity by ID.
func (cmc *CumulativeMetricsCreate) SetMetricsID(id int) *CumulativeMetricsCreate {
	cmc.mutation.SetMetricsID(id)
	return cmc
}

// SetNillableMetricsID sets the "metrics" edge to the Metrics entity by ID if the given value is not nil.
func (cmc *CumulativeMetricsCreate) SetNillableMetricsID(id *int) *CumulativeMetricsCreate {
	if id != nil {
		cmc = cmc.SetMetricsID(*id)
	}
	return cmc
}

// SetMetrics sets the "metrics" edge to the Metrics entity.
func (cmc *CumulativeMetricsCreate) SetMetrics(m *Metrics) *CumulativeMetricsCreate {
	return cmc.SetMetricsID(m.ID)
}

// Mutation returns the CumulativeMetricsMutation object of the builder.
func (cmc *CumulativeMetricsCreate) Mutation() *CumulativeMetricsMutation {
	return cmc.mutation
}

// Save creates the CumulativeMetrics in the database.
func (cmc *CumulativeMetricsCreate) Save(ctx context.Context) (*CumulativeMetrics, error) {
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CumulativeMetricsCreate) SaveX(ctx context.Context) *CumulativeMetrics {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CumulativeMetricsCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CumulativeMetricsCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CumulativeMetricsCreate) check() error {
	return nil
}

func (cmc *CumulativeMetricsCreate) sqlSave(ctx context.Context) (*CumulativeMetrics, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CumulativeMetricsCreate) createSpec() (*CumulativeMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &CumulativeMetrics{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(cumulativemetrics.Table, sqlgraph.NewFieldSpec(cumulativemetrics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cmc.conflict
	if value, ok := cmc.mutation.NumAnalyses(); ok {
		_spec.SetField(cumulativemetrics.FieldNumAnalyses, field.TypeInt32, value)
		_node.NumAnalyses = value
	}
	if value, ok := cmc.mutation.NumBuilds(); ok {
		_spec.SetField(cumulativemetrics.FieldNumBuilds, field.TypeInt32, value)
		_node.NumBuilds = value
	}
	if nodes := cmc.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   cumulativemetrics.MetricsTable,
			Columns: []string{cumulativemetrics.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.metrics_cumulative_metrics = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CumulativeMetrics.Create().
//		SetNumAnalyses(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CumulativeMetricsUpsert) {
//			SetNumAnalyses(v+v).
//		}).
//		Exec(ctx)
func (cmc *CumulativeMetricsCreate) OnConflict(opts ...sql.ConflictOption) *CumulativeMetricsUpsertOne {
	cmc.conflict = opts
	return &CumulativeMetricsUpsertOne{
		create: cmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CumulativeMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmc *CumulativeMetricsCreate) OnConflictColumns(columns ...string) *CumulativeMetricsUpsertOne {
	cmc.conflict = append(cmc.conflict, sql.ConflictColumns(columns...))
	return &CumulativeMetricsUpsertOne{
		create: cmc,
	}
}

type (
	// CumulativeMetricsUpsertOne is the builder for "upsert"-ing
	//  one CumulativeMetrics node.
	CumulativeMetricsUpsertOne struct {
		create *CumulativeMetricsCreate
	}

	// CumulativeMetricsUpsert is the "OnConflict" setter.
	CumulativeMetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetNumAnalyses sets the "num_analyses" field.
func (u *CumulativeMetricsUpsert) SetNumAnalyses(v int32) *CumulativeMetricsUpsert {
	u.Set(cumulativemetrics.FieldNumAnalyses, v)
	return u
}

// UpdateNumAnalyses sets the "num_analyses" field to the value that was provided on create.
func (u *CumulativeMetricsUpsert) UpdateNumAnalyses() *CumulativeMetricsUpsert {
	u.SetExcluded(cumulativemetrics.FieldNumAnalyses)
	return u
}

// AddNumAnalyses adds v to the "num_analyses" field.
func (u *CumulativeMetricsUpsert) AddNumAnalyses(v int32) *CumulativeMetricsUpsert {
	u.Add(cumulativemetrics.FieldNumAnalyses, v)
	return u
}

// ClearNumAnalyses clears the value of the "num_analyses" field.
func (u *CumulativeMetricsUpsert) ClearNumAnalyses() *CumulativeMetricsUpsert {
	u.SetNull(cumulativemetrics.FieldNumAnalyses)
	return u
}

// SetNumBuilds sets the "num_builds" field.
func (u *CumulativeMetricsUpsert) SetNumBuilds(v int32) *CumulativeMetricsUpsert {
	u.Set(cumulativemetrics.FieldNumBuilds, v)
	return u
}

// UpdateNumBuilds sets the "num_builds" field to the value that was provided on create.
func (u *CumulativeMetricsUpsert) UpdateNumBuilds() *CumulativeMetricsUpsert {
	u.SetExcluded(cumulativemetrics.FieldNumBuilds)
	return u
}

// AddNumBuilds adds v to the "num_builds" field.
func (u *CumulativeMetricsUpsert) AddNumBuilds(v int32) *CumulativeMetricsUpsert {
	u.Add(cumulativemetrics.FieldNumBuilds, v)
	return u
}

// ClearNumBuilds clears the value of the "num_builds" field.
func (u *CumulativeMetricsUpsert) ClearNumBuilds() *CumulativeMetricsUpsert {
	u.SetNull(cumulativemetrics.FieldNumBuilds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CumulativeMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CumulativeMetricsUpsertOne) UpdateNewValues() *CumulativeMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CumulativeMetrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CumulativeMetricsUpsertOne) Ignore() *CumulativeMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CumulativeMetricsUpsertOne) DoNothing() *CumulativeMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CumulativeMetricsCreate.OnConflict
// documentation for more info.
func (u *CumulativeMetricsUpsertOne) Update(set func(*CumulativeMetricsUpsert)) *CumulativeMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CumulativeMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetNumAnalyses sets the "num_analyses" field.
func (u *CumulativeMetricsUpsertOne) SetNumAnalyses(v int32) *CumulativeMetricsUpsertOne {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.SetNumAnalyses(v)
	})
}

// AddNumAnalyses adds v to the "num_analyses" field.
func (u *CumulativeMetricsUpsertOne) AddNumAnalyses(v int32) *CumulativeMetricsUpsertOne {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.AddNumAnalyses(v)
	})
}

// UpdateNumAnalyses sets the "num_analyses" field to the value that was provided on create.
func (u *CumulativeMetricsUpsertOne) UpdateNumAnalyses() *CumulativeMetricsUpsertOne {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.UpdateNumAnalyses()
	})
}

// ClearNumAnalyses clears the value of the "num_analyses" field.
func (u *CumulativeMetricsUpsertOne) ClearNumAnalyses() *CumulativeMetricsUpsertOne {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.ClearNumAnalyses()
	})
}

// SetNumBuilds sets the "num_builds" field.
func (u *CumulativeMetricsUpsertOne) SetNumBuilds(v int32) *CumulativeMetricsUpsertOne {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.SetNumBuilds(v)
	})
}

// AddNumBuilds adds v to the "num_builds" field.
func (u *CumulativeMetricsUpsertOne) AddNumBuilds(v int32) *CumulativeMetricsUpsertOne {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.AddNumBuilds(v)
	})
}

// UpdateNumBuilds sets the "num_builds" field to the value that was provided on create.
func (u *CumulativeMetricsUpsertOne) UpdateNumBuilds() *CumulativeMetricsUpsertOne {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.UpdateNumBuilds()
	})
}

// ClearNumBuilds clears the value of the "num_builds" field.
func (u *CumulativeMetricsUpsertOne) ClearNumBuilds() *CumulativeMetricsUpsertOne {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.ClearNumBuilds()
	})
}

// Exec executes the query.
func (u *CumulativeMetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CumulativeMetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CumulativeMetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CumulativeMetricsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CumulativeMetricsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CumulativeMetricsCreateBulk is the builder for creating many CumulativeMetrics entities in bulk.
type CumulativeMetricsCreateBulk struct {
	config
	err      error
	builders []*CumulativeMetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the CumulativeMetrics entities in the database.
func (cmcb *CumulativeMetricsCreateBulk) Save(ctx context.Context) ([]*CumulativeMetrics, error) {
	if cmcb.err != nil {
		return nil, cmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CumulativeMetrics, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CumulativeMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CumulativeMetricsCreateBulk) SaveX(ctx context.Context) []*CumulativeMetrics {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CumulativeMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CumulativeMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CumulativeMetrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CumulativeMetricsUpsert) {
//			SetNumAnalyses(v+v).
//		}).
//		Exec(ctx)
func (cmcb *CumulativeMetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *CumulativeMetricsUpsertBulk {
	cmcb.conflict = opts
	return &CumulativeMetricsUpsertBulk{
		create: cmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CumulativeMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmcb *CumulativeMetricsCreateBulk) OnConflictColumns(columns ...string) *CumulativeMetricsUpsertBulk {
	cmcb.conflict = append(cmcb.conflict, sql.ConflictColumns(columns...))
	return &CumulativeMetricsUpsertBulk{
		create: cmcb,
	}
}

// CumulativeMetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of CumulativeMetrics nodes.
type CumulativeMetricsUpsertBulk struct {
	create *CumulativeMetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CumulativeMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CumulativeMetricsUpsertBulk) UpdateNewValues() *CumulativeMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CumulativeMetrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CumulativeMetricsUpsertBulk) Ignore() *CumulativeMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CumulativeMetricsUpsertBulk) DoNothing() *CumulativeMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CumulativeMetricsCreateBulk.OnConflict
// documentation for more info.
func (u *CumulativeMetricsUpsertBulk) Update(set func(*CumulativeMetricsUpsert)) *CumulativeMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CumulativeMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetNumAnalyses sets the "num_analyses" field.
func (u *CumulativeMetricsUpsertBulk) SetNumAnalyses(v int32) *CumulativeMetricsUpsertBulk {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.SetNumAnalyses(v)
	})
}

// AddNumAnalyses adds v to the "num_analyses" field.
func (u *CumulativeMetricsUpsertBulk) AddNumAnalyses(v int32) *CumulativeMetricsUpsertBulk {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.AddNumAnalyses(v)
	})
}

// UpdateNumAnalyses sets the "num_analyses" field to the value that was provided on create.
func (u *CumulativeMetricsUpsertBulk) UpdateNumAnalyses() *CumulativeMetricsUpsertBulk {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.UpdateNumAnalyses()
	})
}

// ClearNumAnalyses clears the value of the "num_analyses" field.
func (u *CumulativeMetricsUpsertBulk) ClearNumAnalyses() *CumulativeMetricsUpsertBulk {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.ClearNumAnalyses()
	})
}

// SetNumBuilds sets the "num_builds" field.
func (u *CumulativeMetricsUpsertBulk) SetNumBuilds(v int32) *CumulativeMetricsUpsertBulk {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.SetNumBuilds(v)
	})
}

// AddNumBuilds adds v to the "num_builds" field.
func (u *CumulativeMetricsUpsertBulk) AddNumBuilds(v int32) *CumulativeMetricsUpsertBulk {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.AddNumBuilds(v)
	})
}

// UpdateNumBuilds sets the "num_builds" field to the value that was provided on create.
func (u *CumulativeMetricsUpsertBulk) UpdateNumBuilds() *CumulativeMetricsUpsertBulk {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.UpdateNumBuilds()
	})
}

// ClearNumBuilds clears the value of the "num_builds" field.
func (u *CumulativeMetricsUpsertBulk) ClearNumBuilds() *CumulativeMetricsUpsertBulk {
	return u.Update(func(s *CumulativeMetricsUpsert) {
		s.ClearNumBuilds()
	})
}

// Exec executes the query.
func (u *CumulativeMetricsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CumulativeMetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CumulativeMetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CumulativeMetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
