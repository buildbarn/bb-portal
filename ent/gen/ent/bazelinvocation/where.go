// Code generated by ent, DO NOT EDIT.

package bazelinvocation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldID, id))
}

// InvocationID applies equality check predicate on the "invocation_id" field. It's identical to InvocationIDEQ.
func InvocationID(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldInvocationID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldStartedAt, v))
}

// EndedAt applies equality check predicate on the "ended_at" field. It's identical to EndedAtEQ.
func EndedAt(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldEndedAt, v))
}

// ChangeNumber applies equality check predicate on the "change_number" field. It's identical to ChangeNumberEQ.
func ChangeNumber(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldChangeNumber, v))
}

// PatchsetNumber applies equality check predicate on the "patchset_number" field. It's identical to PatchsetNumberEQ.
func PatchsetNumber(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldPatchsetNumber, v))
}

// BepCompleted applies equality check predicate on the "bep_completed" field. It's identical to BepCompletedEQ.
func BepCompleted(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBepCompleted, v))
}

// StepLabel applies equality check predicate on the "step_label" field. It's identical to StepLabelEQ.
func StepLabel(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldStepLabel, v))
}

// UserEmail applies equality check predicate on the "user_email" field. It's identical to UserEmailEQ.
func UserEmail(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldUserEmail, v))
}

// UserLdap applies equality check predicate on the "user_ldap" field. It's identical to UserLdapEQ.
func UserLdap(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldUserLdap, v))
}

// BuildLogs applies equality check predicate on the "build_logs" field. It's identical to BuildLogsEQ.
func BuildLogs(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBuildLogs, v))
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCPU, v))
}

// PlatformName applies equality check predicate on the "platform_name" field. It's identical to PlatformNameEQ.
func PlatformName(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldPlatformName, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldHostname, v))
}

// IsCiWorker applies equality check predicate on the "is_ci_worker" field. It's identical to IsCiWorkerEQ.
func IsCiWorker(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldIsCiWorker, v))
}

// ConfigurationMnemonic applies equality check predicate on the "configuration_mnemonic" field. It's identical to ConfigurationMnemonicEQ.
func ConfigurationMnemonic(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldConfigurationMnemonic, v))
}

// NumFetches applies equality check predicate on the "num_fetches" field. It's identical to NumFetchesEQ.
func NumFetches(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldNumFetches, v))
}

// ProfileName applies equality check predicate on the "profile_name" field. It's identical to ProfileNameEQ.
func ProfileName(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProfileName, v))
}

// InstanceName applies equality check predicate on the "instance_name" field. It's identical to InstanceNameEQ.
func InstanceName(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldInstanceName, v))
}

// BazelVersion applies equality check predicate on the "bazel_version" field. It's identical to BazelVersionEQ.
func BazelVersion(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBazelVersion, v))
}

// ExitCodeName applies equality check predicate on the "exit_code_name" field. It's identical to ExitCodeNameEQ.
func ExitCodeName(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldExitCodeName, v))
}

// ExitCodeCode applies equality check predicate on the "exit_code_code" field. It's identical to ExitCodeCodeEQ.
func ExitCodeCode(v int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldExitCodeCode, v))
}

// CommandLineCommand applies equality check predicate on the "command_line_command" field. It's identical to CommandLineCommandEQ.
func CommandLineCommand(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCommandLineCommand, v))
}

// CommandLineExecutable applies equality check predicate on the "command_line_executable" field. It's identical to CommandLineExecutableEQ.
func CommandLineExecutable(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCommandLineExecutable, v))
}

// CommandLineResidual applies equality check predicate on the "command_line_residual" field. It's identical to CommandLineResidualEQ.
func CommandLineResidual(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCommandLineResidual, v))
}

// ProcessedEventStarted applies equality check predicate on the "processed_event_started" field. It's identical to ProcessedEventStartedEQ.
func ProcessedEventStarted(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventStarted, v))
}

// ProcessedEventBuildMetadata applies equality check predicate on the "processed_event_build_metadata" field. It's identical to ProcessedEventBuildMetadataEQ.
func ProcessedEventBuildMetadata(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventBuildMetadata, v))
}

// ProcessedEventOptionsParsed applies equality check predicate on the "processed_event_options_parsed" field. It's identical to ProcessedEventOptionsParsedEQ.
func ProcessedEventOptionsParsed(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventOptionsParsed, v))
}

// ProcessedEventBuildFinished applies equality check predicate on the "processed_event_build_finished" field. It's identical to ProcessedEventBuildFinishedEQ.
func ProcessedEventBuildFinished(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventBuildFinished, v))
}

// ProcessedEventStructuredCommandLine applies equality check predicate on the "processed_event_structured_command_line" field. It's identical to ProcessedEventStructuredCommandLineEQ.
func ProcessedEventStructuredCommandLine(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventStructuredCommandLine, v))
}

// ProcessedEventWorkspaceStatus applies equality check predicate on the "processed_event_workspace_status" field. It's identical to ProcessedEventWorkspaceStatusEQ.
func ProcessedEventWorkspaceStatus(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventWorkspaceStatus, v))
}

// InvocationIDEQ applies the EQ predicate on the "invocation_id" field.
func InvocationIDEQ(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldInvocationID, v))
}

// InvocationIDNEQ applies the NEQ predicate on the "invocation_id" field.
func InvocationIDNEQ(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldInvocationID, v))
}

// InvocationIDIn applies the In predicate on the "invocation_id" field.
func InvocationIDIn(vs ...uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldInvocationID, vs...))
}

// InvocationIDNotIn applies the NotIn predicate on the "invocation_id" field.
func InvocationIDNotIn(vs ...uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldInvocationID, vs...))
}

// InvocationIDGT applies the GT predicate on the "invocation_id" field.
func InvocationIDGT(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldInvocationID, v))
}

// InvocationIDGTE applies the GTE predicate on the "invocation_id" field.
func InvocationIDGTE(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldInvocationID, v))
}

// InvocationIDLT applies the LT predicate on the "invocation_id" field.
func InvocationIDLT(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldInvocationID, v))
}

// InvocationIDLTE applies the LTE predicate on the "invocation_id" field.
func InvocationIDLTE(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldInvocationID, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldStartedAt))
}

// EndedAtEQ applies the EQ predicate on the "ended_at" field.
func EndedAtEQ(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldEndedAt, v))
}

// EndedAtNEQ applies the NEQ predicate on the "ended_at" field.
func EndedAtNEQ(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldEndedAt, v))
}

// EndedAtIn applies the In predicate on the "ended_at" field.
func EndedAtIn(vs ...time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldEndedAt, vs...))
}

// EndedAtNotIn applies the NotIn predicate on the "ended_at" field.
func EndedAtNotIn(vs ...time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldEndedAt, vs...))
}

// EndedAtGT applies the GT predicate on the "ended_at" field.
func EndedAtGT(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldEndedAt, v))
}

// EndedAtGTE applies the GTE predicate on the "ended_at" field.
func EndedAtGTE(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldEndedAt, v))
}

// EndedAtLT applies the LT predicate on the "ended_at" field.
func EndedAtLT(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldEndedAt, v))
}

// EndedAtLTE applies the LTE predicate on the "ended_at" field.
func EndedAtLTE(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldEndedAt, v))
}

// EndedAtIsNil applies the IsNil predicate on the "ended_at" field.
func EndedAtIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldEndedAt))
}

// EndedAtNotNil applies the NotNil predicate on the "ended_at" field.
func EndedAtNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldEndedAt))
}

// ChangeNumberEQ applies the EQ predicate on the "change_number" field.
func ChangeNumberEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldChangeNumber, v))
}

// ChangeNumberNEQ applies the NEQ predicate on the "change_number" field.
func ChangeNumberNEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldChangeNumber, v))
}

// ChangeNumberIn applies the In predicate on the "change_number" field.
func ChangeNumberIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldChangeNumber, vs...))
}

// ChangeNumberNotIn applies the NotIn predicate on the "change_number" field.
func ChangeNumberNotIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldChangeNumber, vs...))
}

// ChangeNumberGT applies the GT predicate on the "change_number" field.
func ChangeNumberGT(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldChangeNumber, v))
}

// ChangeNumberGTE applies the GTE predicate on the "change_number" field.
func ChangeNumberGTE(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldChangeNumber, v))
}

// ChangeNumberLT applies the LT predicate on the "change_number" field.
func ChangeNumberLT(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldChangeNumber, v))
}

// ChangeNumberLTE applies the LTE predicate on the "change_number" field.
func ChangeNumberLTE(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldChangeNumber, v))
}

// ChangeNumberIsNil applies the IsNil predicate on the "change_number" field.
func ChangeNumberIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldChangeNumber))
}

// ChangeNumberNotNil applies the NotNil predicate on the "change_number" field.
func ChangeNumberNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldChangeNumber))
}

// PatchsetNumberEQ applies the EQ predicate on the "patchset_number" field.
func PatchsetNumberEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldPatchsetNumber, v))
}

// PatchsetNumberNEQ applies the NEQ predicate on the "patchset_number" field.
func PatchsetNumberNEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldPatchsetNumber, v))
}

// PatchsetNumberIn applies the In predicate on the "patchset_number" field.
func PatchsetNumberIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldPatchsetNumber, vs...))
}

// PatchsetNumberNotIn applies the NotIn predicate on the "patchset_number" field.
func PatchsetNumberNotIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldPatchsetNumber, vs...))
}

// PatchsetNumberGT applies the GT predicate on the "patchset_number" field.
func PatchsetNumberGT(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldPatchsetNumber, v))
}

// PatchsetNumberGTE applies the GTE predicate on the "patchset_number" field.
func PatchsetNumberGTE(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldPatchsetNumber, v))
}

// PatchsetNumberLT applies the LT predicate on the "patchset_number" field.
func PatchsetNumberLT(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldPatchsetNumber, v))
}

// PatchsetNumberLTE applies the LTE predicate on the "patchset_number" field.
func PatchsetNumberLTE(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldPatchsetNumber, v))
}

// PatchsetNumberIsNil applies the IsNil predicate on the "patchset_number" field.
func PatchsetNumberIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldPatchsetNumber))
}

// PatchsetNumberNotNil applies the NotNil predicate on the "patchset_number" field.
func PatchsetNumberNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldPatchsetNumber))
}

// BepCompletedEQ applies the EQ predicate on the "bep_completed" field.
func BepCompletedEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBepCompleted, v))
}

// BepCompletedNEQ applies the NEQ predicate on the "bep_completed" field.
func BepCompletedNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldBepCompleted, v))
}

// StepLabelEQ applies the EQ predicate on the "step_label" field.
func StepLabelEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldStepLabel, v))
}

// StepLabelNEQ applies the NEQ predicate on the "step_label" field.
func StepLabelNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldStepLabel, v))
}

// StepLabelIn applies the In predicate on the "step_label" field.
func StepLabelIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldStepLabel, vs...))
}

// StepLabelNotIn applies the NotIn predicate on the "step_label" field.
func StepLabelNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldStepLabel, vs...))
}

// StepLabelGT applies the GT predicate on the "step_label" field.
func StepLabelGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldStepLabel, v))
}

// StepLabelGTE applies the GTE predicate on the "step_label" field.
func StepLabelGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldStepLabel, v))
}

// StepLabelLT applies the LT predicate on the "step_label" field.
func StepLabelLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldStepLabel, v))
}

// StepLabelLTE applies the LTE predicate on the "step_label" field.
func StepLabelLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldStepLabel, v))
}

// StepLabelContains applies the Contains predicate on the "step_label" field.
func StepLabelContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldStepLabel, v))
}

// StepLabelHasPrefix applies the HasPrefix predicate on the "step_label" field.
func StepLabelHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldStepLabel, v))
}

// StepLabelHasSuffix applies the HasSuffix predicate on the "step_label" field.
func StepLabelHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldStepLabel, v))
}

// StepLabelIsNil applies the IsNil predicate on the "step_label" field.
func StepLabelIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldStepLabel))
}

// StepLabelNotNil applies the NotNil predicate on the "step_label" field.
func StepLabelNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldStepLabel))
}

// StepLabelEqualFold applies the EqualFold predicate on the "step_label" field.
func StepLabelEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldStepLabel, v))
}

// StepLabelContainsFold applies the ContainsFold predicate on the "step_label" field.
func StepLabelContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldStepLabel, v))
}

// UserEmailEQ applies the EQ predicate on the "user_email" field.
func UserEmailEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldUserEmail, v))
}

// UserEmailNEQ applies the NEQ predicate on the "user_email" field.
func UserEmailNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldUserEmail, v))
}

// UserEmailIn applies the In predicate on the "user_email" field.
func UserEmailIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldUserEmail, vs...))
}

// UserEmailNotIn applies the NotIn predicate on the "user_email" field.
func UserEmailNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldUserEmail, vs...))
}

// UserEmailGT applies the GT predicate on the "user_email" field.
func UserEmailGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldUserEmail, v))
}

// UserEmailGTE applies the GTE predicate on the "user_email" field.
func UserEmailGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldUserEmail, v))
}

// UserEmailLT applies the LT predicate on the "user_email" field.
func UserEmailLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldUserEmail, v))
}

// UserEmailLTE applies the LTE predicate on the "user_email" field.
func UserEmailLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldUserEmail, v))
}

// UserEmailContains applies the Contains predicate on the "user_email" field.
func UserEmailContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldUserEmail, v))
}

// UserEmailHasPrefix applies the HasPrefix predicate on the "user_email" field.
func UserEmailHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldUserEmail, v))
}

// UserEmailHasSuffix applies the HasSuffix predicate on the "user_email" field.
func UserEmailHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldUserEmail, v))
}

// UserEmailIsNil applies the IsNil predicate on the "user_email" field.
func UserEmailIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldUserEmail))
}

// UserEmailNotNil applies the NotNil predicate on the "user_email" field.
func UserEmailNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldUserEmail))
}

// UserEmailEqualFold applies the EqualFold predicate on the "user_email" field.
func UserEmailEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldUserEmail, v))
}

// UserEmailContainsFold applies the ContainsFold predicate on the "user_email" field.
func UserEmailContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldUserEmail, v))
}

// UserLdapEQ applies the EQ predicate on the "user_ldap" field.
func UserLdapEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldUserLdap, v))
}

// UserLdapNEQ applies the NEQ predicate on the "user_ldap" field.
func UserLdapNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldUserLdap, v))
}

// UserLdapIn applies the In predicate on the "user_ldap" field.
func UserLdapIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldUserLdap, vs...))
}

// UserLdapNotIn applies the NotIn predicate on the "user_ldap" field.
func UserLdapNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldUserLdap, vs...))
}

// UserLdapGT applies the GT predicate on the "user_ldap" field.
func UserLdapGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldUserLdap, v))
}

// UserLdapGTE applies the GTE predicate on the "user_ldap" field.
func UserLdapGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldUserLdap, v))
}

// UserLdapLT applies the LT predicate on the "user_ldap" field.
func UserLdapLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldUserLdap, v))
}

// UserLdapLTE applies the LTE predicate on the "user_ldap" field.
func UserLdapLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldUserLdap, v))
}

// UserLdapContains applies the Contains predicate on the "user_ldap" field.
func UserLdapContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldUserLdap, v))
}

// UserLdapHasPrefix applies the HasPrefix predicate on the "user_ldap" field.
func UserLdapHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldUserLdap, v))
}

// UserLdapHasSuffix applies the HasSuffix predicate on the "user_ldap" field.
func UserLdapHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldUserLdap, v))
}

// UserLdapIsNil applies the IsNil predicate on the "user_ldap" field.
func UserLdapIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldUserLdap))
}

// UserLdapNotNil applies the NotNil predicate on the "user_ldap" field.
func UserLdapNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldUserLdap))
}

// UserLdapEqualFold applies the EqualFold predicate on the "user_ldap" field.
func UserLdapEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldUserLdap, v))
}

// UserLdapContainsFold applies the ContainsFold predicate on the "user_ldap" field.
func UserLdapContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldUserLdap, v))
}

// BuildLogsEQ applies the EQ predicate on the "build_logs" field.
func BuildLogsEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBuildLogs, v))
}

// BuildLogsNEQ applies the NEQ predicate on the "build_logs" field.
func BuildLogsNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldBuildLogs, v))
}

// BuildLogsIn applies the In predicate on the "build_logs" field.
func BuildLogsIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldBuildLogs, vs...))
}

// BuildLogsNotIn applies the NotIn predicate on the "build_logs" field.
func BuildLogsNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldBuildLogs, vs...))
}

// BuildLogsGT applies the GT predicate on the "build_logs" field.
func BuildLogsGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldBuildLogs, v))
}

// BuildLogsGTE applies the GTE predicate on the "build_logs" field.
func BuildLogsGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldBuildLogs, v))
}

// BuildLogsLT applies the LT predicate on the "build_logs" field.
func BuildLogsLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldBuildLogs, v))
}

// BuildLogsLTE applies the LTE predicate on the "build_logs" field.
func BuildLogsLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldBuildLogs, v))
}

// BuildLogsContains applies the Contains predicate on the "build_logs" field.
func BuildLogsContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldBuildLogs, v))
}

// BuildLogsHasPrefix applies the HasPrefix predicate on the "build_logs" field.
func BuildLogsHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldBuildLogs, v))
}

// BuildLogsHasSuffix applies the HasSuffix predicate on the "build_logs" field.
func BuildLogsHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldBuildLogs, v))
}

// BuildLogsIsNil applies the IsNil predicate on the "build_logs" field.
func BuildLogsIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldBuildLogs))
}

// BuildLogsNotNil applies the NotNil predicate on the "build_logs" field.
func BuildLogsNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldBuildLogs))
}

// BuildLogsEqualFold applies the EqualFold predicate on the "build_logs" field.
func BuildLogsEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldBuildLogs, v))
}

// BuildLogsContainsFold applies the ContainsFold predicate on the "build_logs" field.
func BuildLogsContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldBuildLogs, v))
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCPU, v))
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldCPU, v))
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldCPU, vs...))
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldCPU, vs...))
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldCPU, v))
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldCPU, v))
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldCPU, v))
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldCPU, v))
}

// CPUContains applies the Contains predicate on the "cpu" field.
func CPUContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldCPU, v))
}

// CPUHasPrefix applies the HasPrefix predicate on the "cpu" field.
func CPUHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldCPU, v))
}

// CPUHasSuffix applies the HasSuffix predicate on the "cpu" field.
func CPUHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldCPU, v))
}

// CPUIsNil applies the IsNil predicate on the "cpu" field.
func CPUIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldCPU))
}

// CPUNotNil applies the NotNil predicate on the "cpu" field.
func CPUNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldCPU))
}

// CPUEqualFold applies the EqualFold predicate on the "cpu" field.
func CPUEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldCPU, v))
}

// CPUContainsFold applies the ContainsFold predicate on the "cpu" field.
func CPUContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldCPU, v))
}

// PlatformNameEQ applies the EQ predicate on the "platform_name" field.
func PlatformNameEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldPlatformName, v))
}

// PlatformNameNEQ applies the NEQ predicate on the "platform_name" field.
func PlatformNameNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldPlatformName, v))
}

// PlatformNameIn applies the In predicate on the "platform_name" field.
func PlatformNameIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldPlatformName, vs...))
}

// PlatformNameNotIn applies the NotIn predicate on the "platform_name" field.
func PlatformNameNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldPlatformName, vs...))
}

// PlatformNameGT applies the GT predicate on the "platform_name" field.
func PlatformNameGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldPlatformName, v))
}

// PlatformNameGTE applies the GTE predicate on the "platform_name" field.
func PlatformNameGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldPlatformName, v))
}

// PlatformNameLT applies the LT predicate on the "platform_name" field.
func PlatformNameLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldPlatformName, v))
}

// PlatformNameLTE applies the LTE predicate on the "platform_name" field.
func PlatformNameLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldPlatformName, v))
}

// PlatformNameContains applies the Contains predicate on the "platform_name" field.
func PlatformNameContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldPlatformName, v))
}

// PlatformNameHasPrefix applies the HasPrefix predicate on the "platform_name" field.
func PlatformNameHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldPlatformName, v))
}

// PlatformNameHasSuffix applies the HasSuffix predicate on the "platform_name" field.
func PlatformNameHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldPlatformName, v))
}

// PlatformNameIsNil applies the IsNil predicate on the "platform_name" field.
func PlatformNameIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldPlatformName))
}

// PlatformNameNotNil applies the NotNil predicate on the "platform_name" field.
func PlatformNameNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldPlatformName))
}

// PlatformNameEqualFold applies the EqualFold predicate on the "platform_name" field.
func PlatformNameEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldPlatformName, v))
}

// PlatformNameContainsFold applies the ContainsFold predicate on the "platform_name" field.
func PlatformNameContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldPlatformName, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameIsNil applies the IsNil predicate on the "hostname" field.
func HostnameIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldHostname))
}

// HostnameNotNil applies the NotNil predicate on the "hostname" field.
func HostnameNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldHostname))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldHostname, v))
}

// IsCiWorkerEQ applies the EQ predicate on the "is_ci_worker" field.
func IsCiWorkerEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldIsCiWorker, v))
}

// IsCiWorkerNEQ applies the NEQ predicate on the "is_ci_worker" field.
func IsCiWorkerNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldIsCiWorker, v))
}

// IsCiWorkerIsNil applies the IsNil predicate on the "is_ci_worker" field.
func IsCiWorkerIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldIsCiWorker))
}

// IsCiWorkerNotNil applies the NotNil predicate on the "is_ci_worker" field.
func IsCiWorkerNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldIsCiWorker))
}

// ConfigurationMnemonicEQ applies the EQ predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicNEQ applies the NEQ predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicIn applies the In predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldConfigurationMnemonic, vs...))
}

// ConfigurationMnemonicNotIn applies the NotIn predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldConfigurationMnemonic, vs...))
}

// ConfigurationMnemonicGT applies the GT predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicGTE applies the GTE predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicLT applies the LT predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicLTE applies the LTE predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicContains applies the Contains predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicHasPrefix applies the HasPrefix predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicHasSuffix applies the HasSuffix predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicIsNil applies the IsNil predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldConfigurationMnemonic))
}

// ConfigurationMnemonicNotNil applies the NotNil predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldConfigurationMnemonic))
}

// ConfigurationMnemonicEqualFold applies the EqualFold predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicContainsFold applies the ContainsFold predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldConfigurationMnemonic, v))
}

// NumFetchesEQ applies the EQ predicate on the "num_fetches" field.
func NumFetchesEQ(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldNumFetches, v))
}

// NumFetchesNEQ applies the NEQ predicate on the "num_fetches" field.
func NumFetchesNEQ(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldNumFetches, v))
}

// NumFetchesIn applies the In predicate on the "num_fetches" field.
func NumFetchesIn(vs ...int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldNumFetches, vs...))
}

// NumFetchesNotIn applies the NotIn predicate on the "num_fetches" field.
func NumFetchesNotIn(vs ...int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldNumFetches, vs...))
}

// NumFetchesGT applies the GT predicate on the "num_fetches" field.
func NumFetchesGT(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldNumFetches, v))
}

// NumFetchesGTE applies the GTE predicate on the "num_fetches" field.
func NumFetchesGTE(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldNumFetches, v))
}

// NumFetchesLT applies the LT predicate on the "num_fetches" field.
func NumFetchesLT(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldNumFetches, v))
}

// NumFetchesLTE applies the LTE predicate on the "num_fetches" field.
func NumFetchesLTE(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldNumFetches, v))
}

// NumFetchesIsNil applies the IsNil predicate on the "num_fetches" field.
func NumFetchesIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldNumFetches))
}

// NumFetchesNotNil applies the NotNil predicate on the "num_fetches" field.
func NumFetchesNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldNumFetches))
}

// ProfileNameEQ applies the EQ predicate on the "profile_name" field.
func ProfileNameEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProfileName, v))
}

// ProfileNameNEQ applies the NEQ predicate on the "profile_name" field.
func ProfileNameNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldProfileName, v))
}

// ProfileNameIn applies the In predicate on the "profile_name" field.
func ProfileNameIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldProfileName, vs...))
}

// ProfileNameNotIn applies the NotIn predicate on the "profile_name" field.
func ProfileNameNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldProfileName, vs...))
}

// ProfileNameGT applies the GT predicate on the "profile_name" field.
func ProfileNameGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldProfileName, v))
}

// ProfileNameGTE applies the GTE predicate on the "profile_name" field.
func ProfileNameGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldProfileName, v))
}

// ProfileNameLT applies the LT predicate on the "profile_name" field.
func ProfileNameLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldProfileName, v))
}

// ProfileNameLTE applies the LTE predicate on the "profile_name" field.
func ProfileNameLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldProfileName, v))
}

// ProfileNameContains applies the Contains predicate on the "profile_name" field.
func ProfileNameContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldProfileName, v))
}

// ProfileNameHasPrefix applies the HasPrefix predicate on the "profile_name" field.
func ProfileNameHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldProfileName, v))
}

// ProfileNameHasSuffix applies the HasSuffix predicate on the "profile_name" field.
func ProfileNameHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldProfileName, v))
}

// ProfileNameIsNil applies the IsNil predicate on the "profile_name" field.
func ProfileNameIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldProfileName))
}

// ProfileNameNotNil applies the NotNil predicate on the "profile_name" field.
func ProfileNameNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldProfileName))
}

// ProfileNameEqualFold applies the EqualFold predicate on the "profile_name" field.
func ProfileNameEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldProfileName, v))
}

// ProfileNameContainsFold applies the ContainsFold predicate on the "profile_name" field.
func ProfileNameContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldProfileName, v))
}

// InstanceNameEQ applies the EQ predicate on the "instance_name" field.
func InstanceNameEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldInstanceName, v))
}

// InstanceNameNEQ applies the NEQ predicate on the "instance_name" field.
func InstanceNameNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldInstanceName, v))
}

// InstanceNameIn applies the In predicate on the "instance_name" field.
func InstanceNameIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldInstanceName, vs...))
}

// InstanceNameNotIn applies the NotIn predicate on the "instance_name" field.
func InstanceNameNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldInstanceName, vs...))
}

// InstanceNameGT applies the GT predicate on the "instance_name" field.
func InstanceNameGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldInstanceName, v))
}

// InstanceNameGTE applies the GTE predicate on the "instance_name" field.
func InstanceNameGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldInstanceName, v))
}

// InstanceNameLT applies the LT predicate on the "instance_name" field.
func InstanceNameLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldInstanceName, v))
}

// InstanceNameLTE applies the LTE predicate on the "instance_name" field.
func InstanceNameLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldInstanceName, v))
}

// InstanceNameContains applies the Contains predicate on the "instance_name" field.
func InstanceNameContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldInstanceName, v))
}

// InstanceNameHasPrefix applies the HasPrefix predicate on the "instance_name" field.
func InstanceNameHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldInstanceName, v))
}

// InstanceNameHasSuffix applies the HasSuffix predicate on the "instance_name" field.
func InstanceNameHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldInstanceName, v))
}

// InstanceNameIsNil applies the IsNil predicate on the "instance_name" field.
func InstanceNameIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldInstanceName))
}

// InstanceNameNotNil applies the NotNil predicate on the "instance_name" field.
func InstanceNameNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldInstanceName))
}

// InstanceNameEqualFold applies the EqualFold predicate on the "instance_name" field.
func InstanceNameEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldInstanceName, v))
}

// InstanceNameContainsFold applies the ContainsFold predicate on the "instance_name" field.
func InstanceNameContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldInstanceName, v))
}

// BazelVersionEQ applies the EQ predicate on the "bazel_version" field.
func BazelVersionEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBazelVersion, v))
}

// BazelVersionNEQ applies the NEQ predicate on the "bazel_version" field.
func BazelVersionNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldBazelVersion, v))
}

// BazelVersionIn applies the In predicate on the "bazel_version" field.
func BazelVersionIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldBazelVersion, vs...))
}

// BazelVersionNotIn applies the NotIn predicate on the "bazel_version" field.
func BazelVersionNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldBazelVersion, vs...))
}

// BazelVersionGT applies the GT predicate on the "bazel_version" field.
func BazelVersionGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldBazelVersion, v))
}

// BazelVersionGTE applies the GTE predicate on the "bazel_version" field.
func BazelVersionGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldBazelVersion, v))
}

// BazelVersionLT applies the LT predicate on the "bazel_version" field.
func BazelVersionLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldBazelVersion, v))
}

// BazelVersionLTE applies the LTE predicate on the "bazel_version" field.
func BazelVersionLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldBazelVersion, v))
}

// BazelVersionContains applies the Contains predicate on the "bazel_version" field.
func BazelVersionContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldBazelVersion, v))
}

// BazelVersionHasPrefix applies the HasPrefix predicate on the "bazel_version" field.
func BazelVersionHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldBazelVersion, v))
}

// BazelVersionHasSuffix applies the HasSuffix predicate on the "bazel_version" field.
func BazelVersionHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldBazelVersion, v))
}

// BazelVersionIsNil applies the IsNil predicate on the "bazel_version" field.
func BazelVersionIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldBazelVersion))
}

// BazelVersionNotNil applies the NotNil predicate on the "bazel_version" field.
func BazelVersionNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldBazelVersion))
}

// BazelVersionEqualFold applies the EqualFold predicate on the "bazel_version" field.
func BazelVersionEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldBazelVersion, v))
}

// BazelVersionContainsFold applies the ContainsFold predicate on the "bazel_version" field.
func BazelVersionContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldBazelVersion, v))
}

// ExitCodeNameEQ applies the EQ predicate on the "exit_code_name" field.
func ExitCodeNameEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldExitCodeName, v))
}

// ExitCodeNameNEQ applies the NEQ predicate on the "exit_code_name" field.
func ExitCodeNameNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldExitCodeName, v))
}

// ExitCodeNameIn applies the In predicate on the "exit_code_name" field.
func ExitCodeNameIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldExitCodeName, vs...))
}

// ExitCodeNameNotIn applies the NotIn predicate on the "exit_code_name" field.
func ExitCodeNameNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldExitCodeName, vs...))
}

// ExitCodeNameGT applies the GT predicate on the "exit_code_name" field.
func ExitCodeNameGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldExitCodeName, v))
}

// ExitCodeNameGTE applies the GTE predicate on the "exit_code_name" field.
func ExitCodeNameGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldExitCodeName, v))
}

// ExitCodeNameLT applies the LT predicate on the "exit_code_name" field.
func ExitCodeNameLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldExitCodeName, v))
}

// ExitCodeNameLTE applies the LTE predicate on the "exit_code_name" field.
func ExitCodeNameLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldExitCodeName, v))
}

// ExitCodeNameContains applies the Contains predicate on the "exit_code_name" field.
func ExitCodeNameContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldExitCodeName, v))
}

// ExitCodeNameHasPrefix applies the HasPrefix predicate on the "exit_code_name" field.
func ExitCodeNameHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldExitCodeName, v))
}

// ExitCodeNameHasSuffix applies the HasSuffix predicate on the "exit_code_name" field.
func ExitCodeNameHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldExitCodeName, v))
}

// ExitCodeNameIsNil applies the IsNil predicate on the "exit_code_name" field.
func ExitCodeNameIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldExitCodeName))
}

// ExitCodeNameNotNil applies the NotNil predicate on the "exit_code_name" field.
func ExitCodeNameNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldExitCodeName))
}

// ExitCodeNameEqualFold applies the EqualFold predicate on the "exit_code_name" field.
func ExitCodeNameEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldExitCodeName, v))
}

// ExitCodeNameContainsFold applies the ContainsFold predicate on the "exit_code_name" field.
func ExitCodeNameContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldExitCodeName, v))
}

// ExitCodeCodeEQ applies the EQ predicate on the "exit_code_code" field.
func ExitCodeCodeEQ(v int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldExitCodeCode, v))
}

// ExitCodeCodeNEQ applies the NEQ predicate on the "exit_code_code" field.
func ExitCodeCodeNEQ(v int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldExitCodeCode, v))
}

// ExitCodeCodeIn applies the In predicate on the "exit_code_code" field.
func ExitCodeCodeIn(vs ...int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldExitCodeCode, vs...))
}

// ExitCodeCodeNotIn applies the NotIn predicate on the "exit_code_code" field.
func ExitCodeCodeNotIn(vs ...int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldExitCodeCode, vs...))
}

// ExitCodeCodeGT applies the GT predicate on the "exit_code_code" field.
func ExitCodeCodeGT(v int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldExitCodeCode, v))
}

// ExitCodeCodeGTE applies the GTE predicate on the "exit_code_code" field.
func ExitCodeCodeGTE(v int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldExitCodeCode, v))
}

// ExitCodeCodeLT applies the LT predicate on the "exit_code_code" field.
func ExitCodeCodeLT(v int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldExitCodeCode, v))
}

// ExitCodeCodeLTE applies the LTE predicate on the "exit_code_code" field.
func ExitCodeCodeLTE(v int32) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldExitCodeCode, v))
}

// ExitCodeCodeIsNil applies the IsNil predicate on the "exit_code_code" field.
func ExitCodeCodeIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldExitCodeCode))
}

// ExitCodeCodeNotNil applies the NotNil predicate on the "exit_code_code" field.
func ExitCodeCodeNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldExitCodeCode))
}

// CommandLineCommandEQ applies the EQ predicate on the "command_line_command" field.
func CommandLineCommandEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCommandLineCommand, v))
}

// CommandLineCommandNEQ applies the NEQ predicate on the "command_line_command" field.
func CommandLineCommandNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldCommandLineCommand, v))
}

// CommandLineCommandIn applies the In predicate on the "command_line_command" field.
func CommandLineCommandIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldCommandLineCommand, vs...))
}

// CommandLineCommandNotIn applies the NotIn predicate on the "command_line_command" field.
func CommandLineCommandNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldCommandLineCommand, vs...))
}

// CommandLineCommandGT applies the GT predicate on the "command_line_command" field.
func CommandLineCommandGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldCommandLineCommand, v))
}

// CommandLineCommandGTE applies the GTE predicate on the "command_line_command" field.
func CommandLineCommandGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldCommandLineCommand, v))
}

// CommandLineCommandLT applies the LT predicate on the "command_line_command" field.
func CommandLineCommandLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldCommandLineCommand, v))
}

// CommandLineCommandLTE applies the LTE predicate on the "command_line_command" field.
func CommandLineCommandLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldCommandLineCommand, v))
}

// CommandLineCommandContains applies the Contains predicate on the "command_line_command" field.
func CommandLineCommandContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldCommandLineCommand, v))
}

// CommandLineCommandHasPrefix applies the HasPrefix predicate on the "command_line_command" field.
func CommandLineCommandHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldCommandLineCommand, v))
}

// CommandLineCommandHasSuffix applies the HasSuffix predicate on the "command_line_command" field.
func CommandLineCommandHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldCommandLineCommand, v))
}

// CommandLineCommandIsNil applies the IsNil predicate on the "command_line_command" field.
func CommandLineCommandIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldCommandLineCommand))
}

// CommandLineCommandNotNil applies the NotNil predicate on the "command_line_command" field.
func CommandLineCommandNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldCommandLineCommand))
}

// CommandLineCommandEqualFold applies the EqualFold predicate on the "command_line_command" field.
func CommandLineCommandEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldCommandLineCommand, v))
}

// CommandLineCommandContainsFold applies the ContainsFold predicate on the "command_line_command" field.
func CommandLineCommandContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldCommandLineCommand, v))
}

// CommandLineExecutableEQ applies the EQ predicate on the "command_line_executable" field.
func CommandLineExecutableEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCommandLineExecutable, v))
}

// CommandLineExecutableNEQ applies the NEQ predicate on the "command_line_executable" field.
func CommandLineExecutableNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldCommandLineExecutable, v))
}

// CommandLineExecutableIn applies the In predicate on the "command_line_executable" field.
func CommandLineExecutableIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldCommandLineExecutable, vs...))
}

// CommandLineExecutableNotIn applies the NotIn predicate on the "command_line_executable" field.
func CommandLineExecutableNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldCommandLineExecutable, vs...))
}

// CommandLineExecutableGT applies the GT predicate on the "command_line_executable" field.
func CommandLineExecutableGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldCommandLineExecutable, v))
}

// CommandLineExecutableGTE applies the GTE predicate on the "command_line_executable" field.
func CommandLineExecutableGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldCommandLineExecutable, v))
}

// CommandLineExecutableLT applies the LT predicate on the "command_line_executable" field.
func CommandLineExecutableLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldCommandLineExecutable, v))
}

// CommandLineExecutableLTE applies the LTE predicate on the "command_line_executable" field.
func CommandLineExecutableLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldCommandLineExecutable, v))
}

// CommandLineExecutableContains applies the Contains predicate on the "command_line_executable" field.
func CommandLineExecutableContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldCommandLineExecutable, v))
}

// CommandLineExecutableHasPrefix applies the HasPrefix predicate on the "command_line_executable" field.
func CommandLineExecutableHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldCommandLineExecutable, v))
}

// CommandLineExecutableHasSuffix applies the HasSuffix predicate on the "command_line_executable" field.
func CommandLineExecutableHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldCommandLineExecutable, v))
}

// CommandLineExecutableIsNil applies the IsNil predicate on the "command_line_executable" field.
func CommandLineExecutableIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldCommandLineExecutable))
}

// CommandLineExecutableNotNil applies the NotNil predicate on the "command_line_executable" field.
func CommandLineExecutableNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldCommandLineExecutable))
}

// CommandLineExecutableEqualFold applies the EqualFold predicate on the "command_line_executable" field.
func CommandLineExecutableEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldCommandLineExecutable, v))
}

// CommandLineExecutableContainsFold applies the ContainsFold predicate on the "command_line_executable" field.
func CommandLineExecutableContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldCommandLineExecutable, v))
}

// CommandLineResidualEQ applies the EQ predicate on the "command_line_residual" field.
func CommandLineResidualEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCommandLineResidual, v))
}

// CommandLineResidualNEQ applies the NEQ predicate on the "command_line_residual" field.
func CommandLineResidualNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldCommandLineResidual, v))
}

// CommandLineResidualIn applies the In predicate on the "command_line_residual" field.
func CommandLineResidualIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldCommandLineResidual, vs...))
}

// CommandLineResidualNotIn applies the NotIn predicate on the "command_line_residual" field.
func CommandLineResidualNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldCommandLineResidual, vs...))
}

// CommandLineResidualGT applies the GT predicate on the "command_line_residual" field.
func CommandLineResidualGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldCommandLineResidual, v))
}

// CommandLineResidualGTE applies the GTE predicate on the "command_line_residual" field.
func CommandLineResidualGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldCommandLineResidual, v))
}

// CommandLineResidualLT applies the LT predicate on the "command_line_residual" field.
func CommandLineResidualLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldCommandLineResidual, v))
}

// CommandLineResidualLTE applies the LTE predicate on the "command_line_residual" field.
func CommandLineResidualLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldCommandLineResidual, v))
}

// CommandLineResidualContains applies the Contains predicate on the "command_line_residual" field.
func CommandLineResidualContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldCommandLineResidual, v))
}

// CommandLineResidualHasPrefix applies the HasPrefix predicate on the "command_line_residual" field.
func CommandLineResidualHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldCommandLineResidual, v))
}

// CommandLineResidualHasSuffix applies the HasSuffix predicate on the "command_line_residual" field.
func CommandLineResidualHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldCommandLineResidual, v))
}

// CommandLineResidualIsNil applies the IsNil predicate on the "command_line_residual" field.
func CommandLineResidualIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldCommandLineResidual))
}

// CommandLineResidualNotNil applies the NotNil predicate on the "command_line_residual" field.
func CommandLineResidualNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldCommandLineResidual))
}

// CommandLineResidualEqualFold applies the EqualFold predicate on the "command_line_residual" field.
func CommandLineResidualEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldCommandLineResidual, v))
}

// CommandLineResidualContainsFold applies the ContainsFold predicate on the "command_line_residual" field.
func CommandLineResidualContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldCommandLineResidual, v))
}

// CommandLineIsNil applies the IsNil predicate on the "command_line" field.
func CommandLineIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldCommandLine))
}

// CommandLineNotNil applies the NotNil predicate on the "command_line" field.
func CommandLineNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldCommandLine))
}

// ExplicitCommandLineIsNil applies the IsNil predicate on the "explicit_command_line" field.
func ExplicitCommandLineIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldExplicitCommandLine))
}

// ExplicitCommandLineNotNil applies the NotNil predicate on the "explicit_command_line" field.
func ExplicitCommandLineNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldExplicitCommandLine))
}

// StartupOptionsIsNil applies the IsNil predicate on the "startup_options" field.
func StartupOptionsIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldStartupOptions))
}

// StartupOptionsNotNil applies the NotNil predicate on the "startup_options" field.
func StartupOptionsNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldStartupOptions))
}

// ExplicitStartupOptionsIsNil applies the IsNil predicate on the "explicit_startup_options" field.
func ExplicitStartupOptionsIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldExplicitStartupOptions))
}

// ExplicitStartupOptionsNotNil applies the NotNil predicate on the "explicit_startup_options" field.
func ExplicitStartupOptionsNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldExplicitStartupOptions))
}

// ProcessedEventStartedEQ applies the EQ predicate on the "processed_event_started" field.
func ProcessedEventStartedEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventStarted, v))
}

// ProcessedEventStartedNEQ applies the NEQ predicate on the "processed_event_started" field.
func ProcessedEventStartedNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldProcessedEventStarted, v))
}

// ProcessedEventBuildMetadataEQ applies the EQ predicate on the "processed_event_build_metadata" field.
func ProcessedEventBuildMetadataEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventBuildMetadata, v))
}

// ProcessedEventBuildMetadataNEQ applies the NEQ predicate on the "processed_event_build_metadata" field.
func ProcessedEventBuildMetadataNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldProcessedEventBuildMetadata, v))
}

// ProcessedEventOptionsParsedEQ applies the EQ predicate on the "processed_event_options_parsed" field.
func ProcessedEventOptionsParsedEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventOptionsParsed, v))
}

// ProcessedEventOptionsParsedNEQ applies the NEQ predicate on the "processed_event_options_parsed" field.
func ProcessedEventOptionsParsedNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldProcessedEventOptionsParsed, v))
}

// ProcessedEventBuildFinishedEQ applies the EQ predicate on the "processed_event_build_finished" field.
func ProcessedEventBuildFinishedEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventBuildFinished, v))
}

// ProcessedEventBuildFinishedNEQ applies the NEQ predicate on the "processed_event_build_finished" field.
func ProcessedEventBuildFinishedNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldProcessedEventBuildFinished, v))
}

// ProcessedEventStructuredCommandLineEQ applies the EQ predicate on the "processed_event_structured_command_line" field.
func ProcessedEventStructuredCommandLineEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventStructuredCommandLine, v))
}

// ProcessedEventStructuredCommandLineNEQ applies the NEQ predicate on the "processed_event_structured_command_line" field.
func ProcessedEventStructuredCommandLineNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldProcessedEventStructuredCommandLine, v))
}

// ProcessedEventWorkspaceStatusEQ applies the EQ predicate on the "processed_event_workspace_status" field.
func ProcessedEventWorkspaceStatusEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProcessedEventWorkspaceStatus, v))
}

// ProcessedEventWorkspaceStatusNEQ applies the NEQ predicate on the "processed_event_workspace_status" field.
func ProcessedEventWorkspaceStatusNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldProcessedEventWorkspaceStatus, v))
}

// HasBuild applies the HasEdge predicate on the "build" edge.
func HasBuild() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BuildTable, BuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildWith applies the HasEdge predicate on the "build" edge with a given conditions (other predicates).
func HasBuildWith(preds ...predicate.Build) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newBuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventMetadata applies the HasEdge predicate on the "event_metadata" edge.
func HasEventMetadata() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventMetadataTable, EventMetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventMetadataWith applies the HasEdge predicate on the "event_metadata" edge with a given conditions (other predicates).
func HasEventMetadataWith(preds ...predicate.EventMetadata) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newEventMetadataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnectionMetadata applies the HasEdge predicate on the "connection_metadata" edge.
func HasConnectionMetadata() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConnectionMetadataTable, ConnectionMetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionMetadataWith applies the HasEdge predicate on the "connection_metadata" edge with a given conditions (other predicates).
func HasConnectionMetadataWith(preds ...predicate.ConnectionMetadata) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newConnectionMetadataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProblems applies the HasEdge predicate on the "problems" edge.
func HasProblems() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProblemsTable, ProblemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemsWith applies the HasEdge predicate on the "problems" edge with a given conditions (other predicates).
func HasProblemsWith(preds ...predicate.BazelInvocationProblem) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newProblemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMetrics applies the HasEdge predicate on the "metrics" edge.
func HasMetrics() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MetricsTable, MetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetricsWith applies the HasEdge predicate on the "metrics" edge with a given conditions (other predicates).
func HasMetricsWith(preds ...predicate.Metrics) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncompleteBuildLogs applies the HasEdge predicate on the "incomplete_build_logs" edge.
func HasIncompleteBuildLogs() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IncompleteBuildLogsTable, IncompleteBuildLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncompleteBuildLogsWith applies the HasEdge predicate on the "incomplete_build_logs" edge with a given conditions (other predicates).
func HasIncompleteBuildLogsWith(preds ...predicate.IncompleteBuildLog) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newIncompleteBuildLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvocationFiles applies the HasEdge predicate on the "invocation_files" edge.
func HasInvocationFiles() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InvocationFilesTable, InvocationFilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvocationFilesWith applies the HasEdge predicate on the "invocation_files" edge with a given conditions (other predicates).
func HasInvocationFilesWith(preds ...predicate.InvocationFiles) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newInvocationFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestCollection applies the HasEdge predicate on the "test_collection" edge.
func HasTestCollection() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestCollectionTable, TestCollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestCollectionWith applies the HasEdge predicate on the "test_collection" edge with a given conditions (other predicates).
func HasTestCollectionWith(preds ...predicate.TestCollection) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newTestCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargets applies the HasEdge predicate on the "targets" edge.
func HasTargets() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TargetsTable, TargetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetsWith applies the HasEdge predicate on the "targets" edge with a given conditions (other predicates).
func HasTargetsWith(preds ...predicate.Target) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newTargetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSourceControl applies the HasEdge predicate on the "source_control" edge.
func HasSourceControl() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SourceControlTable, SourceControlColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceControlWith applies the HasEdge predicate on the "source_control" edge with a given conditions (other predicates).
func HasSourceControlWith(preds ...predicate.SourceControl) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newSourceControlStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BazelInvocation) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BazelInvocation) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BazelInvocation) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.NotPredicates(p))
}
