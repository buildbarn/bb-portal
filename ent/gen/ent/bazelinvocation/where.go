// Code generated by ent, DO NOT EDIT.

package bazelinvocation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldID, id))
}

// InvocationID applies equality check predicate on the "invocation_id" field. It's identical to InvocationIDEQ.
func InvocationID(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldInvocationID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldStartedAt, v))
}

// EndedAt applies equality check predicate on the "ended_at" field. It's identical to EndedAtEQ.
func EndedAt(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldEndedAt, v))
}

// ChangeNumber applies equality check predicate on the "change_number" field. It's identical to ChangeNumberEQ.
func ChangeNumber(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldChangeNumber, v))
}

// PatchsetNumber applies equality check predicate on the "patchset_number" field. It's identical to PatchsetNumberEQ.
func PatchsetNumber(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldPatchsetNumber, v))
}

// BepCompleted applies equality check predicate on the "bep_completed" field. It's identical to BepCompletedEQ.
func BepCompleted(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBepCompleted, v))
}

// StepLabel applies equality check predicate on the "step_label" field. It's identical to StepLabelEQ.
func StepLabel(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldStepLabel, v))
}

// UserEmail applies equality check predicate on the "user_email" field. It's identical to UserEmailEQ.
func UserEmail(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldUserEmail, v))
}

// UserLdap applies equality check predicate on the "user_ldap" field. It's identical to UserLdapEQ.
func UserLdap(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldUserLdap, v))
}

// BuildLogs applies equality check predicate on the "build_logs" field. It's identical to BuildLogsEQ.
func BuildLogs(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBuildLogs, v))
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCPU, v))
}

// PlatformName applies equality check predicate on the "platform_name" field. It's identical to PlatformNameEQ.
func PlatformName(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldPlatformName, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldHostname, v))
}

// IsCiWorker applies equality check predicate on the "is_ci_worker" field. It's identical to IsCiWorkerEQ.
func IsCiWorker(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldIsCiWorker, v))
}

// ConfigurationMnemonic applies equality check predicate on the "configuration_mnemonic" field. It's identical to ConfigurationMnemonicEQ.
func ConfigurationMnemonic(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldConfigurationMnemonic, v))
}

// NumFetches applies equality check predicate on the "num_fetches" field. It's identical to NumFetchesEQ.
func NumFetches(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldNumFetches, v))
}

// ProfileName applies equality check predicate on the "profile_name" field. It's identical to ProfileNameEQ.
func ProfileName(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProfileName, v))
}

// EventFileID applies equality check predicate on the "event_file_id" field. It's identical to EventFileIDEQ.
func EventFileID(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldEventFileID, v))
}

// BuildID applies equality check predicate on the "build_id" field. It's identical to BuildIDEQ.
func BuildID(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBuildID, v))
}

// InvocationIDEQ applies the EQ predicate on the "invocation_id" field.
func InvocationIDEQ(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldInvocationID, v))
}

// InvocationIDNEQ applies the NEQ predicate on the "invocation_id" field.
func InvocationIDNEQ(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldInvocationID, v))
}

// InvocationIDIn applies the In predicate on the "invocation_id" field.
func InvocationIDIn(vs ...uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldInvocationID, vs...))
}

// InvocationIDNotIn applies the NotIn predicate on the "invocation_id" field.
func InvocationIDNotIn(vs ...uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldInvocationID, vs...))
}

// InvocationIDGT applies the GT predicate on the "invocation_id" field.
func InvocationIDGT(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldInvocationID, v))
}

// InvocationIDGTE applies the GTE predicate on the "invocation_id" field.
func InvocationIDGTE(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldInvocationID, v))
}

// InvocationIDLT applies the LT predicate on the "invocation_id" field.
func InvocationIDLT(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldInvocationID, v))
}

// InvocationIDLTE applies the LTE predicate on the "invocation_id" field.
func InvocationIDLTE(v uuid.UUID) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldInvocationID, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldStartedAt, v))
}

// EndedAtEQ applies the EQ predicate on the "ended_at" field.
func EndedAtEQ(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldEndedAt, v))
}

// EndedAtNEQ applies the NEQ predicate on the "ended_at" field.
func EndedAtNEQ(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldEndedAt, v))
}

// EndedAtIn applies the In predicate on the "ended_at" field.
func EndedAtIn(vs ...time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldEndedAt, vs...))
}

// EndedAtNotIn applies the NotIn predicate on the "ended_at" field.
func EndedAtNotIn(vs ...time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldEndedAt, vs...))
}

// EndedAtGT applies the GT predicate on the "ended_at" field.
func EndedAtGT(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldEndedAt, v))
}

// EndedAtGTE applies the GTE predicate on the "ended_at" field.
func EndedAtGTE(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldEndedAt, v))
}

// EndedAtLT applies the LT predicate on the "ended_at" field.
func EndedAtLT(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldEndedAt, v))
}

// EndedAtLTE applies the LTE predicate on the "ended_at" field.
func EndedAtLTE(v time.Time) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldEndedAt, v))
}

// EndedAtIsNil applies the IsNil predicate on the "ended_at" field.
func EndedAtIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldEndedAt))
}

// EndedAtNotNil applies the NotNil predicate on the "ended_at" field.
func EndedAtNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldEndedAt))
}

// ChangeNumberEQ applies the EQ predicate on the "change_number" field.
func ChangeNumberEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldChangeNumber, v))
}

// ChangeNumberNEQ applies the NEQ predicate on the "change_number" field.
func ChangeNumberNEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldChangeNumber, v))
}

// ChangeNumberIn applies the In predicate on the "change_number" field.
func ChangeNumberIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldChangeNumber, vs...))
}

// ChangeNumberNotIn applies the NotIn predicate on the "change_number" field.
func ChangeNumberNotIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldChangeNumber, vs...))
}

// ChangeNumberGT applies the GT predicate on the "change_number" field.
func ChangeNumberGT(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldChangeNumber, v))
}

// ChangeNumberGTE applies the GTE predicate on the "change_number" field.
func ChangeNumberGTE(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldChangeNumber, v))
}

// ChangeNumberLT applies the LT predicate on the "change_number" field.
func ChangeNumberLT(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldChangeNumber, v))
}

// ChangeNumberLTE applies the LTE predicate on the "change_number" field.
func ChangeNumberLTE(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldChangeNumber, v))
}

// ChangeNumberIsNil applies the IsNil predicate on the "change_number" field.
func ChangeNumberIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldChangeNumber))
}

// ChangeNumberNotNil applies the NotNil predicate on the "change_number" field.
func ChangeNumberNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldChangeNumber))
}

// PatchsetNumberEQ applies the EQ predicate on the "patchset_number" field.
func PatchsetNumberEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldPatchsetNumber, v))
}

// PatchsetNumberNEQ applies the NEQ predicate on the "patchset_number" field.
func PatchsetNumberNEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldPatchsetNumber, v))
}

// PatchsetNumberIn applies the In predicate on the "patchset_number" field.
func PatchsetNumberIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldPatchsetNumber, vs...))
}

// PatchsetNumberNotIn applies the NotIn predicate on the "patchset_number" field.
func PatchsetNumberNotIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldPatchsetNumber, vs...))
}

// PatchsetNumberGT applies the GT predicate on the "patchset_number" field.
func PatchsetNumberGT(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldPatchsetNumber, v))
}

// PatchsetNumberGTE applies the GTE predicate on the "patchset_number" field.
func PatchsetNumberGTE(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldPatchsetNumber, v))
}

// PatchsetNumberLT applies the LT predicate on the "patchset_number" field.
func PatchsetNumberLT(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldPatchsetNumber, v))
}

// PatchsetNumberLTE applies the LTE predicate on the "patchset_number" field.
func PatchsetNumberLTE(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldPatchsetNumber, v))
}

// PatchsetNumberIsNil applies the IsNil predicate on the "patchset_number" field.
func PatchsetNumberIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldPatchsetNumber))
}

// PatchsetNumberNotNil applies the NotNil predicate on the "patchset_number" field.
func PatchsetNumberNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldPatchsetNumber))
}

// BepCompletedEQ applies the EQ predicate on the "bep_completed" field.
func BepCompletedEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBepCompleted, v))
}

// BepCompletedNEQ applies the NEQ predicate on the "bep_completed" field.
func BepCompletedNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldBepCompleted, v))
}

// BepCompletedIsNil applies the IsNil predicate on the "bep_completed" field.
func BepCompletedIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldBepCompleted))
}

// BepCompletedNotNil applies the NotNil predicate on the "bep_completed" field.
func BepCompletedNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldBepCompleted))
}

// StepLabelEQ applies the EQ predicate on the "step_label" field.
func StepLabelEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldStepLabel, v))
}

// StepLabelNEQ applies the NEQ predicate on the "step_label" field.
func StepLabelNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldStepLabel, v))
}

// StepLabelIn applies the In predicate on the "step_label" field.
func StepLabelIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldStepLabel, vs...))
}

// StepLabelNotIn applies the NotIn predicate on the "step_label" field.
func StepLabelNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldStepLabel, vs...))
}

// StepLabelGT applies the GT predicate on the "step_label" field.
func StepLabelGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldStepLabel, v))
}

// StepLabelGTE applies the GTE predicate on the "step_label" field.
func StepLabelGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldStepLabel, v))
}

// StepLabelLT applies the LT predicate on the "step_label" field.
func StepLabelLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldStepLabel, v))
}

// StepLabelLTE applies the LTE predicate on the "step_label" field.
func StepLabelLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldStepLabel, v))
}

// StepLabelContains applies the Contains predicate on the "step_label" field.
func StepLabelContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldStepLabel, v))
}

// StepLabelHasPrefix applies the HasPrefix predicate on the "step_label" field.
func StepLabelHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldStepLabel, v))
}

// StepLabelHasSuffix applies the HasSuffix predicate on the "step_label" field.
func StepLabelHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldStepLabel, v))
}

// StepLabelEqualFold applies the EqualFold predicate on the "step_label" field.
func StepLabelEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldStepLabel, v))
}

// StepLabelContainsFold applies the ContainsFold predicate on the "step_label" field.
func StepLabelContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldStepLabel, v))
}

// UserEmailEQ applies the EQ predicate on the "user_email" field.
func UserEmailEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldUserEmail, v))
}

// UserEmailNEQ applies the NEQ predicate on the "user_email" field.
func UserEmailNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldUserEmail, v))
}

// UserEmailIn applies the In predicate on the "user_email" field.
func UserEmailIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldUserEmail, vs...))
}

// UserEmailNotIn applies the NotIn predicate on the "user_email" field.
func UserEmailNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldUserEmail, vs...))
}

// UserEmailGT applies the GT predicate on the "user_email" field.
func UserEmailGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldUserEmail, v))
}

// UserEmailGTE applies the GTE predicate on the "user_email" field.
func UserEmailGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldUserEmail, v))
}

// UserEmailLT applies the LT predicate on the "user_email" field.
func UserEmailLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldUserEmail, v))
}

// UserEmailLTE applies the LTE predicate on the "user_email" field.
func UserEmailLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldUserEmail, v))
}

// UserEmailContains applies the Contains predicate on the "user_email" field.
func UserEmailContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldUserEmail, v))
}

// UserEmailHasPrefix applies the HasPrefix predicate on the "user_email" field.
func UserEmailHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldUserEmail, v))
}

// UserEmailHasSuffix applies the HasSuffix predicate on the "user_email" field.
func UserEmailHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldUserEmail, v))
}

// UserEmailIsNil applies the IsNil predicate on the "user_email" field.
func UserEmailIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldUserEmail))
}

// UserEmailNotNil applies the NotNil predicate on the "user_email" field.
func UserEmailNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldUserEmail))
}

// UserEmailEqualFold applies the EqualFold predicate on the "user_email" field.
func UserEmailEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldUserEmail, v))
}

// UserEmailContainsFold applies the ContainsFold predicate on the "user_email" field.
func UserEmailContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldUserEmail, v))
}

// UserLdapEQ applies the EQ predicate on the "user_ldap" field.
func UserLdapEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldUserLdap, v))
}

// UserLdapNEQ applies the NEQ predicate on the "user_ldap" field.
func UserLdapNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldUserLdap, v))
}

// UserLdapIn applies the In predicate on the "user_ldap" field.
func UserLdapIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldUserLdap, vs...))
}

// UserLdapNotIn applies the NotIn predicate on the "user_ldap" field.
func UserLdapNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldUserLdap, vs...))
}

// UserLdapGT applies the GT predicate on the "user_ldap" field.
func UserLdapGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldUserLdap, v))
}

// UserLdapGTE applies the GTE predicate on the "user_ldap" field.
func UserLdapGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldUserLdap, v))
}

// UserLdapLT applies the LT predicate on the "user_ldap" field.
func UserLdapLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldUserLdap, v))
}

// UserLdapLTE applies the LTE predicate on the "user_ldap" field.
func UserLdapLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldUserLdap, v))
}

// UserLdapContains applies the Contains predicate on the "user_ldap" field.
func UserLdapContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldUserLdap, v))
}

// UserLdapHasPrefix applies the HasPrefix predicate on the "user_ldap" field.
func UserLdapHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldUserLdap, v))
}

// UserLdapHasSuffix applies the HasSuffix predicate on the "user_ldap" field.
func UserLdapHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldUserLdap, v))
}

// UserLdapIsNil applies the IsNil predicate on the "user_ldap" field.
func UserLdapIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldUserLdap))
}

// UserLdapNotNil applies the NotNil predicate on the "user_ldap" field.
func UserLdapNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldUserLdap))
}

// UserLdapEqualFold applies the EqualFold predicate on the "user_ldap" field.
func UserLdapEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldUserLdap, v))
}

// UserLdapContainsFold applies the ContainsFold predicate on the "user_ldap" field.
func UserLdapContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldUserLdap, v))
}

// BuildLogsEQ applies the EQ predicate on the "build_logs" field.
func BuildLogsEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBuildLogs, v))
}

// BuildLogsNEQ applies the NEQ predicate on the "build_logs" field.
func BuildLogsNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldBuildLogs, v))
}

// BuildLogsIn applies the In predicate on the "build_logs" field.
func BuildLogsIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldBuildLogs, vs...))
}

// BuildLogsNotIn applies the NotIn predicate on the "build_logs" field.
func BuildLogsNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldBuildLogs, vs...))
}

// BuildLogsGT applies the GT predicate on the "build_logs" field.
func BuildLogsGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldBuildLogs, v))
}

// BuildLogsGTE applies the GTE predicate on the "build_logs" field.
func BuildLogsGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldBuildLogs, v))
}

// BuildLogsLT applies the LT predicate on the "build_logs" field.
func BuildLogsLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldBuildLogs, v))
}

// BuildLogsLTE applies the LTE predicate on the "build_logs" field.
func BuildLogsLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldBuildLogs, v))
}

// BuildLogsContains applies the Contains predicate on the "build_logs" field.
func BuildLogsContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldBuildLogs, v))
}

// BuildLogsHasPrefix applies the HasPrefix predicate on the "build_logs" field.
func BuildLogsHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldBuildLogs, v))
}

// BuildLogsHasSuffix applies the HasSuffix predicate on the "build_logs" field.
func BuildLogsHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldBuildLogs, v))
}

// BuildLogsIsNil applies the IsNil predicate on the "build_logs" field.
func BuildLogsIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldBuildLogs))
}

// BuildLogsNotNil applies the NotNil predicate on the "build_logs" field.
func BuildLogsNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldBuildLogs))
}

// BuildLogsEqualFold applies the EqualFold predicate on the "build_logs" field.
func BuildLogsEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldBuildLogs, v))
}

// BuildLogsContainsFold applies the ContainsFold predicate on the "build_logs" field.
func BuildLogsContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldBuildLogs, v))
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldCPU, v))
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldCPU, v))
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldCPU, vs...))
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldCPU, vs...))
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldCPU, v))
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldCPU, v))
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldCPU, v))
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldCPU, v))
}

// CPUContains applies the Contains predicate on the "cpu" field.
func CPUContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldCPU, v))
}

// CPUHasPrefix applies the HasPrefix predicate on the "cpu" field.
func CPUHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldCPU, v))
}

// CPUHasSuffix applies the HasSuffix predicate on the "cpu" field.
func CPUHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldCPU, v))
}

// CPUIsNil applies the IsNil predicate on the "cpu" field.
func CPUIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldCPU))
}

// CPUNotNil applies the NotNil predicate on the "cpu" field.
func CPUNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldCPU))
}

// CPUEqualFold applies the EqualFold predicate on the "cpu" field.
func CPUEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldCPU, v))
}

// CPUContainsFold applies the ContainsFold predicate on the "cpu" field.
func CPUContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldCPU, v))
}

// PlatformNameEQ applies the EQ predicate on the "platform_name" field.
func PlatformNameEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldPlatformName, v))
}

// PlatformNameNEQ applies the NEQ predicate on the "platform_name" field.
func PlatformNameNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldPlatformName, v))
}

// PlatformNameIn applies the In predicate on the "platform_name" field.
func PlatformNameIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldPlatformName, vs...))
}

// PlatformNameNotIn applies the NotIn predicate on the "platform_name" field.
func PlatformNameNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldPlatformName, vs...))
}

// PlatformNameGT applies the GT predicate on the "platform_name" field.
func PlatformNameGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldPlatformName, v))
}

// PlatformNameGTE applies the GTE predicate on the "platform_name" field.
func PlatformNameGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldPlatformName, v))
}

// PlatformNameLT applies the LT predicate on the "platform_name" field.
func PlatformNameLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldPlatformName, v))
}

// PlatformNameLTE applies the LTE predicate on the "platform_name" field.
func PlatformNameLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldPlatformName, v))
}

// PlatformNameContains applies the Contains predicate on the "platform_name" field.
func PlatformNameContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldPlatformName, v))
}

// PlatformNameHasPrefix applies the HasPrefix predicate on the "platform_name" field.
func PlatformNameHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldPlatformName, v))
}

// PlatformNameHasSuffix applies the HasSuffix predicate on the "platform_name" field.
func PlatformNameHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldPlatformName, v))
}

// PlatformNameIsNil applies the IsNil predicate on the "platform_name" field.
func PlatformNameIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldPlatformName))
}

// PlatformNameNotNil applies the NotNil predicate on the "platform_name" field.
func PlatformNameNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldPlatformName))
}

// PlatformNameEqualFold applies the EqualFold predicate on the "platform_name" field.
func PlatformNameEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldPlatformName, v))
}

// PlatformNameContainsFold applies the ContainsFold predicate on the "platform_name" field.
func PlatformNameContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldPlatformName, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameIsNil applies the IsNil predicate on the "hostname" field.
func HostnameIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldHostname))
}

// HostnameNotNil applies the NotNil predicate on the "hostname" field.
func HostnameNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldHostname))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldHostname, v))
}

// IsCiWorkerEQ applies the EQ predicate on the "is_ci_worker" field.
func IsCiWorkerEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldIsCiWorker, v))
}

// IsCiWorkerNEQ applies the NEQ predicate on the "is_ci_worker" field.
func IsCiWorkerNEQ(v bool) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldIsCiWorker, v))
}

// IsCiWorkerIsNil applies the IsNil predicate on the "is_ci_worker" field.
func IsCiWorkerIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldIsCiWorker))
}

// IsCiWorkerNotNil applies the NotNil predicate on the "is_ci_worker" field.
func IsCiWorkerNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldIsCiWorker))
}

// ConfigurationMnemonicEQ applies the EQ predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicNEQ applies the NEQ predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicIn applies the In predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldConfigurationMnemonic, vs...))
}

// ConfigurationMnemonicNotIn applies the NotIn predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldConfigurationMnemonic, vs...))
}

// ConfigurationMnemonicGT applies the GT predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicGTE applies the GTE predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicLT applies the LT predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicLTE applies the LTE predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicContains applies the Contains predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicHasPrefix applies the HasPrefix predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicHasSuffix applies the HasSuffix predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicIsNil applies the IsNil predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldConfigurationMnemonic))
}

// ConfigurationMnemonicNotNil applies the NotNil predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldConfigurationMnemonic))
}

// ConfigurationMnemonicEqualFold applies the EqualFold predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldConfigurationMnemonic, v))
}

// ConfigurationMnemonicContainsFold applies the ContainsFold predicate on the "configuration_mnemonic" field.
func ConfigurationMnemonicContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldConfigurationMnemonic, v))
}

// NumFetchesEQ applies the EQ predicate on the "num_fetches" field.
func NumFetchesEQ(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldNumFetches, v))
}

// NumFetchesNEQ applies the NEQ predicate on the "num_fetches" field.
func NumFetchesNEQ(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldNumFetches, v))
}

// NumFetchesIn applies the In predicate on the "num_fetches" field.
func NumFetchesIn(vs ...int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldNumFetches, vs...))
}

// NumFetchesNotIn applies the NotIn predicate on the "num_fetches" field.
func NumFetchesNotIn(vs ...int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldNumFetches, vs...))
}

// NumFetchesGT applies the GT predicate on the "num_fetches" field.
func NumFetchesGT(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldNumFetches, v))
}

// NumFetchesGTE applies the GTE predicate on the "num_fetches" field.
func NumFetchesGTE(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldNumFetches, v))
}

// NumFetchesLT applies the LT predicate on the "num_fetches" field.
func NumFetchesLT(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldNumFetches, v))
}

// NumFetchesLTE applies the LTE predicate on the "num_fetches" field.
func NumFetchesLTE(v int64) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldNumFetches, v))
}

// NumFetchesIsNil applies the IsNil predicate on the "num_fetches" field.
func NumFetchesIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldNumFetches))
}

// NumFetchesNotNil applies the NotNil predicate on the "num_fetches" field.
func NumFetchesNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldNumFetches))
}

// ProfileNameEQ applies the EQ predicate on the "profile_name" field.
func ProfileNameEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldProfileName, v))
}

// ProfileNameNEQ applies the NEQ predicate on the "profile_name" field.
func ProfileNameNEQ(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldProfileName, v))
}

// ProfileNameIn applies the In predicate on the "profile_name" field.
func ProfileNameIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldProfileName, vs...))
}

// ProfileNameNotIn applies the NotIn predicate on the "profile_name" field.
func ProfileNameNotIn(vs ...string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldProfileName, vs...))
}

// ProfileNameGT applies the GT predicate on the "profile_name" field.
func ProfileNameGT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGT(FieldProfileName, v))
}

// ProfileNameGTE applies the GTE predicate on the "profile_name" field.
func ProfileNameGTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldGTE(FieldProfileName, v))
}

// ProfileNameLT applies the LT predicate on the "profile_name" field.
func ProfileNameLT(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLT(FieldProfileName, v))
}

// ProfileNameLTE applies the LTE predicate on the "profile_name" field.
func ProfileNameLTE(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldLTE(FieldProfileName, v))
}

// ProfileNameContains applies the Contains predicate on the "profile_name" field.
func ProfileNameContains(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContains(FieldProfileName, v))
}

// ProfileNameHasPrefix applies the HasPrefix predicate on the "profile_name" field.
func ProfileNameHasPrefix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasPrefix(FieldProfileName, v))
}

// ProfileNameHasSuffix applies the HasSuffix predicate on the "profile_name" field.
func ProfileNameHasSuffix(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldHasSuffix(FieldProfileName, v))
}

// ProfileNameEqualFold applies the EqualFold predicate on the "profile_name" field.
func ProfileNameEqualFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEqualFold(FieldProfileName, v))
}

// ProfileNameContainsFold applies the ContainsFold predicate on the "profile_name" field.
func ProfileNameContainsFold(v string) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldContainsFold(FieldProfileName, v))
}

// EventFileIDEQ applies the EQ predicate on the "event_file_id" field.
func EventFileIDEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldEventFileID, v))
}

// EventFileIDNEQ applies the NEQ predicate on the "event_file_id" field.
func EventFileIDNEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldEventFileID, v))
}

// EventFileIDIn applies the In predicate on the "event_file_id" field.
func EventFileIDIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldEventFileID, vs...))
}

// EventFileIDNotIn applies the NotIn predicate on the "event_file_id" field.
func EventFileIDNotIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldEventFileID, vs...))
}

// EventFileIDIsNil applies the IsNil predicate on the "event_file_id" field.
func EventFileIDIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldEventFileID))
}

// EventFileIDNotNil applies the NotNil predicate on the "event_file_id" field.
func EventFileIDNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldEventFileID))
}

// BuildIDEQ applies the EQ predicate on the "build_id" field.
func BuildIDEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldEQ(FieldBuildID, v))
}

// BuildIDNEQ applies the NEQ predicate on the "build_id" field.
func BuildIDNEQ(v int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNEQ(FieldBuildID, v))
}

// BuildIDIn applies the In predicate on the "build_id" field.
func BuildIDIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIn(FieldBuildID, vs...))
}

// BuildIDNotIn applies the NotIn predicate on the "build_id" field.
func BuildIDNotIn(vs ...int) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotIn(FieldBuildID, vs...))
}

// BuildIDIsNil applies the IsNil predicate on the "build_id" field.
func BuildIDIsNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldIsNull(FieldBuildID))
}

// BuildIDNotNil applies the NotNil predicate on the "build_id" field.
func BuildIDNotNil() predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.FieldNotNull(FieldBuildID))
}

// HasEventFile applies the HasEdge predicate on the "event_file" edge.
func HasEventFile() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EventFileTable, EventFileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventFileWith applies the HasEdge predicate on the "event_file" edge with a given conditions (other predicates).
func HasEventFileWith(preds ...predicate.EventFile) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newEventFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuild applies the HasEdge predicate on the "build" edge.
func HasBuild() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BuildTable, BuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildWith applies the HasEdge predicate on the "build" edge with a given conditions (other predicates).
func HasBuildWith(preds ...predicate.Build) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newBuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProblems applies the HasEdge predicate on the "problems" edge.
func HasProblems() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProblemsTable, ProblemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemsWith applies the HasEdge predicate on the "problems" edge with a given conditions (other predicates).
func HasProblemsWith(preds ...predicate.BazelInvocationProblem) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newProblemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMetrics applies the HasEdge predicate on the "metrics" edge.
func HasMetrics() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MetricsTable, MetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetricsWith applies the HasEdge predicate on the "metrics" edge with a given conditions (other predicates).
func HasMetricsWith(preds ...predicate.Metrics) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestCollection applies the HasEdge predicate on the "test_collection" edge.
func HasTestCollection() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestCollectionTable, TestCollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestCollectionWith applies the HasEdge predicate on the "test_collection" edge with a given conditions (other predicates).
func HasTestCollectionWith(preds ...predicate.TestCollection) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newTestCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargets applies the HasEdge predicate on the "targets" edge.
func HasTargets() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TargetsTable, TargetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetsWith applies the HasEdge predicate on the "targets" edge with a given conditions (other predicates).
func HasTargetsWith(preds ...predicate.TargetPair) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newTargetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSourceControl applies the HasEdge predicate on the "source_control" edge.
func HasSourceControl() predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SourceControlTable, SourceControlColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceControlWith applies the HasEdge predicate on the "source_control" edge with a given conditions (other predicates).
func HasSourceControlWith(preds ...predicate.SourceControl) predicate.BazelInvocation {
	return predicate.BazelInvocation(func(s *sql.Selector) {
		step := newSourceControlStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BazelInvocation) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BazelInvocation) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BazelInvocation) predicate.BazelInvocation {
	return predicate.BazelInvocation(sql.NotPredicates(p))
}
