// Code generated by ent, DO NOT EDIT.

package networkmetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldLTE(FieldID, id))
}

// MetricsID applies equality check predicate on the "metrics_id" field. It's identical to MetricsIDEQ.
func MetricsID(v int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldEQ(FieldMetricsID, v))
}

// MetricsIDEQ applies the EQ predicate on the "metrics_id" field.
func MetricsIDEQ(v int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldEQ(FieldMetricsID, v))
}

// MetricsIDNEQ applies the NEQ predicate on the "metrics_id" field.
func MetricsIDNEQ(v int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldNEQ(FieldMetricsID, v))
}

// MetricsIDIn applies the In predicate on the "metrics_id" field.
func MetricsIDIn(vs ...int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldIn(FieldMetricsID, vs...))
}

// MetricsIDNotIn applies the NotIn predicate on the "metrics_id" field.
func MetricsIDNotIn(vs ...int) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldNotIn(FieldMetricsID, vs...))
}

// MetricsIDIsNil applies the IsNil predicate on the "metrics_id" field.
func MetricsIDIsNil() predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldIsNull(FieldMetricsID))
}

// MetricsIDNotNil applies the NotNil predicate on the "metrics_id" field.
func MetricsIDNotNil() predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.FieldNotNull(FieldMetricsID))
}

// HasMetrics applies the HasEdge predicate on the "metrics" edge.
func HasMetrics() predicate.NetworkMetrics {
	return predicate.NetworkMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MetricsTable, MetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetricsWith applies the HasEdge predicate on the "metrics" edge with a given conditions (other predicates).
func HasMetricsWith(preds ...predicate.Metrics) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(func(s *sql.Selector) {
		step := newMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSystemNetworkStats applies the HasEdge predicate on the "system_network_stats" edge.
func HasSystemNetworkStats() predicate.NetworkMetrics {
	return predicate.NetworkMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SystemNetworkStatsTable, SystemNetworkStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSystemNetworkStatsWith applies the HasEdge predicate on the "system_network_stats" edge with a given conditions (other predicates).
func HasSystemNetworkStatsWith(preds ...predicate.SystemNetworkStats) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(func(s *sql.Selector) {
		step := newSystemNetworkStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NetworkMetrics) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NetworkMetrics) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NetworkMetrics) predicate.NetworkMetrics {
	return predicate.NetworkMetrics(sql.NotPredicates(p))
}
