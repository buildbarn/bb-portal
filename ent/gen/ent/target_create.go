// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/target"
)

// TargetCreate is the builder for creating a Target entity.
type TargetCreate struct {
	config
	mutation *TargetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (tc *TargetCreate) SetLabel(s string) *TargetCreate {
	tc.mutation.SetLabel(s)
	return tc
}

// SetTag sets the "tag" field.
func (tc *TargetCreate) SetTag(s []string) *TargetCreate {
	tc.mutation.SetTag(s)
	return tc
}

// SetTargetKind sets the "target_kind" field.
func (tc *TargetCreate) SetTargetKind(s string) *TargetCreate {
	tc.mutation.SetTargetKind(s)
	return tc
}

// SetNillableTargetKind sets the "target_kind" field if the given value is not nil.
func (tc *TargetCreate) SetNillableTargetKind(s *string) *TargetCreate {
	if s != nil {
		tc.SetTargetKind(*s)
	}
	return tc
}

// SetTestSize sets the "test_size" field.
func (tc *TargetCreate) SetTestSize(ts target.TestSize) *TargetCreate {
	tc.mutation.SetTestSize(ts)
	return tc
}

// SetNillableTestSize sets the "test_size" field if the given value is not nil.
func (tc *TargetCreate) SetNillableTestSize(ts *target.TestSize) *TargetCreate {
	if ts != nil {
		tc.SetTestSize(*ts)
	}
	return tc
}

// SetSuccess sets the "success" field.
func (tc *TargetCreate) SetSuccess(b bool) *TargetCreate {
	tc.mutation.SetSuccess(b)
	return tc
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (tc *TargetCreate) SetNillableSuccess(b *bool) *TargetCreate {
	if b != nil {
		tc.SetSuccess(*b)
	}
	return tc
}

// SetTestTimeout sets the "test_timeout" field.
func (tc *TargetCreate) SetTestTimeout(i int64) *TargetCreate {
	tc.mutation.SetTestTimeout(i)
	return tc
}

// SetNillableTestTimeout sets the "test_timeout" field if the given value is not nil.
func (tc *TargetCreate) SetNillableTestTimeout(i *int64) *TargetCreate {
	if i != nil {
		tc.SetTestTimeout(*i)
	}
	return tc
}

// SetStartTimeInMs sets the "start_time_in_ms" field.
func (tc *TargetCreate) SetStartTimeInMs(i int64) *TargetCreate {
	tc.mutation.SetStartTimeInMs(i)
	return tc
}

// SetNillableStartTimeInMs sets the "start_time_in_ms" field if the given value is not nil.
func (tc *TargetCreate) SetNillableStartTimeInMs(i *int64) *TargetCreate {
	if i != nil {
		tc.SetStartTimeInMs(*i)
	}
	return tc
}

// SetEndTimeInMs sets the "end_time_in_ms" field.
func (tc *TargetCreate) SetEndTimeInMs(i int64) *TargetCreate {
	tc.mutation.SetEndTimeInMs(i)
	return tc
}

// SetNillableEndTimeInMs sets the "end_time_in_ms" field if the given value is not nil.
func (tc *TargetCreate) SetNillableEndTimeInMs(i *int64) *TargetCreate {
	if i != nil {
		tc.SetEndTimeInMs(*i)
	}
	return tc
}

// SetDurationInMs sets the "duration_in_ms" field.
func (tc *TargetCreate) SetDurationInMs(i int64) *TargetCreate {
	tc.mutation.SetDurationInMs(i)
	return tc
}

// SetNillableDurationInMs sets the "duration_in_ms" field if the given value is not nil.
func (tc *TargetCreate) SetNillableDurationInMs(i *int64) *TargetCreate {
	if i != nil {
		tc.SetDurationInMs(*i)
	}
	return tc
}

// SetAbortReason sets the "abort_reason" field.
func (tc *TargetCreate) SetAbortReason(tr target.AbortReason) *TargetCreate {
	tc.mutation.SetAbortReason(tr)
	return tc
}

// SetNillableAbortReason sets the "abort_reason" field if the given value is not nil.
func (tc *TargetCreate) SetNillableAbortReason(tr *target.AbortReason) *TargetCreate {
	if tr != nil {
		tc.SetAbortReason(*tr)
	}
	return tc
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (tc *TargetCreate) SetBazelInvocationID(id int) *TargetCreate {
	tc.mutation.SetBazelInvocationID(id)
	return tc
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (tc *TargetCreate) SetNillableBazelInvocationID(id *int) *TargetCreate {
	if id != nil {
		tc = tc.SetBazelInvocationID(*id)
	}
	return tc
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (tc *TargetCreate) SetBazelInvocation(b *BazelInvocation) *TargetCreate {
	return tc.SetBazelInvocationID(b.ID)
}

// Mutation returns the TargetMutation object of the builder.
func (tc *TargetCreate) Mutation() *TargetMutation {
	return tc.mutation
}

// Save creates the Target in the database.
func (tc *TargetCreate) Save(ctx context.Context) (*Target, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TargetCreate) SaveX(ctx context.Context) *Target {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TargetCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TargetCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TargetCreate) defaults() {
	if _, ok := tc.mutation.Success(); !ok {
		v := target.DefaultSuccess
		tc.mutation.SetSuccess(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TargetCreate) check() error {
	if _, ok := tc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "Target.label"`)}
	}
	if v, ok := tc.mutation.TestSize(); ok {
		if err := target.TestSizeValidator(v); err != nil {
			return &ValidationError{Name: "test_size", err: fmt.Errorf(`ent: validator failed for field "Target.test_size": %w`, err)}
		}
	}
	if v, ok := tc.mutation.AbortReason(); ok {
		if err := target.AbortReasonValidator(v); err != nil {
			return &ValidationError{Name: "abort_reason", err: fmt.Errorf(`ent: validator failed for field "Target.abort_reason": %w`, err)}
		}
	}
	return nil
}

func (tc *TargetCreate) sqlSave(ctx context.Context) (*Target, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TargetCreate) createSpec() (*Target, *sqlgraph.CreateSpec) {
	var (
		_node = &Target{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(target.Table, sqlgraph.NewFieldSpec(target.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Label(); ok {
		_spec.SetField(target.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := tc.mutation.Tag(); ok {
		_spec.SetField(target.FieldTag, field.TypeJSON, value)
		_node.Tag = value
	}
	if value, ok := tc.mutation.TargetKind(); ok {
		_spec.SetField(target.FieldTargetKind, field.TypeString, value)
		_node.TargetKind = value
	}
	if value, ok := tc.mutation.TestSize(); ok {
		_spec.SetField(target.FieldTestSize, field.TypeEnum, value)
		_node.TestSize = value
	}
	if value, ok := tc.mutation.Success(); ok {
		_spec.SetField(target.FieldSuccess, field.TypeBool, value)
		_node.Success = value
	}
	if value, ok := tc.mutation.TestTimeout(); ok {
		_spec.SetField(target.FieldTestTimeout, field.TypeInt64, value)
		_node.TestTimeout = value
	}
	if value, ok := tc.mutation.StartTimeInMs(); ok {
		_spec.SetField(target.FieldStartTimeInMs, field.TypeInt64, value)
		_node.StartTimeInMs = value
	}
	if value, ok := tc.mutation.EndTimeInMs(); ok {
		_spec.SetField(target.FieldEndTimeInMs, field.TypeInt64, value)
		_node.EndTimeInMs = value
	}
	if value, ok := tc.mutation.DurationInMs(); ok {
		_spec.SetField(target.FieldDurationInMs, field.TypeInt64, value)
		_node.DurationInMs = value
	}
	if value, ok := tc.mutation.AbortReason(); ok {
		_spec.SetField(target.FieldAbortReason, field.TypeEnum, value)
		_node.AbortReason = value
	}
	if nodes := tc.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   target.BazelInvocationTable,
			Columns: []string{target.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bazel_invocation_targets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Target.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TargetUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (tc *TargetCreate) OnConflict(opts ...sql.ConflictOption) *TargetUpsertOne {
	tc.conflict = opts
	return &TargetUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Target.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TargetCreate) OnConflictColumns(columns ...string) *TargetUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TargetUpsertOne{
		create: tc,
	}
}

type (
	// TargetUpsertOne is the builder for "upsert"-ing
	//  one Target node.
	TargetUpsertOne struct {
		create *TargetCreate
	}

	// TargetUpsert is the "OnConflict" setter.
	TargetUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *TargetUpsert) SetLabel(v string) *TargetUpsert {
	u.Set(target.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *TargetUpsert) UpdateLabel() *TargetUpsert {
	u.SetExcluded(target.FieldLabel)
	return u
}

// SetTag sets the "tag" field.
func (u *TargetUpsert) SetTag(v []string) *TargetUpsert {
	u.Set(target.FieldTag, v)
	return u
}

// UpdateTag sets the "tag" field to the value that was provided on create.
func (u *TargetUpsert) UpdateTag() *TargetUpsert {
	u.SetExcluded(target.FieldTag)
	return u
}

// ClearTag clears the value of the "tag" field.
func (u *TargetUpsert) ClearTag() *TargetUpsert {
	u.SetNull(target.FieldTag)
	return u
}

// SetTargetKind sets the "target_kind" field.
func (u *TargetUpsert) SetTargetKind(v string) *TargetUpsert {
	u.Set(target.FieldTargetKind, v)
	return u
}

// UpdateTargetKind sets the "target_kind" field to the value that was provided on create.
func (u *TargetUpsert) UpdateTargetKind() *TargetUpsert {
	u.SetExcluded(target.FieldTargetKind)
	return u
}

// ClearTargetKind clears the value of the "target_kind" field.
func (u *TargetUpsert) ClearTargetKind() *TargetUpsert {
	u.SetNull(target.FieldTargetKind)
	return u
}

// SetTestSize sets the "test_size" field.
func (u *TargetUpsert) SetTestSize(v target.TestSize) *TargetUpsert {
	u.Set(target.FieldTestSize, v)
	return u
}

// UpdateTestSize sets the "test_size" field to the value that was provided on create.
func (u *TargetUpsert) UpdateTestSize() *TargetUpsert {
	u.SetExcluded(target.FieldTestSize)
	return u
}

// ClearTestSize clears the value of the "test_size" field.
func (u *TargetUpsert) ClearTestSize() *TargetUpsert {
	u.SetNull(target.FieldTestSize)
	return u
}

// SetSuccess sets the "success" field.
func (u *TargetUpsert) SetSuccess(v bool) *TargetUpsert {
	u.Set(target.FieldSuccess, v)
	return u
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *TargetUpsert) UpdateSuccess() *TargetUpsert {
	u.SetExcluded(target.FieldSuccess)
	return u
}

// ClearSuccess clears the value of the "success" field.
func (u *TargetUpsert) ClearSuccess() *TargetUpsert {
	u.SetNull(target.FieldSuccess)
	return u
}

// SetTestTimeout sets the "test_timeout" field.
func (u *TargetUpsert) SetTestTimeout(v int64) *TargetUpsert {
	u.Set(target.FieldTestTimeout, v)
	return u
}

// UpdateTestTimeout sets the "test_timeout" field to the value that was provided on create.
func (u *TargetUpsert) UpdateTestTimeout() *TargetUpsert {
	u.SetExcluded(target.FieldTestTimeout)
	return u
}

// AddTestTimeout adds v to the "test_timeout" field.
func (u *TargetUpsert) AddTestTimeout(v int64) *TargetUpsert {
	u.Add(target.FieldTestTimeout, v)
	return u
}

// ClearTestTimeout clears the value of the "test_timeout" field.
func (u *TargetUpsert) ClearTestTimeout() *TargetUpsert {
	u.SetNull(target.FieldTestTimeout)
	return u
}

// SetStartTimeInMs sets the "start_time_in_ms" field.
func (u *TargetUpsert) SetStartTimeInMs(v int64) *TargetUpsert {
	u.Set(target.FieldStartTimeInMs, v)
	return u
}

// UpdateStartTimeInMs sets the "start_time_in_ms" field to the value that was provided on create.
func (u *TargetUpsert) UpdateStartTimeInMs() *TargetUpsert {
	u.SetExcluded(target.FieldStartTimeInMs)
	return u
}

// AddStartTimeInMs adds v to the "start_time_in_ms" field.
func (u *TargetUpsert) AddStartTimeInMs(v int64) *TargetUpsert {
	u.Add(target.FieldStartTimeInMs, v)
	return u
}

// ClearStartTimeInMs clears the value of the "start_time_in_ms" field.
func (u *TargetUpsert) ClearStartTimeInMs() *TargetUpsert {
	u.SetNull(target.FieldStartTimeInMs)
	return u
}

// SetEndTimeInMs sets the "end_time_in_ms" field.
func (u *TargetUpsert) SetEndTimeInMs(v int64) *TargetUpsert {
	u.Set(target.FieldEndTimeInMs, v)
	return u
}

// UpdateEndTimeInMs sets the "end_time_in_ms" field to the value that was provided on create.
func (u *TargetUpsert) UpdateEndTimeInMs() *TargetUpsert {
	u.SetExcluded(target.FieldEndTimeInMs)
	return u
}

// AddEndTimeInMs adds v to the "end_time_in_ms" field.
func (u *TargetUpsert) AddEndTimeInMs(v int64) *TargetUpsert {
	u.Add(target.FieldEndTimeInMs, v)
	return u
}

// ClearEndTimeInMs clears the value of the "end_time_in_ms" field.
func (u *TargetUpsert) ClearEndTimeInMs() *TargetUpsert {
	u.SetNull(target.FieldEndTimeInMs)
	return u
}

// SetDurationInMs sets the "duration_in_ms" field.
func (u *TargetUpsert) SetDurationInMs(v int64) *TargetUpsert {
	u.Set(target.FieldDurationInMs, v)
	return u
}

// UpdateDurationInMs sets the "duration_in_ms" field to the value that was provided on create.
func (u *TargetUpsert) UpdateDurationInMs() *TargetUpsert {
	u.SetExcluded(target.FieldDurationInMs)
	return u
}

// AddDurationInMs adds v to the "duration_in_ms" field.
func (u *TargetUpsert) AddDurationInMs(v int64) *TargetUpsert {
	u.Add(target.FieldDurationInMs, v)
	return u
}

// ClearDurationInMs clears the value of the "duration_in_ms" field.
func (u *TargetUpsert) ClearDurationInMs() *TargetUpsert {
	u.SetNull(target.FieldDurationInMs)
	return u
}

// SetAbortReason sets the "abort_reason" field.
func (u *TargetUpsert) SetAbortReason(v target.AbortReason) *TargetUpsert {
	u.Set(target.FieldAbortReason, v)
	return u
}

// UpdateAbortReason sets the "abort_reason" field to the value that was provided on create.
func (u *TargetUpsert) UpdateAbortReason() *TargetUpsert {
	u.SetExcluded(target.FieldAbortReason)
	return u
}

// ClearAbortReason clears the value of the "abort_reason" field.
func (u *TargetUpsert) ClearAbortReason() *TargetUpsert {
	u.SetNull(target.FieldAbortReason)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Target.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TargetUpsertOne) UpdateNewValues() *TargetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Target.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TargetUpsertOne) Ignore() *TargetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TargetUpsertOne) DoNothing() *TargetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TargetCreate.OnConflict
// documentation for more info.
func (u *TargetUpsertOne) Update(set func(*TargetUpsert)) *TargetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TargetUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *TargetUpsertOne) SetLabel(v string) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateLabel() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateLabel()
	})
}

// SetTag sets the "tag" field.
func (u *TargetUpsertOne) SetTag(v []string) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetTag(v)
	})
}

// UpdateTag sets the "tag" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateTag() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateTag()
	})
}

// ClearTag clears the value of the "tag" field.
func (u *TargetUpsertOne) ClearTag() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearTag()
	})
}

// SetTargetKind sets the "target_kind" field.
func (u *TargetUpsertOne) SetTargetKind(v string) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetTargetKind(v)
	})
}

// UpdateTargetKind sets the "target_kind" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateTargetKind() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateTargetKind()
	})
}

// ClearTargetKind clears the value of the "target_kind" field.
func (u *TargetUpsertOne) ClearTargetKind() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearTargetKind()
	})
}

// SetTestSize sets the "test_size" field.
func (u *TargetUpsertOne) SetTestSize(v target.TestSize) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetTestSize(v)
	})
}

// UpdateTestSize sets the "test_size" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateTestSize() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateTestSize()
	})
}

// ClearTestSize clears the value of the "test_size" field.
func (u *TargetUpsertOne) ClearTestSize() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearTestSize()
	})
}

// SetSuccess sets the "success" field.
func (u *TargetUpsertOne) SetSuccess(v bool) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateSuccess() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateSuccess()
	})
}

// ClearSuccess clears the value of the "success" field.
func (u *TargetUpsertOne) ClearSuccess() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearSuccess()
	})
}

// SetTestTimeout sets the "test_timeout" field.
func (u *TargetUpsertOne) SetTestTimeout(v int64) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetTestTimeout(v)
	})
}

// AddTestTimeout adds v to the "test_timeout" field.
func (u *TargetUpsertOne) AddTestTimeout(v int64) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.AddTestTimeout(v)
	})
}

// UpdateTestTimeout sets the "test_timeout" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateTestTimeout() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateTestTimeout()
	})
}

// ClearTestTimeout clears the value of the "test_timeout" field.
func (u *TargetUpsertOne) ClearTestTimeout() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearTestTimeout()
	})
}

// SetStartTimeInMs sets the "start_time_in_ms" field.
func (u *TargetUpsertOne) SetStartTimeInMs(v int64) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetStartTimeInMs(v)
	})
}

// AddStartTimeInMs adds v to the "start_time_in_ms" field.
func (u *TargetUpsertOne) AddStartTimeInMs(v int64) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.AddStartTimeInMs(v)
	})
}

// UpdateStartTimeInMs sets the "start_time_in_ms" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateStartTimeInMs() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateStartTimeInMs()
	})
}

// ClearStartTimeInMs clears the value of the "start_time_in_ms" field.
func (u *TargetUpsertOne) ClearStartTimeInMs() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearStartTimeInMs()
	})
}

// SetEndTimeInMs sets the "end_time_in_ms" field.
func (u *TargetUpsertOne) SetEndTimeInMs(v int64) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetEndTimeInMs(v)
	})
}

// AddEndTimeInMs adds v to the "end_time_in_ms" field.
func (u *TargetUpsertOne) AddEndTimeInMs(v int64) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.AddEndTimeInMs(v)
	})
}

// UpdateEndTimeInMs sets the "end_time_in_ms" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateEndTimeInMs() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateEndTimeInMs()
	})
}

// ClearEndTimeInMs clears the value of the "end_time_in_ms" field.
func (u *TargetUpsertOne) ClearEndTimeInMs() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearEndTimeInMs()
	})
}

// SetDurationInMs sets the "duration_in_ms" field.
func (u *TargetUpsertOne) SetDurationInMs(v int64) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetDurationInMs(v)
	})
}

// AddDurationInMs adds v to the "duration_in_ms" field.
func (u *TargetUpsertOne) AddDurationInMs(v int64) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.AddDurationInMs(v)
	})
}

// UpdateDurationInMs sets the "duration_in_ms" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateDurationInMs() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateDurationInMs()
	})
}

// ClearDurationInMs clears the value of the "duration_in_ms" field.
func (u *TargetUpsertOne) ClearDurationInMs() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearDurationInMs()
	})
}

// SetAbortReason sets the "abort_reason" field.
func (u *TargetUpsertOne) SetAbortReason(v target.AbortReason) *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.SetAbortReason(v)
	})
}

// UpdateAbortReason sets the "abort_reason" field to the value that was provided on create.
func (u *TargetUpsertOne) UpdateAbortReason() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateAbortReason()
	})
}

// ClearAbortReason clears the value of the "abort_reason" field.
func (u *TargetUpsertOne) ClearAbortReason() *TargetUpsertOne {
	return u.Update(func(s *TargetUpsert) {
		s.ClearAbortReason()
	})
}

// Exec executes the query.
func (u *TargetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TargetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TargetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TargetUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TargetUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TargetCreateBulk is the builder for creating many Target entities in bulk.
type TargetCreateBulk struct {
	config
	err      error
	builders []*TargetCreate
	conflict []sql.ConflictOption
}

// Save creates the Target entities in the database.
func (tcb *TargetCreateBulk) Save(ctx context.Context) ([]*Target, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Target, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TargetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TargetCreateBulk) SaveX(ctx context.Context) []*Target {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TargetCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TargetCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Target.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TargetUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (tcb *TargetCreateBulk) OnConflict(opts ...sql.ConflictOption) *TargetUpsertBulk {
	tcb.conflict = opts
	return &TargetUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Target.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TargetCreateBulk) OnConflictColumns(columns ...string) *TargetUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TargetUpsertBulk{
		create: tcb,
	}
}

// TargetUpsertBulk is the builder for "upsert"-ing
// a bulk of Target nodes.
type TargetUpsertBulk struct {
	create *TargetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Target.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TargetUpsertBulk) UpdateNewValues() *TargetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Target.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TargetUpsertBulk) Ignore() *TargetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TargetUpsertBulk) DoNothing() *TargetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TargetCreateBulk.OnConflict
// documentation for more info.
func (u *TargetUpsertBulk) Update(set func(*TargetUpsert)) *TargetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TargetUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *TargetUpsertBulk) SetLabel(v string) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateLabel() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateLabel()
	})
}

// SetTag sets the "tag" field.
func (u *TargetUpsertBulk) SetTag(v []string) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetTag(v)
	})
}

// UpdateTag sets the "tag" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateTag() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateTag()
	})
}

// ClearTag clears the value of the "tag" field.
func (u *TargetUpsertBulk) ClearTag() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearTag()
	})
}

// SetTargetKind sets the "target_kind" field.
func (u *TargetUpsertBulk) SetTargetKind(v string) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetTargetKind(v)
	})
}

// UpdateTargetKind sets the "target_kind" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateTargetKind() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateTargetKind()
	})
}

// ClearTargetKind clears the value of the "target_kind" field.
func (u *TargetUpsertBulk) ClearTargetKind() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearTargetKind()
	})
}

// SetTestSize sets the "test_size" field.
func (u *TargetUpsertBulk) SetTestSize(v target.TestSize) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetTestSize(v)
	})
}

// UpdateTestSize sets the "test_size" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateTestSize() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateTestSize()
	})
}

// ClearTestSize clears the value of the "test_size" field.
func (u *TargetUpsertBulk) ClearTestSize() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearTestSize()
	})
}

// SetSuccess sets the "success" field.
func (u *TargetUpsertBulk) SetSuccess(v bool) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateSuccess() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateSuccess()
	})
}

// ClearSuccess clears the value of the "success" field.
func (u *TargetUpsertBulk) ClearSuccess() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearSuccess()
	})
}

// SetTestTimeout sets the "test_timeout" field.
func (u *TargetUpsertBulk) SetTestTimeout(v int64) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetTestTimeout(v)
	})
}

// AddTestTimeout adds v to the "test_timeout" field.
func (u *TargetUpsertBulk) AddTestTimeout(v int64) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.AddTestTimeout(v)
	})
}

// UpdateTestTimeout sets the "test_timeout" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateTestTimeout() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateTestTimeout()
	})
}

// ClearTestTimeout clears the value of the "test_timeout" field.
func (u *TargetUpsertBulk) ClearTestTimeout() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearTestTimeout()
	})
}

// SetStartTimeInMs sets the "start_time_in_ms" field.
func (u *TargetUpsertBulk) SetStartTimeInMs(v int64) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetStartTimeInMs(v)
	})
}

// AddStartTimeInMs adds v to the "start_time_in_ms" field.
func (u *TargetUpsertBulk) AddStartTimeInMs(v int64) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.AddStartTimeInMs(v)
	})
}

// UpdateStartTimeInMs sets the "start_time_in_ms" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateStartTimeInMs() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateStartTimeInMs()
	})
}

// ClearStartTimeInMs clears the value of the "start_time_in_ms" field.
func (u *TargetUpsertBulk) ClearStartTimeInMs() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearStartTimeInMs()
	})
}

// SetEndTimeInMs sets the "end_time_in_ms" field.
func (u *TargetUpsertBulk) SetEndTimeInMs(v int64) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetEndTimeInMs(v)
	})
}

// AddEndTimeInMs adds v to the "end_time_in_ms" field.
func (u *TargetUpsertBulk) AddEndTimeInMs(v int64) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.AddEndTimeInMs(v)
	})
}

// UpdateEndTimeInMs sets the "end_time_in_ms" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateEndTimeInMs() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateEndTimeInMs()
	})
}

// ClearEndTimeInMs clears the value of the "end_time_in_ms" field.
func (u *TargetUpsertBulk) ClearEndTimeInMs() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearEndTimeInMs()
	})
}

// SetDurationInMs sets the "duration_in_ms" field.
func (u *TargetUpsertBulk) SetDurationInMs(v int64) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetDurationInMs(v)
	})
}

// AddDurationInMs adds v to the "duration_in_ms" field.
func (u *TargetUpsertBulk) AddDurationInMs(v int64) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.AddDurationInMs(v)
	})
}

// UpdateDurationInMs sets the "duration_in_ms" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateDurationInMs() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateDurationInMs()
	})
}

// ClearDurationInMs clears the value of the "duration_in_ms" field.
func (u *TargetUpsertBulk) ClearDurationInMs() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearDurationInMs()
	})
}

// SetAbortReason sets the "abort_reason" field.
func (u *TargetUpsertBulk) SetAbortReason(v target.AbortReason) *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.SetAbortReason(v)
	})
}

// UpdateAbortReason sets the "abort_reason" field to the value that was provided on create.
func (u *TargetUpsertBulk) UpdateAbortReason() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.UpdateAbortReason()
	})
}

// ClearAbortReason clears the value of the "abort_reason" field.
func (u *TargetUpsertBulk) ClearAbortReason() *TargetUpsertBulk {
	return u.Update(func(s *TargetUpsert) {
		s.ClearAbortReason()
	})
}

// Exec executes the query.
func (u *TargetUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TargetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TargetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TargetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
