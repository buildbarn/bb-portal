// Code generated by ent, DO NOT EDIT.

package actionsummary

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLTE(FieldID, id))
}

// ActionsCreated applies equality check predicate on the "actions_created" field. It's identical to ActionsCreatedEQ.
func ActionsCreated(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldActionsCreated, v))
}

// ActionsCreatedNotIncludingAspects applies equality check predicate on the "actions_created_not_including_aspects" field. It's identical to ActionsCreatedNotIncludingAspectsEQ.
func ActionsCreatedNotIncludingAspects(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldActionsCreatedNotIncludingAspects, v))
}

// ActionsExecuted applies equality check predicate on the "actions_executed" field. It's identical to ActionsExecutedEQ.
func ActionsExecuted(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldActionsExecuted, v))
}

// RemoteCacheHits applies equality check predicate on the "remote_cache_hits" field. It's identical to RemoteCacheHitsEQ.
func RemoteCacheHits(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldRemoteCacheHits, v))
}

// MetricsID applies equality check predicate on the "metrics_id" field. It's identical to MetricsIDEQ.
func MetricsID(v int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldMetricsID, v))
}

// ActionsCreatedEQ applies the EQ predicate on the "actions_created" field.
func ActionsCreatedEQ(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldActionsCreated, v))
}

// ActionsCreatedNEQ applies the NEQ predicate on the "actions_created" field.
func ActionsCreatedNEQ(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNEQ(FieldActionsCreated, v))
}

// ActionsCreatedIn applies the In predicate on the "actions_created" field.
func ActionsCreatedIn(vs ...int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIn(FieldActionsCreated, vs...))
}

// ActionsCreatedNotIn applies the NotIn predicate on the "actions_created" field.
func ActionsCreatedNotIn(vs ...int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotIn(FieldActionsCreated, vs...))
}

// ActionsCreatedGT applies the GT predicate on the "actions_created" field.
func ActionsCreatedGT(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGT(FieldActionsCreated, v))
}

// ActionsCreatedGTE applies the GTE predicate on the "actions_created" field.
func ActionsCreatedGTE(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGTE(FieldActionsCreated, v))
}

// ActionsCreatedLT applies the LT predicate on the "actions_created" field.
func ActionsCreatedLT(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLT(FieldActionsCreated, v))
}

// ActionsCreatedLTE applies the LTE predicate on the "actions_created" field.
func ActionsCreatedLTE(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLTE(FieldActionsCreated, v))
}

// ActionsCreatedIsNil applies the IsNil predicate on the "actions_created" field.
func ActionsCreatedIsNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIsNull(FieldActionsCreated))
}

// ActionsCreatedNotNil applies the NotNil predicate on the "actions_created" field.
func ActionsCreatedNotNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotNull(FieldActionsCreated))
}

// ActionsCreatedNotIncludingAspectsEQ applies the EQ predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsEQ(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldActionsCreatedNotIncludingAspects, v))
}

// ActionsCreatedNotIncludingAspectsNEQ applies the NEQ predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsNEQ(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNEQ(FieldActionsCreatedNotIncludingAspects, v))
}

// ActionsCreatedNotIncludingAspectsIn applies the In predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsIn(vs ...int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIn(FieldActionsCreatedNotIncludingAspects, vs...))
}

// ActionsCreatedNotIncludingAspectsNotIn applies the NotIn predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsNotIn(vs ...int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotIn(FieldActionsCreatedNotIncludingAspects, vs...))
}

// ActionsCreatedNotIncludingAspectsGT applies the GT predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsGT(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGT(FieldActionsCreatedNotIncludingAspects, v))
}

// ActionsCreatedNotIncludingAspectsGTE applies the GTE predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsGTE(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGTE(FieldActionsCreatedNotIncludingAspects, v))
}

// ActionsCreatedNotIncludingAspectsLT applies the LT predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsLT(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLT(FieldActionsCreatedNotIncludingAspects, v))
}

// ActionsCreatedNotIncludingAspectsLTE applies the LTE predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsLTE(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLTE(FieldActionsCreatedNotIncludingAspects, v))
}

// ActionsCreatedNotIncludingAspectsIsNil applies the IsNil predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsIsNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIsNull(FieldActionsCreatedNotIncludingAspects))
}

// ActionsCreatedNotIncludingAspectsNotNil applies the NotNil predicate on the "actions_created_not_including_aspects" field.
func ActionsCreatedNotIncludingAspectsNotNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotNull(FieldActionsCreatedNotIncludingAspects))
}

// ActionsExecutedEQ applies the EQ predicate on the "actions_executed" field.
func ActionsExecutedEQ(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldActionsExecuted, v))
}

// ActionsExecutedNEQ applies the NEQ predicate on the "actions_executed" field.
func ActionsExecutedNEQ(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNEQ(FieldActionsExecuted, v))
}

// ActionsExecutedIn applies the In predicate on the "actions_executed" field.
func ActionsExecutedIn(vs ...int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIn(FieldActionsExecuted, vs...))
}

// ActionsExecutedNotIn applies the NotIn predicate on the "actions_executed" field.
func ActionsExecutedNotIn(vs ...int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotIn(FieldActionsExecuted, vs...))
}

// ActionsExecutedGT applies the GT predicate on the "actions_executed" field.
func ActionsExecutedGT(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGT(FieldActionsExecuted, v))
}

// ActionsExecutedGTE applies the GTE predicate on the "actions_executed" field.
func ActionsExecutedGTE(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGTE(FieldActionsExecuted, v))
}

// ActionsExecutedLT applies the LT predicate on the "actions_executed" field.
func ActionsExecutedLT(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLT(FieldActionsExecuted, v))
}

// ActionsExecutedLTE applies the LTE predicate on the "actions_executed" field.
func ActionsExecutedLTE(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLTE(FieldActionsExecuted, v))
}

// ActionsExecutedIsNil applies the IsNil predicate on the "actions_executed" field.
func ActionsExecutedIsNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIsNull(FieldActionsExecuted))
}

// ActionsExecutedNotNil applies the NotNil predicate on the "actions_executed" field.
func ActionsExecutedNotNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotNull(FieldActionsExecuted))
}

// RemoteCacheHitsEQ applies the EQ predicate on the "remote_cache_hits" field.
func RemoteCacheHitsEQ(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldRemoteCacheHits, v))
}

// RemoteCacheHitsNEQ applies the NEQ predicate on the "remote_cache_hits" field.
func RemoteCacheHitsNEQ(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNEQ(FieldRemoteCacheHits, v))
}

// RemoteCacheHitsIn applies the In predicate on the "remote_cache_hits" field.
func RemoteCacheHitsIn(vs ...int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIn(FieldRemoteCacheHits, vs...))
}

// RemoteCacheHitsNotIn applies the NotIn predicate on the "remote_cache_hits" field.
func RemoteCacheHitsNotIn(vs ...int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotIn(FieldRemoteCacheHits, vs...))
}

// RemoteCacheHitsGT applies the GT predicate on the "remote_cache_hits" field.
func RemoteCacheHitsGT(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGT(FieldRemoteCacheHits, v))
}

// RemoteCacheHitsGTE applies the GTE predicate on the "remote_cache_hits" field.
func RemoteCacheHitsGTE(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldGTE(FieldRemoteCacheHits, v))
}

// RemoteCacheHitsLT applies the LT predicate on the "remote_cache_hits" field.
func RemoteCacheHitsLT(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLT(FieldRemoteCacheHits, v))
}

// RemoteCacheHitsLTE applies the LTE predicate on the "remote_cache_hits" field.
func RemoteCacheHitsLTE(v int64) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldLTE(FieldRemoteCacheHits, v))
}

// RemoteCacheHitsIsNil applies the IsNil predicate on the "remote_cache_hits" field.
func RemoteCacheHitsIsNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIsNull(FieldRemoteCacheHits))
}

// RemoteCacheHitsNotNil applies the NotNil predicate on the "remote_cache_hits" field.
func RemoteCacheHitsNotNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotNull(FieldRemoteCacheHits))
}

// MetricsIDEQ applies the EQ predicate on the "metrics_id" field.
func MetricsIDEQ(v int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldEQ(FieldMetricsID, v))
}

// MetricsIDNEQ applies the NEQ predicate on the "metrics_id" field.
func MetricsIDNEQ(v int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNEQ(FieldMetricsID, v))
}

// MetricsIDIn applies the In predicate on the "metrics_id" field.
func MetricsIDIn(vs ...int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIn(FieldMetricsID, vs...))
}

// MetricsIDNotIn applies the NotIn predicate on the "metrics_id" field.
func MetricsIDNotIn(vs ...int) predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotIn(FieldMetricsID, vs...))
}

// MetricsIDIsNil applies the IsNil predicate on the "metrics_id" field.
func MetricsIDIsNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldIsNull(FieldMetricsID))
}

// MetricsIDNotNil applies the NotNil predicate on the "metrics_id" field.
func MetricsIDNotNil() predicate.ActionSummary {
	return predicate.ActionSummary(sql.FieldNotNull(FieldMetricsID))
}

// HasMetrics applies the HasEdge predicate on the "metrics" edge.
func HasMetrics() predicate.ActionSummary {
	return predicate.ActionSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MetricsTable, MetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetricsWith applies the HasEdge predicate on the "metrics" edge with a given conditions (other predicates).
func HasMetricsWith(preds ...predicate.Metrics) predicate.ActionSummary {
	return predicate.ActionSummary(func(s *sql.Selector) {
		step := newMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActionData applies the HasEdge predicate on the "action_data" edge.
func HasActionData() predicate.ActionSummary {
	return predicate.ActionSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActionDataTable, ActionDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionDataWith applies the HasEdge predicate on the "action_data" edge with a given conditions (other predicates).
func HasActionDataWith(preds ...predicate.ActionData) predicate.ActionSummary {
	return predicate.ActionSummary(func(s *sql.Selector) {
		step := newActionDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRunnerCount applies the HasEdge predicate on the "runner_count" edge.
func HasRunnerCount() predicate.ActionSummary {
	return predicate.ActionSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RunnerCountTable, RunnerCountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRunnerCountWith applies the HasEdge predicate on the "runner_count" edge with a given conditions (other predicates).
func HasRunnerCountWith(preds ...predicate.RunnerCount) predicate.ActionSummary {
	return predicate.ActionSummary(func(s *sql.Selector) {
		step := newRunnerCountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActionCacheStatistics applies the HasEdge predicate on the "action_cache_statistics" edge.
func HasActionCacheStatistics() predicate.ActionSummary {
	return predicate.ActionSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ActionCacheStatisticsTable, ActionCacheStatisticsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionCacheStatisticsWith applies the HasEdge predicate on the "action_cache_statistics" edge with a given conditions (other predicates).
func HasActionCacheStatisticsWith(preds ...predicate.ActionCacheStatistics) predicate.ActionSummary {
	return predicate.ActionSummary(func(s *sql.Selector) {
		step := newActionCacheStatisticsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActionSummary) predicate.ActionSummary {
	return predicate.ActionSummary(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActionSummary) predicate.ActionSummary {
	return predicate.ActionSummary(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActionSummary) predicate.ActionSummary {
	return predicate.ActionSummary(sql.NotPredicates(p))
}
