// Code generated by ent, DO NOT EDIT.

package testsummary

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldID, id))
}

// TotalRunCount applies equality check predicate on the "total_run_count" field. It's identical to TotalRunCountEQ.
func TotalRunCount(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldTotalRunCount, v))
}

// RunCount applies equality check predicate on the "run_count" field. It's identical to RunCountEQ.
func RunCount(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldRunCount, v))
}

// AttemptCount applies equality check predicate on the "attempt_count" field. It's identical to AttemptCountEQ.
func AttemptCount(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldAttemptCount, v))
}

// ShardCount applies equality check predicate on the "shard_count" field. It's identical to ShardCountEQ.
func ShardCount(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldShardCount, v))
}

// TotalNumCached applies equality check predicate on the "total_num_cached" field. It's identical to TotalNumCachedEQ.
func TotalNumCached(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldTotalNumCached, v))
}

// FirstStartTime applies equality check predicate on the "first_start_time" field. It's identical to FirstStartTimeEQ.
func FirstStartTime(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldFirstStartTime, v))
}

// LastStopTime applies equality check predicate on the "last_stop_time" field. It's identical to LastStopTimeEQ.
func LastStopTime(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldLastStopTime, v))
}

// TotalRunDuration applies equality check predicate on the "total_run_duration" field. It's identical to TotalRunDurationEQ.
func TotalRunDuration(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldTotalRunDuration, v))
}

// TestCollectionID applies equality check predicate on the "test_collection_id" field. It's identical to TestCollectionIDEQ.
func TestCollectionID(v int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldTestCollectionID, v))
}

// OverallStatusEQ applies the EQ predicate on the "overall_status" field.
func OverallStatusEQ(v OverallStatus) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldOverallStatus, v))
}

// OverallStatusNEQ applies the NEQ predicate on the "overall_status" field.
func OverallStatusNEQ(v OverallStatus) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldOverallStatus, v))
}

// OverallStatusIn applies the In predicate on the "overall_status" field.
func OverallStatusIn(vs ...OverallStatus) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldOverallStatus, vs...))
}

// OverallStatusNotIn applies the NotIn predicate on the "overall_status" field.
func OverallStatusNotIn(vs ...OverallStatus) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldOverallStatus, vs...))
}

// OverallStatusIsNil applies the IsNil predicate on the "overall_status" field.
func OverallStatusIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldOverallStatus))
}

// OverallStatusNotNil applies the NotNil predicate on the "overall_status" field.
func OverallStatusNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldOverallStatus))
}

// TotalRunCountEQ applies the EQ predicate on the "total_run_count" field.
func TotalRunCountEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldTotalRunCount, v))
}

// TotalRunCountNEQ applies the NEQ predicate on the "total_run_count" field.
func TotalRunCountNEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldTotalRunCount, v))
}

// TotalRunCountIn applies the In predicate on the "total_run_count" field.
func TotalRunCountIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldTotalRunCount, vs...))
}

// TotalRunCountNotIn applies the NotIn predicate on the "total_run_count" field.
func TotalRunCountNotIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldTotalRunCount, vs...))
}

// TotalRunCountGT applies the GT predicate on the "total_run_count" field.
func TotalRunCountGT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldTotalRunCount, v))
}

// TotalRunCountGTE applies the GTE predicate on the "total_run_count" field.
func TotalRunCountGTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldTotalRunCount, v))
}

// TotalRunCountLT applies the LT predicate on the "total_run_count" field.
func TotalRunCountLT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldTotalRunCount, v))
}

// TotalRunCountLTE applies the LTE predicate on the "total_run_count" field.
func TotalRunCountLTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldTotalRunCount, v))
}

// TotalRunCountIsNil applies the IsNil predicate on the "total_run_count" field.
func TotalRunCountIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldTotalRunCount))
}

// TotalRunCountNotNil applies the NotNil predicate on the "total_run_count" field.
func TotalRunCountNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldTotalRunCount))
}

// RunCountEQ applies the EQ predicate on the "run_count" field.
func RunCountEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldRunCount, v))
}

// RunCountNEQ applies the NEQ predicate on the "run_count" field.
func RunCountNEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldRunCount, v))
}

// RunCountIn applies the In predicate on the "run_count" field.
func RunCountIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldRunCount, vs...))
}

// RunCountNotIn applies the NotIn predicate on the "run_count" field.
func RunCountNotIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldRunCount, vs...))
}

// RunCountGT applies the GT predicate on the "run_count" field.
func RunCountGT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldRunCount, v))
}

// RunCountGTE applies the GTE predicate on the "run_count" field.
func RunCountGTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldRunCount, v))
}

// RunCountLT applies the LT predicate on the "run_count" field.
func RunCountLT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldRunCount, v))
}

// RunCountLTE applies the LTE predicate on the "run_count" field.
func RunCountLTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldRunCount, v))
}

// RunCountIsNil applies the IsNil predicate on the "run_count" field.
func RunCountIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldRunCount))
}

// RunCountNotNil applies the NotNil predicate on the "run_count" field.
func RunCountNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldRunCount))
}

// AttemptCountEQ applies the EQ predicate on the "attempt_count" field.
func AttemptCountEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldAttemptCount, v))
}

// AttemptCountNEQ applies the NEQ predicate on the "attempt_count" field.
func AttemptCountNEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldAttemptCount, v))
}

// AttemptCountIn applies the In predicate on the "attempt_count" field.
func AttemptCountIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldAttemptCount, vs...))
}

// AttemptCountNotIn applies the NotIn predicate on the "attempt_count" field.
func AttemptCountNotIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldAttemptCount, vs...))
}

// AttemptCountGT applies the GT predicate on the "attempt_count" field.
func AttemptCountGT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldAttemptCount, v))
}

// AttemptCountGTE applies the GTE predicate on the "attempt_count" field.
func AttemptCountGTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldAttemptCount, v))
}

// AttemptCountLT applies the LT predicate on the "attempt_count" field.
func AttemptCountLT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldAttemptCount, v))
}

// AttemptCountLTE applies the LTE predicate on the "attempt_count" field.
func AttemptCountLTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldAttemptCount, v))
}

// AttemptCountIsNil applies the IsNil predicate on the "attempt_count" field.
func AttemptCountIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldAttemptCount))
}

// AttemptCountNotNil applies the NotNil predicate on the "attempt_count" field.
func AttemptCountNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldAttemptCount))
}

// ShardCountEQ applies the EQ predicate on the "shard_count" field.
func ShardCountEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldShardCount, v))
}

// ShardCountNEQ applies the NEQ predicate on the "shard_count" field.
func ShardCountNEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldShardCount, v))
}

// ShardCountIn applies the In predicate on the "shard_count" field.
func ShardCountIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldShardCount, vs...))
}

// ShardCountNotIn applies the NotIn predicate on the "shard_count" field.
func ShardCountNotIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldShardCount, vs...))
}

// ShardCountGT applies the GT predicate on the "shard_count" field.
func ShardCountGT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldShardCount, v))
}

// ShardCountGTE applies the GTE predicate on the "shard_count" field.
func ShardCountGTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldShardCount, v))
}

// ShardCountLT applies the LT predicate on the "shard_count" field.
func ShardCountLT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldShardCount, v))
}

// ShardCountLTE applies the LTE predicate on the "shard_count" field.
func ShardCountLTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldShardCount, v))
}

// ShardCountIsNil applies the IsNil predicate on the "shard_count" field.
func ShardCountIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldShardCount))
}

// ShardCountNotNil applies the NotNil predicate on the "shard_count" field.
func ShardCountNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldShardCount))
}

// TotalNumCachedEQ applies the EQ predicate on the "total_num_cached" field.
func TotalNumCachedEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldTotalNumCached, v))
}

// TotalNumCachedNEQ applies the NEQ predicate on the "total_num_cached" field.
func TotalNumCachedNEQ(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldTotalNumCached, v))
}

// TotalNumCachedIn applies the In predicate on the "total_num_cached" field.
func TotalNumCachedIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldTotalNumCached, vs...))
}

// TotalNumCachedNotIn applies the NotIn predicate on the "total_num_cached" field.
func TotalNumCachedNotIn(vs ...int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldTotalNumCached, vs...))
}

// TotalNumCachedGT applies the GT predicate on the "total_num_cached" field.
func TotalNumCachedGT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldTotalNumCached, v))
}

// TotalNumCachedGTE applies the GTE predicate on the "total_num_cached" field.
func TotalNumCachedGTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldTotalNumCached, v))
}

// TotalNumCachedLT applies the LT predicate on the "total_num_cached" field.
func TotalNumCachedLT(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldTotalNumCached, v))
}

// TotalNumCachedLTE applies the LTE predicate on the "total_num_cached" field.
func TotalNumCachedLTE(v int32) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldTotalNumCached, v))
}

// TotalNumCachedIsNil applies the IsNil predicate on the "total_num_cached" field.
func TotalNumCachedIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldTotalNumCached))
}

// TotalNumCachedNotNil applies the NotNil predicate on the "total_num_cached" field.
func TotalNumCachedNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldTotalNumCached))
}

// FirstStartTimeEQ applies the EQ predicate on the "first_start_time" field.
func FirstStartTimeEQ(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldFirstStartTime, v))
}

// FirstStartTimeNEQ applies the NEQ predicate on the "first_start_time" field.
func FirstStartTimeNEQ(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldFirstStartTime, v))
}

// FirstStartTimeIn applies the In predicate on the "first_start_time" field.
func FirstStartTimeIn(vs ...int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldFirstStartTime, vs...))
}

// FirstStartTimeNotIn applies the NotIn predicate on the "first_start_time" field.
func FirstStartTimeNotIn(vs ...int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldFirstStartTime, vs...))
}

// FirstStartTimeGT applies the GT predicate on the "first_start_time" field.
func FirstStartTimeGT(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldFirstStartTime, v))
}

// FirstStartTimeGTE applies the GTE predicate on the "first_start_time" field.
func FirstStartTimeGTE(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldFirstStartTime, v))
}

// FirstStartTimeLT applies the LT predicate on the "first_start_time" field.
func FirstStartTimeLT(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldFirstStartTime, v))
}

// FirstStartTimeLTE applies the LTE predicate on the "first_start_time" field.
func FirstStartTimeLTE(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldFirstStartTime, v))
}

// FirstStartTimeIsNil applies the IsNil predicate on the "first_start_time" field.
func FirstStartTimeIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldFirstStartTime))
}

// FirstStartTimeNotNil applies the NotNil predicate on the "first_start_time" field.
func FirstStartTimeNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldFirstStartTime))
}

// LastStopTimeEQ applies the EQ predicate on the "last_stop_time" field.
func LastStopTimeEQ(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldLastStopTime, v))
}

// LastStopTimeNEQ applies the NEQ predicate on the "last_stop_time" field.
func LastStopTimeNEQ(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldLastStopTime, v))
}

// LastStopTimeIn applies the In predicate on the "last_stop_time" field.
func LastStopTimeIn(vs ...int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldLastStopTime, vs...))
}

// LastStopTimeNotIn applies the NotIn predicate on the "last_stop_time" field.
func LastStopTimeNotIn(vs ...int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldLastStopTime, vs...))
}

// LastStopTimeGT applies the GT predicate on the "last_stop_time" field.
func LastStopTimeGT(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldLastStopTime, v))
}

// LastStopTimeGTE applies the GTE predicate on the "last_stop_time" field.
func LastStopTimeGTE(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldLastStopTime, v))
}

// LastStopTimeLT applies the LT predicate on the "last_stop_time" field.
func LastStopTimeLT(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldLastStopTime, v))
}

// LastStopTimeLTE applies the LTE predicate on the "last_stop_time" field.
func LastStopTimeLTE(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldLastStopTime, v))
}

// LastStopTimeIsNil applies the IsNil predicate on the "last_stop_time" field.
func LastStopTimeIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldLastStopTime))
}

// LastStopTimeNotNil applies the NotNil predicate on the "last_stop_time" field.
func LastStopTimeNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldLastStopTime))
}

// TotalRunDurationEQ applies the EQ predicate on the "total_run_duration" field.
func TotalRunDurationEQ(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldTotalRunDuration, v))
}

// TotalRunDurationNEQ applies the NEQ predicate on the "total_run_duration" field.
func TotalRunDurationNEQ(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldTotalRunDuration, v))
}

// TotalRunDurationIn applies the In predicate on the "total_run_duration" field.
func TotalRunDurationIn(vs ...int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldTotalRunDuration, vs...))
}

// TotalRunDurationNotIn applies the NotIn predicate on the "total_run_duration" field.
func TotalRunDurationNotIn(vs ...int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldTotalRunDuration, vs...))
}

// TotalRunDurationGT applies the GT predicate on the "total_run_duration" field.
func TotalRunDurationGT(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldTotalRunDuration, v))
}

// TotalRunDurationGTE applies the GTE predicate on the "total_run_duration" field.
func TotalRunDurationGTE(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldTotalRunDuration, v))
}

// TotalRunDurationLT applies the LT predicate on the "total_run_duration" field.
func TotalRunDurationLT(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldTotalRunDuration, v))
}

// TotalRunDurationLTE applies the LTE predicate on the "total_run_duration" field.
func TotalRunDurationLTE(v int64) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldTotalRunDuration, v))
}

// TotalRunDurationIsNil applies the IsNil predicate on the "total_run_duration" field.
func TotalRunDurationIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldTotalRunDuration))
}

// TotalRunDurationNotNil applies the NotNil predicate on the "total_run_duration" field.
func TotalRunDurationNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldTotalRunDuration))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelIsNil applies the IsNil predicate on the "label" field.
func LabelIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldLabel))
}

// LabelNotNil applies the NotNil predicate on the "label" field.
func LabelNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldLabel))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldContainsFold(FieldLabel, v))
}

// TestCollectionIDEQ applies the EQ predicate on the "test_collection_id" field.
func TestCollectionIDEQ(v int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldEQ(FieldTestCollectionID, v))
}

// TestCollectionIDNEQ applies the NEQ predicate on the "test_collection_id" field.
func TestCollectionIDNEQ(v int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNEQ(FieldTestCollectionID, v))
}

// TestCollectionIDIn applies the In predicate on the "test_collection_id" field.
func TestCollectionIDIn(vs ...int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIn(FieldTestCollectionID, vs...))
}

// TestCollectionIDNotIn applies the NotIn predicate on the "test_collection_id" field.
func TestCollectionIDNotIn(vs ...int) predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotIn(FieldTestCollectionID, vs...))
}

// TestCollectionIDIsNil applies the IsNil predicate on the "test_collection_id" field.
func TestCollectionIDIsNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldIsNull(FieldTestCollectionID))
}

// TestCollectionIDNotNil applies the NotNil predicate on the "test_collection_id" field.
func TestCollectionIDNotNil() predicate.TestSummary {
	return predicate.TestSummary(sql.FieldNotNull(FieldTestCollectionID))
}

// HasTestCollection applies the HasEdge predicate on the "test_collection" edge.
func HasTestCollection() predicate.TestSummary {
	return predicate.TestSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TestCollectionTable, TestCollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestCollectionWith applies the HasEdge predicate on the "test_collection" edge with a given conditions (other predicates).
func HasTestCollectionWith(preds ...predicate.TestCollection) predicate.TestSummary {
	return predicate.TestSummary(func(s *sql.Selector) {
		step := newTestCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPassed applies the HasEdge predicate on the "passed" edge.
func HasPassed() predicate.TestSummary {
	return predicate.TestSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PassedTable, PassedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPassedWith applies the HasEdge predicate on the "passed" edge with a given conditions (other predicates).
func HasPassedWith(preds ...predicate.TestFile) predicate.TestSummary {
	return predicate.TestSummary(func(s *sql.Selector) {
		step := newPassedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFailed applies the HasEdge predicate on the "failed" edge.
func HasFailed() predicate.TestSummary {
	return predicate.TestSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FailedTable, FailedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFailedWith applies the HasEdge predicate on the "failed" edge with a given conditions (other predicates).
func HasFailedWith(preds ...predicate.TestFile) predicate.TestSummary {
	return predicate.TestSummary(func(s *sql.Selector) {
		step := newFailedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestSummary) predicate.TestSummary {
	return predicate.TestSummary(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestSummary) predicate.TestSummary {
	return predicate.TestSummary(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestSummary) predicate.TestSummary {
	return predicate.TestSummary(sql.NotPredicates(p))
}
