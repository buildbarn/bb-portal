// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/buildbarn/bb-portal/ent/gen/ent"
	"github.com/buildbarn/bb-portal/ent/gen/ent/blob"
	"github.com/buildbarn/bb-portal/ent/gen/ent/missdetail"
	"github.com/buildbarn/bb-portal/ent/gen/ent/sourcecontrol"
	"github.com/buildbarn/bb-portal/ent/gen/ent/target"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testcollection"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testresultbes"
	"github.com/buildbarn/bb-portal/ent/gen/ent/testsummary"
	"github.com/buildbarn/bb-portal/internal/graphql/model"
	"github.com/buildbarn/bb-portal/pkg/uuidgql"
	"github.com/google/uuid"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	ActionCacheStatistics() ActionCacheStatisticsResolver
	ActionData() ActionDataResolver
	ActionProblem() ActionProblemResolver
	ActionSummary() ActionSummaryResolver
	ArtifactMetrics() ArtifactMetricsResolver
	BazelInvocation() BazelInvocationResolver
	BazelInvocationProblem() BazelInvocationProblemResolver
	Blob() BlobResolver
	BlobReference() BlobReferenceResolver
	Build() BuildResolver
	BuildGraphMetrics() BuildGraphMetricsResolver
	CumulativeMetrics() CumulativeMetricsResolver
	EvaluationStat() EvaluationStatResolver
	ExectionInfo() ExectionInfoResolver
	GarbageMetrics() GarbageMetricsResolver
	IncompleteBuildLog() IncompleteBuildLogResolver
	InvocationFiles() InvocationFilesResolver
	MemoryMetrics() MemoryMetricsResolver
	Metrics() MetricsResolver
	MissDetail() MissDetailResolver
	NamedSetOfFiles() NamedSetOfFilesResolver
	NetworkMetrics() NetworkMetricsResolver
	OutputGroup() OutputGroupResolver
	PackageLoadMetrics() PackageLoadMetricsResolver
	PackageMetrics() PackageMetricsResolver
	Query() QueryResolver
	ResourceUsage() ResourceUsageResolver
	RunnerCount() RunnerCountResolver
	SourceControl() SourceControlResolver
	SystemNetworkStats() SystemNetworkStatsResolver
	Target() TargetResolver
	TargetMetrics() TargetMetricsResolver
	TestCollection() TestCollectionResolver
	TestFile() TestFileResolver
	TestResult() TestResultResolver
	TestResultBES() TestResultBESResolver
	TestSummary() TestSummaryResolver
	TimingBreakdown() TimingBreakdownResolver
	TimingChild() TimingChildResolver
	TimingMetrics() TimingMetricsResolver
	ActionCacheStatisticsWhereInput() ActionCacheStatisticsWhereInputResolver
	ActionDataWhereInput() ActionDataWhereInputResolver
	ActionSummaryWhereInput() ActionSummaryWhereInputResolver
	ArtifactMetricsWhereInput() ArtifactMetricsWhereInputResolver
	BazelInvocationProblemWhereInput() BazelInvocationProblemWhereInputResolver
	BazelInvocationWhereInput() BazelInvocationWhereInputResolver
	BlobWhereInput() BlobWhereInputResolver
	BuildGraphMetricsWhereInput() BuildGraphMetricsWhereInputResolver
	BuildWhereInput() BuildWhereInputResolver
	CumulativeMetricsWhereInput() CumulativeMetricsWhereInputResolver
	EvaluationStatWhereInput() EvaluationStatWhereInputResolver
	ExectionInfoWhereInput() ExectionInfoWhereInputResolver
	GarbageMetricsWhereInput() GarbageMetricsWhereInputResolver
	IncompleteBuildLogWhereInput() IncompleteBuildLogWhereInputResolver
	InvocationFilesWhereInput() InvocationFilesWhereInputResolver
	MemoryMetricsWhereInput() MemoryMetricsWhereInputResolver
	MetricsWhereInput() MetricsWhereInputResolver
	MissDetailWhereInput() MissDetailWhereInputResolver
	NamedSetOfFilesWhereInput() NamedSetOfFilesWhereInputResolver
	NetworkMetricsWhereInput() NetworkMetricsWhereInputResolver
	OutputGroupWhereInput() OutputGroupWhereInputResolver
	PackageLoadMetricsWhereInput() PackageLoadMetricsWhereInputResolver
	PackageMetricsWhereInput() PackageMetricsWhereInputResolver
	ResourceUsageWhereInput() ResourceUsageWhereInputResolver
	RunnerCountWhereInput() RunnerCountWhereInputResolver
	SourceControlWhereInput() SourceControlWhereInputResolver
	SystemNetworkStatsWhereInput() SystemNetworkStatsWhereInputResolver
	TargetMetricsWhereInput() TargetMetricsWhereInputResolver
	TargetWhereInput() TargetWhereInputResolver
	TestCollectionWhereInput() TestCollectionWhereInputResolver
	TestFileWhereInput() TestFileWhereInputResolver
	TestResultBESWhereInput() TestResultBESWhereInputResolver
	TestSummaryWhereInput() TestSummaryWhereInputResolver
	TimingBreakdownWhereInput() TimingBreakdownWhereInputResolver
	TimingChildWhereInput() TimingChildWhereInputResolver
	TimingMetricsWhereInput() TimingMetricsWhereInputResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ActionCacheStatistics struct {
		ActionSummary func(childComplexity int) int
		Hits          func(childComplexity int) int
		ID            func(childComplexity int) int
		LoadTimeInMs  func(childComplexity int) int
		MissDetails   func(childComplexity int) int
		Misses        func(childComplexity int) int
		SaveTimeInMs  func(childComplexity int) int
		SizeInBytes   func(childComplexity int) int
	}

	ActionData struct {
		ActionSummary   func(childComplexity int) int
		ActionsCreated  func(childComplexity int) int
		ActionsExecuted func(childComplexity int) int
		FirstStartedMs  func(childComplexity int) int
		ID              func(childComplexity int) int
		LastEndedMs     func(childComplexity int) int
		Mnemonic        func(childComplexity int) int
		SystemTime      func(childComplexity int) int
		UserTime        func(childComplexity int) int
	}

	ActionProblem struct {
		ID     func(childComplexity int) int
		Label  func(childComplexity int) int
		Stderr func(childComplexity int) int
		Stdout func(childComplexity int) int
		Type   func(childComplexity int) int
	}

	ActionSummary struct {
		ActionCacheStatistics             func(childComplexity int) int
		ActionData                        func(childComplexity int) int
		ActionsCreated                    func(childComplexity int) int
		ActionsCreatedNotIncludingAspects func(childComplexity int) int
		ActionsExecuted                   func(childComplexity int) int
		ID                                func(childComplexity int) int
		Metrics                           func(childComplexity int) int
		RemoteCacheHits                   func(childComplexity int) int
		RunnerCount                       func(childComplexity int) int
	}

	ArtifactMetrics struct {
		ID                                        func(childComplexity int) int
		Metrics                                   func(childComplexity int) int
		OutputArtifactsFromActionCacheCount       func(childComplexity int) int
		OutputArtifactsFromActionCacheSizeInBytes func(childComplexity int) int
		OutputArtifactsSeenCount                  func(childComplexity int) int
		OutputArtifactsSeenSizeInBytes            func(childComplexity int) int
		SourceArtifactsReadCount                  func(childComplexity int) int
		SourceArtifactsReadSizeInBytes            func(childComplexity int) int
		TopLevelArtifactsCount                    func(childComplexity int) int
		TopLevelArtifactsSizeInBytes              func(childComplexity int) int
	}

	BazelCommand struct {
		CmdLine                func(childComplexity int) int
		Command                func(childComplexity int) int
		Executable             func(childComplexity int) int
		ExplicitCmdLine        func(childComplexity int) int
		ExplicitStartupOptions func(childComplexity int) int
		ID                     func(childComplexity int) int
		Residual               func(childComplexity int) int
		StartupOptions         func(childComplexity int) int
	}

	BazelInvocation struct {
		BazelCommand          func(childComplexity int) int
		BazelVersion          func(childComplexity int) int
		BepCompleted          func(childComplexity int) int
		Build                 func(childComplexity int) int
		BuildLogs             func(childComplexity int) int
		CPU                   func(childComplexity int) int
		ChangeNumber          func(childComplexity int) int
		ConfigurationMnemonic func(childComplexity int) int
		EndedAt               func(childComplexity int) int
		ExitCodeCode          func(childComplexity int) int
		ExitCodeName          func(childComplexity int) int
		Hostname              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IncompleteBuildLogs   func(childComplexity int) int
		InstanceName          func(childComplexity int) int
		InvocationFiles       func(childComplexity int) int
		InvocationID          func(childComplexity int) int
		IsCiWorker            func(childComplexity int) int
		Metrics               func(childComplexity int) int
		NumFetches            func(childComplexity int) int
		PatchsetNumber        func(childComplexity int) int
		PlatformName          func(childComplexity int) int
		Problems              func(childComplexity int) int
		Profile               func(childComplexity int) int
		SourceControl         func(childComplexity int) int
		StartedAt             func(childComplexity int) int
		State                 func(childComplexity int) int
		StepLabel             func(childComplexity int) int
		Targets               func(childComplexity int) int
		TestCollection        func(childComplexity int) int
		User                  func(childComplexity int) int
		UserEmail             func(childComplexity int) int
		UserLdap              func(childComplexity int) int
	}

	BazelInvocationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	BazelInvocationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BazelInvocationProblem struct {
		BazelInvocation func(childComplexity int) int
		ID              func(childComplexity int) int
		Label           func(childComplexity int) int
		ProblemType     func(childComplexity int) int
	}

	BazelInvocationState struct {
		BepCompleted   func(childComplexity int) int
		BuildEndTime   func(childComplexity int) int
		BuildStartTime func(childComplexity int) int
		ExitCode       func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	Blob struct {
		ArchiveURL      func(childComplexity int) int
		ArchivingStatus func(childComplexity int) int
		ID              func(childComplexity int) int
		InstanceName    func(childComplexity int) int
		Reason          func(childComplexity int) int
		SizeBytes       func(childComplexity int) int
		URI             func(childComplexity int) int
	}

	BlobReference struct {
		AvailabilityStatus func(childComplexity int) int
		DownloadURL        func(childComplexity int) int
		EphemeralURL       func(childComplexity int) int
		Name               func(childComplexity int) int
		SizeInBytes        func(childComplexity int) int
	}

	Build struct {
		BuildURL     func(childComplexity int) int
		BuildUUID    func(childComplexity int) int
		ID           func(childComplexity int) int
		InstanceName func(childComplexity int) int
		Invocations  func(childComplexity int) int
		Timestamp    func(childComplexity int) int
	}

	BuildConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	BuildEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BuildGraphMetrics struct {
		ActionCount                               func(childComplexity int) int
		ActionCountNotIncludingAspects            func(childComplexity int) int
		ActionLookupValueCount                    func(childComplexity int) int
		ActionLookupValueCountNotIncludingAspects func(childComplexity int) int
		BuiltValues                               func(childComplexity int) int
		ChangedValues                             func(childComplexity int) int
		CleanedValues                             func(childComplexity int) int
		DirtiedValues                             func(childComplexity int) int
		EvaluatedValues                           func(childComplexity int) int
		ID                                        func(childComplexity int) int
		InputFileConfiguredTargetCount            func(childComplexity int) int
		Metrics                                   func(childComplexity int) int
		OtherConfiguredTargetCount                func(childComplexity int) int
		OutputArtifactCount                       func(childComplexity int) int
		OutputFileConfiguredTargetCount           func(childComplexity int) int
		PostInvocationSkyframeNodeCount           func(childComplexity int) int
	}

	CumulativeMetrics struct {
		ID          func(childComplexity int) int
		Metrics     func(childComplexity int) int
		NumAnalyses func(childComplexity int) int
		NumBuilds   func(childComplexity int) int
	}

	EvaluationStat struct {
		BuildGraphMetrics func(childComplexity int) int
		Count             func(childComplexity int) int
		ID                func(childComplexity int) int
		SkyfunctionName   func(childComplexity int) int
	}

	ExectionInfo struct {
		CachedRemotely  func(childComplexity int) int
		ExitCode        func(childComplexity int) int
		Hostname        func(childComplexity int) int
		ID              func(childComplexity int) int
		ResourceUsage   func(childComplexity int) int
		Strategy        func(childComplexity int) int
		TestResult      func(childComplexity int) int
		TimeoutSeconds  func(childComplexity int) int
		TimingBreakdown func(childComplexity int) int
	}

	ExitCode struct {
		Code func(childComplexity int) int
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	GarbageMetrics struct {
		GarbageCollected func(childComplexity int) int
		ID               func(childComplexity int) int
		MemoryMetrics    func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	IncompleteBuildLog struct {
		BazelInvocation func(childComplexity int) int
		ID              func(childComplexity int) int
		LogSnippet      func(childComplexity int) int
		SnippetID       func(childComplexity int) int
	}

	InvocationFiles struct {
		BazelInvocation func(childComplexity int) int
		Content         func(childComplexity int) int
		Digest          func(childComplexity int) int
		DigestFunction  func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		SizeBytes       func(childComplexity int) int
	}

	MemoryMetrics struct {
		GarbageMetrics                 func(childComplexity int) int
		ID                             func(childComplexity int) int
		Metrics                        func(childComplexity int) int
		PeakPostGcHeapSize             func(childComplexity int) int
		PeakPostGcTenuredSpaceHeapSize func(childComplexity int) int
		UsedHeapSizePostBuild          func(childComplexity int) int
	}

	Metrics struct {
		ActionSummary     func(childComplexity int) int
		ArtifactMetrics   func(childComplexity int) int
		BazelInvocation   func(childComplexity int) int
		BuildGraphMetrics func(childComplexity int) int
		CumulativeMetrics func(childComplexity int) int
		ID                func(childComplexity int) int
		MemoryMetrics     func(childComplexity int) int
		NetworkMetrics    func(childComplexity int) int
		PackageMetrics    func(childComplexity int) int
		TargetMetrics     func(childComplexity int) int
		TimingMetrics     func(childComplexity int) int
	}

	MetricsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MetricsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MissDetail struct {
		ActionCacheStatistics func(childComplexity int) int
		Count                 func(childComplexity int) int
		ID                    func(childComplexity int) int
		Reason                func(childComplexity int) int
	}

	NamedSetOfFiles struct {
		FileSets    func(childComplexity int) int
		Files       func(childComplexity int) int
		ID          func(childComplexity int) int
		OutputGroup func(childComplexity int) int
	}

	NetworkMetrics struct {
		ID                 func(childComplexity int) int
		Metrics            func(childComplexity int) int
		SystemNetworkStats func(childComplexity int) int
	}

	OutputGroup struct {
		FileSets    func(childComplexity int) int
		ID          func(childComplexity int) int
		Incomplete  func(childComplexity int) int
		InlineFiles func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	PackageLoadMetrics struct {
		ComputationSteps   func(childComplexity int) int
		ID                 func(childComplexity int) int
		LoadDuration       func(childComplexity int) int
		Name               func(childComplexity int) int
		NumTargets         func(childComplexity int) int
		NumTransitiveLoads func(childComplexity int) int
		PackageMetrics     func(childComplexity int) int
		PackageOverhead    func(childComplexity int) int
	}

	PackageMetrics struct {
		ID                 func(childComplexity int) int
		Metrics            func(childComplexity int) int
		PackageLoadMetrics func(childComplexity int) int
		PackagesLoaded     func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Profile struct {
		Digest         func(childComplexity int) int
		DigestFunction func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		SizeInBytes    func(childComplexity int) int
	}

	ProgressProblem struct {
		ID     func(childComplexity int) int
		Label  func(childComplexity int) int
		Output func(childComplexity int) int
	}

	Query struct {
		BazelInvocation                  func(childComplexity int, invocationID string) int
		FindBazelInvocations             func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.BazelInvocationOrder, where *ent.BazelInvocationWhereInput) int
		FindBuilds                       func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.BuildWhereInput) int
		FindMetrics                      func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.MetricsWhereInput) int
		FindRunnerCounts                 func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.RunnerCountWhereInput) int
		FindTargets                      func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.TargetOrder, where *ent.TargetWhereInput) int
		FindTests                        func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.TestCollectionOrder, where *ent.TestCollectionWhereInput) int
		GetAveragePassPercentageForLabel func(childComplexity int, label string) int
		GetBuild                         func(childComplexity int, buildURL *string, buildUUID *uuid.UUID) int
		GetTargetDurationAggregation     func(childComplexity int, label *string) int
		GetTargetPassAggregation         func(childComplexity int, label *string) int
		GetTargetsWithOffset             func(childComplexity int, label *string, offset *int, limit *int, sortBy *string, direction *string) int
		GetTestDurationAggregation       func(childComplexity int, label *string) int
		GetTestPassAggregation           func(childComplexity int, label *string) int
		GetTestsWithOffset               func(childComplexity int, label *string, offset *int, limit *int, sortBy *string, direction *string) int
		GetUniqueTargetLabels            func(childComplexity int, param *string) int
		GetUniqueTestLabels              func(childComplexity int, param *string) int
		Node                             func(childComplexity int, id string) int
		Nodes                            func(childComplexity int, ids []string) int
	}

	ResourceUsage struct {
		ExecutionInfo func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Value         func(childComplexity int) int
	}

	RunnerCount struct {
		ActionSummary   func(childComplexity int) int
		ActionsExecuted func(childComplexity int) int
		ExecKind        func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
	}

	RunnerCountConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RunnerCountEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SourceControl struct {
		Action          func(childComplexity int) int
		Actor           func(childComplexity int) int
		BazelInvocation func(childComplexity int) int
		CommitSha       func(childComplexity int) int
		EventName       func(childComplexity int) int
		ID              func(childComplexity int) int
		InstanceURL     func(childComplexity int) int
		Job             func(childComplexity int) int
		Provider        func(childComplexity int) int
		Refs            func(childComplexity int) int
		Repo            func(childComplexity int) int
		RunID           func(childComplexity int) int
		RunNumber       func(childComplexity int) int
		RunnerArch      func(childComplexity int) int
		RunnerName      func(childComplexity int) int
		RunnerOs        func(childComplexity int) int
		Workflow        func(childComplexity int) int
		Workspace       func(childComplexity int) int
	}

	SystemNetworkStats struct {
		BytesRecv             func(childComplexity int) int
		BytesSent             func(childComplexity int) int
		ID                    func(childComplexity int) int
		NetworkMetrics        func(childComplexity int) int
		PacketsRecv           func(childComplexity int) int
		PacketsSent           func(childComplexity int) int
		PeakBytesRecvPerSec   func(childComplexity int) int
		PeakBytesSentPerSec   func(childComplexity int) int
		PeakPacketsRecvPerSec func(childComplexity int) int
		PeakPacketsSentPerSec func(childComplexity int) int
	}

	Target struct {
		AbortReason     func(childComplexity int) int
		BazelInvocation func(childComplexity int) int
		DurationInMs    func(childComplexity int) int
		EndTimeInMs     func(childComplexity int) int
		ID              func(childComplexity int) int
		Label           func(childComplexity int) int
		StartTimeInMs   func(childComplexity int) int
		Success         func(childComplexity int) int
		Tag             func(childComplexity int) int
		TargetKind      func(childComplexity int) int
		TestSize        func(childComplexity int) int
		TestTimeout     func(childComplexity int) int
	}

	TargetAggregate struct {
		Avg   func(childComplexity int) int
		Count func(childComplexity int) int
		Label func(childComplexity int) int
		Max   func(childComplexity int) int
		Min   func(childComplexity int) int
		Pass  func(childComplexity int) int
		Sum   func(childComplexity int) int
	}

	TargetConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TargetEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TargetGridCell struct {
		AbortReason  func(childComplexity int) int
		Complete     func(childComplexity int) int
		InvocationID func(childComplexity int) int
	}

	TargetGridResult struct {
		Result func(childComplexity int) int
		Total  func(childComplexity int) int
	}

	TargetGridRow struct {
		Avg      func(childComplexity int) int
		Cells    func(childComplexity int) int
		Count    func(childComplexity int) int
		Label    func(childComplexity int) int
		Max      func(childComplexity int) int
		Min      func(childComplexity int) int
		PassRate func(childComplexity int) int
		Sum      func(childComplexity int) int
	}

	TargetMetrics struct {
		ID                                   func(childComplexity int) int
		Metrics                              func(childComplexity int) int
		TargetsConfigured                    func(childComplexity int) int
		TargetsConfiguredNotIncludingAspects func(childComplexity int) int
		TargetsLoaded                        func(childComplexity int) int
	}

	TargetProblem struct {
		ID    func(childComplexity int) int
		Label func(childComplexity int) int
	}

	TestCollection struct {
		BazelInvocation func(childComplexity int) int
		CachedLocally   func(childComplexity int) int
		CachedRemotely  func(childComplexity int) int
		DurationMs      func(childComplexity int) int
		FirstSeen       func(childComplexity int) int
		ID              func(childComplexity int) int
		Label           func(childComplexity int) int
		OverallStatus   func(childComplexity int) int
		Strategy        func(childComplexity int) int
		TestResults     func(childComplexity int) int
		TestSummary     func(childComplexity int) int
	}

	TestCollectionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TestCollectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TestFile struct {
		Digest     func(childComplexity int) int
		File       func(childComplexity int) int
		ID         func(childComplexity int) int
		Length     func(childComplexity int) int
		Name       func(childComplexity int) int
		Prefix     func(childComplexity int) int
		TestResult func(childComplexity int) int
	}

	TestGridCell struct {
		InvocationID func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	TestGridResult struct {
		Result func(childComplexity int) int
		Total  func(childComplexity int) int
	}

	TestGridRow struct {
		Avg      func(childComplexity int) int
		Cells    func(childComplexity int) int
		Count    func(childComplexity int) int
		Label    func(childComplexity int) int
		Max      func(childComplexity int) int
		Min      func(childComplexity int) int
		PassRate func(childComplexity int) int
		Sum      func(childComplexity int) int
	}

	TestProblem struct {
		ID      func(childComplexity int) int
		Label   func(childComplexity int) int
		Results func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	TestResult struct {
		ActionLogOutput       func(childComplexity int) int
		Attempt               func(childComplexity int) int
		ID                    func(childComplexity int) int
		Run                   func(childComplexity int) int
		Shard                 func(childComplexity int) int
		Status                func(childComplexity int) int
		UndeclaredTestOutputs func(childComplexity int) int
	}

	TestResultBES struct {
		CachedLocally               func(childComplexity int) int
		ExecutionInfo               func(childComplexity int) int
		ID                          func(childComplexity int) int
		Label                       func(childComplexity int) int
		StatusDetails               func(childComplexity int) int
		TestActionOutput            func(childComplexity int) int
		TestAttemptDuration         func(childComplexity int) int
		TestAttemptDurationMillis   func(childComplexity int) int
		TestAttemptStart            func(childComplexity int) int
		TestAttemptStartMillisEpoch func(childComplexity int) int
		TestCollection              func(childComplexity int) int
		TestStatus                  func(childComplexity int) int
		Warning                     func(childComplexity int) int
	}

	TestSummary struct {
		AttemptCount     func(childComplexity int) int
		Failed           func(childComplexity int) int
		FirstStartTime   func(childComplexity int) int
		ID               func(childComplexity int) int
		Label            func(childComplexity int) int
		LastStopTime     func(childComplexity int) int
		OverallStatus    func(childComplexity int) int
		Passed           func(childComplexity int) int
		RunCount         func(childComplexity int) int
		ShardCount       func(childComplexity int) int
		TestCollection   func(childComplexity int) int
		TotalNumCached   func(childComplexity int) int
		TotalRunCount    func(childComplexity int) int
		TotalRunDuration func(childComplexity int) int
	}

	TimingBreakdown struct {
		Child         func(childComplexity int) int
		ExecutionInfo func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Time          func(childComplexity int) int
	}

	TimingChild struct {
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Time            func(childComplexity int) int
		TimingBreakdown func(childComplexity int) int
	}

	TimingMetrics struct {
		ActionsExecutionStartInMs func(childComplexity int) int
		AnalysisPhaseTimeInMs     func(childComplexity int) int
		CPUTimeInMs               func(childComplexity int) int
		ExecutionPhaseTimeInMs    func(childComplexity int) int
		ID                        func(childComplexity int) int
		Metrics                   func(childComplexity int) int
		WallTimeInMs              func(childComplexity int) int
	}

	User struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
		Ldap  func(childComplexity int) int
	}
}

type ActionCacheStatisticsResolver interface {
	ID(ctx context.Context, obj *ent.ActionCacheStatistics) (string, error)
}
type ActionDataResolver interface {
	ID(ctx context.Context, obj *ent.ActionData) (string, error)
}
type ActionProblemResolver interface {
	Stdout(ctx context.Context, obj *model.ActionProblem) (*model.BlobReference, error)
	Stderr(ctx context.Context, obj *model.ActionProblem) (*model.BlobReference, error)
}
type ActionSummaryResolver interface {
	ID(ctx context.Context, obj *ent.ActionSummary) (string, error)
}
type ArtifactMetricsResolver interface {
	ID(ctx context.Context, obj *ent.ArtifactMetrics) (string, error)
}
type BazelInvocationResolver interface {
	ID(ctx context.Context, obj *ent.BazelInvocation) (string, error)

	BazelCommand(ctx context.Context, obj *ent.BazelInvocation) (*model.BazelCommand, error)
	State(ctx context.Context, obj *ent.BazelInvocation) (*model.BazelInvocationState, error)
	User(ctx context.Context, obj *ent.BazelInvocation) (*model.User, error)
	Problems(ctx context.Context, obj *ent.BazelInvocation) ([]model.Problem, error)
	Profile(ctx context.Context, obj *ent.BazelInvocation) (*model.Profile, error)
	BuildLogs(ctx context.Context, obj *ent.BazelInvocation) (*string, error)
}
type BazelInvocationProblemResolver interface {
	ID(ctx context.Context, obj *ent.BazelInvocationProblem) (string, error)
}
type BlobResolver interface {
	ID(ctx context.Context, obj *ent.Blob) (string, error)
}
type BlobReferenceResolver interface {
	DownloadURL(ctx context.Context, obj *model.BlobReference) (string, error)
	SizeInBytes(ctx context.Context, obj *model.BlobReference) (*int, error)
	AvailabilityStatus(ctx context.Context, obj *model.BlobReference) (model.ActionOutputStatus, error)
	EphemeralURL(ctx context.Context, obj *model.BlobReference) (string, error)
}
type BuildResolver interface {
	ID(ctx context.Context, obj *ent.Build) (string, error)
}
type BuildGraphMetricsResolver interface {
	ID(ctx context.Context, obj *ent.BuildGraphMetrics) (string, error)
}
type CumulativeMetricsResolver interface {
	ID(ctx context.Context, obj *ent.CumulativeMetrics) (string, error)
}
type EvaluationStatResolver interface {
	ID(ctx context.Context, obj *ent.EvaluationStat) (string, error)
}
type ExectionInfoResolver interface {
	ID(ctx context.Context, obj *ent.ExectionInfo) (string, error)
}
type GarbageMetricsResolver interface {
	ID(ctx context.Context, obj *ent.GarbageMetrics) (string, error)
}
type IncompleteBuildLogResolver interface {
	ID(ctx context.Context, obj *ent.IncompleteBuildLog) (string, error)
}
type InvocationFilesResolver interface {
	ID(ctx context.Context, obj *ent.InvocationFiles) (string, error)
}
type MemoryMetricsResolver interface {
	ID(ctx context.Context, obj *ent.MemoryMetrics) (string, error)
}
type MetricsResolver interface {
	ID(ctx context.Context, obj *ent.Metrics) (string, error)
}
type MissDetailResolver interface {
	ID(ctx context.Context, obj *ent.MissDetail) (string, error)
}
type NamedSetOfFilesResolver interface {
	ID(ctx context.Context, obj *ent.NamedSetOfFiles) (string, error)
}
type NetworkMetricsResolver interface {
	ID(ctx context.Context, obj *ent.NetworkMetrics) (string, error)
}
type OutputGroupResolver interface {
	ID(ctx context.Context, obj *ent.OutputGroup) (string, error)
}
type PackageLoadMetricsResolver interface {
	ID(ctx context.Context, obj *ent.PackageLoadMetrics) (string, error)
}
type PackageMetricsResolver interface {
	ID(ctx context.Context, obj *ent.PackageMetrics) (string, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (ent.Noder, error)
	Nodes(ctx context.Context, ids []string) ([]ent.Noder, error)
	FindBazelInvocations(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.BazelInvocationOrder, where *ent.BazelInvocationWhereInput) (*ent.BazelInvocationConnection, error)
	FindBuilds(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.BuildWhereInput) (*ent.BuildConnection, error)
	FindMetrics(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.MetricsWhereInput) (*ent.MetricsConnection, error)
	FindRunnerCounts(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.RunnerCountWhereInput) (*ent.RunnerCountConnection, error)
	FindTargets(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.TargetOrder, where *ent.TargetWhereInput) (*ent.TargetConnection, error)
	FindTests(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.TestCollectionOrder, where *ent.TestCollectionWhereInput) (*ent.TestCollectionConnection, error)
	BazelInvocation(ctx context.Context, invocationID string) (*ent.BazelInvocation, error)
	GetBuild(ctx context.Context, buildURL *string, buildUUID *uuid.UUID) (*ent.Build, error)
	GetUniqueTestLabels(ctx context.Context, param *string) ([]*string, error)
	GetUniqueTargetLabels(ctx context.Context, param *string) ([]*string, error)
	GetTestDurationAggregation(ctx context.Context, label *string) ([]*model.TargetAggregate, error)
	GetTestPassAggregation(ctx context.Context, label *string) ([]*model.TargetAggregate, error)
	GetTargetDurationAggregation(ctx context.Context, label *string) ([]*model.TargetAggregate, error)
	GetTargetPassAggregation(ctx context.Context, label *string) ([]*model.TargetAggregate, error)
	GetTestsWithOffset(ctx context.Context, label *string, offset *int, limit *int, sortBy *string, direction *string) (*model.TestGridResult, error)
	GetTargetsWithOffset(ctx context.Context, label *string, offset *int, limit *int, sortBy *string, direction *string) (*model.TargetGridResult, error)
	GetAveragePassPercentageForLabel(ctx context.Context, label string) (*float64, error)
}
type ResourceUsageResolver interface {
	ID(ctx context.Context, obj *ent.ResourceUsage) (string, error)
}
type RunnerCountResolver interface {
	ID(ctx context.Context, obj *ent.RunnerCount) (string, error)
}
type SourceControlResolver interface {
	ID(ctx context.Context, obj *ent.SourceControl) (string, error)
}
type SystemNetworkStatsResolver interface {
	ID(ctx context.Context, obj *ent.SystemNetworkStats) (string, error)
}
type TargetResolver interface {
	ID(ctx context.Context, obj *ent.Target) (string, error)
}
type TargetMetricsResolver interface {
	ID(ctx context.Context, obj *ent.TargetMetrics) (string, error)
}
type TestCollectionResolver interface {
	ID(ctx context.Context, obj *ent.TestCollection) (string, error)
}
type TestFileResolver interface {
	ID(ctx context.Context, obj *ent.TestFile) (string, error)
}
type TestResultResolver interface {
	ActionLogOutput(ctx context.Context, obj *model.TestResult) (*model.BlobReference, error)
	UndeclaredTestOutputs(ctx context.Context, obj *model.TestResult) (*model.BlobReference, error)
}
type TestResultBESResolver interface {
	ID(ctx context.Context, obj *ent.TestResultBES) (string, error)
}
type TestSummaryResolver interface {
	ID(ctx context.Context, obj *ent.TestSummary) (string, error)
}
type TimingBreakdownResolver interface {
	ID(ctx context.Context, obj *ent.TimingBreakdown) (string, error)
}
type TimingChildResolver interface {
	ID(ctx context.Context, obj *ent.TimingChild) (string, error)
}
type TimingMetricsResolver interface {
	ID(ctx context.Context, obj *ent.TimingMetrics) (string, error)
}

type ActionCacheStatisticsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
}
type ActionDataWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ActionDataWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ActionDataWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
}
type ActionSummaryWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ActionSummaryWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ActionSummaryWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
}
type ArtifactMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
}
type BazelInvocationProblemWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
}
type BazelInvocationWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BazelInvocationWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BazelInvocationWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
}
type BlobWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BlobWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BlobWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
}
type BuildGraphMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BuildGraphMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BuildGraphMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BuildGraphMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BuildGraphMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BuildGraphMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BuildGraphMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BuildGraphMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BuildGraphMetricsWhereInput, data *string) error
}
type BuildWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BuildWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BuildWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
}
type CumulativeMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
}
type EvaluationStatWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.EvaluationStatWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.EvaluationStatWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.EvaluationStatWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.EvaluationStatWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.EvaluationStatWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.EvaluationStatWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.EvaluationStatWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.EvaluationStatWhereInput, data *string) error
}
type ExectionInfoWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ExectionInfoWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ExectionInfoWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ExectionInfoWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ExectionInfoWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ExectionInfoWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ExectionInfoWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ExectionInfoWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ExectionInfoWhereInput, data *string) error
}
type GarbageMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
}
type IncompleteBuildLogWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.IncompleteBuildLogWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.IncompleteBuildLogWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.IncompleteBuildLogWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.IncompleteBuildLogWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.IncompleteBuildLogWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.IncompleteBuildLogWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.IncompleteBuildLogWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.IncompleteBuildLogWhereInput, data *string) error
}
type InvocationFilesWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.InvocationFilesWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.InvocationFilesWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.InvocationFilesWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.InvocationFilesWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.InvocationFilesWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.InvocationFilesWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.InvocationFilesWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.InvocationFilesWhereInput, data *string) error
}
type MemoryMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
}
type MetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.MetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.MetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
}
type MissDetailWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.MissDetailWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.MissDetailWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
}
type NamedSetOfFilesWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.NamedSetOfFilesWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.NamedSetOfFilesWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.NamedSetOfFilesWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.NamedSetOfFilesWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.NamedSetOfFilesWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.NamedSetOfFilesWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.NamedSetOfFilesWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.NamedSetOfFilesWhereInput, data *string) error
}
type NetworkMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
}
type OutputGroupWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.OutputGroupWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.OutputGroupWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.OutputGroupWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.OutputGroupWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.OutputGroupWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.OutputGroupWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.OutputGroupWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.OutputGroupWhereInput, data *string) error
}
type PackageLoadMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
}
type PackageMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.PackageMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.PackageMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
}
type ResourceUsageWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ResourceUsageWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ResourceUsageWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ResourceUsageWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ResourceUsageWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ResourceUsageWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ResourceUsageWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ResourceUsageWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ResourceUsageWhereInput, data *string) error
}
type RunnerCountWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.RunnerCountWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.RunnerCountWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
}
type SourceControlWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.SourceControlWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.SourceControlWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.SourceControlWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.SourceControlWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.SourceControlWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.SourceControlWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.SourceControlWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.SourceControlWhereInput, data *string) error
}
type SystemNetworkStatsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
}
type TargetMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TargetMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TargetMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
}
type TargetWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TargetWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TargetWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TargetWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TargetWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TargetWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TargetWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TargetWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TargetWhereInput, data *string) error
}
type TestCollectionWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TestCollectionWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TestCollectionWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TestCollectionWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TestCollectionWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TestCollectionWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TestCollectionWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TestCollectionWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TestCollectionWhereInput, data *string) error
}
type TestFileWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TestFileWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TestFileWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TestFileWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TestFileWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TestFileWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TestFileWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TestFileWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TestFileWhereInput, data *string) error
}
type TestResultBESWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TestResultBESWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TestResultBESWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TestResultBESWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TestResultBESWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TestResultBESWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TestResultBESWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TestResultBESWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TestResultBESWhereInput, data *string) error
}
type TestSummaryWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TestSummaryWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TestSummaryWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TestSummaryWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TestSummaryWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TestSummaryWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TestSummaryWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TestSummaryWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TestSummaryWhereInput, data *string) error
}
type TimingBreakdownWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TimingBreakdownWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TimingBreakdownWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TimingBreakdownWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TimingBreakdownWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TimingBreakdownWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TimingBreakdownWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TimingBreakdownWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TimingBreakdownWhereInput, data *string) error
}
type TimingChildWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TimingChildWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TimingChildWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TimingChildWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TimingChildWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TimingChildWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TimingChildWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TimingChildWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TimingChildWhereInput, data *string) error
}
type TimingMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TimingMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TimingMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ActionCacheStatistics.actionSummary":
		if e.complexity.ActionCacheStatistics.ActionSummary == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.ActionSummary(childComplexity), true

	case "ActionCacheStatistics.hits":
		if e.complexity.ActionCacheStatistics.Hits == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.Hits(childComplexity), true

	case "ActionCacheStatistics.id":
		if e.complexity.ActionCacheStatistics.ID == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.ID(childComplexity), true

	case "ActionCacheStatistics.loadTimeInMs":
		if e.complexity.ActionCacheStatistics.LoadTimeInMs == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.LoadTimeInMs(childComplexity), true

	case "ActionCacheStatistics.missDetails":
		if e.complexity.ActionCacheStatistics.MissDetails == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.MissDetails(childComplexity), true

	case "ActionCacheStatistics.misses":
		if e.complexity.ActionCacheStatistics.Misses == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.Misses(childComplexity), true

	case "ActionCacheStatistics.saveTimeInMs":
		if e.complexity.ActionCacheStatistics.SaveTimeInMs == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.SaveTimeInMs(childComplexity), true

	case "ActionCacheStatistics.sizeInBytes":
		if e.complexity.ActionCacheStatistics.SizeInBytes == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.SizeInBytes(childComplexity), true

	case "ActionData.actionSummary":
		if e.complexity.ActionData.ActionSummary == nil {
			break
		}

		return e.complexity.ActionData.ActionSummary(childComplexity), true

	case "ActionData.actionsCreated":
		if e.complexity.ActionData.ActionsCreated == nil {
			break
		}

		return e.complexity.ActionData.ActionsCreated(childComplexity), true

	case "ActionData.actionsExecuted":
		if e.complexity.ActionData.ActionsExecuted == nil {
			break
		}

		return e.complexity.ActionData.ActionsExecuted(childComplexity), true

	case "ActionData.firstStartedMs":
		if e.complexity.ActionData.FirstStartedMs == nil {
			break
		}

		return e.complexity.ActionData.FirstStartedMs(childComplexity), true

	case "ActionData.id":
		if e.complexity.ActionData.ID == nil {
			break
		}

		return e.complexity.ActionData.ID(childComplexity), true

	case "ActionData.lastEndedMs":
		if e.complexity.ActionData.LastEndedMs == nil {
			break
		}

		return e.complexity.ActionData.LastEndedMs(childComplexity), true

	case "ActionData.mnemonic":
		if e.complexity.ActionData.Mnemonic == nil {
			break
		}

		return e.complexity.ActionData.Mnemonic(childComplexity), true

	case "ActionData.systemTime":
		if e.complexity.ActionData.SystemTime == nil {
			break
		}

		return e.complexity.ActionData.SystemTime(childComplexity), true

	case "ActionData.userTime":
		if e.complexity.ActionData.UserTime == nil {
			break
		}

		return e.complexity.ActionData.UserTime(childComplexity), true

	case "ActionProblem.id":
		if e.complexity.ActionProblem.ID == nil {
			break
		}

		return e.complexity.ActionProblem.ID(childComplexity), true

	case "ActionProblem.label":
		if e.complexity.ActionProblem.Label == nil {
			break
		}

		return e.complexity.ActionProblem.Label(childComplexity), true

	case "ActionProblem.stderr":
		if e.complexity.ActionProblem.Stderr == nil {
			break
		}

		return e.complexity.ActionProblem.Stderr(childComplexity), true

	case "ActionProblem.stdout":
		if e.complexity.ActionProblem.Stdout == nil {
			break
		}

		return e.complexity.ActionProblem.Stdout(childComplexity), true

	case "ActionProblem.type":
		if e.complexity.ActionProblem.Type == nil {
			break
		}

		return e.complexity.ActionProblem.Type(childComplexity), true

	case "ActionSummary.actionCacheStatistics":
		if e.complexity.ActionSummary.ActionCacheStatistics == nil {
			break
		}

		return e.complexity.ActionSummary.ActionCacheStatistics(childComplexity), true

	case "ActionSummary.actionData":
		if e.complexity.ActionSummary.ActionData == nil {
			break
		}

		return e.complexity.ActionSummary.ActionData(childComplexity), true

	case "ActionSummary.actionsCreated":
		if e.complexity.ActionSummary.ActionsCreated == nil {
			break
		}

		return e.complexity.ActionSummary.ActionsCreated(childComplexity), true

	case "ActionSummary.actionsCreatedNotIncludingAspects":
		if e.complexity.ActionSummary.ActionsCreatedNotIncludingAspects == nil {
			break
		}

		return e.complexity.ActionSummary.ActionsCreatedNotIncludingAspects(childComplexity), true

	case "ActionSummary.actionsExecuted":
		if e.complexity.ActionSummary.ActionsExecuted == nil {
			break
		}

		return e.complexity.ActionSummary.ActionsExecuted(childComplexity), true

	case "ActionSummary.id":
		if e.complexity.ActionSummary.ID == nil {
			break
		}

		return e.complexity.ActionSummary.ID(childComplexity), true

	case "ActionSummary.metrics":
		if e.complexity.ActionSummary.Metrics == nil {
			break
		}

		return e.complexity.ActionSummary.Metrics(childComplexity), true

	case "ActionSummary.remoteCacheHits":
		if e.complexity.ActionSummary.RemoteCacheHits == nil {
			break
		}

		return e.complexity.ActionSummary.RemoteCacheHits(childComplexity), true

	case "ActionSummary.runnerCount":
		if e.complexity.ActionSummary.RunnerCount == nil {
			break
		}

		return e.complexity.ActionSummary.RunnerCount(childComplexity), true

	case "ArtifactMetrics.id":
		if e.complexity.ArtifactMetrics.ID == nil {
			break
		}

		return e.complexity.ArtifactMetrics.ID(childComplexity), true

	case "ArtifactMetrics.metrics":
		if e.complexity.ArtifactMetrics.Metrics == nil {
			break
		}

		return e.complexity.ArtifactMetrics.Metrics(childComplexity), true

	case "ArtifactMetrics.outputArtifactsFromActionCacheCount":
		if e.complexity.ArtifactMetrics.OutputArtifactsFromActionCacheCount == nil {
			break
		}

		return e.complexity.ArtifactMetrics.OutputArtifactsFromActionCacheCount(childComplexity), true

	case "ArtifactMetrics.outputArtifactsFromActionCacheSizeInBytes":
		if e.complexity.ArtifactMetrics.OutputArtifactsFromActionCacheSizeInBytes == nil {
			break
		}

		return e.complexity.ArtifactMetrics.OutputArtifactsFromActionCacheSizeInBytes(childComplexity), true

	case "ArtifactMetrics.outputArtifactsSeenCount":
		if e.complexity.ArtifactMetrics.OutputArtifactsSeenCount == nil {
			break
		}

		return e.complexity.ArtifactMetrics.OutputArtifactsSeenCount(childComplexity), true

	case "ArtifactMetrics.outputArtifactsSeenSizeInBytes":
		if e.complexity.ArtifactMetrics.OutputArtifactsSeenSizeInBytes == nil {
			break
		}

		return e.complexity.ArtifactMetrics.OutputArtifactsSeenSizeInBytes(childComplexity), true

	case "ArtifactMetrics.sourceArtifactsReadCount":
		if e.complexity.ArtifactMetrics.SourceArtifactsReadCount == nil {
			break
		}

		return e.complexity.ArtifactMetrics.SourceArtifactsReadCount(childComplexity), true

	case "ArtifactMetrics.sourceArtifactsReadSizeInBytes":
		if e.complexity.ArtifactMetrics.SourceArtifactsReadSizeInBytes == nil {
			break
		}

		return e.complexity.ArtifactMetrics.SourceArtifactsReadSizeInBytes(childComplexity), true

	case "ArtifactMetrics.topLevelArtifactsCount":
		if e.complexity.ArtifactMetrics.TopLevelArtifactsCount == nil {
			break
		}

		return e.complexity.ArtifactMetrics.TopLevelArtifactsCount(childComplexity), true

	case "ArtifactMetrics.topLevelArtifactsSizeInBytes":
		if e.complexity.ArtifactMetrics.TopLevelArtifactsSizeInBytes == nil {
			break
		}

		return e.complexity.ArtifactMetrics.TopLevelArtifactsSizeInBytes(childComplexity), true

	case "BazelCommand.cmdLine":
		if e.complexity.BazelCommand.CmdLine == nil {
			break
		}

		return e.complexity.BazelCommand.CmdLine(childComplexity), true

	case "BazelCommand.command":
		if e.complexity.BazelCommand.Command == nil {
			break
		}

		return e.complexity.BazelCommand.Command(childComplexity), true

	case "BazelCommand.executable":
		if e.complexity.BazelCommand.Executable == nil {
			break
		}

		return e.complexity.BazelCommand.Executable(childComplexity), true

	case "BazelCommand.explicitCmdLine":
		if e.complexity.BazelCommand.ExplicitCmdLine == nil {
			break
		}

		return e.complexity.BazelCommand.ExplicitCmdLine(childComplexity), true

	case "BazelCommand.explicitStartupOptions":
		if e.complexity.BazelCommand.ExplicitStartupOptions == nil {
			break
		}

		return e.complexity.BazelCommand.ExplicitStartupOptions(childComplexity), true

	case "BazelCommand.id":
		if e.complexity.BazelCommand.ID == nil {
			break
		}

		return e.complexity.BazelCommand.ID(childComplexity), true

	case "BazelCommand.residual":
		if e.complexity.BazelCommand.Residual == nil {
			break
		}

		return e.complexity.BazelCommand.Residual(childComplexity), true

	case "BazelCommand.startupOptions":
		if e.complexity.BazelCommand.StartupOptions == nil {
			break
		}

		return e.complexity.BazelCommand.StartupOptions(childComplexity), true

	case "BazelInvocation.bazelCommand":
		if e.complexity.BazelInvocation.BazelCommand == nil {
			break
		}

		return e.complexity.BazelInvocation.BazelCommand(childComplexity), true

	case "BazelInvocation.bazelVersion":
		if e.complexity.BazelInvocation.BazelVersion == nil {
			break
		}

		return e.complexity.BazelInvocation.BazelVersion(childComplexity), true

	case "BazelInvocation.bepCompleted":
		if e.complexity.BazelInvocation.BepCompleted == nil {
			break
		}

		return e.complexity.BazelInvocation.BepCompleted(childComplexity), true

	case "BazelInvocation.build":
		if e.complexity.BazelInvocation.Build == nil {
			break
		}

		return e.complexity.BazelInvocation.Build(childComplexity), true

	case "BazelInvocation.buildLogs":
		if e.complexity.BazelInvocation.BuildLogs == nil {
			break
		}

		return e.complexity.BazelInvocation.BuildLogs(childComplexity), true

	case "BazelInvocation.cpu":
		if e.complexity.BazelInvocation.CPU == nil {
			break
		}

		return e.complexity.BazelInvocation.CPU(childComplexity), true

	case "BazelInvocation.changeNumber":
		if e.complexity.BazelInvocation.ChangeNumber == nil {
			break
		}

		return e.complexity.BazelInvocation.ChangeNumber(childComplexity), true

	case "BazelInvocation.configurationMnemonic":
		if e.complexity.BazelInvocation.ConfigurationMnemonic == nil {
			break
		}

		return e.complexity.BazelInvocation.ConfigurationMnemonic(childComplexity), true

	case "BazelInvocation.endedAt":
		if e.complexity.BazelInvocation.EndedAt == nil {
			break
		}

		return e.complexity.BazelInvocation.EndedAt(childComplexity), true

	case "BazelInvocation.exitCodeCode":
		if e.complexity.BazelInvocation.ExitCodeCode == nil {
			break
		}

		return e.complexity.BazelInvocation.ExitCodeCode(childComplexity), true

	case "BazelInvocation.exitCodeName":
		if e.complexity.BazelInvocation.ExitCodeName == nil {
			break
		}

		return e.complexity.BazelInvocation.ExitCodeName(childComplexity), true

	case "BazelInvocation.hostname":
		if e.complexity.BazelInvocation.Hostname == nil {
			break
		}

		return e.complexity.BazelInvocation.Hostname(childComplexity), true

	case "BazelInvocation.id":
		if e.complexity.BazelInvocation.ID == nil {
			break
		}

		return e.complexity.BazelInvocation.ID(childComplexity), true

	case "BazelInvocation.incompleteBuildLogs":
		if e.complexity.BazelInvocation.IncompleteBuildLogs == nil {
			break
		}

		return e.complexity.BazelInvocation.IncompleteBuildLogs(childComplexity), true

	case "BazelInvocation.instanceName":
		if e.complexity.BazelInvocation.InstanceName == nil {
			break
		}

		return e.complexity.BazelInvocation.InstanceName(childComplexity), true

	case "BazelInvocation.invocationFiles":
		if e.complexity.BazelInvocation.InvocationFiles == nil {
			break
		}

		return e.complexity.BazelInvocation.InvocationFiles(childComplexity), true

	case "BazelInvocation.invocationID":
		if e.complexity.BazelInvocation.InvocationID == nil {
			break
		}

		return e.complexity.BazelInvocation.InvocationID(childComplexity), true

	case "BazelInvocation.isCiWorker":
		if e.complexity.BazelInvocation.IsCiWorker == nil {
			break
		}

		return e.complexity.BazelInvocation.IsCiWorker(childComplexity), true

	case "BazelInvocation.metrics":
		if e.complexity.BazelInvocation.Metrics == nil {
			break
		}

		return e.complexity.BazelInvocation.Metrics(childComplexity), true

	case "BazelInvocation.numFetches":
		if e.complexity.BazelInvocation.NumFetches == nil {
			break
		}

		return e.complexity.BazelInvocation.NumFetches(childComplexity), true

	case "BazelInvocation.patchsetNumber":
		if e.complexity.BazelInvocation.PatchsetNumber == nil {
			break
		}

		return e.complexity.BazelInvocation.PatchsetNumber(childComplexity), true

	case "BazelInvocation.platformName":
		if e.complexity.BazelInvocation.PlatformName == nil {
			break
		}

		return e.complexity.BazelInvocation.PlatformName(childComplexity), true

	case "BazelInvocation.problems":
		if e.complexity.BazelInvocation.Problems == nil {
			break
		}

		return e.complexity.BazelInvocation.Problems(childComplexity), true

	case "BazelInvocation.profile":
		if e.complexity.BazelInvocation.Profile == nil {
			break
		}

		return e.complexity.BazelInvocation.Profile(childComplexity), true

	case "BazelInvocation.sourceControl":
		if e.complexity.BazelInvocation.SourceControl == nil {
			break
		}

		return e.complexity.BazelInvocation.SourceControl(childComplexity), true

	case "BazelInvocation.startedAt":
		if e.complexity.BazelInvocation.StartedAt == nil {
			break
		}

		return e.complexity.BazelInvocation.StartedAt(childComplexity), true

	case "BazelInvocation.state":
		if e.complexity.BazelInvocation.State == nil {
			break
		}

		return e.complexity.BazelInvocation.State(childComplexity), true

	case "BazelInvocation.stepLabel":
		if e.complexity.BazelInvocation.StepLabel == nil {
			break
		}

		return e.complexity.BazelInvocation.StepLabel(childComplexity), true

	case "BazelInvocation.targets":
		if e.complexity.BazelInvocation.Targets == nil {
			break
		}

		return e.complexity.BazelInvocation.Targets(childComplexity), true

	case "BazelInvocation.testCollection":
		if e.complexity.BazelInvocation.TestCollection == nil {
			break
		}

		return e.complexity.BazelInvocation.TestCollection(childComplexity), true

	case "BazelInvocation.user":
		if e.complexity.BazelInvocation.User == nil {
			break
		}

		return e.complexity.BazelInvocation.User(childComplexity), true

	case "BazelInvocation.userEmail":
		if e.complexity.BazelInvocation.UserEmail == nil {
			break
		}

		return e.complexity.BazelInvocation.UserEmail(childComplexity), true

	case "BazelInvocation.userLdap":
		if e.complexity.BazelInvocation.UserLdap == nil {
			break
		}

		return e.complexity.BazelInvocation.UserLdap(childComplexity), true

	case "BazelInvocationConnection.edges":
		if e.complexity.BazelInvocationConnection.Edges == nil {
			break
		}

		return e.complexity.BazelInvocationConnection.Edges(childComplexity), true

	case "BazelInvocationConnection.pageInfo":
		if e.complexity.BazelInvocationConnection.PageInfo == nil {
			break
		}

		return e.complexity.BazelInvocationConnection.PageInfo(childComplexity), true

	case "BazelInvocationConnection.totalCount":
		if e.complexity.BazelInvocationConnection.TotalCount == nil {
			break
		}

		return e.complexity.BazelInvocationConnection.TotalCount(childComplexity), true

	case "BazelInvocationEdge.cursor":
		if e.complexity.BazelInvocationEdge.Cursor == nil {
			break
		}

		return e.complexity.BazelInvocationEdge.Cursor(childComplexity), true

	case "BazelInvocationEdge.node":
		if e.complexity.BazelInvocationEdge.Node == nil {
			break
		}

		return e.complexity.BazelInvocationEdge.Node(childComplexity), true

	case "BazelInvocationProblem.bazelInvocation":
		if e.complexity.BazelInvocationProblem.BazelInvocation == nil {
			break
		}

		return e.complexity.BazelInvocationProblem.BazelInvocation(childComplexity), true

	case "BazelInvocationProblem.id":
		if e.complexity.BazelInvocationProblem.ID == nil {
			break
		}

		return e.complexity.BazelInvocationProblem.ID(childComplexity), true

	case "BazelInvocationProblem.label":
		if e.complexity.BazelInvocationProblem.Label == nil {
			break
		}

		return e.complexity.BazelInvocationProblem.Label(childComplexity), true

	case "BazelInvocationProblem.problemType":
		if e.complexity.BazelInvocationProblem.ProblemType == nil {
			break
		}

		return e.complexity.BazelInvocationProblem.ProblemType(childComplexity), true

	case "BazelInvocationState.bepCompleted":
		if e.complexity.BazelInvocationState.BepCompleted == nil {
			break
		}

		return e.complexity.BazelInvocationState.BepCompleted(childComplexity), true

	case "BazelInvocationState.buildEndTime":
		if e.complexity.BazelInvocationState.BuildEndTime == nil {
			break
		}

		return e.complexity.BazelInvocationState.BuildEndTime(childComplexity), true

	case "BazelInvocationState.buildStartTime":
		if e.complexity.BazelInvocationState.BuildStartTime == nil {
			break
		}

		return e.complexity.BazelInvocationState.BuildStartTime(childComplexity), true

	case "BazelInvocationState.exitCode":
		if e.complexity.BazelInvocationState.ExitCode == nil {
			break
		}

		return e.complexity.BazelInvocationState.ExitCode(childComplexity), true

	case "BazelInvocationState.id":
		if e.complexity.BazelInvocationState.ID == nil {
			break
		}

		return e.complexity.BazelInvocationState.ID(childComplexity), true

	case "Blob.archiveURL":
		if e.complexity.Blob.ArchiveURL == nil {
			break
		}

		return e.complexity.Blob.ArchiveURL(childComplexity), true

	case "Blob.archivingStatus":
		if e.complexity.Blob.ArchivingStatus == nil {
			break
		}

		return e.complexity.Blob.ArchivingStatus(childComplexity), true

	case "Blob.id":
		if e.complexity.Blob.ID == nil {
			break
		}

		return e.complexity.Blob.ID(childComplexity), true

	case "Blob.instanceName":
		if e.complexity.Blob.InstanceName == nil {
			break
		}

		return e.complexity.Blob.InstanceName(childComplexity), true

	case "Blob.reason":
		if e.complexity.Blob.Reason == nil {
			break
		}

		return e.complexity.Blob.Reason(childComplexity), true

	case "Blob.sizeBytes":
		if e.complexity.Blob.SizeBytes == nil {
			break
		}

		return e.complexity.Blob.SizeBytes(childComplexity), true

	case "Blob.uri":
		if e.complexity.Blob.URI == nil {
			break
		}

		return e.complexity.Blob.URI(childComplexity), true

	case "BlobReference.availabilityStatus":
		if e.complexity.BlobReference.AvailabilityStatus == nil {
			break
		}

		return e.complexity.BlobReference.AvailabilityStatus(childComplexity), true

	case "BlobReference.downloadURL":
		if e.complexity.BlobReference.DownloadURL == nil {
			break
		}

		return e.complexity.BlobReference.DownloadURL(childComplexity), true

	case "BlobReference.ephemeralURL":
		if e.complexity.BlobReference.EphemeralURL == nil {
			break
		}

		return e.complexity.BlobReference.EphemeralURL(childComplexity), true

	case "BlobReference.name":
		if e.complexity.BlobReference.Name == nil {
			break
		}

		return e.complexity.BlobReference.Name(childComplexity), true

	case "BlobReference.sizeInBytes":
		if e.complexity.BlobReference.SizeInBytes == nil {
			break
		}

		return e.complexity.BlobReference.SizeInBytes(childComplexity), true

	case "Build.buildURL":
		if e.complexity.Build.BuildURL == nil {
			break
		}

		return e.complexity.Build.BuildURL(childComplexity), true

	case "Build.buildUUID":
		if e.complexity.Build.BuildUUID == nil {
			break
		}

		return e.complexity.Build.BuildUUID(childComplexity), true

	case "Build.id":
		if e.complexity.Build.ID == nil {
			break
		}

		return e.complexity.Build.ID(childComplexity), true

	case "Build.instanceName":
		if e.complexity.Build.InstanceName == nil {
			break
		}

		return e.complexity.Build.InstanceName(childComplexity), true

	case "Build.invocations":
		if e.complexity.Build.Invocations == nil {
			break
		}

		return e.complexity.Build.Invocations(childComplexity), true

	case "Build.timestamp":
		if e.complexity.Build.Timestamp == nil {
			break
		}

		return e.complexity.Build.Timestamp(childComplexity), true

	case "BuildConnection.edges":
		if e.complexity.BuildConnection.Edges == nil {
			break
		}

		return e.complexity.BuildConnection.Edges(childComplexity), true

	case "BuildConnection.pageInfo":
		if e.complexity.BuildConnection.PageInfo == nil {
			break
		}

		return e.complexity.BuildConnection.PageInfo(childComplexity), true

	case "BuildConnection.totalCount":
		if e.complexity.BuildConnection.TotalCount == nil {
			break
		}

		return e.complexity.BuildConnection.TotalCount(childComplexity), true

	case "BuildEdge.cursor":
		if e.complexity.BuildEdge.Cursor == nil {
			break
		}

		return e.complexity.BuildEdge.Cursor(childComplexity), true

	case "BuildEdge.node":
		if e.complexity.BuildEdge.Node == nil {
			break
		}

		return e.complexity.BuildEdge.Node(childComplexity), true

	case "BuildGraphMetrics.actionCount":
		if e.complexity.BuildGraphMetrics.ActionCount == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.ActionCount(childComplexity), true

	case "BuildGraphMetrics.actionCountNotIncludingAspects":
		if e.complexity.BuildGraphMetrics.ActionCountNotIncludingAspects == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.ActionCountNotIncludingAspects(childComplexity), true

	case "BuildGraphMetrics.actionLookupValueCount":
		if e.complexity.BuildGraphMetrics.ActionLookupValueCount == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.ActionLookupValueCount(childComplexity), true

	case "BuildGraphMetrics.actionLookupValueCountNotIncludingAspects":
		if e.complexity.BuildGraphMetrics.ActionLookupValueCountNotIncludingAspects == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.ActionLookupValueCountNotIncludingAspects(childComplexity), true

	case "BuildGraphMetrics.builtValues":
		if e.complexity.BuildGraphMetrics.BuiltValues == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.BuiltValues(childComplexity), true

	case "BuildGraphMetrics.changedValues":
		if e.complexity.BuildGraphMetrics.ChangedValues == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.ChangedValues(childComplexity), true

	case "BuildGraphMetrics.cleanedValues":
		if e.complexity.BuildGraphMetrics.CleanedValues == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.CleanedValues(childComplexity), true

	case "BuildGraphMetrics.dirtiedValues":
		if e.complexity.BuildGraphMetrics.DirtiedValues == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.DirtiedValues(childComplexity), true

	case "BuildGraphMetrics.evaluatedValues":
		if e.complexity.BuildGraphMetrics.EvaluatedValues == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.EvaluatedValues(childComplexity), true

	case "BuildGraphMetrics.id":
		if e.complexity.BuildGraphMetrics.ID == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.ID(childComplexity), true

	case "BuildGraphMetrics.inputFileConfiguredTargetCount":
		if e.complexity.BuildGraphMetrics.InputFileConfiguredTargetCount == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.InputFileConfiguredTargetCount(childComplexity), true

	case "BuildGraphMetrics.metrics":
		if e.complexity.BuildGraphMetrics.Metrics == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.Metrics(childComplexity), true

	case "BuildGraphMetrics.otherConfiguredTargetCount":
		if e.complexity.BuildGraphMetrics.OtherConfiguredTargetCount == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.OtherConfiguredTargetCount(childComplexity), true

	case "BuildGraphMetrics.outputArtifactCount":
		if e.complexity.BuildGraphMetrics.OutputArtifactCount == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.OutputArtifactCount(childComplexity), true

	case "BuildGraphMetrics.outputFileConfiguredTargetCount":
		if e.complexity.BuildGraphMetrics.OutputFileConfiguredTargetCount == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.OutputFileConfiguredTargetCount(childComplexity), true

	case "BuildGraphMetrics.postInvocationSkyframeNodeCount":
		if e.complexity.BuildGraphMetrics.PostInvocationSkyframeNodeCount == nil {
			break
		}

		return e.complexity.BuildGraphMetrics.PostInvocationSkyframeNodeCount(childComplexity), true

	case "CumulativeMetrics.id":
		if e.complexity.CumulativeMetrics.ID == nil {
			break
		}

		return e.complexity.CumulativeMetrics.ID(childComplexity), true

	case "CumulativeMetrics.metrics":
		if e.complexity.CumulativeMetrics.Metrics == nil {
			break
		}

		return e.complexity.CumulativeMetrics.Metrics(childComplexity), true

	case "CumulativeMetrics.numAnalyses":
		if e.complexity.CumulativeMetrics.NumAnalyses == nil {
			break
		}

		return e.complexity.CumulativeMetrics.NumAnalyses(childComplexity), true

	case "CumulativeMetrics.numBuilds":
		if e.complexity.CumulativeMetrics.NumBuilds == nil {
			break
		}

		return e.complexity.CumulativeMetrics.NumBuilds(childComplexity), true

	case "EvaluationStat.buildGraphMetrics":
		if e.complexity.EvaluationStat.BuildGraphMetrics == nil {
			break
		}

		return e.complexity.EvaluationStat.BuildGraphMetrics(childComplexity), true

	case "EvaluationStat.count":
		if e.complexity.EvaluationStat.Count == nil {
			break
		}

		return e.complexity.EvaluationStat.Count(childComplexity), true

	case "EvaluationStat.id":
		if e.complexity.EvaluationStat.ID == nil {
			break
		}

		return e.complexity.EvaluationStat.ID(childComplexity), true

	case "EvaluationStat.skyfunctionName":
		if e.complexity.EvaluationStat.SkyfunctionName == nil {
			break
		}

		return e.complexity.EvaluationStat.SkyfunctionName(childComplexity), true

	case "ExectionInfo.cachedRemotely":
		if e.complexity.ExectionInfo.CachedRemotely == nil {
			break
		}

		return e.complexity.ExectionInfo.CachedRemotely(childComplexity), true

	case "ExectionInfo.exitCode":
		if e.complexity.ExectionInfo.ExitCode == nil {
			break
		}

		return e.complexity.ExectionInfo.ExitCode(childComplexity), true

	case "ExectionInfo.hostname":
		if e.complexity.ExectionInfo.Hostname == nil {
			break
		}

		return e.complexity.ExectionInfo.Hostname(childComplexity), true

	case "ExectionInfo.id":
		if e.complexity.ExectionInfo.ID == nil {
			break
		}

		return e.complexity.ExectionInfo.ID(childComplexity), true

	case "ExectionInfo.resourceUsage":
		if e.complexity.ExectionInfo.ResourceUsage == nil {
			break
		}

		return e.complexity.ExectionInfo.ResourceUsage(childComplexity), true

	case "ExectionInfo.strategy":
		if e.complexity.ExectionInfo.Strategy == nil {
			break
		}

		return e.complexity.ExectionInfo.Strategy(childComplexity), true

	case "ExectionInfo.testResult":
		if e.complexity.ExectionInfo.TestResult == nil {
			break
		}

		return e.complexity.ExectionInfo.TestResult(childComplexity), true

	case "ExectionInfo.timeoutSeconds":
		if e.complexity.ExectionInfo.TimeoutSeconds == nil {
			break
		}

		return e.complexity.ExectionInfo.TimeoutSeconds(childComplexity), true

	case "ExectionInfo.timingBreakdown":
		if e.complexity.ExectionInfo.TimingBreakdown == nil {
			break
		}

		return e.complexity.ExectionInfo.TimingBreakdown(childComplexity), true

	case "ExitCode.code":
		if e.complexity.ExitCode.Code == nil {
			break
		}

		return e.complexity.ExitCode.Code(childComplexity), true

	case "ExitCode.id":
		if e.complexity.ExitCode.ID == nil {
			break
		}

		return e.complexity.ExitCode.ID(childComplexity), true

	case "ExitCode.name":
		if e.complexity.ExitCode.Name == nil {
			break
		}

		return e.complexity.ExitCode.Name(childComplexity), true

	case "GarbageMetrics.garbageCollected":
		if e.complexity.GarbageMetrics.GarbageCollected == nil {
			break
		}

		return e.complexity.GarbageMetrics.GarbageCollected(childComplexity), true

	case "GarbageMetrics.id":
		if e.complexity.GarbageMetrics.ID == nil {
			break
		}

		return e.complexity.GarbageMetrics.ID(childComplexity), true

	case "GarbageMetrics.memoryMetrics":
		if e.complexity.GarbageMetrics.MemoryMetrics == nil {
			break
		}

		return e.complexity.GarbageMetrics.MemoryMetrics(childComplexity), true

	case "GarbageMetrics.type":
		if e.complexity.GarbageMetrics.Type == nil {
			break
		}

		return e.complexity.GarbageMetrics.Type(childComplexity), true

	case "IncompleteBuildLog.bazelInvocation":
		if e.complexity.IncompleteBuildLog.BazelInvocation == nil {
			break
		}

		return e.complexity.IncompleteBuildLog.BazelInvocation(childComplexity), true

	case "IncompleteBuildLog.id":
		if e.complexity.IncompleteBuildLog.ID == nil {
			break
		}

		return e.complexity.IncompleteBuildLog.ID(childComplexity), true

	case "IncompleteBuildLog.logSnippet":
		if e.complexity.IncompleteBuildLog.LogSnippet == nil {
			break
		}

		return e.complexity.IncompleteBuildLog.LogSnippet(childComplexity), true

	case "IncompleteBuildLog.snippetID":
		if e.complexity.IncompleteBuildLog.SnippetID == nil {
			break
		}

		return e.complexity.IncompleteBuildLog.SnippetID(childComplexity), true

	case "InvocationFiles.bazelInvocation":
		if e.complexity.InvocationFiles.BazelInvocation == nil {
			break
		}

		return e.complexity.InvocationFiles.BazelInvocation(childComplexity), true

	case "InvocationFiles.content":
		if e.complexity.InvocationFiles.Content == nil {
			break
		}

		return e.complexity.InvocationFiles.Content(childComplexity), true

	case "InvocationFiles.digest":
		if e.complexity.InvocationFiles.Digest == nil {
			break
		}

		return e.complexity.InvocationFiles.Digest(childComplexity), true

	case "InvocationFiles.digestFunction":
		if e.complexity.InvocationFiles.DigestFunction == nil {
			break
		}

		return e.complexity.InvocationFiles.DigestFunction(childComplexity), true

	case "InvocationFiles.id":
		if e.complexity.InvocationFiles.ID == nil {
			break
		}

		return e.complexity.InvocationFiles.ID(childComplexity), true

	case "InvocationFiles.name":
		if e.complexity.InvocationFiles.Name == nil {
			break
		}

		return e.complexity.InvocationFiles.Name(childComplexity), true

	case "InvocationFiles.sizeBytes":
		if e.complexity.InvocationFiles.SizeBytes == nil {
			break
		}

		return e.complexity.InvocationFiles.SizeBytes(childComplexity), true

	case "MemoryMetrics.garbageMetrics":
		if e.complexity.MemoryMetrics.GarbageMetrics == nil {
			break
		}

		return e.complexity.MemoryMetrics.GarbageMetrics(childComplexity), true

	case "MemoryMetrics.id":
		if e.complexity.MemoryMetrics.ID == nil {
			break
		}

		return e.complexity.MemoryMetrics.ID(childComplexity), true

	case "MemoryMetrics.metrics":
		if e.complexity.MemoryMetrics.Metrics == nil {
			break
		}

		return e.complexity.MemoryMetrics.Metrics(childComplexity), true

	case "MemoryMetrics.peakPostGcHeapSize":
		if e.complexity.MemoryMetrics.PeakPostGcHeapSize == nil {
			break
		}

		return e.complexity.MemoryMetrics.PeakPostGcHeapSize(childComplexity), true

	case "MemoryMetrics.peakPostGcTenuredSpaceHeapSize":
		if e.complexity.MemoryMetrics.PeakPostGcTenuredSpaceHeapSize == nil {
			break
		}

		return e.complexity.MemoryMetrics.PeakPostGcTenuredSpaceHeapSize(childComplexity), true

	case "MemoryMetrics.usedHeapSizePostBuild":
		if e.complexity.MemoryMetrics.UsedHeapSizePostBuild == nil {
			break
		}

		return e.complexity.MemoryMetrics.UsedHeapSizePostBuild(childComplexity), true

	case "Metrics.actionSummary":
		if e.complexity.Metrics.ActionSummary == nil {
			break
		}

		return e.complexity.Metrics.ActionSummary(childComplexity), true

	case "Metrics.artifactMetrics":
		if e.complexity.Metrics.ArtifactMetrics == nil {
			break
		}

		return e.complexity.Metrics.ArtifactMetrics(childComplexity), true

	case "Metrics.bazelInvocation":
		if e.complexity.Metrics.BazelInvocation == nil {
			break
		}

		return e.complexity.Metrics.BazelInvocation(childComplexity), true

	case "Metrics.buildGraphMetrics":
		if e.complexity.Metrics.BuildGraphMetrics == nil {
			break
		}

		return e.complexity.Metrics.BuildGraphMetrics(childComplexity), true

	case "Metrics.cumulativeMetrics":
		if e.complexity.Metrics.CumulativeMetrics == nil {
			break
		}

		return e.complexity.Metrics.CumulativeMetrics(childComplexity), true

	case "Metrics.id":
		if e.complexity.Metrics.ID == nil {
			break
		}

		return e.complexity.Metrics.ID(childComplexity), true

	case "Metrics.memoryMetrics":
		if e.complexity.Metrics.MemoryMetrics == nil {
			break
		}

		return e.complexity.Metrics.MemoryMetrics(childComplexity), true

	case "Metrics.networkMetrics":
		if e.complexity.Metrics.NetworkMetrics == nil {
			break
		}

		return e.complexity.Metrics.NetworkMetrics(childComplexity), true

	case "Metrics.packageMetrics":
		if e.complexity.Metrics.PackageMetrics == nil {
			break
		}

		return e.complexity.Metrics.PackageMetrics(childComplexity), true

	case "Metrics.targetMetrics":
		if e.complexity.Metrics.TargetMetrics == nil {
			break
		}

		return e.complexity.Metrics.TargetMetrics(childComplexity), true

	case "Metrics.timingMetrics":
		if e.complexity.Metrics.TimingMetrics == nil {
			break
		}

		return e.complexity.Metrics.TimingMetrics(childComplexity), true

	case "MetricsConnection.edges":
		if e.complexity.MetricsConnection.Edges == nil {
			break
		}

		return e.complexity.MetricsConnection.Edges(childComplexity), true

	case "MetricsConnection.pageInfo":
		if e.complexity.MetricsConnection.PageInfo == nil {
			break
		}

		return e.complexity.MetricsConnection.PageInfo(childComplexity), true

	case "MetricsConnection.totalCount":
		if e.complexity.MetricsConnection.TotalCount == nil {
			break
		}

		return e.complexity.MetricsConnection.TotalCount(childComplexity), true

	case "MetricsEdge.cursor":
		if e.complexity.MetricsEdge.Cursor == nil {
			break
		}

		return e.complexity.MetricsEdge.Cursor(childComplexity), true

	case "MetricsEdge.node":
		if e.complexity.MetricsEdge.Node == nil {
			break
		}

		return e.complexity.MetricsEdge.Node(childComplexity), true

	case "MissDetail.actionCacheStatistics":
		if e.complexity.MissDetail.ActionCacheStatistics == nil {
			break
		}

		return e.complexity.MissDetail.ActionCacheStatistics(childComplexity), true

	case "MissDetail.count":
		if e.complexity.MissDetail.Count == nil {
			break
		}

		return e.complexity.MissDetail.Count(childComplexity), true

	case "MissDetail.id":
		if e.complexity.MissDetail.ID == nil {
			break
		}

		return e.complexity.MissDetail.ID(childComplexity), true

	case "MissDetail.reason":
		if e.complexity.MissDetail.Reason == nil {
			break
		}

		return e.complexity.MissDetail.Reason(childComplexity), true

	case "NamedSetOfFiles.fileSets":
		if e.complexity.NamedSetOfFiles.FileSets == nil {
			break
		}

		return e.complexity.NamedSetOfFiles.FileSets(childComplexity), true

	case "NamedSetOfFiles.files":
		if e.complexity.NamedSetOfFiles.Files == nil {
			break
		}

		return e.complexity.NamedSetOfFiles.Files(childComplexity), true

	case "NamedSetOfFiles.id":
		if e.complexity.NamedSetOfFiles.ID == nil {
			break
		}

		return e.complexity.NamedSetOfFiles.ID(childComplexity), true

	case "NamedSetOfFiles.outputGroup":
		if e.complexity.NamedSetOfFiles.OutputGroup == nil {
			break
		}

		return e.complexity.NamedSetOfFiles.OutputGroup(childComplexity), true

	case "NetworkMetrics.id":
		if e.complexity.NetworkMetrics.ID == nil {
			break
		}

		return e.complexity.NetworkMetrics.ID(childComplexity), true

	case "NetworkMetrics.metrics":
		if e.complexity.NetworkMetrics.Metrics == nil {
			break
		}

		return e.complexity.NetworkMetrics.Metrics(childComplexity), true

	case "NetworkMetrics.systemNetworkStats":
		if e.complexity.NetworkMetrics.SystemNetworkStats == nil {
			break
		}

		return e.complexity.NetworkMetrics.SystemNetworkStats(childComplexity), true

	case "OutputGroup.fileSets":
		if e.complexity.OutputGroup.FileSets == nil {
			break
		}

		return e.complexity.OutputGroup.FileSets(childComplexity), true

	case "OutputGroup.id":
		if e.complexity.OutputGroup.ID == nil {
			break
		}

		return e.complexity.OutputGroup.ID(childComplexity), true

	case "OutputGroup.incomplete":
		if e.complexity.OutputGroup.Incomplete == nil {
			break
		}

		return e.complexity.OutputGroup.Incomplete(childComplexity), true

	case "OutputGroup.inlineFiles":
		if e.complexity.OutputGroup.InlineFiles == nil {
			break
		}

		return e.complexity.OutputGroup.InlineFiles(childComplexity), true

	case "OutputGroup.name":
		if e.complexity.OutputGroup.Name == nil {
			break
		}

		return e.complexity.OutputGroup.Name(childComplexity), true

	case "PackageLoadMetrics.computationSteps":
		if e.complexity.PackageLoadMetrics.ComputationSteps == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.ComputationSteps(childComplexity), true

	case "PackageLoadMetrics.id":
		if e.complexity.PackageLoadMetrics.ID == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.ID(childComplexity), true

	case "PackageLoadMetrics.loadDuration":
		if e.complexity.PackageLoadMetrics.LoadDuration == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.LoadDuration(childComplexity), true

	case "PackageLoadMetrics.name":
		if e.complexity.PackageLoadMetrics.Name == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.Name(childComplexity), true

	case "PackageLoadMetrics.numTargets":
		if e.complexity.PackageLoadMetrics.NumTargets == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.NumTargets(childComplexity), true

	case "PackageLoadMetrics.numTransitiveLoads":
		if e.complexity.PackageLoadMetrics.NumTransitiveLoads == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.NumTransitiveLoads(childComplexity), true

	case "PackageLoadMetrics.packageMetrics":
		if e.complexity.PackageLoadMetrics.PackageMetrics == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.PackageMetrics(childComplexity), true

	case "PackageLoadMetrics.packageOverhead":
		if e.complexity.PackageLoadMetrics.PackageOverhead == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.PackageOverhead(childComplexity), true

	case "PackageMetrics.id":
		if e.complexity.PackageMetrics.ID == nil {
			break
		}

		return e.complexity.PackageMetrics.ID(childComplexity), true

	case "PackageMetrics.metrics":
		if e.complexity.PackageMetrics.Metrics == nil {
			break
		}

		return e.complexity.PackageMetrics.Metrics(childComplexity), true

	case "PackageMetrics.packageLoadMetrics":
		if e.complexity.PackageMetrics.PackageLoadMetrics == nil {
			break
		}

		return e.complexity.PackageMetrics.PackageLoadMetrics(childComplexity), true

	case "PackageMetrics.packagesLoaded":
		if e.complexity.PackageMetrics.PackagesLoaded == nil {
			break
		}

		return e.complexity.PackageMetrics.PackagesLoaded(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Profile.digest":
		if e.complexity.Profile.Digest == nil {
			break
		}

		return e.complexity.Profile.Digest(childComplexity), true

	case "Profile.digestFunction":
		if e.complexity.Profile.DigestFunction == nil {
			break
		}

		return e.complexity.Profile.DigestFunction(childComplexity), true

	case "Profile.id":
		if e.complexity.Profile.ID == nil {
			break
		}

		return e.complexity.Profile.ID(childComplexity), true

	case "Profile.name":
		if e.complexity.Profile.Name == nil {
			break
		}

		return e.complexity.Profile.Name(childComplexity), true

	case "Profile.sizeInBytes":
		if e.complexity.Profile.SizeInBytes == nil {
			break
		}

		return e.complexity.Profile.SizeInBytes(childComplexity), true

	case "ProgressProblem.id":
		if e.complexity.ProgressProblem.ID == nil {
			break
		}

		return e.complexity.ProgressProblem.ID(childComplexity), true

	case "ProgressProblem.label":
		if e.complexity.ProgressProblem.Label == nil {
			break
		}

		return e.complexity.ProgressProblem.Label(childComplexity), true

	case "ProgressProblem.output":
		if e.complexity.ProgressProblem.Output == nil {
			break
		}

		return e.complexity.ProgressProblem.Output(childComplexity), true

	case "Query.bazelInvocation":
		if e.complexity.Query.BazelInvocation == nil {
			break
		}

		args, err := ec.field_Query_bazelInvocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BazelInvocation(childComplexity, args["invocationId"].(string)), true

	case "Query.findBazelInvocations":
		if e.complexity.Query.FindBazelInvocations == nil {
			break
		}

		args, err := ec.field_Query_findBazelInvocations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindBazelInvocations(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.BazelInvocationOrder), args["where"].(*ent.BazelInvocationWhereInput)), true

	case "Query.findBuilds":
		if e.complexity.Query.FindBuilds == nil {
			break
		}

		args, err := ec.field_Query_findBuilds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindBuilds(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.BuildWhereInput)), true

	case "Query.findMetrics":
		if e.complexity.Query.FindMetrics == nil {
			break
		}

		args, err := ec.field_Query_findMetrics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMetrics(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.MetricsWhereInput)), true

	case "Query.findRunnerCounts":
		if e.complexity.Query.FindRunnerCounts == nil {
			break
		}

		args, err := ec.field_Query_findRunnerCounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindRunnerCounts(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.RunnerCountWhereInput)), true

	case "Query.findTargets":
		if e.complexity.Query.FindTargets == nil {
			break
		}

		args, err := ec.field_Query_findTargets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTargets(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.TargetOrder), args["where"].(*ent.TargetWhereInput)), true

	case "Query.findTests":
		if e.complexity.Query.FindTests == nil {
			break
		}

		args, err := ec.field_Query_findTests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTests(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.TestCollectionOrder), args["where"].(*ent.TestCollectionWhereInput)), true

	case "Query.getAveragePassPercentageForLabel":
		if e.complexity.Query.GetAveragePassPercentageForLabel == nil {
			break
		}

		args, err := ec.field_Query_getAveragePassPercentageForLabel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAveragePassPercentageForLabel(childComplexity, args["label"].(string)), true

	case "Query.getBuild":
		if e.complexity.Query.GetBuild == nil {
			break
		}

		args, err := ec.field_Query_getBuild_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBuild(childComplexity, args["buildURL"].(*string), args["buildUUID"].(*uuid.UUID)), true

	case "Query.getTargetDurationAggregation":
		if e.complexity.Query.GetTargetDurationAggregation == nil {
			break
		}

		args, err := ec.field_Query_getTargetDurationAggregation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTargetDurationAggregation(childComplexity, args["label"].(*string)), true

	case "Query.getTargetPassAggregation":
		if e.complexity.Query.GetTargetPassAggregation == nil {
			break
		}

		args, err := ec.field_Query_getTargetPassAggregation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTargetPassAggregation(childComplexity, args["label"].(*string)), true

	case "Query.getTargetsWithOffset":
		if e.complexity.Query.GetTargetsWithOffset == nil {
			break
		}

		args, err := ec.field_Query_getTargetsWithOffset_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTargetsWithOffset(childComplexity, args["label"].(*string), args["offset"].(*int), args["limit"].(*int), args["sortBy"].(*string), args["direction"].(*string)), true

	case "Query.getTestDurationAggregation":
		if e.complexity.Query.GetTestDurationAggregation == nil {
			break
		}

		args, err := ec.field_Query_getTestDurationAggregation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTestDurationAggregation(childComplexity, args["label"].(*string)), true

	case "Query.getTestPassAggregation":
		if e.complexity.Query.GetTestPassAggregation == nil {
			break
		}

		args, err := ec.field_Query_getTestPassAggregation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTestPassAggregation(childComplexity, args["label"].(*string)), true

	case "Query.getTestsWithOffset":
		if e.complexity.Query.GetTestsWithOffset == nil {
			break
		}

		args, err := ec.field_Query_getTestsWithOffset_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTestsWithOffset(childComplexity, args["label"].(*string), args["offset"].(*int), args["limit"].(*int), args["sortBy"].(*string), args["direction"].(*string)), true

	case "Query.getUniqueTargetLabels":
		if e.complexity.Query.GetUniqueTargetLabels == nil {
			break
		}

		args, err := ec.field_Query_getUniqueTargetLabels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUniqueTargetLabels(childComplexity, args["param"].(*string)), true

	case "Query.getUniqueTestLabels":
		if e.complexity.Query.GetUniqueTestLabels == nil {
			break
		}

		args, err := ec.field_Query_getUniqueTestLabels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUniqueTestLabels(childComplexity, args["param"].(*string)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "ResourceUsage.executionInfo":
		if e.complexity.ResourceUsage.ExecutionInfo == nil {
			break
		}

		return e.complexity.ResourceUsage.ExecutionInfo(childComplexity), true

	case "ResourceUsage.id":
		if e.complexity.ResourceUsage.ID == nil {
			break
		}

		return e.complexity.ResourceUsage.ID(childComplexity), true

	case "ResourceUsage.name":
		if e.complexity.ResourceUsage.Name == nil {
			break
		}

		return e.complexity.ResourceUsage.Name(childComplexity), true

	case "ResourceUsage.value":
		if e.complexity.ResourceUsage.Value == nil {
			break
		}

		return e.complexity.ResourceUsage.Value(childComplexity), true

	case "RunnerCount.actionSummary":
		if e.complexity.RunnerCount.ActionSummary == nil {
			break
		}

		return e.complexity.RunnerCount.ActionSummary(childComplexity), true

	case "RunnerCount.actionsExecuted":
		if e.complexity.RunnerCount.ActionsExecuted == nil {
			break
		}

		return e.complexity.RunnerCount.ActionsExecuted(childComplexity), true

	case "RunnerCount.execKind":
		if e.complexity.RunnerCount.ExecKind == nil {
			break
		}

		return e.complexity.RunnerCount.ExecKind(childComplexity), true

	case "RunnerCount.id":
		if e.complexity.RunnerCount.ID == nil {
			break
		}

		return e.complexity.RunnerCount.ID(childComplexity), true

	case "RunnerCount.name":
		if e.complexity.RunnerCount.Name == nil {
			break
		}

		return e.complexity.RunnerCount.Name(childComplexity), true

	case "RunnerCountConnection.edges":
		if e.complexity.RunnerCountConnection.Edges == nil {
			break
		}

		return e.complexity.RunnerCountConnection.Edges(childComplexity), true

	case "RunnerCountConnection.pageInfo":
		if e.complexity.RunnerCountConnection.PageInfo == nil {
			break
		}

		return e.complexity.RunnerCountConnection.PageInfo(childComplexity), true

	case "RunnerCountConnection.totalCount":
		if e.complexity.RunnerCountConnection.TotalCount == nil {
			break
		}

		return e.complexity.RunnerCountConnection.TotalCount(childComplexity), true

	case "RunnerCountEdge.cursor":
		if e.complexity.RunnerCountEdge.Cursor == nil {
			break
		}

		return e.complexity.RunnerCountEdge.Cursor(childComplexity), true

	case "RunnerCountEdge.node":
		if e.complexity.RunnerCountEdge.Node == nil {
			break
		}

		return e.complexity.RunnerCountEdge.Node(childComplexity), true

	case "SourceControl.action":
		if e.complexity.SourceControl.Action == nil {
			break
		}

		return e.complexity.SourceControl.Action(childComplexity), true

	case "SourceControl.actor":
		if e.complexity.SourceControl.Actor == nil {
			break
		}

		return e.complexity.SourceControl.Actor(childComplexity), true

	case "SourceControl.bazelInvocation":
		if e.complexity.SourceControl.BazelInvocation == nil {
			break
		}

		return e.complexity.SourceControl.BazelInvocation(childComplexity), true

	case "SourceControl.commitSha":
		if e.complexity.SourceControl.CommitSha == nil {
			break
		}

		return e.complexity.SourceControl.CommitSha(childComplexity), true

	case "SourceControl.eventName":
		if e.complexity.SourceControl.EventName == nil {
			break
		}

		return e.complexity.SourceControl.EventName(childComplexity), true

	case "SourceControl.id":
		if e.complexity.SourceControl.ID == nil {
			break
		}

		return e.complexity.SourceControl.ID(childComplexity), true

	case "SourceControl.instanceURL":
		if e.complexity.SourceControl.InstanceURL == nil {
			break
		}

		return e.complexity.SourceControl.InstanceURL(childComplexity), true

	case "SourceControl.job":
		if e.complexity.SourceControl.Job == nil {
			break
		}

		return e.complexity.SourceControl.Job(childComplexity), true

	case "SourceControl.provider":
		if e.complexity.SourceControl.Provider == nil {
			break
		}

		return e.complexity.SourceControl.Provider(childComplexity), true

	case "SourceControl.refs":
		if e.complexity.SourceControl.Refs == nil {
			break
		}

		return e.complexity.SourceControl.Refs(childComplexity), true

	case "SourceControl.repo":
		if e.complexity.SourceControl.Repo == nil {
			break
		}

		return e.complexity.SourceControl.Repo(childComplexity), true

	case "SourceControl.runID":
		if e.complexity.SourceControl.RunID == nil {
			break
		}

		return e.complexity.SourceControl.RunID(childComplexity), true

	case "SourceControl.runNumber":
		if e.complexity.SourceControl.RunNumber == nil {
			break
		}

		return e.complexity.SourceControl.RunNumber(childComplexity), true

	case "SourceControl.runnerArch":
		if e.complexity.SourceControl.RunnerArch == nil {
			break
		}

		return e.complexity.SourceControl.RunnerArch(childComplexity), true

	case "SourceControl.runnerName":
		if e.complexity.SourceControl.RunnerName == nil {
			break
		}

		return e.complexity.SourceControl.RunnerName(childComplexity), true

	case "SourceControl.runnerOs":
		if e.complexity.SourceControl.RunnerOs == nil {
			break
		}

		return e.complexity.SourceControl.RunnerOs(childComplexity), true

	case "SourceControl.workflow":
		if e.complexity.SourceControl.Workflow == nil {
			break
		}

		return e.complexity.SourceControl.Workflow(childComplexity), true

	case "SourceControl.workspace":
		if e.complexity.SourceControl.Workspace == nil {
			break
		}

		return e.complexity.SourceControl.Workspace(childComplexity), true

	case "SystemNetworkStats.bytesRecv":
		if e.complexity.SystemNetworkStats.BytesRecv == nil {
			break
		}

		return e.complexity.SystemNetworkStats.BytesRecv(childComplexity), true

	case "SystemNetworkStats.bytesSent":
		if e.complexity.SystemNetworkStats.BytesSent == nil {
			break
		}

		return e.complexity.SystemNetworkStats.BytesSent(childComplexity), true

	case "SystemNetworkStats.id":
		if e.complexity.SystemNetworkStats.ID == nil {
			break
		}

		return e.complexity.SystemNetworkStats.ID(childComplexity), true

	case "SystemNetworkStats.networkMetrics":
		if e.complexity.SystemNetworkStats.NetworkMetrics == nil {
			break
		}

		return e.complexity.SystemNetworkStats.NetworkMetrics(childComplexity), true

	case "SystemNetworkStats.packetsRecv":
		if e.complexity.SystemNetworkStats.PacketsRecv == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PacketsRecv(childComplexity), true

	case "SystemNetworkStats.packetsSent":
		if e.complexity.SystemNetworkStats.PacketsSent == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PacketsSent(childComplexity), true

	case "SystemNetworkStats.peakBytesRecvPerSec":
		if e.complexity.SystemNetworkStats.PeakBytesRecvPerSec == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PeakBytesRecvPerSec(childComplexity), true

	case "SystemNetworkStats.peakBytesSentPerSec":
		if e.complexity.SystemNetworkStats.PeakBytesSentPerSec == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PeakBytesSentPerSec(childComplexity), true

	case "SystemNetworkStats.peakPacketsRecvPerSec":
		if e.complexity.SystemNetworkStats.PeakPacketsRecvPerSec == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PeakPacketsRecvPerSec(childComplexity), true

	case "SystemNetworkStats.peakPacketsSentPerSec":
		if e.complexity.SystemNetworkStats.PeakPacketsSentPerSec == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PeakPacketsSentPerSec(childComplexity), true

	case "Target.abortReason":
		if e.complexity.Target.AbortReason == nil {
			break
		}

		return e.complexity.Target.AbortReason(childComplexity), true

	case "Target.bazelInvocation":
		if e.complexity.Target.BazelInvocation == nil {
			break
		}

		return e.complexity.Target.BazelInvocation(childComplexity), true

	case "Target.durationInMs":
		if e.complexity.Target.DurationInMs == nil {
			break
		}

		return e.complexity.Target.DurationInMs(childComplexity), true

	case "Target.endTimeInMs":
		if e.complexity.Target.EndTimeInMs == nil {
			break
		}

		return e.complexity.Target.EndTimeInMs(childComplexity), true

	case "Target.id":
		if e.complexity.Target.ID == nil {
			break
		}

		return e.complexity.Target.ID(childComplexity), true

	case "Target.label":
		if e.complexity.Target.Label == nil {
			break
		}

		return e.complexity.Target.Label(childComplexity), true

	case "Target.startTimeInMs":
		if e.complexity.Target.StartTimeInMs == nil {
			break
		}

		return e.complexity.Target.StartTimeInMs(childComplexity), true

	case "Target.success":
		if e.complexity.Target.Success == nil {
			break
		}

		return e.complexity.Target.Success(childComplexity), true

	case "Target.tag":
		if e.complexity.Target.Tag == nil {
			break
		}

		return e.complexity.Target.Tag(childComplexity), true

	case "Target.targetKind":
		if e.complexity.Target.TargetKind == nil {
			break
		}

		return e.complexity.Target.TargetKind(childComplexity), true

	case "Target.testSize":
		if e.complexity.Target.TestSize == nil {
			break
		}

		return e.complexity.Target.TestSize(childComplexity), true

	case "Target.testTimeout":
		if e.complexity.Target.TestTimeout == nil {
			break
		}

		return e.complexity.Target.TestTimeout(childComplexity), true

	case "TargetAggregate.avg":
		if e.complexity.TargetAggregate.Avg == nil {
			break
		}

		return e.complexity.TargetAggregate.Avg(childComplexity), true

	case "TargetAggregate.count":
		if e.complexity.TargetAggregate.Count == nil {
			break
		}

		return e.complexity.TargetAggregate.Count(childComplexity), true

	case "TargetAggregate.label":
		if e.complexity.TargetAggregate.Label == nil {
			break
		}

		return e.complexity.TargetAggregate.Label(childComplexity), true

	case "TargetAggregate.max":
		if e.complexity.TargetAggregate.Max == nil {
			break
		}

		return e.complexity.TargetAggregate.Max(childComplexity), true

	case "TargetAggregate.min":
		if e.complexity.TargetAggregate.Min == nil {
			break
		}

		return e.complexity.TargetAggregate.Min(childComplexity), true

	case "TargetAggregate.pass":
		if e.complexity.TargetAggregate.Pass == nil {
			break
		}

		return e.complexity.TargetAggregate.Pass(childComplexity), true

	case "TargetAggregate.sum":
		if e.complexity.TargetAggregate.Sum == nil {
			break
		}

		return e.complexity.TargetAggregate.Sum(childComplexity), true

	case "TargetConnection.edges":
		if e.complexity.TargetConnection.Edges == nil {
			break
		}

		return e.complexity.TargetConnection.Edges(childComplexity), true

	case "TargetConnection.pageInfo":
		if e.complexity.TargetConnection.PageInfo == nil {
			break
		}

		return e.complexity.TargetConnection.PageInfo(childComplexity), true

	case "TargetConnection.totalCount":
		if e.complexity.TargetConnection.TotalCount == nil {
			break
		}

		return e.complexity.TargetConnection.TotalCount(childComplexity), true

	case "TargetEdge.cursor":
		if e.complexity.TargetEdge.Cursor == nil {
			break
		}

		return e.complexity.TargetEdge.Cursor(childComplexity), true

	case "TargetEdge.node":
		if e.complexity.TargetEdge.Node == nil {
			break
		}

		return e.complexity.TargetEdge.Node(childComplexity), true

	case "TargetGridCell.abortReason":
		if e.complexity.TargetGridCell.AbortReason == nil {
			break
		}

		return e.complexity.TargetGridCell.AbortReason(childComplexity), true

	case "TargetGridCell.complete":
		if e.complexity.TargetGridCell.Complete == nil {
			break
		}

		return e.complexity.TargetGridCell.Complete(childComplexity), true

	case "TargetGridCell.invocationId":
		if e.complexity.TargetGridCell.InvocationID == nil {
			break
		}

		return e.complexity.TargetGridCell.InvocationID(childComplexity), true

	case "TargetGridResult.result":
		if e.complexity.TargetGridResult.Result == nil {
			break
		}

		return e.complexity.TargetGridResult.Result(childComplexity), true

	case "TargetGridResult.total":
		if e.complexity.TargetGridResult.Total == nil {
			break
		}

		return e.complexity.TargetGridResult.Total(childComplexity), true

	case "TargetGridRow.avg":
		if e.complexity.TargetGridRow.Avg == nil {
			break
		}

		return e.complexity.TargetGridRow.Avg(childComplexity), true

	case "TargetGridRow.cells":
		if e.complexity.TargetGridRow.Cells == nil {
			break
		}

		return e.complexity.TargetGridRow.Cells(childComplexity), true

	case "TargetGridRow.count":
		if e.complexity.TargetGridRow.Count == nil {
			break
		}

		return e.complexity.TargetGridRow.Count(childComplexity), true

	case "TargetGridRow.label":
		if e.complexity.TargetGridRow.Label == nil {
			break
		}

		return e.complexity.TargetGridRow.Label(childComplexity), true

	case "TargetGridRow.max":
		if e.complexity.TargetGridRow.Max == nil {
			break
		}

		return e.complexity.TargetGridRow.Max(childComplexity), true

	case "TargetGridRow.min":
		if e.complexity.TargetGridRow.Min == nil {
			break
		}

		return e.complexity.TargetGridRow.Min(childComplexity), true

	case "TargetGridRow.passRate":
		if e.complexity.TargetGridRow.PassRate == nil {
			break
		}

		return e.complexity.TargetGridRow.PassRate(childComplexity), true

	case "TargetGridRow.sum":
		if e.complexity.TargetGridRow.Sum == nil {
			break
		}

		return e.complexity.TargetGridRow.Sum(childComplexity), true

	case "TargetMetrics.id":
		if e.complexity.TargetMetrics.ID == nil {
			break
		}

		return e.complexity.TargetMetrics.ID(childComplexity), true

	case "TargetMetrics.metrics":
		if e.complexity.TargetMetrics.Metrics == nil {
			break
		}

		return e.complexity.TargetMetrics.Metrics(childComplexity), true

	case "TargetMetrics.targetsConfigured":
		if e.complexity.TargetMetrics.TargetsConfigured == nil {
			break
		}

		return e.complexity.TargetMetrics.TargetsConfigured(childComplexity), true

	case "TargetMetrics.targetsConfiguredNotIncludingAspects":
		if e.complexity.TargetMetrics.TargetsConfiguredNotIncludingAspects == nil {
			break
		}

		return e.complexity.TargetMetrics.TargetsConfiguredNotIncludingAspects(childComplexity), true

	case "TargetMetrics.targetsLoaded":
		if e.complexity.TargetMetrics.TargetsLoaded == nil {
			break
		}

		return e.complexity.TargetMetrics.TargetsLoaded(childComplexity), true

	case "TargetProblem.id":
		if e.complexity.TargetProblem.ID == nil {
			break
		}

		return e.complexity.TargetProblem.ID(childComplexity), true

	case "TargetProblem.label":
		if e.complexity.TargetProblem.Label == nil {
			break
		}

		return e.complexity.TargetProblem.Label(childComplexity), true

	case "TestCollection.bazelInvocation":
		if e.complexity.TestCollection.BazelInvocation == nil {
			break
		}

		return e.complexity.TestCollection.BazelInvocation(childComplexity), true

	case "TestCollection.cachedLocally":
		if e.complexity.TestCollection.CachedLocally == nil {
			break
		}

		return e.complexity.TestCollection.CachedLocally(childComplexity), true

	case "TestCollection.cachedRemotely":
		if e.complexity.TestCollection.CachedRemotely == nil {
			break
		}

		return e.complexity.TestCollection.CachedRemotely(childComplexity), true

	case "TestCollection.durationMs":
		if e.complexity.TestCollection.DurationMs == nil {
			break
		}

		return e.complexity.TestCollection.DurationMs(childComplexity), true

	case "TestCollection.firstSeen":
		if e.complexity.TestCollection.FirstSeen == nil {
			break
		}

		return e.complexity.TestCollection.FirstSeen(childComplexity), true

	case "TestCollection.id":
		if e.complexity.TestCollection.ID == nil {
			break
		}

		return e.complexity.TestCollection.ID(childComplexity), true

	case "TestCollection.label":
		if e.complexity.TestCollection.Label == nil {
			break
		}

		return e.complexity.TestCollection.Label(childComplexity), true

	case "TestCollection.overallStatus":
		if e.complexity.TestCollection.OverallStatus == nil {
			break
		}

		return e.complexity.TestCollection.OverallStatus(childComplexity), true

	case "TestCollection.strategy":
		if e.complexity.TestCollection.Strategy == nil {
			break
		}

		return e.complexity.TestCollection.Strategy(childComplexity), true

	case "TestCollection.testResults":
		if e.complexity.TestCollection.TestResults == nil {
			break
		}

		return e.complexity.TestCollection.TestResults(childComplexity), true

	case "TestCollection.testSummary":
		if e.complexity.TestCollection.TestSummary == nil {
			break
		}

		return e.complexity.TestCollection.TestSummary(childComplexity), true

	case "TestCollectionConnection.edges":
		if e.complexity.TestCollectionConnection.Edges == nil {
			break
		}

		return e.complexity.TestCollectionConnection.Edges(childComplexity), true

	case "TestCollectionConnection.pageInfo":
		if e.complexity.TestCollectionConnection.PageInfo == nil {
			break
		}

		return e.complexity.TestCollectionConnection.PageInfo(childComplexity), true

	case "TestCollectionConnection.totalCount":
		if e.complexity.TestCollectionConnection.TotalCount == nil {
			break
		}

		return e.complexity.TestCollectionConnection.TotalCount(childComplexity), true

	case "TestCollectionEdge.cursor":
		if e.complexity.TestCollectionEdge.Cursor == nil {
			break
		}

		return e.complexity.TestCollectionEdge.Cursor(childComplexity), true

	case "TestCollectionEdge.node":
		if e.complexity.TestCollectionEdge.Node == nil {
			break
		}

		return e.complexity.TestCollectionEdge.Node(childComplexity), true

	case "TestFile.digest":
		if e.complexity.TestFile.Digest == nil {
			break
		}

		return e.complexity.TestFile.Digest(childComplexity), true

	case "TestFile.file":
		if e.complexity.TestFile.File == nil {
			break
		}

		return e.complexity.TestFile.File(childComplexity), true

	case "TestFile.id":
		if e.complexity.TestFile.ID == nil {
			break
		}

		return e.complexity.TestFile.ID(childComplexity), true

	case "TestFile.length":
		if e.complexity.TestFile.Length == nil {
			break
		}

		return e.complexity.TestFile.Length(childComplexity), true

	case "TestFile.name":
		if e.complexity.TestFile.Name == nil {
			break
		}

		return e.complexity.TestFile.Name(childComplexity), true

	case "TestFile.prefix":
		if e.complexity.TestFile.Prefix == nil {
			break
		}

		return e.complexity.TestFile.Prefix(childComplexity), true

	case "TestFile.testResult":
		if e.complexity.TestFile.TestResult == nil {
			break
		}

		return e.complexity.TestFile.TestResult(childComplexity), true

	case "TestGridCell.invocationId":
		if e.complexity.TestGridCell.InvocationID == nil {
			break
		}

		return e.complexity.TestGridCell.InvocationID(childComplexity), true

	case "TestGridCell.status":
		if e.complexity.TestGridCell.Status == nil {
			break
		}

		return e.complexity.TestGridCell.Status(childComplexity), true

	case "TestGridResult.result":
		if e.complexity.TestGridResult.Result == nil {
			break
		}

		return e.complexity.TestGridResult.Result(childComplexity), true

	case "TestGridResult.total":
		if e.complexity.TestGridResult.Total == nil {
			break
		}

		return e.complexity.TestGridResult.Total(childComplexity), true

	case "TestGridRow.avg":
		if e.complexity.TestGridRow.Avg == nil {
			break
		}

		return e.complexity.TestGridRow.Avg(childComplexity), true

	case "TestGridRow.cells":
		if e.complexity.TestGridRow.Cells == nil {
			break
		}

		return e.complexity.TestGridRow.Cells(childComplexity), true

	case "TestGridRow.count":
		if e.complexity.TestGridRow.Count == nil {
			break
		}

		return e.complexity.TestGridRow.Count(childComplexity), true

	case "TestGridRow.label":
		if e.complexity.TestGridRow.Label == nil {
			break
		}

		return e.complexity.TestGridRow.Label(childComplexity), true

	case "TestGridRow.max":
		if e.complexity.TestGridRow.Max == nil {
			break
		}

		return e.complexity.TestGridRow.Max(childComplexity), true

	case "TestGridRow.min":
		if e.complexity.TestGridRow.Min == nil {
			break
		}

		return e.complexity.TestGridRow.Min(childComplexity), true

	case "TestGridRow.passRate":
		if e.complexity.TestGridRow.PassRate == nil {
			break
		}

		return e.complexity.TestGridRow.PassRate(childComplexity), true

	case "TestGridRow.sum":
		if e.complexity.TestGridRow.Sum == nil {
			break
		}

		return e.complexity.TestGridRow.Sum(childComplexity), true

	case "TestProblem.id":
		if e.complexity.TestProblem.ID == nil {
			break
		}

		return e.complexity.TestProblem.ID(childComplexity), true

	case "TestProblem.label":
		if e.complexity.TestProblem.Label == nil {
			break
		}

		return e.complexity.TestProblem.Label(childComplexity), true

	case "TestProblem.results":
		if e.complexity.TestProblem.Results == nil {
			break
		}

		return e.complexity.TestProblem.Results(childComplexity), true

	case "TestProblem.status":
		if e.complexity.TestProblem.Status == nil {
			break
		}

		return e.complexity.TestProblem.Status(childComplexity), true

	case "TestResult.actionLogOutput":
		if e.complexity.TestResult.ActionLogOutput == nil {
			break
		}

		return e.complexity.TestResult.ActionLogOutput(childComplexity), true

	case "TestResult.attempt":
		if e.complexity.TestResult.Attempt == nil {
			break
		}

		return e.complexity.TestResult.Attempt(childComplexity), true

	case "TestResult.id":
		if e.complexity.TestResult.ID == nil {
			break
		}

		return e.complexity.TestResult.ID(childComplexity), true

	case "TestResult.run":
		if e.complexity.TestResult.Run == nil {
			break
		}

		return e.complexity.TestResult.Run(childComplexity), true

	case "TestResult.shard":
		if e.complexity.TestResult.Shard == nil {
			break
		}

		return e.complexity.TestResult.Shard(childComplexity), true

	case "TestResult.status":
		if e.complexity.TestResult.Status == nil {
			break
		}

		return e.complexity.TestResult.Status(childComplexity), true

	case "TestResult.undeclaredTestOutputs":
		if e.complexity.TestResult.UndeclaredTestOutputs == nil {
			break
		}

		return e.complexity.TestResult.UndeclaredTestOutputs(childComplexity), true

	case "TestResultBES.cachedLocally":
		if e.complexity.TestResultBES.CachedLocally == nil {
			break
		}

		return e.complexity.TestResultBES.CachedLocally(childComplexity), true

	case "TestResultBES.executionInfo":
		if e.complexity.TestResultBES.ExecutionInfo == nil {
			break
		}

		return e.complexity.TestResultBES.ExecutionInfo(childComplexity), true

	case "TestResultBES.id":
		if e.complexity.TestResultBES.ID == nil {
			break
		}

		return e.complexity.TestResultBES.ID(childComplexity), true

	case "TestResultBES.label":
		if e.complexity.TestResultBES.Label == nil {
			break
		}

		return e.complexity.TestResultBES.Label(childComplexity), true

	case "TestResultBES.statusDetails":
		if e.complexity.TestResultBES.StatusDetails == nil {
			break
		}

		return e.complexity.TestResultBES.StatusDetails(childComplexity), true

	case "TestResultBES.testActionOutput":
		if e.complexity.TestResultBES.TestActionOutput == nil {
			break
		}

		return e.complexity.TestResultBES.TestActionOutput(childComplexity), true

	case "TestResultBES.testAttemptDuration":
		if e.complexity.TestResultBES.TestAttemptDuration == nil {
			break
		}

		return e.complexity.TestResultBES.TestAttemptDuration(childComplexity), true

	case "TestResultBES.testAttemptDurationMillis":
		if e.complexity.TestResultBES.TestAttemptDurationMillis == nil {
			break
		}

		return e.complexity.TestResultBES.TestAttemptDurationMillis(childComplexity), true

	case "TestResultBES.testAttemptStart":
		if e.complexity.TestResultBES.TestAttemptStart == nil {
			break
		}

		return e.complexity.TestResultBES.TestAttemptStart(childComplexity), true

	case "TestResultBES.testAttemptStartMillisEpoch":
		if e.complexity.TestResultBES.TestAttemptStartMillisEpoch == nil {
			break
		}

		return e.complexity.TestResultBES.TestAttemptStartMillisEpoch(childComplexity), true

	case "TestResultBES.testCollection":
		if e.complexity.TestResultBES.TestCollection == nil {
			break
		}

		return e.complexity.TestResultBES.TestCollection(childComplexity), true

	case "TestResultBES.testStatus":
		if e.complexity.TestResultBES.TestStatus == nil {
			break
		}

		return e.complexity.TestResultBES.TestStatus(childComplexity), true

	case "TestResultBES.warning":
		if e.complexity.TestResultBES.Warning == nil {
			break
		}

		return e.complexity.TestResultBES.Warning(childComplexity), true

	case "TestSummary.attemptCount":
		if e.complexity.TestSummary.AttemptCount == nil {
			break
		}

		return e.complexity.TestSummary.AttemptCount(childComplexity), true

	case "TestSummary.failed":
		if e.complexity.TestSummary.Failed == nil {
			break
		}

		return e.complexity.TestSummary.Failed(childComplexity), true

	case "TestSummary.firstStartTime":
		if e.complexity.TestSummary.FirstStartTime == nil {
			break
		}

		return e.complexity.TestSummary.FirstStartTime(childComplexity), true

	case "TestSummary.id":
		if e.complexity.TestSummary.ID == nil {
			break
		}

		return e.complexity.TestSummary.ID(childComplexity), true

	case "TestSummary.label":
		if e.complexity.TestSummary.Label == nil {
			break
		}

		return e.complexity.TestSummary.Label(childComplexity), true

	case "TestSummary.lastStopTime":
		if e.complexity.TestSummary.LastStopTime == nil {
			break
		}

		return e.complexity.TestSummary.LastStopTime(childComplexity), true

	case "TestSummary.overallStatus":
		if e.complexity.TestSummary.OverallStatus == nil {
			break
		}

		return e.complexity.TestSummary.OverallStatus(childComplexity), true

	case "TestSummary.passed":
		if e.complexity.TestSummary.Passed == nil {
			break
		}

		return e.complexity.TestSummary.Passed(childComplexity), true

	case "TestSummary.runCount":
		if e.complexity.TestSummary.RunCount == nil {
			break
		}

		return e.complexity.TestSummary.RunCount(childComplexity), true

	case "TestSummary.shardCount":
		if e.complexity.TestSummary.ShardCount == nil {
			break
		}

		return e.complexity.TestSummary.ShardCount(childComplexity), true

	case "TestSummary.testCollection":
		if e.complexity.TestSummary.TestCollection == nil {
			break
		}

		return e.complexity.TestSummary.TestCollection(childComplexity), true

	case "TestSummary.totalNumCached":
		if e.complexity.TestSummary.TotalNumCached == nil {
			break
		}

		return e.complexity.TestSummary.TotalNumCached(childComplexity), true

	case "TestSummary.totalRunCount":
		if e.complexity.TestSummary.TotalRunCount == nil {
			break
		}

		return e.complexity.TestSummary.TotalRunCount(childComplexity), true

	case "TestSummary.totalRunDuration":
		if e.complexity.TestSummary.TotalRunDuration == nil {
			break
		}

		return e.complexity.TestSummary.TotalRunDuration(childComplexity), true

	case "TimingBreakdown.child":
		if e.complexity.TimingBreakdown.Child == nil {
			break
		}

		return e.complexity.TimingBreakdown.Child(childComplexity), true

	case "TimingBreakdown.executionInfo":
		if e.complexity.TimingBreakdown.ExecutionInfo == nil {
			break
		}

		return e.complexity.TimingBreakdown.ExecutionInfo(childComplexity), true

	case "TimingBreakdown.id":
		if e.complexity.TimingBreakdown.ID == nil {
			break
		}

		return e.complexity.TimingBreakdown.ID(childComplexity), true

	case "TimingBreakdown.name":
		if e.complexity.TimingBreakdown.Name == nil {
			break
		}

		return e.complexity.TimingBreakdown.Name(childComplexity), true

	case "TimingBreakdown.time":
		if e.complexity.TimingBreakdown.Time == nil {
			break
		}

		return e.complexity.TimingBreakdown.Time(childComplexity), true

	case "TimingChild.id":
		if e.complexity.TimingChild.ID == nil {
			break
		}

		return e.complexity.TimingChild.ID(childComplexity), true

	case "TimingChild.name":
		if e.complexity.TimingChild.Name == nil {
			break
		}

		return e.complexity.TimingChild.Name(childComplexity), true

	case "TimingChild.time":
		if e.complexity.TimingChild.Time == nil {
			break
		}

		return e.complexity.TimingChild.Time(childComplexity), true

	case "TimingChild.timingBreakdown":
		if e.complexity.TimingChild.TimingBreakdown == nil {
			break
		}

		return e.complexity.TimingChild.TimingBreakdown(childComplexity), true

	case "TimingMetrics.actionsExecutionStartInMs":
		if e.complexity.TimingMetrics.ActionsExecutionStartInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.ActionsExecutionStartInMs(childComplexity), true

	case "TimingMetrics.analysisPhaseTimeInMs":
		if e.complexity.TimingMetrics.AnalysisPhaseTimeInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.AnalysisPhaseTimeInMs(childComplexity), true

	case "TimingMetrics.cpuTimeInMs":
		if e.complexity.TimingMetrics.CPUTimeInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.CPUTimeInMs(childComplexity), true

	case "TimingMetrics.executionPhaseTimeInMs":
		if e.complexity.TimingMetrics.ExecutionPhaseTimeInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.ExecutionPhaseTimeInMs(childComplexity), true

	case "TimingMetrics.id":
		if e.complexity.TimingMetrics.ID == nil {
			break
		}

		return e.complexity.TimingMetrics.ID(childComplexity), true

	case "TimingMetrics.metrics":
		if e.complexity.TimingMetrics.Metrics == nil {
			break
		}

		return e.complexity.TimingMetrics.Metrics(childComplexity), true

	case "TimingMetrics.wallTimeInMs":
		if e.complexity.TimingMetrics.WallTimeInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.WallTimeInMs(childComplexity), true

	case "User.Email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.LDAP":
		if e.complexity.User.Ldap == nil {
			break
		}

		return e.complexity.User.Ldap(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputActionCacheStatisticsWhereInput,
		ec.unmarshalInputActionDataWhereInput,
		ec.unmarshalInputActionSummaryWhereInput,
		ec.unmarshalInputArtifactMetricsWhereInput,
		ec.unmarshalInputBazelInvocationOrder,
		ec.unmarshalInputBazelInvocationProblemWhereInput,
		ec.unmarshalInputBazelInvocationWhereInput,
		ec.unmarshalInputBlobWhereInput,
		ec.unmarshalInputBuildGraphMetricsWhereInput,
		ec.unmarshalInputBuildWhereInput,
		ec.unmarshalInputCumulativeMetricsWhereInput,
		ec.unmarshalInputEvaluationStatWhereInput,
		ec.unmarshalInputExectionInfoWhereInput,
		ec.unmarshalInputGarbageMetricsWhereInput,
		ec.unmarshalInputIncompleteBuildLogWhereInput,
		ec.unmarshalInputInvocationFilesWhereInput,
		ec.unmarshalInputMemoryMetricsWhereInput,
		ec.unmarshalInputMetricsWhereInput,
		ec.unmarshalInputMissDetailWhereInput,
		ec.unmarshalInputNamedSetOfFilesWhereInput,
		ec.unmarshalInputNetworkMetricsWhereInput,
		ec.unmarshalInputOutputGroupWhereInput,
		ec.unmarshalInputPackageLoadMetricsWhereInput,
		ec.unmarshalInputPackageMetricsWhereInput,
		ec.unmarshalInputResourceUsageWhereInput,
		ec.unmarshalInputRunnerCountWhereInput,
		ec.unmarshalInputSourceControlWhereInput,
		ec.unmarshalInputSystemNetworkStatsWhereInput,
		ec.unmarshalInputTargetMetricsWhereInput,
		ec.unmarshalInputTargetOrder,
		ec.unmarshalInputTargetWhereInput,
		ec.unmarshalInputTestCollectionOrder,
		ec.unmarshalInputTestCollectionWhereInput,
		ec.unmarshalInputTestFileWhereInput,
		ec.unmarshalInputTestResultBESWhereInput,
		ec.unmarshalInputTestSummaryWhereInput,
		ec.unmarshalInputTimingBreakdownWhereInput,
		ec.unmarshalInputTimingChildWhereInput,
		ec.unmarshalInputTimingMetricsWhereInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schema/scalars.graphql" "schema/ent.graphql" "schema/custom.graphql"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema/scalars.graphql", Input: sourceData("schema/scalars.graphql"), BuiltIn: false},
	{Name: "schema/ent.graphql", Input: sourceData("schema/ent.graphql"), BuiltIn: false},
	{Name: "schema/custom.graphql", Input: sourceData("schema/custom.graphql"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_bazelInvocation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_bazelInvocation_argsInvocationID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["invocationId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_bazelInvocation_argsInvocationID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["invocationId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationId"))
	if tmp, ok := rawArgs["invocationId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBazelInvocations_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findBazelInvocations_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_findBazelInvocations_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_findBazelInvocations_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_findBazelInvocations_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_findBazelInvocations_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_findBazelInvocations_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_findBazelInvocations_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["after"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBazelInvocations_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBazelInvocations_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["before"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBazelInvocations_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["last"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBazelInvocations_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.BazelInvocationOrder, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *ent.BazelInvocationOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOBazelInvocationOrder2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationOrder(ctx, tmp)
	}

	var zeroVal *ent.BazelInvocationOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBazelInvocations_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.BazelInvocationWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *ent.BazelInvocationWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx, tmp)
	}

	var zeroVal *ent.BazelInvocationWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBuilds_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findBuilds_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_findBuilds_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_findBuilds_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_findBuilds_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_findBuilds_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_findBuilds_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["after"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBuilds_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBuilds_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["before"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBuilds_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["last"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findBuilds_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.BuildWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *ent.BuildWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx, tmp)
	}

	var zeroVal *ent.BuildWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findMetrics_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findMetrics_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_findMetrics_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_findMetrics_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_findMetrics_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_findMetrics_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_findMetrics_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["after"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findMetrics_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findMetrics_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["before"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findMetrics_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["last"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findMetrics_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.MetricsWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *ent.MetricsWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx, tmp)
	}

	var zeroVal *ent.MetricsWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findRunnerCounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findRunnerCounts_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_findRunnerCounts_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_findRunnerCounts_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_findRunnerCounts_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_findRunnerCounts_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_findRunnerCounts_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["after"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findRunnerCounts_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findRunnerCounts_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["before"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findRunnerCounts_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["last"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findRunnerCounts_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.RunnerCountWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *ent.RunnerCountWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalORunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx, tmp)
	}

	var zeroVal *ent.RunnerCountWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTargets_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findTargets_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_findTargets_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_findTargets_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_findTargets_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_findTargets_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_findTargets_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_findTargets_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["after"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTargets_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTargets_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["before"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTargets_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["last"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTargets_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.TargetOrder, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *ent.TargetOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTargetOrder2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetOrder(ctx, tmp)
	}

	var zeroVal *ent.TargetOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTargets_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.TargetWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *ent.TargetWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTargetWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TargetWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTests_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findTests_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_findTests_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_findTests_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_findTests_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_findTests_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_findTests_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_findTests_argsAfter(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["after"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTests_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTests_argsBefore(
	ctx context.Context,
	rawArgs map[string]any,
) (*entgql.Cursor[int], error) {
	if _, ok := rawArgs["before"]; !ok {
		var zeroVal *entgql.Cursor[int]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[int]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTests_argsLast(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["last"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTests_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.TestCollectionOrder, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *ent.TestCollectionOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTestCollectionOrder2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionOrder(ctx, tmp)
	}

	var zeroVal *ent.TestCollectionOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findTests_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*ent.TestCollectionWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *ent.TestCollectionWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTestCollectionWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TestCollectionWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getAveragePassPercentageForLabel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getAveragePassPercentageForLabel_argsLabel(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["label"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getAveragePassPercentageForLabel_argsLabel(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["label"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
	if tmp, ok := rawArgs["label"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getBuild_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getBuild_argsBuildURL(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["buildURL"] = arg0
	arg1, err := ec.field_Query_getBuild_argsBuildUUID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["buildUUID"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_getBuild_argsBuildURL(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["buildURL"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURL"))
	if tmp, ok := rawArgs["buildURL"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getBuild_argsBuildUUID(
	ctx context.Context,
	rawArgs map[string]any,
) (*uuid.UUID, error) {
	if _, ok := rawArgs["buildUUID"]; !ok {
		var zeroVal *uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUID"))
	if tmp, ok := rawArgs["buildUUID"]; ok {
		return ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal *uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTargetDurationAggregation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getTargetDurationAggregation_argsLabel(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["label"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getTargetDurationAggregation_argsLabel(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["label"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
	if tmp, ok := rawArgs["label"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTargetPassAggregation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getTargetPassAggregation_argsLabel(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["label"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getTargetPassAggregation_argsLabel(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["label"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
	if tmp, ok := rawArgs["label"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTargetsWithOffset_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getTargetsWithOffset_argsLabel(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["label"] = arg0
	arg1, err := ec.field_Query_getTargetsWithOffset_argsOffset(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["offset"] = arg1
	arg2, err := ec.field_Query_getTargetsWithOffset_argsLimit(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg2
	arg3, err := ec.field_Query_getTargetsWithOffset_argsSortBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortBy"] = arg3
	arg4, err := ec.field_Query_getTargetsWithOffset_argsDirection(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["direction"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_getTargetsWithOffset_argsLabel(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["label"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
	if tmp, ok := rawArgs["label"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTargetsWithOffset_argsOffset(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["offset"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
	if tmp, ok := rawArgs["offset"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTargetsWithOffset_argsLimit(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["limit"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
	if tmp, ok := rawArgs["limit"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTargetsWithOffset_argsSortBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["sortBy"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
	if tmp, ok := rawArgs["sortBy"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTargetsWithOffset_argsDirection(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["direction"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
	if tmp, ok := rawArgs["direction"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTestDurationAggregation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getTestDurationAggregation_argsLabel(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["label"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getTestDurationAggregation_argsLabel(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["label"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
	if tmp, ok := rawArgs["label"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTestPassAggregation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getTestPassAggregation_argsLabel(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["label"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getTestPassAggregation_argsLabel(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["label"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
	if tmp, ok := rawArgs["label"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTestsWithOffset_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getTestsWithOffset_argsLabel(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["label"] = arg0
	arg1, err := ec.field_Query_getTestsWithOffset_argsOffset(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["offset"] = arg1
	arg2, err := ec.field_Query_getTestsWithOffset_argsLimit(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg2
	arg3, err := ec.field_Query_getTestsWithOffset_argsSortBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["sortBy"] = arg3
	arg4, err := ec.field_Query_getTestsWithOffset_argsDirection(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["direction"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_getTestsWithOffset_argsLabel(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["label"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
	if tmp, ok := rawArgs["label"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTestsWithOffset_argsOffset(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["offset"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
	if tmp, ok := rawArgs["offset"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTestsWithOffset_argsLimit(
	ctx context.Context,
	rawArgs map[string]any,
) (*int, error) {
	if _, ok := rawArgs["limit"]; !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
	if tmp, ok := rawArgs["limit"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTestsWithOffset_argsSortBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["sortBy"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
	if tmp, ok := rawArgs["sortBy"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getTestsWithOffset_argsDirection(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["direction"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
	if tmp, ok := rawArgs["direction"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getUniqueTargetLabels_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getUniqueTargetLabels_argsParam(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["param"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getUniqueTargetLabels_argsParam(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["param"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("param"))
	if tmp, ok := rawArgs["param"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getUniqueTestLabels_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getUniqueTestLabels_argsParam(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["param"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getUniqueTestLabels_argsParam(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["param"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("param"))
	if tmp, ok := rawArgs["param"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_node_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_node_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_nodes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_nodes_argsIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ids"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_nodes_argsIds(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	if _, ok := rawArgs["ids"]; !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
	if tmp, ok := rawArgs["ids"]; ok {
		return ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActionCacheStatistics_id(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionCacheStatistics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_sizeInBytes(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_sizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeInBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_sizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_saveTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_saveTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaveTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_saveTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_loadTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_loadTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_loadTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_hits(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_hits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_hits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_misses(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_misses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Misses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_misses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_actionSummary(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_actionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ActionSummary)
	fc.Result = res
	return ec.marshalOActionSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_actionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionSummary_id(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
			case "actionsCreatedNotIncludingAspects":
				return ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
			case "remoteCacheHits":
				return ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
			case "metrics":
				return ec.fieldContext_ActionSummary_metrics(ctx, field)
			case "actionData":
				return ec.fieldContext_ActionSummary_actionData(ctx, field)
			case "runnerCount":
				return ec.fieldContext_ActionSummary_runnerCount(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_missDetails(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_missDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MissDetails(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MissDetail)
	fc.Result = res
	return ec.marshalOMissDetail2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_missDetails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MissDetail_id(ctx, field)
			case "reason":
				return ec.fieldContext_MissDetail_reason(ctx, field)
			case "count":
				return ec.fieldContext_MissDetail_count(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_MissDetail_actionCacheStatistics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MissDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_id(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionData().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_mnemonic(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_mnemonic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mnemonic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_mnemonic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_actionsExecuted(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_actionsExecuted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsExecuted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_actionsExecuted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_actionsCreated(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_actionsCreated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_actionsCreated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_firstStartedMs(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_firstStartedMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstStartedMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_firstStartedMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_lastEndedMs(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_lastEndedMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastEndedMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_lastEndedMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_systemTime(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_systemTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_systemTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_userTime(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_userTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_userTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_actionSummary(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_actionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ActionSummary)
	fc.Result = res
	return ec.marshalOActionSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_actionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionSummary_id(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
			case "actionsCreatedNotIncludingAspects":
				return ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
			case "remoteCacheHits":
				return ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
			case "metrics":
				return ec.fieldContext_ActionSummary_metrics(ctx, field)
			case "actionData":
				return ec.fieldContext_ActionSummary_actionData(ctx, field)
			case "runnerCount":
				return ec.fieldContext_ActionSummary_runnerCount(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_id(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_label(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_type(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_stdout(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_stdout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionProblem().Stdout(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlobReference)
	fc.Result = res
	return ec.marshalOBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_stdout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BlobReference_name(ctx, field)
			case "downloadURL":
				return ec.fieldContext_BlobReference_downloadURL(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
			case "availabilityStatus":
				return ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
			case "ephemeralURL":
				return ec.fieldContext_BlobReference_ephemeralURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_stderr(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_stderr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionProblem().Stderr(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlobReference)
	fc.Result = res
	return ec.marshalOBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_stderr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BlobReference_name(ctx, field)
			case "downloadURL":
				return ec.fieldContext_BlobReference_downloadURL(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
			case "availabilityStatus":
				return ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
			case "ephemeralURL":
				return ec.fieldContext_BlobReference_ephemeralURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_id(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionSummary().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionsCreated(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionsCreated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionsCreatedNotIncludingAspects(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsCreatedNotIncludingAspects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionsExecuted(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsExecuted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionsExecuted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_remoteCacheHits(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteCacheHits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_remoteCacheHits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionData(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionData(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ActionData)
	fc.Result = res
	return ec.marshalOActionData2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionData_id(ctx, field)
			case "mnemonic":
				return ec.fieldContext_ActionData_mnemonic(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionData_actionsExecuted(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionData_actionsCreated(ctx, field)
			case "firstStartedMs":
				return ec.fieldContext_ActionData_firstStartedMs(ctx, field)
			case "lastEndedMs":
				return ec.fieldContext_ActionData_lastEndedMs(ctx, field)
			case "systemTime":
				return ec.fieldContext_ActionData_systemTime(ctx, field)
			case "userTime":
				return ec.fieldContext_ActionData_userTime(ctx, field)
			case "actionSummary":
				return ec.fieldContext_ActionData_actionSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_runnerCount(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_runnerCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunnerCount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.RunnerCount)
	fc.Result = res
	return ec.marshalORunnerCount2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_runnerCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RunnerCount_id(ctx, field)
			case "name":
				return ec.fieldContext_RunnerCount_name(ctx, field)
			case "execKind":
				return ec.fieldContext_RunnerCount_execKind(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_RunnerCount_actionsExecuted(ctx, field)
			case "actionSummary":
				return ec.fieldContext_RunnerCount_actionSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RunnerCount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionCacheStatistics(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionCacheStatistics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ActionCacheStatistics)
	fc.Result = res
	return ec.marshalOActionCacheStatistics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatistics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionCacheStatistics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionCacheStatistics_id(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_ActionCacheStatistics_sizeInBytes(ctx, field)
			case "saveTimeInMs":
				return ec.fieldContext_ActionCacheStatistics_saveTimeInMs(ctx, field)
			case "loadTimeInMs":
				return ec.fieldContext_ActionCacheStatistics_loadTimeInMs(ctx, field)
			case "hits":
				return ec.fieldContext_ActionCacheStatistics_hits(ctx, field)
			case "misses":
				return ec.fieldContext_ActionCacheStatistics_misses(ctx, field)
			case "actionSummary":
				return ec.fieldContext_ActionCacheStatistics_actionSummary(ctx, field)
			case "missDetails":
				return ec.fieldContext_ActionCacheStatistics_missDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionCacheStatistics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ArtifactMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_sourceArtifactsReadSizeInBytes(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_sourceArtifactsReadSizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceArtifactsReadSizeInBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_sourceArtifactsReadSizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_sourceArtifactsReadCount(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_sourceArtifactsReadCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceArtifactsReadCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_sourceArtifactsReadCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_outputArtifactsSeenSizeInBytes(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_outputArtifactsSeenSizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputArtifactsSeenSizeInBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_outputArtifactsSeenSizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_outputArtifactsSeenCount(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_outputArtifactsSeenCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputArtifactsSeenCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_outputArtifactsSeenCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_outputArtifactsFromActionCacheSizeInBytes(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_outputArtifactsFromActionCacheSizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputArtifactsFromActionCacheSizeInBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_outputArtifactsFromActionCacheSizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_outputArtifactsFromActionCacheCount(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_outputArtifactsFromActionCacheCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputArtifactsFromActionCacheCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_outputArtifactsFromActionCacheCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_topLevelArtifactsSizeInBytes(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_topLevelArtifactsSizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopLevelArtifactsSizeInBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_topLevelArtifactsSizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_topLevelArtifactsCount(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_topLevelArtifactsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopLevelArtifactsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_topLevelArtifactsCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_id(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_command(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_command(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Command, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_command(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_executable(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_executable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Executable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_executable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_residual(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_residual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Residual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_residual(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_explicitCmdLine(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_explicitCmdLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExplicitCmdLine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_explicitCmdLine(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_cmdLine(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_cmdLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmdLine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_cmdLine(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_startupOptions(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_startupOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartupOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_startupOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_explicitStartupOptions(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_explicitStartupOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExplicitStartupOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_explicitStartupOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_id(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_invocationID(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_invocationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvocationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_invocationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_startedAt(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_startedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_endedAt(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_endedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_endedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_changeNumber(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_changeNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_patchsetNumber(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatchsetNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_patchsetNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_bepCompleted(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BepCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_bepCompleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_stepLabel(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StepLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_stepLabel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_userEmail(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_userEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_userEmail(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_userLdap(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_userLdap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLdap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_userLdap(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_cpu(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_cpu(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPU, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_cpu(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_platformName(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_platformName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlatformName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_platformName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_hostname(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_hostname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hostname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_hostname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_isCiWorker(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCiWorker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_isCiWorker(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_configurationMnemonic(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfigurationMnemonic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_configurationMnemonic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_numFetches(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_numFetches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumFetches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_numFetches(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_instanceName(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_instanceName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_instanceName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_bazelVersion(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_bazelVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_exitCodeName(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExitCodeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_exitCodeName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_exitCodeCode(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExitCodeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_exitCodeCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_build(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_build(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Build(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Build)
	fc.Result = res
	return ec.marshalOBuild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuild(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_build(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Build_id(ctx, field)
			case "buildURL":
				return ec.fieldContext_Build_buildURL(ctx, field)
			case "buildUUID":
				return ec.fieldContext_Build_buildUUID(ctx, field)
			case "instanceName":
				return ec.fieldContext_Build_instanceName(ctx, field)
			case "timestamp":
				return ec.fieldContext_Build_timestamp(ctx, field)
			case "invocations":
				return ec.fieldContext_Build_invocations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Build", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_incompleteBuildLogs(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncompleteBuildLogs(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.IncompleteBuildLog)
	fc.Result = res
	return ec.marshalOIncompleteBuildLog2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_incompleteBuildLogs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IncompleteBuildLog_id(ctx, field)
			case "snippetID":
				return ec.fieldContext_IncompleteBuildLog_snippetID(ctx, field)
			case "logSnippet":
				return ec.fieldContext_IncompleteBuildLog_logSnippet(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_IncompleteBuildLog_bazelInvocation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IncompleteBuildLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_invocationFiles(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvocationFiles(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.InvocationFiles)
	fc.Result = res
	return ec.marshalOInvocationFiles2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_invocationFiles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InvocationFiles_id(ctx, field)
			case "name":
				return ec.fieldContext_InvocationFiles_name(ctx, field)
			case "content":
				return ec.fieldContext_InvocationFiles_content(ctx, field)
			case "digest":
				return ec.fieldContext_InvocationFiles_digest(ctx, field)
			case "sizeBytes":
				return ec.fieldContext_InvocationFiles_sizeBytes(ctx, field)
			case "digestFunction":
				return ec.fieldContext_InvocationFiles_digestFunction(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_InvocationFiles_bazelInvocation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvocationFiles", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_testCollection(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_testCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestCollection(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestCollection)
	fc.Result = res
	return ec.marshalOTestCollection2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_testCollection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestCollection_id(ctx, field)
			case "label":
				return ec.fieldContext_TestCollection_label(ctx, field)
			case "overallStatus":
				return ec.fieldContext_TestCollection_overallStatus(ctx, field)
			case "strategy":
				return ec.fieldContext_TestCollection_strategy(ctx, field)
			case "cachedLocally":
				return ec.fieldContext_TestCollection_cachedLocally(ctx, field)
			case "cachedRemotely":
				return ec.fieldContext_TestCollection_cachedRemotely(ctx, field)
			case "firstSeen":
				return ec.fieldContext_TestCollection_firstSeen(ctx, field)
			case "durationMs":
				return ec.fieldContext_TestCollection_durationMs(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_TestCollection_bazelInvocation(ctx, field)
			case "testSummary":
				return ec.fieldContext_TestCollection_testSummary(ctx, field)
			case "testResults":
				return ec.fieldContext_TestCollection_testResults(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestCollection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_targets(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_targets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Targets(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Target)
	fc.Result = res
	return ec.marshalOTarget2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_targets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "label":
				return ec.fieldContext_Target_label(ctx, field)
			case "tag":
				return ec.fieldContext_Target_tag(ctx, field)
			case "targetKind":
				return ec.fieldContext_Target_targetKind(ctx, field)
			case "testSize":
				return ec.fieldContext_Target_testSize(ctx, field)
			case "success":
				return ec.fieldContext_Target_success(ctx, field)
			case "testTimeout":
				return ec.fieldContext_Target_testTimeout(ctx, field)
			case "startTimeInMs":
				return ec.fieldContext_Target_startTimeInMs(ctx, field)
			case "endTimeInMs":
				return ec.fieldContext_Target_endTimeInMs(ctx, field)
			case "durationInMs":
				return ec.fieldContext_Target_durationInMs(ctx, field)
			case "abortReason":
				return ec.fieldContext_Target_abortReason(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Target_bazelInvocation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_sourceControl(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceControl(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.SourceControl)
	fc.Result = res
	return ec.marshalOSourceControl2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_sourceControl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SourceControl_id(ctx, field)
			case "provider":
				return ec.fieldContext_SourceControl_provider(ctx, field)
			case "instanceURL":
				return ec.fieldContext_SourceControl_instanceURL(ctx, field)
			case "repo":
				return ec.fieldContext_SourceControl_repo(ctx, field)
			case "refs":
				return ec.fieldContext_SourceControl_refs(ctx, field)
			case "commitSha":
				return ec.fieldContext_SourceControl_commitSha(ctx, field)
			case "actor":
				return ec.fieldContext_SourceControl_actor(ctx, field)
			case "eventName":
				return ec.fieldContext_SourceControl_eventName(ctx, field)
			case "workflow":
				return ec.fieldContext_SourceControl_workflow(ctx, field)
			case "runID":
				return ec.fieldContext_SourceControl_runID(ctx, field)
			case "runNumber":
				return ec.fieldContext_SourceControl_runNumber(ctx, field)
			case "job":
				return ec.fieldContext_SourceControl_job(ctx, field)
			case "action":
				return ec.fieldContext_SourceControl_action(ctx, field)
			case "runnerName":
				return ec.fieldContext_SourceControl_runnerName(ctx, field)
			case "runnerArch":
				return ec.fieldContext_SourceControl_runnerArch(ctx, field)
			case "runnerOs":
				return ec.fieldContext_SourceControl_runnerOs(ctx, field)
			case "workspace":
				return ec.fieldContext_SourceControl_workspace(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_SourceControl_bazelInvocation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SourceControl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_bazelCommand(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().BazelCommand(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BazelCommand)
	fc.Result = res
	return ec.marshalNBazelCommand2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelCommand(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_bazelCommand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelCommand_id(ctx, field)
			case "command":
				return ec.fieldContext_BazelCommand_command(ctx, field)
			case "executable":
				return ec.fieldContext_BazelCommand_executable(ctx, field)
			case "residual":
				return ec.fieldContext_BazelCommand_residual(ctx, field)
			case "explicitCmdLine":
				return ec.fieldContext_BazelCommand_explicitCmdLine(ctx, field)
			case "cmdLine":
				return ec.fieldContext_BazelCommand_cmdLine(ctx, field)
			case "startupOptions":
				return ec.fieldContext_BazelCommand_startupOptions(ctx, field)
			case "explicitStartupOptions":
				return ec.fieldContext_BazelCommand_explicitStartupOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelCommand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_state(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().State(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BazelInvocationState)
	fc.Result = res
	return ec.marshalNBazelInvocationState2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelInvocationState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocationState_id(ctx, field)
			case "buildEndTime":
				return ec.fieldContext_BazelInvocationState_buildEndTime(ctx, field)
			case "buildStartTime":
				return ec.fieldContext_BazelInvocationState_buildStartTime(ctx, field)
			case "exitCode":
				return ec.fieldContext_BazelInvocationState_exitCode(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocationState_bepCompleted(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocationState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_user(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "Email":
				return ec.fieldContext_User_Email(ctx, field)
			case "LDAP":
				return ec.fieldContext_User_LDAP(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_problems(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_problems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().Problems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Problem)
	fc.Result = res
	return ec.marshalNProblem2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProblemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_problems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_profile(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().Profile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Profile)
	fc.Result = res
	return ec.marshalOProfile2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_profile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Profile_id(ctx, field)
			case "name":
				return ec.fieldContext_Profile_name(ctx, field)
			case "digest":
				return ec.fieldContext_Profile_digest(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_Profile_sizeInBytes(ctx, field)
			case "digestFunction":
				return ec.fieldContext_Profile_digestFunction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Profile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_buildLogs(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().BuildLogs(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_buildLogs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.BazelInvocationEdge)
	fc.Result = res
	return ec.marshalOBazelInvocationEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_BazelInvocationEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_BazelInvocationEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocationEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationProblem_id(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocationProblem().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationProblem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationProblem_problemType(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationProblem_problemType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProblemType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationProblem_problemType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationProblem_label(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationProblem_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationProblem_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationProblem_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationProblem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_id(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_buildEndTime(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_buildEndTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_buildEndTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_buildStartTime(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_buildStartTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_buildStartTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_exitCode(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_exitCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExitCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ExitCode)
	fc.Result = res
	return ec.marshalOExitCode2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐExitCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_exitCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExitCode_id(ctx, field)
			case "code":
				return ec.fieldContext_ExitCode_code(ctx, field)
			case "name":
				return ec.fieldContext_ExitCode_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExitCode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_bepCompleted(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_bepCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BepCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_bepCompleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_id(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Blob().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_uri(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_uri(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_sizeBytes(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_sizeBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_sizeBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_archivingStatus(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_archivingStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchivingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(blob.ArchivingStatus)
	fc.Result = res
	return ec.marshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_archivingStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BlobArchivingStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_reason(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_reason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_archiveURL(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_archiveURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchiveURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_archiveURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_instanceName(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_instanceName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_instanceName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_name(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_downloadURL(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_downloadURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BlobReference().DownloadURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_downloadURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_sizeInBytes(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BlobReference().SizeInBytes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_sizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_availabilityStatus(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BlobReference().AvailabilityStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActionOutputStatus)
	fc.Result = res
	return ec.marshalNActionOutputStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐActionOutputStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_availabilityStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionOutputStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_ephemeralURL(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_ephemeralURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BlobReference().EphemeralURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_ephemeralURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_id(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Build().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_buildURL(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_buildURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_buildURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_buildUUID(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_buildUUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildUUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_buildUUID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_instanceName(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_instanceName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_instanceName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_timestamp(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_invocations(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_invocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invocations(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_invocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.BuildConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.BuildEdge)
	fc.Result = res
	return ec.marshalOBuildEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_BuildEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_BuildEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BuildEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.BuildConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.BuildEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Build)
	fc.Result = res
	return ec.marshalOBuild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuild(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Build_id(ctx, field)
			case "buildURL":
				return ec.fieldContext_Build_buildURL(ctx, field)
			case "buildUUID":
				return ec.fieldContext_Build_buildUUID(ctx, field)
			case "instanceName":
				return ec.fieldContext_Build_instanceName(ctx, field)
			case "timestamp":
				return ec.fieldContext_Build_timestamp(ctx, field)
			case "invocations":
				return ec.fieldContext_Build_invocations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Build", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.BuildEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BuildGraphMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_actionLookupValueCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_actionLookupValueCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionLookupValueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_actionLookupValueCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_actionLookupValueCountNotIncludingAspects(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_actionLookupValueCountNotIncludingAspects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionLookupValueCountNotIncludingAspects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_actionLookupValueCountNotIncludingAspects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_actionCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_actionCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_actionCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_actionCountNotIncludingAspects(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_actionCountNotIncludingAspects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionCountNotIncludingAspects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_actionCountNotIncludingAspects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_inputFileConfiguredTargetCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_inputFileConfiguredTargetCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFileConfiguredTargetCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_inputFileConfiguredTargetCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_outputFileConfiguredTargetCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_outputFileConfiguredTargetCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputFileConfiguredTargetCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_outputFileConfiguredTargetCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_otherConfiguredTargetCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_otherConfiguredTargetCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherConfiguredTargetCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_otherConfiguredTargetCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_outputArtifactCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_outputArtifactCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputArtifactCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_outputArtifactCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_postInvocationSkyframeNodeCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_postInvocationSkyframeNodeCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostInvocationSkyframeNodeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_postInvocationSkyframeNodeCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_dirtiedValues(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_dirtiedValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirtiedValues(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.EvaluationStat)
	fc.Result = res
	return ec.marshalOEvaluationStat2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_dirtiedValues(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationStat_id(ctx, field)
			case "skyfunctionName":
				return ec.fieldContext_EvaluationStat_skyfunctionName(ctx, field)
			case "count":
				return ec.fieldContext_EvaluationStat_count(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_EvaluationStat_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationStat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_changedValues(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_changedValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangedValues(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.EvaluationStat)
	fc.Result = res
	return ec.marshalOEvaluationStat2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_changedValues(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationStat_id(ctx, field)
			case "skyfunctionName":
				return ec.fieldContext_EvaluationStat_skyfunctionName(ctx, field)
			case "count":
				return ec.fieldContext_EvaluationStat_count(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_EvaluationStat_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationStat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_builtValues(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_builtValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuiltValues(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.EvaluationStat)
	fc.Result = res
	return ec.marshalOEvaluationStat2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_builtValues(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationStat_id(ctx, field)
			case "skyfunctionName":
				return ec.fieldContext_EvaluationStat_skyfunctionName(ctx, field)
			case "count":
				return ec.fieldContext_EvaluationStat_count(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_EvaluationStat_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationStat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_cleanedValues(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_cleanedValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CleanedValues(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.EvaluationStat)
	fc.Result = res
	return ec.marshalOEvaluationStat2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_cleanedValues(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationStat_id(ctx, field)
			case "skyfunctionName":
				return ec.fieldContext_EvaluationStat_skyfunctionName(ctx, field)
			case "count":
				return ec.fieldContext_EvaluationStat_count(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_EvaluationStat_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationStat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildGraphMetrics_evaluatedValues(ctx context.Context, field graphql.CollectedField, obj *ent.BuildGraphMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildGraphMetrics_evaluatedValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluatedValues(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.EvaluationStat)
	fc.Result = res
	return ec.marshalOEvaluationStat2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildGraphMetrics_evaluatedValues(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildGraphMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationStat_id(ctx, field)
			case "skyfunctionName":
				return ec.fieldContext_EvaluationStat_skyfunctionName(ctx, field)
			case "count":
				return ec.fieldContext_EvaluationStat_count(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_EvaluationStat_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationStat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CumulativeMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.CumulativeMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CumulativeMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CumulativeMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CumulativeMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CumulativeMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CumulativeMetrics_numAnalyses(ctx context.Context, field graphql.CollectedField, obj *ent.CumulativeMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CumulativeMetrics_numAnalyses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumAnalyses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CumulativeMetrics_numAnalyses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CumulativeMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CumulativeMetrics_numBuilds(ctx context.Context, field graphql.CollectedField, obj *ent.CumulativeMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CumulativeMetrics_numBuilds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumBuilds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CumulativeMetrics_numBuilds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CumulativeMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CumulativeMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.CumulativeMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CumulativeMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CumulativeMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CumulativeMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationStat_id(ctx context.Context, field graphql.CollectedField, obj *ent.EvaluationStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationStat_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EvaluationStat().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationStat_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationStat",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationStat_skyfunctionName(ctx context.Context, field graphql.CollectedField, obj *ent.EvaluationStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationStat_skyfunctionName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkyfunctionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationStat_skyfunctionName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationStat_count(ctx context.Context, field graphql.CollectedField, obj *ent.EvaluationStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationStat_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationStat_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationStat_buildGraphMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.EvaluationStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationStat_buildGraphMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildGraphMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BuildGraphMetrics)
	fc.Result = res
	return ec.marshalOBuildGraphMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationStat_buildGraphMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationStat",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BuildGraphMetrics_id(ctx, field)
			case "actionLookupValueCount":
				return ec.fieldContext_BuildGraphMetrics_actionLookupValueCount(ctx, field)
			case "actionLookupValueCountNotIncludingAspects":
				return ec.fieldContext_BuildGraphMetrics_actionLookupValueCountNotIncludingAspects(ctx, field)
			case "actionCount":
				return ec.fieldContext_BuildGraphMetrics_actionCount(ctx, field)
			case "actionCountNotIncludingAspects":
				return ec.fieldContext_BuildGraphMetrics_actionCountNotIncludingAspects(ctx, field)
			case "inputFileConfiguredTargetCount":
				return ec.fieldContext_BuildGraphMetrics_inputFileConfiguredTargetCount(ctx, field)
			case "outputFileConfiguredTargetCount":
				return ec.fieldContext_BuildGraphMetrics_outputFileConfiguredTargetCount(ctx, field)
			case "otherConfiguredTargetCount":
				return ec.fieldContext_BuildGraphMetrics_otherConfiguredTargetCount(ctx, field)
			case "outputArtifactCount":
				return ec.fieldContext_BuildGraphMetrics_outputArtifactCount(ctx, field)
			case "postInvocationSkyframeNodeCount":
				return ec.fieldContext_BuildGraphMetrics_postInvocationSkyframeNodeCount(ctx, field)
			case "metrics":
				return ec.fieldContext_BuildGraphMetrics_metrics(ctx, field)
			case "dirtiedValues":
				return ec.fieldContext_BuildGraphMetrics_dirtiedValues(ctx, field)
			case "changedValues":
				return ec.fieldContext_BuildGraphMetrics_changedValues(ctx, field)
			case "builtValues":
				return ec.fieldContext_BuildGraphMetrics_builtValues(ctx, field)
			case "cleanedValues":
				return ec.fieldContext_BuildGraphMetrics_cleanedValues(ctx, field)
			case "evaluatedValues":
				return ec.fieldContext_BuildGraphMetrics_evaluatedValues(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BuildGraphMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_id(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ExectionInfo().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_timeoutSeconds(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_timeoutSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeoutSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_timeoutSeconds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_strategy(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_strategy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Strategy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_strategy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_cachedRemotely(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_cachedRemotely(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CachedRemotely, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_cachedRemotely(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_exitCode(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_exitCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExitCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_exitCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_hostname(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_hostname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hostname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_hostname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_testResult(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_testResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestResult(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestResultBES)
	fc.Result = res
	return ec.marshalOTestResultBES2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBES(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_testResult(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestResultBES_id(ctx, field)
			case "testStatus":
				return ec.fieldContext_TestResultBES_testStatus(ctx, field)
			case "statusDetails":
				return ec.fieldContext_TestResultBES_statusDetails(ctx, field)
			case "label":
				return ec.fieldContext_TestResultBES_label(ctx, field)
			case "warning":
				return ec.fieldContext_TestResultBES_warning(ctx, field)
			case "cachedLocally":
				return ec.fieldContext_TestResultBES_cachedLocally(ctx, field)
			case "testAttemptStartMillisEpoch":
				return ec.fieldContext_TestResultBES_testAttemptStartMillisEpoch(ctx, field)
			case "testAttemptStart":
				return ec.fieldContext_TestResultBES_testAttemptStart(ctx, field)
			case "testAttemptDurationMillis":
				return ec.fieldContext_TestResultBES_testAttemptDurationMillis(ctx, field)
			case "testAttemptDuration":
				return ec.fieldContext_TestResultBES_testAttemptDuration(ctx, field)
			case "testCollection":
				return ec.fieldContext_TestResultBES_testCollection(ctx, field)
			case "testActionOutput":
				return ec.fieldContext_TestResultBES_testActionOutput(ctx, field)
			case "executionInfo":
				return ec.fieldContext_TestResultBES_executionInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestResultBES", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_timingBreakdown(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_timingBreakdown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimingBreakdown(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TimingBreakdown)
	fc.Result = res
	return ec.marshalOTimingBreakdown2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdown(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_timingBreakdown(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TimingBreakdown_id(ctx, field)
			case "name":
				return ec.fieldContext_TimingBreakdown_name(ctx, field)
			case "time":
				return ec.fieldContext_TimingBreakdown_time(ctx, field)
			case "executionInfo":
				return ec.fieldContext_TimingBreakdown_executionInfo(ctx, field)
			case "child":
				return ec.fieldContext_TimingBreakdown_child(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimingBreakdown", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExectionInfo_resourceUsage(ctx context.Context, field graphql.CollectedField, obj *ent.ExectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExectionInfo_resourceUsage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceUsage(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ResourceUsage)
	fc.Result = res
	return ec.marshalOResourceUsage2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExectionInfo_resourceUsage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExectionInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ResourceUsage_id(ctx, field)
			case "name":
				return ec.fieldContext_ResourceUsage_name(ctx, field)
			case "value":
				return ec.fieldContext_ResourceUsage_value(ctx, field)
			case "executionInfo":
				return ec.fieldContext_ResourceUsage_executionInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResourceUsage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExitCode_id(ctx context.Context, field graphql.CollectedField, obj *model.ExitCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExitCode_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExitCode_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExitCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExitCode_code(ctx context.Context, field graphql.CollectedField, obj *model.ExitCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExitCode_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExitCode_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExitCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExitCode_name(ctx context.Context, field graphql.CollectedField, obj *model.ExitCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExitCode_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExitCode_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExitCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GarbageMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.GarbageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GarbageMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GarbageMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GarbageMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GarbageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GarbageMetrics_type(ctx context.Context, field graphql.CollectedField, obj *ent.GarbageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GarbageMetrics_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GarbageMetrics_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GarbageMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GarbageMetrics_garbageCollected(ctx context.Context, field graphql.CollectedField, obj *ent.GarbageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GarbageMetrics_garbageCollected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GarbageCollected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GarbageMetrics_garbageCollected(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GarbageMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GarbageMetrics_memoryMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.GarbageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GarbageMetrics_memoryMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemoryMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.MemoryMetrics)
	fc.Result = res
	return ec.marshalOMemoryMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GarbageMetrics_memoryMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GarbageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemoryMetrics_id(ctx, field)
			case "peakPostGcHeapSize":
				return ec.fieldContext_MemoryMetrics_peakPostGcHeapSize(ctx, field)
			case "usedHeapSizePostBuild":
				return ec.fieldContext_MemoryMetrics_usedHeapSizePostBuild(ctx, field)
			case "peakPostGcTenuredSpaceHeapSize":
				return ec.fieldContext_MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx, field)
			case "metrics":
				return ec.fieldContext_MemoryMetrics_metrics(ctx, field)
			case "garbageMetrics":
				return ec.fieldContext_MemoryMetrics_garbageMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemoryMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncompleteBuildLog_id(ctx context.Context, field graphql.CollectedField, obj *ent.IncompleteBuildLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncompleteBuildLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.IncompleteBuildLog().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncompleteBuildLog_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncompleteBuildLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncompleteBuildLog_snippetID(ctx context.Context, field graphql.CollectedField, obj *ent.IncompleteBuildLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncompleteBuildLog_snippetID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SnippetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncompleteBuildLog_snippetID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncompleteBuildLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncompleteBuildLog_logSnippet(ctx context.Context, field graphql.CollectedField, obj *ent.IncompleteBuildLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncompleteBuildLog_logSnippet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogSnippet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncompleteBuildLog_logSnippet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncompleteBuildLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IncompleteBuildLog_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.IncompleteBuildLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IncompleteBuildLog_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IncompleteBuildLog_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IncompleteBuildLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvocationFiles_id(ctx context.Context, field graphql.CollectedField, obj *ent.InvocationFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvocationFiles_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InvocationFiles().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvocationFiles_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvocationFiles",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvocationFiles_name(ctx context.Context, field graphql.CollectedField, obj *ent.InvocationFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvocationFiles_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvocationFiles_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvocationFiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvocationFiles_content(ctx context.Context, field graphql.CollectedField, obj *ent.InvocationFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvocationFiles_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvocationFiles_content(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvocationFiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvocationFiles_digest(ctx context.Context, field graphql.CollectedField, obj *ent.InvocationFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvocationFiles_digest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Digest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvocationFiles_digest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvocationFiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvocationFiles_sizeBytes(ctx context.Context, field graphql.CollectedField, obj *ent.InvocationFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvocationFiles_sizeBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvocationFiles_sizeBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvocationFiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvocationFiles_digestFunction(ctx context.Context, field graphql.CollectedField, obj *ent.InvocationFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvocationFiles_digestFunction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DigestFunction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvocationFiles_digestFunction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvocationFiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvocationFiles_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.InvocationFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvocationFiles_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvocationFiles_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvocationFiles",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MemoryMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_peakPostGcHeapSize(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_peakPostGcHeapSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakPostGcHeapSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_peakPostGcHeapSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_usedHeapSizePostBuild(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_usedHeapSizePostBuild(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedHeapSizePostBuild, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_usedHeapSizePostBuild(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakPostGcTenuredSpaceHeapSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_peakPostGcTenuredSpaceHeapSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_garbageMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_garbageMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GarbageMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.GarbageMetrics)
	fc.Result = res
	return ec.marshalOGarbageMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_garbageMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GarbageMetrics_id(ctx, field)
			case "type":
				return ec.fieldContext_GarbageMetrics_type(ctx, field)
			case "garbageCollected":
				return ec.fieldContext_GarbageMetrics_garbageCollected(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_GarbageMetrics_memoryMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GarbageMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Metrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_actionSummary(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_actionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ActionSummary)
	fc.Result = res
	return ec.marshalOActionSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_actionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionSummary_id(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
			case "actionsCreatedNotIncludingAspects":
				return ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
			case "remoteCacheHits":
				return ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
			case "metrics":
				return ec.fieldContext_ActionSummary_metrics(ctx, field)
			case "actionData":
				return ec.fieldContext_ActionSummary_actionData(ctx, field)
			case "runnerCount":
				return ec.fieldContext_ActionSummary_runnerCount(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_memoryMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_memoryMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemoryMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.MemoryMetrics)
	fc.Result = res
	return ec.marshalOMemoryMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_memoryMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemoryMetrics_id(ctx, field)
			case "peakPostGcHeapSize":
				return ec.fieldContext_MemoryMetrics_peakPostGcHeapSize(ctx, field)
			case "usedHeapSizePostBuild":
				return ec.fieldContext_MemoryMetrics_usedHeapSizePostBuild(ctx, field)
			case "peakPostGcTenuredSpaceHeapSize":
				return ec.fieldContext_MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx, field)
			case "metrics":
				return ec.fieldContext_MemoryMetrics_metrics(ctx, field)
			case "garbageMetrics":
				return ec.fieldContext_MemoryMetrics_garbageMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemoryMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_targetMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_targetMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TargetMetrics)
	fc.Result = res
	return ec.marshalOTargetMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_targetMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TargetMetrics_id(ctx, field)
			case "targetsLoaded":
				return ec.fieldContext_TargetMetrics_targetsLoaded(ctx, field)
			case "targetsConfigured":
				return ec.fieldContext_TargetMetrics_targetsConfigured(ctx, field)
			case "targetsConfiguredNotIncludingAspects":
				return ec.fieldContext_TargetMetrics_targetsConfiguredNotIncludingAspects(ctx, field)
			case "metrics":
				return ec.fieldContext_TargetMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_packageMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_packageMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.PackageMetrics)
	fc.Result = res
	return ec.marshalOPackageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_packageMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PackageMetrics_id(ctx, field)
			case "packagesLoaded":
				return ec.fieldContext_PackageMetrics_packagesLoaded(ctx, field)
			case "metrics":
				return ec.fieldContext_PackageMetrics_metrics(ctx, field)
			case "packageLoadMetrics":
				return ec.fieldContext_PackageMetrics_packageLoadMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PackageMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_timingMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_timingMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimingMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TimingMetrics)
	fc.Result = res
	return ec.marshalOTimingMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_timingMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TimingMetrics_id(ctx, field)
			case "cpuTimeInMs":
				return ec.fieldContext_TimingMetrics_cpuTimeInMs(ctx, field)
			case "wallTimeInMs":
				return ec.fieldContext_TimingMetrics_wallTimeInMs(ctx, field)
			case "analysisPhaseTimeInMs":
				return ec.fieldContext_TimingMetrics_analysisPhaseTimeInMs(ctx, field)
			case "executionPhaseTimeInMs":
				return ec.fieldContext_TimingMetrics_executionPhaseTimeInMs(ctx, field)
			case "actionsExecutionStartInMs":
				return ec.fieldContext_TimingMetrics_actionsExecutionStartInMs(ctx, field)
			case "metrics":
				return ec.fieldContext_TimingMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimingMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_cumulativeMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CumulativeMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CumulativeMetrics)
	fc.Result = res
	return ec.marshalOCumulativeMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_cumulativeMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CumulativeMetrics_id(ctx, field)
			case "numAnalyses":
				return ec.fieldContext_CumulativeMetrics_numAnalyses(ctx, field)
			case "numBuilds":
				return ec.fieldContext_CumulativeMetrics_numBuilds(ctx, field)
			case "metrics":
				return ec.fieldContext_CumulativeMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CumulativeMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_artifactMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_artifactMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtifactMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ArtifactMetrics)
	fc.Result = res
	return ec.marshalOArtifactMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_artifactMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactMetrics_id(ctx, field)
			case "sourceArtifactsReadSizeInBytes":
				return ec.fieldContext_ArtifactMetrics_sourceArtifactsReadSizeInBytes(ctx, field)
			case "sourceArtifactsReadCount":
				return ec.fieldContext_ArtifactMetrics_sourceArtifactsReadCount(ctx, field)
			case "outputArtifactsSeenSizeInBytes":
				return ec.fieldContext_ArtifactMetrics_outputArtifactsSeenSizeInBytes(ctx, field)
			case "outputArtifactsSeenCount":
				return ec.fieldContext_ArtifactMetrics_outputArtifactsSeenCount(ctx, field)
			case "outputArtifactsFromActionCacheSizeInBytes":
				return ec.fieldContext_ArtifactMetrics_outputArtifactsFromActionCacheSizeInBytes(ctx, field)
			case "outputArtifactsFromActionCacheCount":
				return ec.fieldContext_ArtifactMetrics_outputArtifactsFromActionCacheCount(ctx, field)
			case "topLevelArtifactsSizeInBytes":
				return ec.fieldContext_ArtifactMetrics_topLevelArtifactsSizeInBytes(ctx, field)
			case "topLevelArtifactsCount":
				return ec.fieldContext_ArtifactMetrics_topLevelArtifactsCount(ctx, field)
			case "metrics":
				return ec.fieldContext_ArtifactMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_networkMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_networkMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetworkMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.NetworkMetrics)
	fc.Result = res
	return ec.marshalONetworkMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_networkMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NetworkMetrics_id(ctx, field)
			case "metrics":
				return ec.fieldContext_NetworkMetrics_metrics(ctx, field)
			case "systemNetworkStats":
				return ec.fieldContext_NetworkMetrics_systemNetworkStats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_buildGraphMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildGraphMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BuildGraphMetrics)
	fc.Result = res
	return ec.marshalOBuildGraphMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_buildGraphMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BuildGraphMetrics_id(ctx, field)
			case "actionLookupValueCount":
				return ec.fieldContext_BuildGraphMetrics_actionLookupValueCount(ctx, field)
			case "actionLookupValueCountNotIncludingAspects":
				return ec.fieldContext_BuildGraphMetrics_actionLookupValueCountNotIncludingAspects(ctx, field)
			case "actionCount":
				return ec.fieldContext_BuildGraphMetrics_actionCount(ctx, field)
			case "actionCountNotIncludingAspects":
				return ec.fieldContext_BuildGraphMetrics_actionCountNotIncludingAspects(ctx, field)
			case "inputFileConfiguredTargetCount":
				return ec.fieldContext_BuildGraphMetrics_inputFileConfiguredTargetCount(ctx, field)
			case "outputFileConfiguredTargetCount":
				return ec.fieldContext_BuildGraphMetrics_outputFileConfiguredTargetCount(ctx, field)
			case "otherConfiguredTargetCount":
				return ec.fieldContext_BuildGraphMetrics_otherConfiguredTargetCount(ctx, field)
			case "outputArtifactCount":
				return ec.fieldContext_BuildGraphMetrics_outputArtifactCount(ctx, field)
			case "postInvocationSkyframeNodeCount":
				return ec.fieldContext_BuildGraphMetrics_postInvocationSkyframeNodeCount(ctx, field)
			case "metrics":
				return ec.fieldContext_BuildGraphMetrics_metrics(ctx, field)
			case "dirtiedValues":
				return ec.fieldContext_BuildGraphMetrics_dirtiedValues(ctx, field)
			case "changedValues":
				return ec.fieldContext_BuildGraphMetrics_changedValues(ctx, field)
			case "builtValues":
				return ec.fieldContext_BuildGraphMetrics_builtValues(ctx, field)
			case "cleanedValues":
				return ec.fieldContext_BuildGraphMetrics_cleanedValues(ctx, field)
			case "evaluatedValues":
				return ec.fieldContext_BuildGraphMetrics_evaluatedValues(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BuildGraphMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MetricsEdge)
	fc.Result = res
	return ec.marshalOMetricsEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_MetricsEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_MetricsEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricsEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MissDetail_id(ctx context.Context, field graphql.CollectedField, obj *ent.MissDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MissDetail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MissDetail().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MissDetail_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MissDetail",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MissDetail_reason(ctx context.Context, field graphql.CollectedField, obj *ent.MissDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MissDetail_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(missdetail.Reason)
	fc.Result = res
	return ec.marshalOMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MissDetail_reason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MissDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MissDetailReason does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MissDetail_count(ctx context.Context, field graphql.CollectedField, obj *ent.MissDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MissDetail_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MissDetail_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MissDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MissDetail_actionCacheStatistics(ctx context.Context, field graphql.CollectedField, obj *ent.MissDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MissDetail_actionCacheStatistics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionCacheStatistics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ActionCacheStatistics)
	fc.Result = res
	return ec.marshalOActionCacheStatistics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatistics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MissDetail_actionCacheStatistics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MissDetail",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionCacheStatistics_id(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_ActionCacheStatistics_sizeInBytes(ctx, field)
			case "saveTimeInMs":
				return ec.fieldContext_ActionCacheStatistics_saveTimeInMs(ctx, field)
			case "loadTimeInMs":
				return ec.fieldContext_ActionCacheStatistics_loadTimeInMs(ctx, field)
			case "hits":
				return ec.fieldContext_ActionCacheStatistics_hits(ctx, field)
			case "misses":
				return ec.fieldContext_ActionCacheStatistics_misses(ctx, field)
			case "actionSummary":
				return ec.fieldContext_ActionCacheStatistics_actionSummary(ctx, field)
			case "missDetails":
				return ec.fieldContext_ActionCacheStatistics_missDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionCacheStatistics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NamedSetOfFiles_id(ctx context.Context, field graphql.CollectedField, obj *ent.NamedSetOfFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NamedSetOfFiles_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.NamedSetOfFiles().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NamedSetOfFiles_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NamedSetOfFiles",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NamedSetOfFiles_outputGroup(ctx context.Context, field graphql.CollectedField, obj *ent.NamedSetOfFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NamedSetOfFiles_outputGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputGroup(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.OutputGroup)
	fc.Result = res
	return ec.marshalOOutputGroup2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NamedSetOfFiles_outputGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NamedSetOfFiles",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OutputGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_OutputGroup_name(ctx, field)
			case "incomplete":
				return ec.fieldContext_OutputGroup_incomplete(ctx, field)
			case "inlineFiles":
				return ec.fieldContext_OutputGroup_inlineFiles(ctx, field)
			case "fileSets":
				return ec.fieldContext_OutputGroup_fileSets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OutputGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NamedSetOfFiles_files(ctx context.Context, field graphql.CollectedField, obj *ent.NamedSetOfFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NamedSetOfFiles_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestFile)
	fc.Result = res
	return ec.marshalOTestFile2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NamedSetOfFiles_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NamedSetOfFiles",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestFile_id(ctx, field)
			case "digest":
				return ec.fieldContext_TestFile_digest(ctx, field)
			case "file":
				return ec.fieldContext_TestFile_file(ctx, field)
			case "length":
				return ec.fieldContext_TestFile_length(ctx, field)
			case "name":
				return ec.fieldContext_TestFile_name(ctx, field)
			case "prefix":
				return ec.fieldContext_TestFile_prefix(ctx, field)
			case "testResult":
				return ec.fieldContext_TestFile_testResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestFile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NamedSetOfFiles_fileSets(ctx context.Context, field graphql.CollectedField, obj *ent.NamedSetOfFiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NamedSetOfFiles_fileSets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileSets(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.NamedSetOfFiles)
	fc.Result = res
	return ec.marshalONamedSetOfFiles2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFiles(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NamedSetOfFiles_fileSets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NamedSetOfFiles",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NamedSetOfFiles_id(ctx, field)
			case "outputGroup":
				return ec.fieldContext_NamedSetOfFiles_outputGroup(ctx, field)
			case "files":
				return ec.fieldContext_NamedSetOfFiles_files(ctx, field)
			case "fileSets":
				return ec.fieldContext_NamedSetOfFiles_fileSets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NamedSetOfFiles", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.NetworkMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.NetworkMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.NetworkMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkMetrics_systemNetworkStats(ctx context.Context, field graphql.CollectedField, obj *ent.NetworkMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkMetrics_systemNetworkStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemNetworkStats(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.SystemNetworkStats)
	fc.Result = res
	return ec.marshalOSystemNetworkStats2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkMetrics_systemNetworkStats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemNetworkStats_id(ctx, field)
			case "bytesSent":
				return ec.fieldContext_SystemNetworkStats_bytesSent(ctx, field)
			case "bytesRecv":
				return ec.fieldContext_SystemNetworkStats_bytesRecv(ctx, field)
			case "packetsSent":
				return ec.fieldContext_SystemNetworkStats_packetsSent(ctx, field)
			case "packetsRecv":
				return ec.fieldContext_SystemNetworkStats_packetsRecv(ctx, field)
			case "peakBytesSentPerSec":
				return ec.fieldContext_SystemNetworkStats_peakBytesSentPerSec(ctx, field)
			case "peakBytesRecvPerSec":
				return ec.fieldContext_SystemNetworkStats_peakBytesRecvPerSec(ctx, field)
			case "peakPacketsSentPerSec":
				return ec.fieldContext_SystemNetworkStats_peakPacketsSentPerSec(ctx, field)
			case "peakPacketsRecvPerSec":
				return ec.fieldContext_SystemNetworkStats_peakPacketsRecvPerSec(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_SystemNetworkStats_networkMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemNetworkStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutputGroup_id(ctx context.Context, field graphql.CollectedField, obj *ent.OutputGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OutputGroup_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OutputGroup().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OutputGroup_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutputGroup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutputGroup_name(ctx context.Context, field graphql.CollectedField, obj *ent.OutputGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OutputGroup_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OutputGroup_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutputGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutputGroup_incomplete(ctx context.Context, field graphql.CollectedField, obj *ent.OutputGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OutputGroup_incomplete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Incomplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OutputGroup_incomplete(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutputGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutputGroup_inlineFiles(ctx context.Context, field graphql.CollectedField, obj *ent.OutputGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OutputGroup_inlineFiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InlineFiles(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestFile)
	fc.Result = res
	return ec.marshalOTestFile2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OutputGroup_inlineFiles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutputGroup",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestFile_id(ctx, field)
			case "digest":
				return ec.fieldContext_TestFile_digest(ctx, field)
			case "file":
				return ec.fieldContext_TestFile_file(ctx, field)
			case "length":
				return ec.fieldContext_TestFile_length(ctx, field)
			case "name":
				return ec.fieldContext_TestFile_name(ctx, field)
			case "prefix":
				return ec.fieldContext_TestFile_prefix(ctx, field)
			case "testResult":
				return ec.fieldContext_TestFile_testResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestFile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutputGroup_fileSets(ctx context.Context, field graphql.CollectedField, obj *ent.OutputGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OutputGroup_fileSets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileSets(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.NamedSetOfFiles)
	fc.Result = res
	return ec.marshalONamedSetOfFiles2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFiles(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OutputGroup_fileSets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutputGroup",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NamedSetOfFiles_id(ctx, field)
			case "outputGroup":
				return ec.fieldContext_NamedSetOfFiles_outputGroup(ctx, field)
			case "files":
				return ec.fieldContext_NamedSetOfFiles_files(ctx, field)
			case "fileSets":
				return ec.fieldContext_NamedSetOfFiles_fileSets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NamedSetOfFiles", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PackageLoadMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_name(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_loadDuration(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_loadDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_loadDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_numTargets(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_numTargets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumTargets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_numTargets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_computationSteps(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_computationSteps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComputationSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_computationSteps(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_numTransitiveLoads(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_numTransitiveLoads(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumTransitiveLoads, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_numTransitiveLoads(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_packageOverhead(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_packageOverhead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageOverhead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_packageOverhead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_packageMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_packageMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.PackageMetrics)
	fc.Result = res
	return ec.marshalOPackageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_packageMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PackageMetrics_id(ctx, field)
			case "packagesLoaded":
				return ec.fieldContext_PackageMetrics_packagesLoaded(ctx, field)
			case "metrics":
				return ec.fieldContext_PackageMetrics_metrics(ctx, field)
			case "packageLoadMetrics":
				return ec.fieldContext_PackageMetrics_packageLoadMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PackageMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.PackageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PackageMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageMetrics_packagesLoaded(ctx context.Context, field graphql.CollectedField, obj *ent.PackageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageMetrics_packagesLoaded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagesLoaded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageMetrics_packagesLoaded(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.PackageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageMetrics_packageLoadMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.PackageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageMetrics_packageLoadMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageLoadMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.PackageLoadMetrics)
	fc.Result = res
	return ec.marshalOPackageLoadMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageMetrics_packageLoadMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PackageLoadMetrics_id(ctx, field)
			case "name":
				return ec.fieldContext_PackageLoadMetrics_name(ctx, field)
			case "loadDuration":
				return ec.fieldContext_PackageLoadMetrics_loadDuration(ctx, field)
			case "numTargets":
				return ec.fieldContext_PackageLoadMetrics_numTargets(ctx, field)
			case "computationSteps":
				return ec.fieldContext_PackageLoadMetrics_computationSteps(ctx, field)
			case "numTransitiveLoads":
				return ec.fieldContext_PackageLoadMetrics_numTransitiveLoads(ctx, field)
			case "packageOverhead":
				return ec.fieldContext_PackageLoadMetrics_packageOverhead(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_PackageLoadMetrics_packageMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PackageLoadMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_id(ctx context.Context, field graphql.CollectedField, obj *model.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_name(ctx context.Context, field graphql.CollectedField, obj *model.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_digest(ctx context.Context, field graphql.CollectedField, obj *model.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_digest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Digest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_digest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_sizeInBytes(ctx context.Context, field graphql.CollectedField, obj *model.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_sizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeInBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_sizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Profile_digestFunction(ctx context.Context, field graphql.CollectedField, obj *model.Profile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Profile_digestFunction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DigestFunction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Profile_digestFunction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressProblem_id(ctx context.Context, field graphql.CollectedField, obj *model.ProgressProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressProblem_label(ctx context.Context, field graphql.CollectedField, obj *model.ProgressProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressProblem_output(ctx context.Context, field graphql.CollectedField, obj *model.ProgressProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressProblem_output(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Output, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressProblem_output(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ent.Noder)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_nodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Nodes(rctx, fc.Args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ent.Noder)
	fc.Result = res
	return ec.marshalNNode2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findBazelInvocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findBazelInvocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindBazelInvocations(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.BazelInvocationOrder), fc.Args["where"].(*ent.BazelInvocationWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocationConnection)
	fc.Result = res
	return ec.marshalNBazelInvocationConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findBazelInvocations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_BazelInvocationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_BazelInvocationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_BazelInvocationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findBazelInvocations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findBuilds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findBuilds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindBuilds(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.BuildWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.BuildConnection)
	fc.Result = res
	return ec.marshalNBuildConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findBuilds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_BuildConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_BuildConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_BuildConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BuildConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findBuilds_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindMetrics(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.MetricsWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MetricsConnection)
	fc.Result = res
	return ec.marshalNMetricsConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findMetrics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MetricsConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MetricsConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_MetricsConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricsConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMetrics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findRunnerCounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findRunnerCounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindRunnerCounts(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.RunnerCountWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.RunnerCountConnection)
	fc.Result = res
	return ec.marshalNRunnerCountConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findRunnerCounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RunnerCountConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RunnerCountConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_RunnerCountConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RunnerCountConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findRunnerCounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTargets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findTargets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTargets(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.TargetOrder), fc.Args["where"].(*ent.TargetWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TargetConnection)
	fc.Result = res
	return ec.marshalNTargetConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findTargets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TargetConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TargetConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TargetConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTargets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findTests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTests(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.TestCollectionOrder), fc.Args["where"].(*ent.TestCollectionWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TestCollectionConnection)
	fc.Result = res
	return ec.marshalNTestCollectionConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findTests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TestCollectionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TestCollectionConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TestCollectionConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestCollectionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_bazelInvocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BazelInvocation(rctx, fc.Args["invocationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalNBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_bazelInvocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_bazelInvocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBuild(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBuild(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBuild(rctx, fc.Args["buildURL"].(*string), fc.Args["buildUUID"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Build)
	fc.Result = res
	return ec.marshalOBuild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuild(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBuild(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Build_id(ctx, field)
			case "buildURL":
				return ec.fieldContext_Build_buildURL(ctx, field)
			case "buildUUID":
				return ec.fieldContext_Build_buildUUID(ctx, field)
			case "instanceName":
				return ec.fieldContext_Build_instanceName(ctx, field)
			case "timestamp":
				return ec.fieldContext_Build_timestamp(ctx, field)
			case "invocations":
				return ec.fieldContext_Build_invocations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Build", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getBuild_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUniqueTestLabels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUniqueTestLabels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUniqueTestLabels(rctx, fc.Args["param"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUniqueTestLabels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUniqueTestLabels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUniqueTargetLabels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUniqueTargetLabels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUniqueTargetLabels(rctx, fc.Args["param"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUniqueTargetLabels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUniqueTargetLabels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTestDurationAggregation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTestDurationAggregation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTestDurationAggregation(rctx, fc.Args["label"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TargetAggregate)
	fc.Result = res
	return ec.marshalOTargetAggregate2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTestDurationAggregation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_TargetAggregate_label(ctx, field)
			case "count":
				return ec.fieldContext_TargetAggregate_count(ctx, field)
			case "sum":
				return ec.fieldContext_TargetAggregate_sum(ctx, field)
			case "min":
				return ec.fieldContext_TargetAggregate_min(ctx, field)
			case "max":
				return ec.fieldContext_TargetAggregate_max(ctx, field)
			case "avg":
				return ec.fieldContext_TargetAggregate_avg(ctx, field)
			case "pass":
				return ec.fieldContext_TargetAggregate_pass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetAggregate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTestDurationAggregation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTestPassAggregation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTestPassAggregation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTestPassAggregation(rctx, fc.Args["label"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TargetAggregate)
	fc.Result = res
	return ec.marshalOTargetAggregate2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTestPassAggregation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_TargetAggregate_label(ctx, field)
			case "count":
				return ec.fieldContext_TargetAggregate_count(ctx, field)
			case "sum":
				return ec.fieldContext_TargetAggregate_sum(ctx, field)
			case "min":
				return ec.fieldContext_TargetAggregate_min(ctx, field)
			case "max":
				return ec.fieldContext_TargetAggregate_max(ctx, field)
			case "avg":
				return ec.fieldContext_TargetAggregate_avg(ctx, field)
			case "pass":
				return ec.fieldContext_TargetAggregate_pass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetAggregate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTestPassAggregation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTargetDurationAggregation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTargetDurationAggregation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTargetDurationAggregation(rctx, fc.Args["label"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TargetAggregate)
	fc.Result = res
	return ec.marshalOTargetAggregate2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTargetDurationAggregation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_TargetAggregate_label(ctx, field)
			case "count":
				return ec.fieldContext_TargetAggregate_count(ctx, field)
			case "sum":
				return ec.fieldContext_TargetAggregate_sum(ctx, field)
			case "min":
				return ec.fieldContext_TargetAggregate_min(ctx, field)
			case "max":
				return ec.fieldContext_TargetAggregate_max(ctx, field)
			case "avg":
				return ec.fieldContext_TargetAggregate_avg(ctx, field)
			case "pass":
				return ec.fieldContext_TargetAggregate_pass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetAggregate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTargetDurationAggregation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTargetPassAggregation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTargetPassAggregation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTargetPassAggregation(rctx, fc.Args["label"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TargetAggregate)
	fc.Result = res
	return ec.marshalOTargetAggregate2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTargetPassAggregation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_TargetAggregate_label(ctx, field)
			case "count":
				return ec.fieldContext_TargetAggregate_count(ctx, field)
			case "sum":
				return ec.fieldContext_TargetAggregate_sum(ctx, field)
			case "min":
				return ec.fieldContext_TargetAggregate_min(ctx, field)
			case "max":
				return ec.fieldContext_TargetAggregate_max(ctx, field)
			case "avg":
				return ec.fieldContext_TargetAggregate_avg(ctx, field)
			case "pass":
				return ec.fieldContext_TargetAggregate_pass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetAggregate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTargetPassAggregation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTestsWithOffset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTestsWithOffset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTestsWithOffset(rctx, fc.Args["label"].(*string), fc.Args["offset"].(*int), fc.Args["limit"].(*int), fc.Args["sortBy"].(*string), fc.Args["direction"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TestGridResult)
	fc.Result = res
	return ec.marshalOTestGridResult2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTestsWithOffset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_TestGridResult_total(ctx, field)
			case "result":
				return ec.fieldContext_TestGridResult_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestGridResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTestsWithOffset_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTargetsWithOffset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTargetsWithOffset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTargetsWithOffset(rctx, fc.Args["label"].(*string), fc.Args["offset"].(*int), fc.Args["limit"].(*int), fc.Args["sortBy"].(*string), fc.Args["direction"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TargetGridResult)
	fc.Result = res
	return ec.marshalOTargetGridResult2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTargetsWithOffset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_TargetGridResult_total(ctx, field)
			case "result":
				return ec.fieldContext_TargetGridResult_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetGridResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTargetsWithOffset_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAveragePassPercentageForLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAveragePassPercentageForLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAveragePassPercentageForLabel(rctx, fc.Args["label"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAveragePassPercentageForLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAveragePassPercentageForLabel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceUsage_id(ctx context.Context, field graphql.CollectedField, obj *ent.ResourceUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceUsage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ResourceUsage().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceUsage_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceUsage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceUsage_name(ctx context.Context, field graphql.CollectedField, obj *ent.ResourceUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceUsage_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceUsage_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceUsage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceUsage_value(ctx context.Context, field graphql.CollectedField, obj *ent.ResourceUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceUsage_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceUsage_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceUsage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceUsage_executionInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ResourceUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceUsage_executionInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecutionInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ExectionInfo)
	fc.Result = res
	return ec.marshalOExectionInfo2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceUsage_executionInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceUsage",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExectionInfo_id(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_ExectionInfo_timeoutSeconds(ctx, field)
			case "strategy":
				return ec.fieldContext_ExectionInfo_strategy(ctx, field)
			case "cachedRemotely":
				return ec.fieldContext_ExectionInfo_cachedRemotely(ctx, field)
			case "exitCode":
				return ec.fieldContext_ExectionInfo_exitCode(ctx, field)
			case "hostname":
				return ec.fieldContext_ExectionInfo_hostname(ctx, field)
			case "testResult":
				return ec.fieldContext_ExectionInfo_testResult(ctx, field)
			case "timingBreakdown":
				return ec.fieldContext_ExectionInfo_timingBreakdown(ctx, field)
			case "resourceUsage":
				return ec.fieldContext_ExectionInfo_resourceUsage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_id(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RunnerCount().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_name(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_execKind(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_execKind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_execKind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_actionsExecuted(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_actionsExecuted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsExecuted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_actionsExecuted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_actionSummary(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_actionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ActionSummary)
	fc.Result = res
	return ec.marshalOActionSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_actionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionSummary_id(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
			case "actionsCreatedNotIncludingAspects":
				return ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
			case "remoteCacheHits":
				return ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
			case "metrics":
				return ec.fieldContext_ActionSummary_metrics(ctx, field)
			case "actionData":
				return ec.fieldContext_ActionSummary_actionData(ctx, field)
			case "runnerCount":
				return ec.fieldContext_ActionSummary_runnerCount(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCountConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCountConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCountConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.RunnerCountEdge)
	fc.Result = res
	return ec.marshalORunnerCountEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCountConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCountConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_RunnerCountEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_RunnerCountEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RunnerCountEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCountConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCountConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCountConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCountConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCountConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCountConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCountConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCountConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCountConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCountConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCountEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCountEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCountEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.RunnerCount)
	fc.Result = res
	return ec.marshalORunnerCount2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCountEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCountEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RunnerCount_id(ctx, field)
			case "name":
				return ec.fieldContext_RunnerCount_name(ctx, field)
			case "execKind":
				return ec.fieldContext_RunnerCount_execKind(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_RunnerCount_actionsExecuted(ctx, field)
			case "actionSummary":
				return ec.fieldContext_RunnerCount_actionSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RunnerCount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCountEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCountEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCountEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCountEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCountEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_id(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SourceControl().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_provider(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_provider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sourcecontrol.Provider)
	fc.Result = res
	return ec.marshalOSourceControlProvider2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_provider(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SourceControlProvider does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_instanceURL(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_instanceURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_instanceURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_repo(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_repo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_repo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_refs(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_refs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Refs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_refs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_commitSha(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_commitSha(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommitSha, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_commitSha(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_actor(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_actor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_actor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_eventName(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_eventName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_eventName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_workflow(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_workflow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workflow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_workflow(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_runID(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_runID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_runID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_runNumber(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_runNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_runNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_job(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_job(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_job(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_action(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_action(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_runnerName(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_runnerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_runnerName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_runnerArch(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_runnerArch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunnerArch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_runnerArch(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_runnerOs(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_runnerOs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunnerOs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_runnerOs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_workspace(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_workspace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workspace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_workspace(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceControl_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.SourceControl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceControl_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceControl_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceControl",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_id(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemNetworkStats().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_bytesSent(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_bytesSent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BytesSent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_bytesSent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_bytesRecv(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_bytesRecv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BytesRecv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_bytesRecv(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_packetsSent(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_packetsSent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PacketsSent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_packetsSent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_packetsRecv(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_packetsRecv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PacketsRecv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_packetsRecv(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_peakBytesSentPerSec(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_peakBytesSentPerSec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakBytesSentPerSec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_peakBytesSentPerSec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_peakBytesRecvPerSec(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_peakBytesRecvPerSec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakBytesRecvPerSec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_peakBytesRecvPerSec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_peakPacketsSentPerSec(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_peakPacketsSentPerSec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakPacketsSentPerSec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_peakPacketsSentPerSec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_peakPacketsRecvPerSec(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_peakPacketsRecvPerSec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakPacketsRecvPerSec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOInt2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_peakPacketsRecvPerSec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_networkMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_networkMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetworkMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.NetworkMetrics)
	fc.Result = res
	return ec.marshalONetworkMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_networkMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NetworkMetrics_id(ctx, field)
			case "metrics":
				return ec.fieldContext_NetworkMetrics_metrics(ctx, field)
			case "systemNetworkStats":
				return ec.fieldContext_NetworkMetrics_systemNetworkStats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_id(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Target().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_label(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_tag(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_tag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_tag(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_targetKind(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_targetKind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_targetKind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_testSize(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_testSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(target.TestSize)
	fc.Result = res
	return ec.marshalOTargetTestSize2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_testSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TargetTestSize does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_success(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_success(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_testTimeout(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_testTimeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestTimeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_testTimeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_startTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_startTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_startTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_endTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_endTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_endTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_durationInMs(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_durationInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_durationInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_abortReason(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_abortReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbortReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(target.AbortReason)
	fc.Result = res
	return ec.marshalOTargetAbortReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_abortReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TargetAbortReason does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetAggregate_label(ctx context.Context, field graphql.CollectedField, obj *model.TargetAggregate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetAggregate_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetAggregate_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetAggregate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetAggregate_count(ctx context.Context, field graphql.CollectedField, obj *model.TargetAggregate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetAggregate_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetAggregate_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetAggregate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetAggregate_sum(ctx context.Context, field graphql.CollectedField, obj *model.TargetAggregate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetAggregate_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetAggregate_sum(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetAggregate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetAggregate_min(ctx context.Context, field graphql.CollectedField, obj *model.TargetAggregate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetAggregate_min(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetAggregate_min(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetAggregate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetAggregate_max(ctx context.Context, field graphql.CollectedField, obj *model.TargetAggregate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetAggregate_max(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetAggregate_max(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetAggregate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetAggregate_avg(ctx context.Context, field graphql.CollectedField, obj *model.TargetAggregate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetAggregate_avg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetAggregate_avg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetAggregate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetAggregate_pass(ctx context.Context, field graphql.CollectedField, obj *model.TargetAggregate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetAggregate_pass(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetAggregate_pass(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetAggregate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TargetConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TargetEdge)
	fc.Result = res
	return ec.marshalOTargetEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TargetEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TargetEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TargetConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TargetConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TargetEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Target)
	fc.Result = res
	return ec.marshalOTarget2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTarget(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "label":
				return ec.fieldContext_Target_label(ctx, field)
			case "tag":
				return ec.fieldContext_Target_tag(ctx, field)
			case "targetKind":
				return ec.fieldContext_Target_targetKind(ctx, field)
			case "testSize":
				return ec.fieldContext_Target_testSize(ctx, field)
			case "success":
				return ec.fieldContext_Target_success(ctx, field)
			case "testTimeout":
				return ec.fieldContext_Target_testTimeout(ctx, field)
			case "startTimeInMs":
				return ec.fieldContext_Target_startTimeInMs(ctx, field)
			case "endTimeInMs":
				return ec.fieldContext_Target_endTimeInMs(ctx, field)
			case "durationInMs":
				return ec.fieldContext_Target_durationInMs(ctx, field)
			case "abortReason":
				return ec.fieldContext_Target_abortReason(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Target_bazelInvocation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TargetEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridCell_invocationId(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridCell) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridCell_invocationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvocationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridCell_invocationId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridCell",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridCell_complete(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridCell) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridCell_complete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Complete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Target)
	fc.Result = res
	return ec.marshalOTarget2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTarget(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridCell_complete(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridCell",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "label":
				return ec.fieldContext_Target_label(ctx, field)
			case "tag":
				return ec.fieldContext_Target_tag(ctx, field)
			case "targetKind":
				return ec.fieldContext_Target_targetKind(ctx, field)
			case "testSize":
				return ec.fieldContext_Target_testSize(ctx, field)
			case "success":
				return ec.fieldContext_Target_success(ctx, field)
			case "testTimeout":
				return ec.fieldContext_Target_testTimeout(ctx, field)
			case "startTimeInMs":
				return ec.fieldContext_Target_startTimeInMs(ctx, field)
			case "endTimeInMs":
				return ec.fieldContext_Target_endTimeInMs(ctx, field)
			case "durationInMs":
				return ec.fieldContext_Target_durationInMs(ctx, field)
			case "abortReason":
				return ec.fieldContext_Target_abortReason(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Target_bazelInvocation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridCell_abortReason(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridCell) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridCell_abortReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbortReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*target.AbortReason)
	fc.Result = res
	return ec.marshalOTargetAbortReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridCell_abortReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridCell",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TargetAbortReason does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridResult_total(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridResult_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridResult_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridResult_result(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridResult_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TargetGridRow)
	fc.Result = res
	return ec.marshalOTargetGridRow2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridRow(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridResult_result(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_TargetGridRow_label(ctx, field)
			case "count":
				return ec.fieldContext_TargetGridRow_count(ctx, field)
			case "sum":
				return ec.fieldContext_TargetGridRow_sum(ctx, field)
			case "min":
				return ec.fieldContext_TargetGridRow_min(ctx, field)
			case "max":
				return ec.fieldContext_TargetGridRow_max(ctx, field)
			case "avg":
				return ec.fieldContext_TargetGridRow_avg(ctx, field)
			case "passRate":
				return ec.fieldContext_TargetGridRow_passRate(ctx, field)
			case "cells":
				return ec.fieldContext_TargetGridRow_cells(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetGridRow", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridRow_label(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridRow_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridRow_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridRow_count(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridRow_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridRow_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridRow_sum(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridRow_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridRow_sum(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridRow_min(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridRow_min(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridRow_min(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridRow_max(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridRow_max(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridRow_max(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridRow_avg(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridRow_avg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridRow_avg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridRow_passRate(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridRow_passRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridRow_passRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetGridRow_cells(ctx context.Context, field graphql.CollectedField, obj *model.TargetGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetGridRow_cells(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cells, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TargetGridCell)
	fc.Result = res
	return ec.marshalOTargetGridCell2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridCell(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetGridRow_cells(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "invocationId":
				return ec.fieldContext_TargetGridCell_invocationId(ctx, field)
			case "complete":
				return ec.fieldContext_TargetGridCell_complete(ctx, field)
			case "abortReason":
				return ec.fieldContext_TargetGridCell_abortReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetGridCell", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TargetMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_targetsLoaded(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_targetsLoaded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetsLoaded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_targetsLoaded(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_targetsConfigured(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_targetsConfigured(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetsConfigured, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_targetsConfigured(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_targetsConfiguredNotIncludingAspects(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_targetsConfiguredNotIncludingAspects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetsConfiguredNotIncludingAspects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_targetsConfiguredNotIncludingAspects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetProblem_id(ctx context.Context, field graphql.CollectedField, obj *model.TargetProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetProblem_label(ctx context.Context, field graphql.CollectedField, obj *model.TargetProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_id(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestCollection().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_label(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_overallStatus(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_overallStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverallStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(testcollection.OverallStatus)
	fc.Result = res
	return ec.marshalOTestCollectionOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_overallStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TestCollectionOverallStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_strategy(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_strategy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Strategy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_strategy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_cachedLocally(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_cachedLocally(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CachedLocally, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_cachedLocally(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_cachedRemotely(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_cachedRemotely(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CachedRemotely, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_cachedRemotely(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_firstSeen(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_firstSeen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstSeen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_firstSeen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_durationMs(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_durationMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_durationMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "cpu":
				return ec.fieldContext_BazelInvocation_cpu(ctx, field)
			case "platformName":
				return ec.fieldContext_BazelInvocation_platformName(ctx, field)
			case "hostname":
				return ec.fieldContext_BazelInvocation_hostname(ctx, field)
			case "isCiWorker":
				return ec.fieldContext_BazelInvocation_isCiWorker(ctx, field)
			case "configurationMnemonic":
				return ec.fieldContext_BazelInvocation_configurationMnemonic(ctx, field)
			case "numFetches":
				return ec.fieldContext_BazelInvocation_numFetches(ctx, field)
			case "instanceName":
				return ec.fieldContext_BazelInvocation_instanceName(ctx, field)
			case "bazelVersion":
				return ec.fieldContext_BazelInvocation_bazelVersion(ctx, field)
			case "exitCodeName":
				return ec.fieldContext_BazelInvocation_exitCodeName(ctx, field)
			case "exitCodeCode":
				return ec.fieldContext_BazelInvocation_exitCodeCode(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "incompleteBuildLogs":
				return ec.fieldContext_BazelInvocation_incompleteBuildLogs(ctx, field)
			case "invocationFiles":
				return ec.fieldContext_BazelInvocation_invocationFiles(ctx, field)
			case "testCollection":
				return ec.fieldContext_BazelInvocation_testCollection(ctx, field)
			case "targets":
				return ec.fieldContext_BazelInvocation_targets(ctx, field)
			case "sourceControl":
				return ec.fieldContext_BazelInvocation_sourceControl(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			case "profile":
				return ec.fieldContext_BazelInvocation_profile(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_testSummary(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_testSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestSummary)
	fc.Result = res
	return ec.marshalOTestSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_testSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestSummary_id(ctx, field)
			case "overallStatus":
				return ec.fieldContext_TestSummary_overallStatus(ctx, field)
			case "totalRunCount":
				return ec.fieldContext_TestSummary_totalRunCount(ctx, field)
			case "runCount":
				return ec.fieldContext_TestSummary_runCount(ctx, field)
			case "attemptCount":
				return ec.fieldContext_TestSummary_attemptCount(ctx, field)
			case "shardCount":
				return ec.fieldContext_TestSummary_shardCount(ctx, field)
			case "totalNumCached":
				return ec.fieldContext_TestSummary_totalNumCached(ctx, field)
			case "firstStartTime":
				return ec.fieldContext_TestSummary_firstStartTime(ctx, field)
			case "lastStopTime":
				return ec.fieldContext_TestSummary_lastStopTime(ctx, field)
			case "totalRunDuration":
				return ec.fieldContext_TestSummary_totalRunDuration(ctx, field)
			case "label":
				return ec.fieldContext_TestSummary_label(ctx, field)
			case "testCollection":
				return ec.fieldContext_TestSummary_testCollection(ctx, field)
			case "passed":
				return ec.fieldContext_TestSummary_passed(ctx, field)
			case "failed":
				return ec.fieldContext_TestSummary_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollection_testResults(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollection_testResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestResults(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestResultBES)
	fc.Result = res
	return ec.marshalOTestResultBES2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollection_testResults(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestResultBES_id(ctx, field)
			case "testStatus":
				return ec.fieldContext_TestResultBES_testStatus(ctx, field)
			case "statusDetails":
				return ec.fieldContext_TestResultBES_statusDetails(ctx, field)
			case "label":
				return ec.fieldContext_TestResultBES_label(ctx, field)
			case "warning":
				return ec.fieldContext_TestResultBES_warning(ctx, field)
			case "cachedLocally":
				return ec.fieldContext_TestResultBES_cachedLocally(ctx, field)
			case "testAttemptStartMillisEpoch":
				return ec.fieldContext_TestResultBES_testAttemptStartMillisEpoch(ctx, field)
			case "testAttemptStart":
				return ec.fieldContext_TestResultBES_testAttemptStart(ctx, field)
			case "testAttemptDurationMillis":
				return ec.fieldContext_TestResultBES_testAttemptDurationMillis(ctx, field)
			case "testAttemptDuration":
				return ec.fieldContext_TestResultBES_testAttemptDuration(ctx, field)
			case "testCollection":
				return ec.fieldContext_TestResultBES_testCollection(ctx, field)
			case "testActionOutput":
				return ec.fieldContext_TestResultBES_testActionOutput(ctx, field)
			case "executionInfo":
				return ec.fieldContext_TestResultBES_executionInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestResultBES", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollectionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollectionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollectionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestCollectionEdge)
	fc.Result = res
	return ec.marshalOTestCollectionEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollectionConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollectionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TestCollectionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TestCollectionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestCollectionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollectionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollectionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollectionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollectionConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollectionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollectionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollectionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollectionConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollectionConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollectionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollectionEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollectionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestCollection)
	fc.Result = res
	return ec.marshalOTestCollection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollectionEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestCollection_id(ctx, field)
			case "label":
				return ec.fieldContext_TestCollection_label(ctx, field)
			case "overallStatus":
				return ec.fieldContext_TestCollection_overallStatus(ctx, field)
			case "strategy":
				return ec.fieldContext_TestCollection_strategy(ctx, field)
			case "cachedLocally":
				return ec.fieldContext_TestCollection_cachedLocally(ctx, field)
			case "cachedRemotely":
				return ec.fieldContext_TestCollection_cachedRemotely(ctx, field)
			case "firstSeen":
				return ec.fieldContext_TestCollection_firstSeen(ctx, field)
			case "durationMs":
				return ec.fieldContext_TestCollection_durationMs(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_TestCollection_bazelInvocation(ctx, field)
			case "testSummary":
				return ec.fieldContext_TestCollection_testSummary(ctx, field)
			case "testResults":
				return ec.fieldContext_TestCollection_testResults(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestCollection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestCollectionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TestCollectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestCollectionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestCollectionEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestCollectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestFile_id(ctx context.Context, field graphql.CollectedField, obj *ent.TestFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestFile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestFile().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestFile_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestFile",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestFile_digest(ctx context.Context, field graphql.CollectedField, obj *ent.TestFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestFile_digest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Digest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestFile_digest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestFile_file(ctx context.Context, field graphql.CollectedField, obj *ent.TestFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestFile_file(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestFile_file(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestFile_length(ctx context.Context, field graphql.CollectedField, obj *ent.TestFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestFile_length(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestFile_length(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestFile_name(ctx context.Context, field graphql.CollectedField, obj *ent.TestFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestFile_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestFile_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestFile_prefix(ctx context.Context, field graphql.CollectedField, obj *ent.TestFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestFile_prefix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestFile_prefix(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestFile_testResult(ctx context.Context, field graphql.CollectedField, obj *ent.TestFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestFile_testResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestResult(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestResultBES)
	fc.Result = res
	return ec.marshalOTestResultBES2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBES(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestFile_testResult(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestFile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestResultBES_id(ctx, field)
			case "testStatus":
				return ec.fieldContext_TestResultBES_testStatus(ctx, field)
			case "statusDetails":
				return ec.fieldContext_TestResultBES_statusDetails(ctx, field)
			case "label":
				return ec.fieldContext_TestResultBES_label(ctx, field)
			case "warning":
				return ec.fieldContext_TestResultBES_warning(ctx, field)
			case "cachedLocally":
				return ec.fieldContext_TestResultBES_cachedLocally(ctx, field)
			case "testAttemptStartMillisEpoch":
				return ec.fieldContext_TestResultBES_testAttemptStartMillisEpoch(ctx, field)
			case "testAttemptStart":
				return ec.fieldContext_TestResultBES_testAttemptStart(ctx, field)
			case "testAttemptDurationMillis":
				return ec.fieldContext_TestResultBES_testAttemptDurationMillis(ctx, field)
			case "testAttemptDuration":
				return ec.fieldContext_TestResultBES_testAttemptDuration(ctx, field)
			case "testCollection":
				return ec.fieldContext_TestResultBES_testCollection(ctx, field)
			case "testActionOutput":
				return ec.fieldContext_TestResultBES_testActionOutput(ctx, field)
			case "executionInfo":
				return ec.fieldContext_TestResultBES_executionInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestResultBES", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridCell_invocationId(ctx context.Context, field graphql.CollectedField, obj *model.TestGridCell) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridCell_invocationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvocationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridCell_invocationId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridCell",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridCell_status(ctx context.Context, field graphql.CollectedField, obj *model.TestGridCell) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridCell_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*testcollection.OverallStatus)
	fc.Result = res
	return ec.marshalOTestCollectionOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridCell_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridCell",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TestCollectionOverallStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridResult_total(ctx context.Context, field graphql.CollectedField, obj *model.TestGridResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridResult_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridResult_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridResult_result(ctx context.Context, field graphql.CollectedField, obj *model.TestGridResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridResult_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TestGridRow)
	fc.Result = res
	return ec.marshalOTestGridRow2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridRow(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridResult_result(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_TestGridRow_label(ctx, field)
			case "count":
				return ec.fieldContext_TestGridRow_count(ctx, field)
			case "sum":
				return ec.fieldContext_TestGridRow_sum(ctx, field)
			case "min":
				return ec.fieldContext_TestGridRow_min(ctx, field)
			case "max":
				return ec.fieldContext_TestGridRow_max(ctx, field)
			case "avg":
				return ec.fieldContext_TestGridRow_avg(ctx, field)
			case "passRate":
				return ec.fieldContext_TestGridRow_passRate(ctx, field)
			case "cells":
				return ec.fieldContext_TestGridRow_cells(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestGridRow", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridRow_label(ctx context.Context, field graphql.CollectedField, obj *model.TestGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridRow_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridRow_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridRow_count(ctx context.Context, field graphql.CollectedField, obj *model.TestGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridRow_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridRow_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridRow_sum(ctx context.Context, field graphql.CollectedField, obj *model.TestGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridRow_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridRow_sum(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridRow_min(ctx context.Context, field graphql.CollectedField, obj *model.TestGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridRow_min(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridRow_min(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridRow_max(ctx context.Context, field graphql.CollectedField, obj *model.TestGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridRow_max(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridRow_max(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridRow_avg(ctx context.Context, field graphql.CollectedField, obj *model.TestGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridRow_avg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridRow_avg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridRow_passRate(ctx context.Context, field graphql.CollectedField, obj *model.TestGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridRow_passRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridRow_passRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestGridRow_cells(ctx context.Context, field graphql.CollectedField, obj *model.TestGridRow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestGridRow_cells(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cells, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TestGridCell)
	fc.Result = res
	return ec.marshalOTestGridCell2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridCell(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestGridRow_cells(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestGridRow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "invocationId":
				return ec.fieldContext_TestGridCell_invocationId(ctx, field)
			case "status":
				return ec.fieldContext_TestGridCell_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestGridCell", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestProblem_id(ctx context.Context, field graphql.CollectedField, obj *model.TestProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestProblem_label(ctx context.Context, field graphql.CollectedField, obj *model.TestProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestProblem_status(ctx context.Context, field graphql.CollectedField, obj *model.TestProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestProblem_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestProblem_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestProblem_results(ctx context.Context, field graphql.CollectedField, obj *model.TestProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestProblem_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TestResult)
	fc.Result = res
	return ec.marshalNTestResult2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestResultᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestProblem_results(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestResult_id(ctx, field)
			case "run":
				return ec.fieldContext_TestResult_run(ctx, field)
			case "shard":
				return ec.fieldContext_TestResult_shard(ctx, field)
			case "attempt":
				return ec.fieldContext_TestResult_attempt(ctx, field)
			case "status":
				return ec.fieldContext_TestResult_status(ctx, field)
			case "actionLogOutput":
				return ec.fieldContext_TestResult_actionLogOutput(ctx, field)
			case "undeclaredTestOutputs":
				return ec.fieldContext_TestResult_undeclaredTestOutputs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_id(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_run(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_run(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Run, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_run(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_shard(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_shard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_shard(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_attempt(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_attempt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attempt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_attempt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_status(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_actionLogOutput(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_actionLogOutput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestResult().ActionLogOutput(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BlobReference)
	fc.Result = res
	return ec.marshalNBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_actionLogOutput(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BlobReference_name(ctx, field)
			case "downloadURL":
				return ec.fieldContext_BlobReference_downloadURL(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
			case "availabilityStatus":
				return ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
			case "ephemeralURL":
				return ec.fieldContext_BlobReference_ephemeralURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_undeclaredTestOutputs(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_undeclaredTestOutputs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestResult().UndeclaredTestOutputs(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlobReference)
	fc.Result = res
	return ec.marshalOBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_undeclaredTestOutputs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BlobReference_name(ctx, field)
			case "downloadURL":
				return ec.fieldContext_BlobReference_downloadURL(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
			case "availabilityStatus":
				return ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
			case "ephemeralURL":
				return ec.fieldContext_BlobReference_ephemeralURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_id(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestResultBES().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_testStatus(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_testStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(testresultbes.TestStatus)
	fc.Result = res
	return ec.marshalOTestResultBESTestStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_testStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TestResultBESTestStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_statusDetails(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_statusDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_statusDetails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_label(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_warning(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_warning(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_warning(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_cachedLocally(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_cachedLocally(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CachedLocally, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_cachedLocally(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_testAttemptStartMillisEpoch(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_testAttemptStartMillisEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestAttemptStartMillisEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_testAttemptStartMillisEpoch(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_testAttemptStart(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_testAttemptStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestAttemptStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_testAttemptStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_testAttemptDurationMillis(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_testAttemptDurationMillis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestAttemptDurationMillis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_testAttemptDurationMillis(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_testAttemptDuration(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_testAttemptDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestAttemptDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_testAttemptDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_testCollection(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_testCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestCollection(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestCollection)
	fc.Result = res
	return ec.marshalOTestCollection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_testCollection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestCollection_id(ctx, field)
			case "label":
				return ec.fieldContext_TestCollection_label(ctx, field)
			case "overallStatus":
				return ec.fieldContext_TestCollection_overallStatus(ctx, field)
			case "strategy":
				return ec.fieldContext_TestCollection_strategy(ctx, field)
			case "cachedLocally":
				return ec.fieldContext_TestCollection_cachedLocally(ctx, field)
			case "cachedRemotely":
				return ec.fieldContext_TestCollection_cachedRemotely(ctx, field)
			case "firstSeen":
				return ec.fieldContext_TestCollection_firstSeen(ctx, field)
			case "durationMs":
				return ec.fieldContext_TestCollection_durationMs(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_TestCollection_bazelInvocation(ctx, field)
			case "testSummary":
				return ec.fieldContext_TestCollection_testSummary(ctx, field)
			case "testResults":
				return ec.fieldContext_TestCollection_testResults(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestCollection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_testActionOutput(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_testActionOutput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestActionOutput(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestFile)
	fc.Result = res
	return ec.marshalOTestFile2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_testActionOutput(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestFile_id(ctx, field)
			case "digest":
				return ec.fieldContext_TestFile_digest(ctx, field)
			case "file":
				return ec.fieldContext_TestFile_file(ctx, field)
			case "length":
				return ec.fieldContext_TestFile_length(ctx, field)
			case "name":
				return ec.fieldContext_TestFile_name(ctx, field)
			case "prefix":
				return ec.fieldContext_TestFile_prefix(ctx, field)
			case "testResult":
				return ec.fieldContext_TestFile_testResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestFile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResultBES_executionInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TestResultBES) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResultBES_executionInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecutionInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ExectionInfo)
	fc.Result = res
	return ec.marshalOExectionInfo2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResultBES_executionInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResultBES",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExectionInfo_id(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_ExectionInfo_timeoutSeconds(ctx, field)
			case "strategy":
				return ec.fieldContext_ExectionInfo_strategy(ctx, field)
			case "cachedRemotely":
				return ec.fieldContext_ExectionInfo_cachedRemotely(ctx, field)
			case "exitCode":
				return ec.fieldContext_ExectionInfo_exitCode(ctx, field)
			case "hostname":
				return ec.fieldContext_ExectionInfo_hostname(ctx, field)
			case "testResult":
				return ec.fieldContext_ExectionInfo_testResult(ctx, field)
			case "timingBreakdown":
				return ec.fieldContext_ExectionInfo_timingBreakdown(ctx, field)
			case "resourceUsage":
				return ec.fieldContext_ExectionInfo_resourceUsage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_id(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestSummary().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_overallStatus(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_overallStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverallStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(testsummary.OverallStatus)
	fc.Result = res
	return ec.marshalOTestSummaryOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_overallStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TestSummaryOverallStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_totalRunCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_totalRunCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRunCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_totalRunCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_runCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_runCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_runCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_attemptCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_attemptCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_attemptCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_shardCount(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_shardCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShardCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_shardCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_totalNumCached(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_totalNumCached(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumCached, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_totalNumCached(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_firstStartTime(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_firstStartTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_firstStartTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_lastStopTime(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_lastStopTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastStopTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_lastStopTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_totalRunDuration(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_totalRunDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRunDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_totalRunDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_label(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_testCollection(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_testCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestCollection(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TestCollection)
	fc.Result = res
	return ec.marshalOTestCollection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_testCollection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestCollection_id(ctx, field)
			case "label":
				return ec.fieldContext_TestCollection_label(ctx, field)
			case "overallStatus":
				return ec.fieldContext_TestCollection_overallStatus(ctx, field)
			case "strategy":
				return ec.fieldContext_TestCollection_strategy(ctx, field)
			case "cachedLocally":
				return ec.fieldContext_TestCollection_cachedLocally(ctx, field)
			case "cachedRemotely":
				return ec.fieldContext_TestCollection_cachedRemotely(ctx, field)
			case "firstSeen":
				return ec.fieldContext_TestCollection_firstSeen(ctx, field)
			case "durationMs":
				return ec.fieldContext_TestCollection_durationMs(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_TestCollection_bazelInvocation(ctx, field)
			case "testSummary":
				return ec.fieldContext_TestCollection_testSummary(ctx, field)
			case "testResults":
				return ec.fieldContext_TestCollection_testResults(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestCollection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_passed(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_passed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passed(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestFile)
	fc.Result = res
	return ec.marshalOTestFile2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_passed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestFile_id(ctx, field)
			case "digest":
				return ec.fieldContext_TestFile_digest(ctx, field)
			case "file":
				return ec.fieldContext_TestFile_file(ctx, field)
			case "length":
				return ec.fieldContext_TestFile_length(ctx, field)
			case "name":
				return ec.fieldContext_TestFile_name(ctx, field)
			case "prefix":
				return ec.fieldContext_TestFile_prefix(ctx, field)
			case "testResult":
				return ec.fieldContext_TestFile_testResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestFile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestSummary_failed(ctx context.Context, field graphql.CollectedField, obj *ent.TestSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestSummary_failed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Failed(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TestFile)
	fc.Result = res
	return ec.marshalOTestFile2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestSummary_failed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestFile_id(ctx, field)
			case "digest":
				return ec.fieldContext_TestFile_digest(ctx, field)
			case "file":
				return ec.fieldContext_TestFile_file(ctx, field)
			case "length":
				return ec.fieldContext_TestFile_length(ctx, field)
			case "name":
				return ec.fieldContext_TestFile_name(ctx, field)
			case "prefix":
				return ec.fieldContext_TestFile_prefix(ctx, field)
			case "testResult":
				return ec.fieldContext_TestFile_testResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestFile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingBreakdown_id(ctx context.Context, field graphql.CollectedField, obj *ent.TimingBreakdown) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingBreakdown_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TimingBreakdown().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingBreakdown_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingBreakdown",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingBreakdown_name(ctx context.Context, field graphql.CollectedField, obj *ent.TimingBreakdown) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingBreakdown_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingBreakdown_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingBreakdown",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingBreakdown_time(ctx context.Context, field graphql.CollectedField, obj *ent.TimingBreakdown) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingBreakdown_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingBreakdown_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingBreakdown",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingBreakdown_executionInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TimingBreakdown) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingBreakdown_executionInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecutionInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ExectionInfo)
	fc.Result = res
	return ec.marshalOExectionInfo2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingBreakdown_executionInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingBreakdown",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExectionInfo_id(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_ExectionInfo_timeoutSeconds(ctx, field)
			case "strategy":
				return ec.fieldContext_ExectionInfo_strategy(ctx, field)
			case "cachedRemotely":
				return ec.fieldContext_ExectionInfo_cachedRemotely(ctx, field)
			case "exitCode":
				return ec.fieldContext_ExectionInfo_exitCode(ctx, field)
			case "hostname":
				return ec.fieldContext_ExectionInfo_hostname(ctx, field)
			case "testResult":
				return ec.fieldContext_ExectionInfo_testResult(ctx, field)
			case "timingBreakdown":
				return ec.fieldContext_ExectionInfo_timingBreakdown(ctx, field)
			case "resourceUsage":
				return ec.fieldContext_ExectionInfo_resourceUsage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingBreakdown_child(ctx context.Context, field graphql.CollectedField, obj *ent.TimingBreakdown) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingBreakdown_child(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Child(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TimingChild)
	fc.Result = res
	return ec.marshalOTimingChild2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingBreakdown_child(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingBreakdown",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TimingChild_id(ctx, field)
			case "name":
				return ec.fieldContext_TimingChild_name(ctx, field)
			case "time":
				return ec.fieldContext_TimingChild_time(ctx, field)
			case "timingBreakdown":
				return ec.fieldContext_TimingChild_timingBreakdown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimingChild", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingChild_id(ctx context.Context, field graphql.CollectedField, obj *ent.TimingChild) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingChild_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TimingChild().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingChild_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingChild",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingChild_name(ctx context.Context, field graphql.CollectedField, obj *ent.TimingChild) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingChild_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingChild_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingChild",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingChild_time(ctx context.Context, field graphql.CollectedField, obj *ent.TimingChild) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingChild_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingChild_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingChild",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingChild_timingBreakdown(ctx context.Context, field graphql.CollectedField, obj *ent.TimingChild) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingChild_timingBreakdown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimingBreakdown(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TimingBreakdown)
	fc.Result = res
	return ec.marshalOTimingBreakdown2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdown(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingChild_timingBreakdown(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingChild",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TimingBreakdown_id(ctx, field)
			case "name":
				return ec.fieldContext_TimingBreakdown_name(ctx, field)
			case "time":
				return ec.fieldContext_TimingBreakdown_time(ctx, field)
			case "executionInfo":
				return ec.fieldContext_TimingBreakdown_executionInfo(ctx, field)
			case "child":
				return ec.fieldContext_TimingBreakdown_child(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimingBreakdown", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TimingMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_cpuTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_cpuTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPUTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_cpuTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_wallTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_wallTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WallTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_wallTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_analysisPhaseTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_analysisPhaseTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnalysisPhaseTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_analysisPhaseTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_executionPhaseTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_executionPhaseTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecutionPhaseTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_executionPhaseTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_actionsExecutionStartInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_actionsExecutionStartInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsExecutionStartInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_actionsExecutionStartInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "buildGraphMetrics":
				return ec.fieldContext_Metrics_buildGraphMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_Email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_Email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_Email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_LDAP(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_LDAP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ldap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_LDAP(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputActionCacheStatisticsWhereInput(ctx context.Context, obj any) (ent.ActionCacheStatisticsWhereInput, error) {
	var it ent.ActionCacheStatisticsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "sizeInBytes", "sizeInBytesNEQ", "sizeInBytesIn", "sizeInBytesNotIn", "sizeInBytesGT", "sizeInBytesGTE", "sizeInBytesLT", "sizeInBytesLTE", "sizeInBytesIsNil", "sizeInBytesNotNil", "saveTimeInMs", "saveTimeInMsNEQ", "saveTimeInMsIn", "saveTimeInMsNotIn", "saveTimeInMsGT", "saveTimeInMsGTE", "saveTimeInMsLT", "saveTimeInMsLTE", "saveTimeInMsIsNil", "saveTimeInMsNotNil", "loadTimeInMs", "loadTimeInMsNEQ", "loadTimeInMsIn", "loadTimeInMsNotIn", "loadTimeInMsGT", "loadTimeInMsGTE", "loadTimeInMsLT", "loadTimeInMsLTE", "loadTimeInMsIsNil", "loadTimeInMsNotNil", "hits", "hitsNEQ", "hitsIn", "hitsNotIn", "hitsGT", "hitsGTE", "hitsLT", "hitsLTE", "hitsIsNil", "hitsNotNil", "misses", "missesNEQ", "missesIn", "missesNotIn", "missesGT", "missesGTE", "missesLT", "missesLTE", "missesIsNil", "missesNotNil", "hasActionSummary", "hasActionSummaryWith", "hasMissDetails", "hasMissDetailsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "sizeInBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytes"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytes = data
		case "sizeInBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNEQ = data
		case "sizeInBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesIn = data
		case "sizeInBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNotIn = data
		case "sizeInBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesGT = data
		case "sizeInBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesGTE = data
		case "sizeInBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesLT = data
		case "sizeInBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesLTE = data
		case "sizeInBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesIsNil = data
		case "sizeInBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNotNil = data
		case "saveTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMs = data
		case "saveTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsNEQ = data
		case "saveTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsIn = data
		case "saveTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsNotIn = data
		case "saveTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsGT = data
		case "saveTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsGTE = data
		case "saveTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsLT = data
		case "saveTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsLTE = data
		case "saveTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsIsNil = data
		case "saveTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsNotNil = data
		case "loadTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMs = data
		case "loadTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsNEQ = data
		case "loadTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsIn = data
		case "loadTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsNotIn = data
		case "loadTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsGT = data
		case "loadTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsGTE = data
		case "loadTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsLT = data
		case "loadTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsLTE = data
		case "loadTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsIsNil = data
		case "loadTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsNotNil = data
		case "hits":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hits"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hits = data
		case "hitsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsNEQ = data
		case "hitsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsIn = data
		case "hitsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsNotIn = data
		case "hitsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsGT = data
		case "hitsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsGTE = data
		case "hitsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsLT = data
		case "hitsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsLTE = data
		case "hitsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsIsNil = data
		case "hitsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsNotNil = data
		case "misses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("misses"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Misses = data
		case "missesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesNEQ = data
		case "missesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesIn = data
		case "missesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesNotIn = data
		case "missesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesGT = data
		case "missesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesGTE = data
		case "missesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesLT = data
		case "missesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesLTE = data
		case "missesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesIsNil = data
		case "missesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesNotNil = data
		case "hasActionSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummary = data
		case "hasActionSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummaryWith"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummaryWith = data
		case "hasMissDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMissDetails"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMissDetails = data
		case "hasMissDetailsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMissDetailsWith"))
			data, err := ec.unmarshalOMissDetailWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMissDetailsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputActionDataWhereInput(ctx context.Context, obj any) (ent.ActionDataWhereInput, error) {
	var it ent.ActionDataWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "mnemonic", "mnemonicNEQ", "mnemonicIn", "mnemonicNotIn", "mnemonicGT", "mnemonicGTE", "mnemonicLT", "mnemonicLTE", "mnemonicContains", "mnemonicHasPrefix", "mnemonicHasSuffix", "mnemonicIsNil", "mnemonicNotNil", "mnemonicEqualFold", "mnemonicContainsFold", "actionsExecuted", "actionsExecutedNEQ", "actionsExecutedIn", "actionsExecutedNotIn", "actionsExecutedGT", "actionsExecutedGTE", "actionsExecutedLT", "actionsExecutedLTE", "actionsExecutedIsNil", "actionsExecutedNotNil", "actionsCreated", "actionsCreatedNEQ", "actionsCreatedIn", "actionsCreatedNotIn", "actionsCreatedGT", "actionsCreatedGTE", "actionsCreatedLT", "actionsCreatedLTE", "actionsCreatedIsNil", "actionsCreatedNotNil", "firstStartedMs", "firstStartedMsNEQ", "firstStartedMsIn", "firstStartedMsNotIn", "firstStartedMsGT", "firstStartedMsGTE", "firstStartedMsLT", "firstStartedMsLTE", "firstStartedMsIsNil", "firstStartedMsNotNil", "lastEndedMs", "lastEndedMsNEQ", "lastEndedMsIn", "lastEndedMsNotIn", "lastEndedMsGT", "lastEndedMsGTE", "lastEndedMsLT", "lastEndedMsLTE", "lastEndedMsIsNil", "lastEndedMsNotNil", "systemTime", "systemTimeNEQ", "systemTimeIn", "systemTimeNotIn", "systemTimeGT", "systemTimeGTE", "systemTimeLT", "systemTimeLTE", "systemTimeIsNil", "systemTimeNotNil", "userTime", "userTimeNEQ", "userTimeIn", "userTimeNotIn", "userTimeGT", "userTimeGTE", "userTimeLT", "userTimeLTE", "userTimeIsNil", "userTimeNotNil", "hasActionSummary", "hasActionSummaryWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOActionDataWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOActionDataWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOActionDataWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "mnemonic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonic"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mnemonic = data
		case "mnemonicNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNEQ = data
		case "mnemonicIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicIn = data
		case "mnemonicNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNotIn = data
		case "mnemonicGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicGT = data
		case "mnemonicGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicGTE = data
		case "mnemonicLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicLT = data
		case "mnemonicLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicLTE = data
		case "mnemonicContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicContains = data
		case "mnemonicHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicHasPrefix = data
		case "mnemonicHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicHasSuffix = data
		case "mnemonicIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicIsNil = data
		case "mnemonicNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNotNil = data
		case "mnemonicEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicEqualFold = data
		case "mnemonicContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicContainsFold = data
		case "actionsExecuted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecuted"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecuted = data
		case "actionsExecutedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNEQ = data
		case "actionsExecutedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIn = data
		case "actionsExecutedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotIn = data
		case "actionsExecutedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGT = data
		case "actionsExecutedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGTE = data
		case "actionsExecutedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLT = data
		case "actionsExecutedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLTE = data
		case "actionsExecutedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIsNil = data
		case "actionsExecutedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotNil = data
		case "actionsCreated":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreated"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreated = data
		case "actionsCreatedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNEQ = data
		case "actionsCreatedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedIn = data
		case "actionsCreatedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIn = data
		case "actionsCreatedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedGT = data
		case "actionsCreatedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedGTE = data
		case "actionsCreatedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedLT = data
		case "actionsCreatedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedLTE = data
		case "actionsCreatedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedIsNil = data
		case "actionsCreatedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotNil = data
		case "firstStartedMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMs = data
		case "firstStartedMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsNEQ = data
		case "firstStartedMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsIn = data
		case "firstStartedMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsNotIn = data
		case "firstStartedMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsGT = data
		case "firstStartedMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsGTE = data
		case "firstStartedMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsLT = data
		case "firstStartedMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsLTE = data
		case "firstStartedMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsIsNil = data
		case "firstStartedMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsNotNil = data
		case "lastEndedMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMs = data
		case "lastEndedMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsNEQ = data
		case "lastEndedMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsIn = data
		case "lastEndedMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsNotIn = data
		case "lastEndedMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsGT = data
		case "lastEndedMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsGTE = data
		case "lastEndedMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsLT = data
		case "lastEndedMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsLTE = data
		case "lastEndedMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsIsNil = data
		case "lastEndedMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsNotNil = data
		case "systemTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTime"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTime = data
		case "systemTimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeNEQ = data
		case "systemTimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeIn = data
		case "systemTimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeNotIn = data
		case "systemTimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeGT = data
		case "systemTimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeGTE = data
		case "systemTimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeLT = data
		case "systemTimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeLTE = data
		case "systemTimeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeIsNil = data
		case "systemTimeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeNotNil = data
		case "userTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTime"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTime = data
		case "userTimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeNEQ = data
		case "userTimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeIn = data
		case "userTimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeNotIn = data
		case "userTimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeGT = data
		case "userTimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeGTE = data
		case "userTimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeLT = data
		case "userTimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeLTE = data
		case "userTimeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeIsNil = data
		case "userTimeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeNotNil = data
		case "hasActionSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummary = data
		case "hasActionSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummaryWith"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummaryWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputActionSummaryWhereInput(ctx context.Context, obj any) (ent.ActionSummaryWhereInput, error) {
	var it ent.ActionSummaryWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "actionsCreated", "actionsCreatedNEQ", "actionsCreatedIn", "actionsCreatedNotIn", "actionsCreatedGT", "actionsCreatedGTE", "actionsCreatedLT", "actionsCreatedLTE", "actionsCreatedIsNil", "actionsCreatedNotNil", "actionsCreatedNotIncludingAspects", "actionsCreatedNotIncludingAspectsNEQ", "actionsCreatedNotIncludingAspectsIn", "actionsCreatedNotIncludingAspectsNotIn", "actionsCreatedNotIncludingAspectsGT", "actionsCreatedNotIncludingAspectsGTE", "actionsCreatedNotIncludingAspectsLT", "actionsCreatedNotIncludingAspectsLTE", "actionsCreatedNotIncludingAspectsIsNil", "actionsCreatedNotIncludingAspectsNotNil", "actionsExecuted", "actionsExecutedNEQ", "actionsExecutedIn", "actionsExecutedNotIn", "actionsExecutedGT", "actionsExecutedGTE", "actionsExecutedLT", "actionsExecutedLTE", "actionsExecutedIsNil", "actionsExecutedNotNil", "remoteCacheHits", "remoteCacheHitsNEQ", "remoteCacheHitsIn", "remoteCacheHitsNotIn", "remoteCacheHitsGT", "remoteCacheHitsGTE", "remoteCacheHitsLT", "remoteCacheHitsLTE", "remoteCacheHitsIsNil", "remoteCacheHitsNotNil", "hasMetrics", "hasMetricsWith", "hasActionData", "hasActionDataWith", "hasRunnerCount", "hasRunnerCountWith", "hasActionCacheStatistics", "hasActionCacheStatisticsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "actionsCreated":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreated"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreated = data
		case "actionsCreatedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNEQ = data
		case "actionsCreatedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedIn = data
		case "actionsCreatedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIn = data
		case "actionsCreatedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedGT = data
		case "actionsCreatedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedGTE = data
		case "actionsCreatedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedLT = data
		case "actionsCreatedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedLTE = data
		case "actionsCreatedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedIsNil = data
		case "actionsCreatedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotNil = data
		case "actionsCreatedNotIncludingAspects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspects"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspects = data
		case "actionsCreatedNotIncludingAspectsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsNEQ = data
		case "actionsCreatedNotIncludingAspectsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsIn = data
		case "actionsCreatedNotIncludingAspectsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsNotIn = data
		case "actionsCreatedNotIncludingAspectsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsGT = data
		case "actionsCreatedNotIncludingAspectsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsGTE = data
		case "actionsCreatedNotIncludingAspectsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsLT = data
		case "actionsCreatedNotIncludingAspectsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsLTE = data
		case "actionsCreatedNotIncludingAspectsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsIsNil = data
		case "actionsCreatedNotIncludingAspectsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsNotNil = data
		case "actionsExecuted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecuted"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecuted = data
		case "actionsExecutedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNEQ = data
		case "actionsExecutedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIn = data
		case "actionsExecutedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotIn = data
		case "actionsExecutedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGT = data
		case "actionsExecutedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGTE = data
		case "actionsExecutedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLT = data
		case "actionsExecutedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLTE = data
		case "actionsExecutedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIsNil = data
		case "actionsExecutedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotNil = data
		case "remoteCacheHits":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHits"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHits = data
		case "remoteCacheHitsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsNEQ = data
		case "remoteCacheHitsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsIn = data
		case "remoteCacheHitsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsNotIn = data
		case "remoteCacheHitsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsGT = data
		case "remoteCacheHitsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsGTE = data
		case "remoteCacheHitsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsLT = data
		case "remoteCacheHitsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsLTE = data
		case "remoteCacheHitsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsIsNil = data
		case "remoteCacheHitsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasActionData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionData"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionData = data
		case "hasActionDataWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionDataWith"))
			data, err := ec.unmarshalOActionDataWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionDataWith = data
		case "hasRunnerCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRunnerCount"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRunnerCount = data
		case "hasRunnerCountWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRunnerCountWith"))
			data, err := ec.unmarshalORunnerCountWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRunnerCountWith = data
		case "hasActionCacheStatistics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionCacheStatistics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionCacheStatistics = data
		case "hasActionCacheStatisticsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionCacheStatisticsWith"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionCacheStatisticsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArtifactMetricsWhereInput(ctx context.Context, obj any) (ent.ArtifactMetricsWhereInput, error) {
	var it ent.ArtifactMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "sourceArtifactsReadSizeInBytes", "sourceArtifactsReadSizeInBytesNEQ", "sourceArtifactsReadSizeInBytesIn", "sourceArtifactsReadSizeInBytesNotIn", "sourceArtifactsReadSizeInBytesGT", "sourceArtifactsReadSizeInBytesGTE", "sourceArtifactsReadSizeInBytesLT", "sourceArtifactsReadSizeInBytesLTE", "sourceArtifactsReadSizeInBytesIsNil", "sourceArtifactsReadSizeInBytesNotNil", "sourceArtifactsReadCount", "sourceArtifactsReadCountNEQ", "sourceArtifactsReadCountIn", "sourceArtifactsReadCountNotIn", "sourceArtifactsReadCountGT", "sourceArtifactsReadCountGTE", "sourceArtifactsReadCountLT", "sourceArtifactsReadCountLTE", "sourceArtifactsReadCountIsNil", "sourceArtifactsReadCountNotNil", "outputArtifactsSeenSizeInBytes", "outputArtifactsSeenSizeInBytesNEQ", "outputArtifactsSeenSizeInBytesIn", "outputArtifactsSeenSizeInBytesNotIn", "outputArtifactsSeenSizeInBytesGT", "outputArtifactsSeenSizeInBytesGTE", "outputArtifactsSeenSizeInBytesLT", "outputArtifactsSeenSizeInBytesLTE", "outputArtifactsSeenSizeInBytesIsNil", "outputArtifactsSeenSizeInBytesNotNil", "outputArtifactsSeenCount", "outputArtifactsSeenCountNEQ", "outputArtifactsSeenCountIn", "outputArtifactsSeenCountNotIn", "outputArtifactsSeenCountGT", "outputArtifactsSeenCountGTE", "outputArtifactsSeenCountLT", "outputArtifactsSeenCountLTE", "outputArtifactsSeenCountIsNil", "outputArtifactsSeenCountNotNil", "outputArtifactsFromActionCacheSizeInBytes", "outputArtifactsFromActionCacheSizeInBytesNEQ", "outputArtifactsFromActionCacheSizeInBytesIn", "outputArtifactsFromActionCacheSizeInBytesNotIn", "outputArtifactsFromActionCacheSizeInBytesGT", "outputArtifactsFromActionCacheSizeInBytesGTE", "outputArtifactsFromActionCacheSizeInBytesLT", "outputArtifactsFromActionCacheSizeInBytesLTE", "outputArtifactsFromActionCacheSizeInBytesIsNil", "outputArtifactsFromActionCacheSizeInBytesNotNil", "outputArtifactsFromActionCacheCount", "outputArtifactsFromActionCacheCountNEQ", "outputArtifactsFromActionCacheCountIn", "outputArtifactsFromActionCacheCountNotIn", "outputArtifactsFromActionCacheCountGT", "outputArtifactsFromActionCacheCountGTE", "outputArtifactsFromActionCacheCountLT", "outputArtifactsFromActionCacheCountLTE", "outputArtifactsFromActionCacheCountIsNil", "outputArtifactsFromActionCacheCountNotNil", "topLevelArtifactsSizeInBytes", "topLevelArtifactsSizeInBytesNEQ", "topLevelArtifactsSizeInBytesIn", "topLevelArtifactsSizeInBytesNotIn", "topLevelArtifactsSizeInBytesGT", "topLevelArtifactsSizeInBytesGTE", "topLevelArtifactsSizeInBytesLT", "topLevelArtifactsSizeInBytesLTE", "topLevelArtifactsSizeInBytesIsNil", "topLevelArtifactsSizeInBytesNotNil", "topLevelArtifactsCount", "topLevelArtifactsCountNEQ", "topLevelArtifactsCountIn", "topLevelArtifactsCountNotIn", "topLevelArtifactsCountGT", "topLevelArtifactsCountGTE", "topLevelArtifactsCountLT", "topLevelArtifactsCountLTE", "topLevelArtifactsCountIsNil", "topLevelArtifactsCountNotNil", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "sourceArtifactsReadSizeInBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytes = data
		case "sourceArtifactsReadSizeInBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesNEQ = data
		case "sourceArtifactsReadSizeInBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesIn = data
		case "sourceArtifactsReadSizeInBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesNotIn = data
		case "sourceArtifactsReadSizeInBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesGT = data
		case "sourceArtifactsReadSizeInBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesGTE = data
		case "sourceArtifactsReadSizeInBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesLT = data
		case "sourceArtifactsReadSizeInBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesLTE = data
		case "sourceArtifactsReadSizeInBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesIsNil = data
		case "sourceArtifactsReadSizeInBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadSizeInBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadSizeInBytesNotNil = data
		case "sourceArtifactsReadCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCount = data
		case "sourceArtifactsReadCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountNEQ = data
		case "sourceArtifactsReadCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountIn = data
		case "sourceArtifactsReadCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountNotIn = data
		case "sourceArtifactsReadCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountGT = data
		case "sourceArtifactsReadCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountGTE = data
		case "sourceArtifactsReadCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountLT = data
		case "sourceArtifactsReadCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountLTE = data
		case "sourceArtifactsReadCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountIsNil = data
		case "sourceArtifactsReadCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceArtifactsReadCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SourceArtifactsReadCountNotNil = data
		case "outputArtifactsSeenSizeInBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytes = data
		case "outputArtifactsSeenSizeInBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesNEQ = data
		case "outputArtifactsSeenSizeInBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesIn = data
		case "outputArtifactsSeenSizeInBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesNotIn = data
		case "outputArtifactsSeenSizeInBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesGT = data
		case "outputArtifactsSeenSizeInBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesGTE = data
		case "outputArtifactsSeenSizeInBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesLT = data
		case "outputArtifactsSeenSizeInBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesLTE = data
		case "outputArtifactsSeenSizeInBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesIsNil = data
		case "outputArtifactsSeenSizeInBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenSizeInBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenSizeInBytesNotNil = data
		case "outputArtifactsSeenCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCount = data
		case "outputArtifactsSeenCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountNEQ = data
		case "outputArtifactsSeenCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountIn = data
		case "outputArtifactsSeenCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountNotIn = data
		case "outputArtifactsSeenCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountGT = data
		case "outputArtifactsSeenCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountGTE = data
		case "outputArtifactsSeenCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountLT = data
		case "outputArtifactsSeenCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountLTE = data
		case "outputArtifactsSeenCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountIsNil = data
		case "outputArtifactsSeenCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsSeenCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsSeenCountNotNil = data
		case "outputArtifactsFromActionCacheSizeInBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytes = data
		case "outputArtifactsFromActionCacheSizeInBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesNEQ = data
		case "outputArtifactsFromActionCacheSizeInBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesIn = data
		case "outputArtifactsFromActionCacheSizeInBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesNotIn = data
		case "outputArtifactsFromActionCacheSizeInBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesGT = data
		case "outputArtifactsFromActionCacheSizeInBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesGTE = data
		case "outputArtifactsFromActionCacheSizeInBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesLT = data
		case "outputArtifactsFromActionCacheSizeInBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesLTE = data
		case "outputArtifactsFromActionCacheSizeInBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesIsNil = data
		case "outputArtifactsFromActionCacheSizeInBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheSizeInBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheSizeInBytesNotNil = data
		case "outputArtifactsFromActionCacheCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCount = data
		case "outputArtifactsFromActionCacheCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountNEQ = data
		case "outputArtifactsFromActionCacheCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountIn = data
		case "outputArtifactsFromActionCacheCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountNotIn = data
		case "outputArtifactsFromActionCacheCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountGT = data
		case "outputArtifactsFromActionCacheCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountGTE = data
		case "outputArtifactsFromActionCacheCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountLT = data
		case "outputArtifactsFromActionCacheCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountLTE = data
		case "outputArtifactsFromActionCacheCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountIsNil = data
		case "outputArtifactsFromActionCacheCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactsFromActionCacheCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactsFromActionCacheCountNotNil = data
		case "topLevelArtifactsSizeInBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytes = data
		case "topLevelArtifactsSizeInBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesNEQ = data
		case "topLevelArtifactsSizeInBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesIn = data
		case "topLevelArtifactsSizeInBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesNotIn = data
		case "topLevelArtifactsSizeInBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesGT = data
		case "topLevelArtifactsSizeInBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesGTE = data
		case "topLevelArtifactsSizeInBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesLT = data
		case "topLevelArtifactsSizeInBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesLTE = data
		case "topLevelArtifactsSizeInBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesIsNil = data
		case "topLevelArtifactsSizeInBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsSizeInBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsSizeInBytesNotNil = data
		case "topLevelArtifactsCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCount = data
		case "topLevelArtifactsCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountNEQ = data
		case "topLevelArtifactsCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountIn = data
		case "topLevelArtifactsCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountNotIn = data
		case "topLevelArtifactsCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountGT = data
		case "topLevelArtifactsCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountGTE = data
		case "topLevelArtifactsCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountLT = data
		case "topLevelArtifactsCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountLTE = data
		case "topLevelArtifactsCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountIsNil = data
		case "topLevelArtifactsCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topLevelArtifactsCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopLevelArtifactsCountNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBazelInvocationOrder(ctx context.Context, obj any) (ent.BazelInvocationOrder, error) {
	var it ent.BazelInvocationOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNBazelInvocationOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBazelInvocationProblemWhereInput(ctx context.Context, obj any) (ent.BazelInvocationProblemWhereInput, error) {
	var it ent.BazelInvocationProblemWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "problemType", "problemTypeNEQ", "problemTypeIn", "problemTypeNotIn", "problemTypeGT", "problemTypeGTE", "problemTypeLT", "problemTypeLTE", "problemTypeContains", "problemTypeHasPrefix", "problemTypeHasSuffix", "problemTypeEqualFold", "problemTypeContainsFold", "label", "labelNEQ", "labelIn", "labelNotIn", "labelGT", "labelGTE", "labelLT", "labelLTE", "labelContains", "labelHasPrefix", "labelHasSuffix", "labelEqualFold", "labelContainsFold", "hasBazelInvocation", "hasBazelInvocationWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBazelInvocationProblemWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBazelInvocationProblemWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBazelInvocationProblemWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "problemType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemType = data
		case "problemTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeNEQ = data
		case "problemTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeIn = data
		case "problemTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeNotIn = data
		case "problemTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeGT = data
		case "problemTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeGTE = data
		case "problemTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeLT = data
		case "problemTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeLTE = data
		case "problemTypeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeContains = data
		case "problemTypeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeHasPrefix = data
		case "problemTypeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeHasSuffix = data
		case "problemTypeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeEqualFold = data
		case "problemTypeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeContainsFold = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "labelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNEQ = data
		case "labelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIn = data
		case "labelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotIn = data
		case "labelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGT = data
		case "labelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGTE = data
		case "labelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLT = data
		case "labelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLTE = data
		case "labelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContains = data
		case "labelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasPrefix = data
		case "labelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasSuffix = data
		case "labelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelEqualFold = data
		case "labelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContainsFold = data
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBazelInvocationWhereInput(ctx context.Context, obj any) (ent.BazelInvocationWhereInput, error) {
	var it ent.BazelInvocationWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "invocationID", "invocationIDNEQ", "invocationIDIn", "invocationIDNotIn", "invocationIDGT", "invocationIDGTE", "invocationIDLT", "invocationIDLTE", "startedAt", "startedAtNEQ", "startedAtIn", "startedAtNotIn", "startedAtGT", "startedAtGTE", "startedAtLT", "startedAtLTE", "startedAtIsNil", "startedAtNotNil", "endedAt", "endedAtNEQ", "endedAtIn", "endedAtNotIn", "endedAtGT", "endedAtGTE", "endedAtLT", "endedAtLTE", "endedAtIsNil", "endedAtNotNil", "changeNumber", "changeNumberNEQ", "changeNumberIn", "changeNumberNotIn", "changeNumberGT", "changeNumberGTE", "changeNumberLT", "changeNumberLTE", "changeNumberIsNil", "changeNumberNotNil", "patchsetNumber", "patchsetNumberNEQ", "patchsetNumberIn", "patchsetNumberNotIn", "patchsetNumberGT", "patchsetNumberGTE", "patchsetNumberLT", "patchsetNumberLTE", "patchsetNumberIsNil", "patchsetNumberNotNil", "bepCompleted", "bepCompletedNEQ", "stepLabel", "stepLabelNEQ", "stepLabelIn", "stepLabelNotIn", "stepLabelGT", "stepLabelGTE", "stepLabelLT", "stepLabelLTE", "stepLabelContains", "stepLabelHasPrefix", "stepLabelHasSuffix", "stepLabelIsNil", "stepLabelNotNil", "stepLabelEqualFold", "stepLabelContainsFold", "userEmail", "userEmailNEQ", "userEmailIn", "userEmailNotIn", "userEmailGT", "userEmailGTE", "userEmailLT", "userEmailLTE", "userEmailContains", "userEmailHasPrefix", "userEmailHasSuffix", "userEmailIsNil", "userEmailNotNil", "userEmailEqualFold", "userEmailContainsFold", "userLdap", "userLdapNEQ", "userLdapIn", "userLdapNotIn", "userLdapGT", "userLdapGTE", "userLdapLT", "userLdapLTE", "userLdapContains", "userLdapHasPrefix", "userLdapHasSuffix", "userLdapIsNil", "userLdapNotNil", "userLdapEqualFold", "userLdapContainsFold", "buildLogs", "buildLogsNEQ", "buildLogsIn", "buildLogsNotIn", "buildLogsGT", "buildLogsGTE", "buildLogsLT", "buildLogsLTE", "buildLogsContains", "buildLogsHasPrefix", "buildLogsHasSuffix", "buildLogsIsNil", "buildLogsNotNil", "buildLogsEqualFold", "buildLogsContainsFold", "cpu", "cpuNEQ", "cpuIn", "cpuNotIn", "cpuGT", "cpuGTE", "cpuLT", "cpuLTE", "cpuContains", "cpuHasPrefix", "cpuHasSuffix", "cpuIsNil", "cpuNotNil", "cpuEqualFold", "cpuContainsFold", "platformName", "platformNameNEQ", "platformNameIn", "platformNameNotIn", "platformNameGT", "platformNameGTE", "platformNameLT", "platformNameLTE", "platformNameContains", "platformNameHasPrefix", "platformNameHasSuffix", "platformNameIsNil", "platformNameNotNil", "platformNameEqualFold", "platformNameContainsFold", "hostname", "hostnameNEQ", "hostnameIn", "hostnameNotIn", "hostnameGT", "hostnameGTE", "hostnameLT", "hostnameLTE", "hostnameContains", "hostnameHasPrefix", "hostnameHasSuffix", "hostnameIsNil", "hostnameNotNil", "hostnameEqualFold", "hostnameContainsFold", "isCiWorker", "isCiWorkerNEQ", "isCiWorkerIsNil", "isCiWorkerNotNil", "configurationMnemonic", "configurationMnemonicNEQ", "configurationMnemonicIn", "configurationMnemonicNotIn", "configurationMnemonicGT", "configurationMnemonicGTE", "configurationMnemonicLT", "configurationMnemonicLTE", "configurationMnemonicContains", "configurationMnemonicHasPrefix", "configurationMnemonicHasSuffix", "configurationMnemonicIsNil", "configurationMnemonicNotNil", "configurationMnemonicEqualFold", "configurationMnemonicContainsFold", "numFetches", "numFetchesNEQ", "numFetchesIn", "numFetchesNotIn", "numFetchesGT", "numFetchesGTE", "numFetchesLT", "numFetchesLTE", "numFetchesIsNil", "numFetchesNotNil", "profileName", "profileNameNEQ", "profileNameIn", "profileNameNotIn", "profileNameGT", "profileNameGTE", "profileNameLT", "profileNameLTE", "profileNameContains", "profileNameHasPrefix", "profileNameHasSuffix", "profileNameIsNil", "profileNameNotNil", "profileNameEqualFold", "profileNameContainsFold", "instanceName", "instanceNameNEQ", "instanceNameIn", "instanceNameNotIn", "instanceNameGT", "instanceNameGTE", "instanceNameLT", "instanceNameLTE", "instanceNameContains", "instanceNameHasPrefix", "instanceNameHasSuffix", "instanceNameIsNil", "instanceNameNotNil", "instanceNameEqualFold", "instanceNameContainsFold", "bazelVersion", "bazelVersionNEQ", "bazelVersionIn", "bazelVersionNotIn", "bazelVersionGT", "bazelVersionGTE", "bazelVersionLT", "bazelVersionLTE", "bazelVersionContains", "bazelVersionHasPrefix", "bazelVersionHasSuffix", "bazelVersionIsNil", "bazelVersionNotNil", "bazelVersionEqualFold", "bazelVersionContainsFold", "exitCodeName", "exitCodeNameNEQ", "exitCodeNameIn", "exitCodeNameNotIn", "exitCodeNameGT", "exitCodeNameGTE", "exitCodeNameLT", "exitCodeNameLTE", "exitCodeNameContains", "exitCodeNameHasPrefix", "exitCodeNameHasSuffix", "exitCodeNameIsNil", "exitCodeNameNotNil", "exitCodeNameEqualFold", "exitCodeNameContainsFold", "exitCodeCode", "exitCodeCodeNEQ", "exitCodeCodeIn", "exitCodeCodeNotIn", "exitCodeCodeGT", "exitCodeCodeGTE", "exitCodeCodeLT", "exitCodeCodeLTE", "exitCodeCodeIsNil", "exitCodeCodeNotNil", "hasBuild", "hasBuildWith", "hasProblems", "hasProblemsWith", "hasMetrics", "hasMetricsWith", "hasIncompleteBuildLogs", "hasIncompleteBuildLogsWith", "hasInvocationFiles", "hasInvocationFilesWith", "hasTestCollection", "hasTestCollectionWith", "hasTargets", "hasTargetsWith", "hasSourceControl", "hasSourceControlWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "invocationID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationID"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationID = data
		case "invocationIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDNEQ"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDNEQ = data
		case "invocationIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDIn"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDIn = data
		case "invocationIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDNotIn"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDNotIn = data
		case "invocationIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDGT"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDGT = data
		case "invocationIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDGTE"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDGTE = data
		case "invocationIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDLT"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDLT = data
		case "invocationIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDLTE"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDLTE = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "startedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtNEQ = data
		case "startedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtIn = data
		case "startedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtNotIn = data
		case "startedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtGT = data
		case "startedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtGTE = data
		case "startedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtLT = data
		case "startedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtLTE = data
		case "startedAtIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtIsNil = data
		case "startedAtNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtNotNil = data
		case "endedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAt = data
		case "endedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtNEQ = data
		case "endedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtIn = data
		case "endedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtNotIn = data
		case "endedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtGT = data
		case "endedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtGTE = data
		case "endedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtLT = data
		case "endedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtLTE = data
		case "endedAtIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtIsNil = data
		case "endedAtNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtNotNil = data
		case "changeNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumber"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumber = data
		case "changeNumberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberNEQ = data
		case "changeNumberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberIn = data
		case "changeNumberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberNotIn = data
		case "changeNumberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberGT = data
		case "changeNumberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberGTE = data
		case "changeNumberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberLT = data
		case "changeNumberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberLTE = data
		case "changeNumberIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberIsNil = data
		case "changeNumberNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberNotNil = data
		case "patchsetNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumber"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumber = data
		case "patchsetNumberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberNEQ = data
		case "patchsetNumberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberIn = data
		case "patchsetNumberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberNotIn = data
		case "patchsetNumberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberGT = data
		case "patchsetNumberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberGTE = data
		case "patchsetNumberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberLT = data
		case "patchsetNumberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberLTE = data
		case "patchsetNumberIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberIsNil = data
		case "patchsetNumberNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberNotNil = data
		case "bepCompleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bepCompleted"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BepCompleted = data
		case "bepCompletedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bepCompletedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BepCompletedNEQ = data
		case "stepLabel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabel"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabel = data
		case "stepLabelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelNEQ = data
		case "stepLabelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelIn = data
		case "stepLabelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelNotIn = data
		case "stepLabelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelGT = data
		case "stepLabelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelGTE = data
		case "stepLabelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelLT = data
		case "stepLabelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelLTE = data
		case "stepLabelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelContains = data
		case "stepLabelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelHasPrefix = data
		case "stepLabelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelHasSuffix = data
		case "stepLabelIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelIsNil = data
		case "stepLabelNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelNotNil = data
		case "stepLabelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelEqualFold = data
		case "stepLabelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelContainsFold = data
		case "userEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmail = data
		case "userEmailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailNEQ = data
		case "userEmailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailIn = data
		case "userEmailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailNotIn = data
		case "userEmailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailGT = data
		case "userEmailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailGTE = data
		case "userEmailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailLT = data
		case "userEmailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailLTE = data
		case "userEmailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailContains = data
		case "userEmailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailHasPrefix = data
		case "userEmailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailHasSuffix = data
		case "userEmailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailIsNil = data
		case "userEmailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailNotNil = data
		case "userEmailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailEqualFold = data
		case "userEmailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailContainsFold = data
		case "userLdap":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdap"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdap = data
		case "userLdapNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapNEQ = data
		case "userLdapIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapIn = data
		case "userLdapNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapNotIn = data
		case "userLdapGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapGT = data
		case "userLdapGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapGTE = data
		case "userLdapLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapLT = data
		case "userLdapLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapLTE = data
		case "userLdapContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapContains = data
		case "userLdapHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapHasPrefix = data
		case "userLdapHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapHasSuffix = data
		case "userLdapIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapIsNil = data
		case "userLdapNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapNotNil = data
		case "userLdapEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapEqualFold = data
		case "userLdapContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapContainsFold = data
		case "buildLogs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogs"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogs = data
		case "buildLogsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsNEQ = data
		case "buildLogsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsIn = data
		case "buildLogsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsNotIn = data
		case "buildLogsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsGT = data
		case "buildLogsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsGTE = data
		case "buildLogsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsLT = data
		case "buildLogsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsLTE = data
		case "buildLogsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsContains = data
		case "buildLogsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsHasPrefix = data
		case "buildLogsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsHasSuffix = data
		case "buildLogsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsIsNil = data
		case "buildLogsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsNotNil = data
		case "buildLogsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsEqualFold = data
		case "buildLogsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsContainsFold = data
		case "cpu":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpu"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPU = data
		case "cpuNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUNEQ = data
		case "cpuIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUIn = data
		case "cpuNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUNotIn = data
		case "cpuGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUGT = data
		case "cpuGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUGTE = data
		case "cpuLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPULT = data
		case "cpuLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPULTE = data
		case "cpuContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUContains = data
		case "cpuHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUHasPrefix = data
		case "cpuHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUHasSuffix = data
		case "cpuIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUIsNil = data
		case "cpuNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUNotNil = data
		case "cpuEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUEqualFold = data
		case "cpuContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUContainsFold = data
		case "platformName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformName = data
		case "platformNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameNEQ = data
		case "platformNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameIn = data
		case "platformNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameNotIn = data
		case "platformNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameGT = data
		case "platformNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameGTE = data
		case "platformNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameLT = data
		case "platformNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameLTE = data
		case "platformNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameContains = data
		case "platformNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameHasPrefix = data
		case "platformNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameHasSuffix = data
		case "platformNameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameIsNil = data
		case "platformNameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameNotNil = data
		case "platformNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameEqualFold = data
		case "platformNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformNameContainsFold = data
		case "hostname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hostname = data
		case "hostnameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameNEQ = data
		case "hostnameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameIn = data
		case "hostnameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameNotIn = data
		case "hostnameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameGT = data
		case "hostnameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameGTE = data
		case "hostnameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameLT = data
		case "hostnameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameLTE = data
		case "hostnameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameContains = data
		case "hostnameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameHasPrefix = data
		case "hostnameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameHasSuffix = data
		case "hostnameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameIsNil = data
		case "hostnameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameNotNil = data
		case "hostnameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameEqualFold = data
		case "hostnameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameContainsFold = data
		case "isCiWorker":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCiWorker"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCiWorker = data
		case "isCiWorkerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCiWorkerNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCiWorkerNEQ = data
		case "isCiWorkerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCiWorkerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCiWorkerIsNil = data
		case "isCiWorkerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCiWorkerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCiWorkerNotNil = data
		case "configurationMnemonic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonic"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonic = data
		case "configurationMnemonicNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicNEQ = data
		case "configurationMnemonicIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicIn = data
		case "configurationMnemonicNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicNotIn = data
		case "configurationMnemonicGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicGT = data
		case "configurationMnemonicGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicGTE = data
		case "configurationMnemonicLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicLT = data
		case "configurationMnemonicLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicLTE = data
		case "configurationMnemonicContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicContains = data
		case "configurationMnemonicHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicHasPrefix = data
		case "configurationMnemonicHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicHasSuffix = data
		case "configurationMnemonicIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicIsNil = data
		case "configurationMnemonicNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicNotNil = data
		case "configurationMnemonicEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicEqualFold = data
		case "configurationMnemonicContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurationMnemonicContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfigurationMnemonicContainsFold = data
		case "numFetches":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetches"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetches = data
		case "numFetchesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesNEQ = data
		case "numFetchesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesIn = data
		case "numFetchesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesNotIn = data
		case "numFetchesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesGT = data
		case "numFetchesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesGTE = data
		case "numFetchesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesLT = data
		case "numFetchesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesLTE = data
		case "numFetchesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesIsNil = data
		case "numFetchesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numFetchesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumFetchesNotNil = data
		case "profileName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileName = data
		case "profileNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameNEQ = data
		case "profileNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameIn = data
		case "profileNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameNotIn = data
		case "profileNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameGT = data
		case "profileNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameGTE = data
		case "profileNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameLT = data
		case "profileNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameLTE = data
		case "profileNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameContains = data
		case "profileNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameHasPrefix = data
		case "profileNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameHasSuffix = data
		case "profileNameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameIsNil = data
		case "profileNameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameNotNil = data
		case "profileNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameEqualFold = data
		case "profileNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileNameContainsFold = data
		case "instanceName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceName = data
		case "instanceNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameNEQ = data
		case "instanceNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameIn = data
		case "instanceNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameNotIn = data
		case "instanceNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameGT = data
		case "instanceNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameGTE = data
		case "instanceNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameLT = data
		case "instanceNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameLTE = data
		case "instanceNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameContains = data
		case "instanceNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameHasPrefix = data
		case "instanceNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameHasSuffix = data
		case "instanceNameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameIsNil = data
		case "instanceNameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameNotNil = data
		case "instanceNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameEqualFold = data
		case "instanceNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameContainsFold = data
		case "bazelVersion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersion"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersion = data
		case "bazelVersionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionNEQ = data
		case "bazelVersionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionIn = data
		case "bazelVersionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionNotIn = data
		case "bazelVersionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionGT = data
		case "bazelVersionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionGTE = data
		case "bazelVersionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionLT = data
		case "bazelVersionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionLTE = data
		case "bazelVersionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionContains = data
		case "bazelVersionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionHasPrefix = data
		case "bazelVersionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionHasSuffix = data
		case "bazelVersionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionIsNil = data
		case "bazelVersionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionNotNil = data
		case "bazelVersionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionEqualFold = data
		case "bazelVersionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bazelVersionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BazelVersionContainsFold = data
		case "exitCodeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeName = data
		case "exitCodeNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameNEQ = data
		case "exitCodeNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameIn = data
		case "exitCodeNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameNotIn = data
		case "exitCodeNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameGT = data
		case "exitCodeNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameGTE = data
		case "exitCodeNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameLT = data
		case "exitCodeNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameLTE = data
		case "exitCodeNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameContains = data
		case "exitCodeNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameHasPrefix = data
		case "exitCodeNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameHasSuffix = data
		case "exitCodeNameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameIsNil = data
		case "exitCodeNameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameNotNil = data
		case "exitCodeNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameEqualFold = data
		case "exitCodeNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNameContainsFold = data
		case "exitCodeCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCode"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCode = data
		case "exitCodeCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeNEQ = data
		case "exitCodeCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeIn = data
		case "exitCodeCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeNotIn = data
		case "exitCodeCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeGT = data
		case "exitCodeCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeGTE = data
		case "exitCodeCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeLT = data
		case "exitCodeCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeLTE = data
		case "exitCodeCodeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeIsNil = data
		case "exitCodeCodeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeCodeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeCodeNotNil = data
		case "hasBuild":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuild"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuild = data
		case "hasBuildWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuildWith"))
			data, err := ec.unmarshalOBuildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuildWith = data
		case "hasProblems":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProblems"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProblems = data
		case "hasProblemsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProblemsWith"))
			data, err := ec.unmarshalOBazelInvocationProblemWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProblemsWith = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasIncompleteBuildLogs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasIncompleteBuildLogs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasIncompleteBuildLogs = data
		case "hasIncompleteBuildLogsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasIncompleteBuildLogsWith"))
			data, err := ec.unmarshalOIncompleteBuildLogWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasIncompleteBuildLogsWith = data
		case "hasInvocationFiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInvocationFiles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInvocationFiles = data
		case "hasInvocationFilesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInvocationFilesWith"))
			data, err := ec.unmarshalOInvocationFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInvocationFilesWith = data
		case "hasTestCollection":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestCollection"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestCollection = data
		case "hasTestCollectionWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestCollectionWith"))
			data, err := ec.unmarshalOTestCollectionWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestCollectionWith = data
		case "hasTargets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTargets"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTargets = data
		case "hasTargetsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTargetsWith"))
			data, err := ec.unmarshalOTargetWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTargetsWith = data
		case "hasSourceControl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSourceControl"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSourceControl = data
		case "hasSourceControlWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSourceControlWith"))
			data, err := ec.unmarshalOSourceControlWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControlWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSourceControlWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobWhereInput(ctx context.Context, obj any) (ent.BlobWhereInput, error) {
	var it ent.BlobWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "uri", "uriNEQ", "uriIn", "uriNotIn", "uriGT", "uriGTE", "uriLT", "uriLTE", "uriContains", "uriHasPrefix", "uriHasSuffix", "uriEqualFold", "uriContainsFold", "sizeBytes", "sizeBytesNEQ", "sizeBytesIn", "sizeBytesNotIn", "sizeBytesGT", "sizeBytesGTE", "sizeBytesLT", "sizeBytesLTE", "sizeBytesIsNil", "sizeBytesNotNil", "archivingStatus", "archivingStatusNEQ", "archivingStatusIn", "archivingStatusNotIn", "reason", "reasonNEQ", "reasonIn", "reasonNotIn", "reasonGT", "reasonGTE", "reasonLT", "reasonLTE", "reasonContains", "reasonHasPrefix", "reasonHasSuffix", "reasonIsNil", "reasonNotNil", "reasonEqualFold", "reasonContainsFold", "archiveURL", "archiveURLNEQ", "archiveURLIn", "archiveURLNotIn", "archiveURLGT", "archiveURLGTE", "archiveURLLT", "archiveURLLTE", "archiveURLContains", "archiveURLHasPrefix", "archiveURLHasSuffix", "archiveURLIsNil", "archiveURLNotNil", "archiveURLEqualFold", "archiveURLContainsFold", "instanceName", "instanceNameNEQ", "instanceNameIn", "instanceNameNotIn", "instanceNameGT", "instanceNameGTE", "instanceNameLT", "instanceNameLTE", "instanceNameContains", "instanceNameHasPrefix", "instanceNameHasSuffix", "instanceNameEqualFold", "instanceNameContainsFold"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBlobWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBlobWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBlobWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "uri":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uri"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URI = data
		case "uriNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URINEQ = data
		case "uriIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIIn = data
		case "uriNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URINotIn = data
		case "uriGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIGT = data
		case "uriGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIGTE = data
		case "uriLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URILT = data
		case "uriLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URILTE = data
		case "uriContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIContains = data
		case "uriHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIHasPrefix = data
		case "uriHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIHasSuffix = data
		case "uriEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIEqualFold = data
		case "uriContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIContainsFold = data
		case "sizeBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytes = data
		case "sizeBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNEQ = data
		case "sizeBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesIn = data
		case "sizeBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNotIn = data
		case "sizeBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesGT = data
		case "sizeBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesGTE = data
		case "sizeBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesLT = data
		case "sizeBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesLTE = data
		case "sizeBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesIsNil = data
		case "sizeBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNotNil = data
		case "archivingStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivingStatus"))
			data, err := ec.unmarshalOBlobArchivingStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchivingStatus = data
		case "archivingStatusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivingStatusNEQ"))
			data, err := ec.unmarshalOBlobArchivingStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchivingStatusNEQ = data
		case "archivingStatusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivingStatusIn"))
			data, err := ec.unmarshalOBlobArchivingStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchivingStatusIn = data
		case "archivingStatusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivingStatusNotIn"))
			data, err := ec.unmarshalOBlobArchivingStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchivingStatusNotIn = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "reasonNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNEQ = data
		case "reasonIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIn = data
		case "reasonNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotIn = data
		case "reasonGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonGT = data
		case "reasonGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonGTE = data
		case "reasonLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonLT = data
		case "reasonLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonLTE = data
		case "reasonContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonContains = data
		case "reasonHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonHasPrefix = data
		case "reasonHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonHasSuffix = data
		case "reasonIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIsNil = data
		case "reasonNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotNil = data
		case "reasonEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonEqualFold = data
		case "reasonContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonContainsFold = data
		case "archiveURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURL = data
		case "archiveURLNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLNEQ = data
		case "archiveURLIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLIn = data
		case "archiveURLNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLNotIn = data
		case "archiveURLGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLGT = data
		case "archiveURLGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLGTE = data
		case "archiveURLLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLLT = data
		case "archiveURLLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLLTE = data
		case "archiveURLContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLContains = data
		case "archiveURLHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLHasPrefix = data
		case "archiveURLHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLHasSuffix = data
		case "archiveURLIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLIsNil = data
		case "archiveURLNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLNotNil = data
		case "archiveURLEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLEqualFold = data
		case "archiveURLContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLContainsFold = data
		case "instanceName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceName = data
		case "instanceNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameNEQ = data
		case "instanceNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameIn = data
		case "instanceNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameNotIn = data
		case "instanceNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameGT = data
		case "instanceNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameGTE = data
		case "instanceNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameLT = data
		case "instanceNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameLTE = data
		case "instanceNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameContains = data
		case "instanceNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameHasPrefix = data
		case "instanceNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameHasSuffix = data
		case "instanceNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameEqualFold = data
		case "instanceNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameContainsFold = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBuildGraphMetricsWhereInput(ctx context.Context, obj any) (ent.BuildGraphMetricsWhereInput, error) {
	var it ent.BuildGraphMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "actionLookupValueCount", "actionLookupValueCountNEQ", "actionLookupValueCountIn", "actionLookupValueCountNotIn", "actionLookupValueCountGT", "actionLookupValueCountGTE", "actionLookupValueCountLT", "actionLookupValueCountLTE", "actionLookupValueCountIsNil", "actionLookupValueCountNotNil", "actionLookupValueCountNotIncludingAspects", "actionLookupValueCountNotIncludingAspectsNEQ", "actionLookupValueCountNotIncludingAspectsIn", "actionLookupValueCountNotIncludingAspectsNotIn", "actionLookupValueCountNotIncludingAspectsGT", "actionLookupValueCountNotIncludingAspectsGTE", "actionLookupValueCountNotIncludingAspectsLT", "actionLookupValueCountNotIncludingAspectsLTE", "actionLookupValueCountNotIncludingAspectsIsNil", "actionLookupValueCountNotIncludingAspectsNotNil", "actionCount", "actionCountNEQ", "actionCountIn", "actionCountNotIn", "actionCountGT", "actionCountGTE", "actionCountLT", "actionCountLTE", "actionCountIsNil", "actionCountNotNil", "actionCountNotIncludingAspects", "actionCountNotIncludingAspectsNEQ", "actionCountNotIncludingAspectsIn", "actionCountNotIncludingAspectsNotIn", "actionCountNotIncludingAspectsGT", "actionCountNotIncludingAspectsGTE", "actionCountNotIncludingAspectsLT", "actionCountNotIncludingAspectsLTE", "actionCountNotIncludingAspectsIsNil", "actionCountNotIncludingAspectsNotNil", "inputFileConfiguredTargetCount", "inputFileConfiguredTargetCountNEQ", "inputFileConfiguredTargetCountIn", "inputFileConfiguredTargetCountNotIn", "inputFileConfiguredTargetCountGT", "inputFileConfiguredTargetCountGTE", "inputFileConfiguredTargetCountLT", "inputFileConfiguredTargetCountLTE", "inputFileConfiguredTargetCountIsNil", "inputFileConfiguredTargetCountNotNil", "outputFileConfiguredTargetCount", "outputFileConfiguredTargetCountNEQ", "outputFileConfiguredTargetCountIn", "outputFileConfiguredTargetCountNotIn", "outputFileConfiguredTargetCountGT", "outputFileConfiguredTargetCountGTE", "outputFileConfiguredTargetCountLT", "outputFileConfiguredTargetCountLTE", "outputFileConfiguredTargetCountIsNil", "outputFileConfiguredTargetCountNotNil", "otherConfiguredTargetCount", "otherConfiguredTargetCountNEQ", "otherConfiguredTargetCountIn", "otherConfiguredTargetCountNotIn", "otherConfiguredTargetCountGT", "otherConfiguredTargetCountGTE", "otherConfiguredTargetCountLT", "otherConfiguredTargetCountLTE", "otherConfiguredTargetCountIsNil", "otherConfiguredTargetCountNotNil", "outputArtifactCount", "outputArtifactCountNEQ", "outputArtifactCountIn", "outputArtifactCountNotIn", "outputArtifactCountGT", "outputArtifactCountGTE", "outputArtifactCountLT", "outputArtifactCountLTE", "outputArtifactCountIsNil", "outputArtifactCountNotNil", "postInvocationSkyframeNodeCount", "postInvocationSkyframeNodeCountNEQ", "postInvocationSkyframeNodeCountIn", "postInvocationSkyframeNodeCountNotIn", "postInvocationSkyframeNodeCountGT", "postInvocationSkyframeNodeCountGTE", "postInvocationSkyframeNodeCountLT", "postInvocationSkyframeNodeCountLTE", "postInvocationSkyframeNodeCountIsNil", "postInvocationSkyframeNodeCountNotNil", "hasMetrics", "hasMetricsWith", "hasDirtiedValues", "hasDirtiedValuesWith", "hasChangedValues", "hasChangedValuesWith", "hasBuiltValues", "hasBuiltValuesWith", "hasCleanedValues", "hasCleanedValuesWith", "hasEvaluatedValues", "hasEvaluatedValuesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBuildGraphMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBuildGraphMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBuildGraphMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildGraphMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildGraphMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildGraphMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildGraphMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildGraphMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildGraphMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildGraphMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildGraphMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "actionLookupValueCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCount = data
		case "actionLookupValueCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNEQ = data
		case "actionLookupValueCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountIn = data
		case "actionLookupValueCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIn = data
		case "actionLookupValueCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountGT = data
		case "actionLookupValueCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountGTE = data
		case "actionLookupValueCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountLT = data
		case "actionLookupValueCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountLTE = data
		case "actionLookupValueCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountIsNil = data
		case "actionLookupValueCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotNil = data
		case "actionLookupValueCountNotIncludingAspects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspects"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspects = data
		case "actionLookupValueCountNotIncludingAspectsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsNEQ = data
		case "actionLookupValueCountNotIncludingAspectsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsIn = data
		case "actionLookupValueCountNotIncludingAspectsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsNotIn = data
		case "actionLookupValueCountNotIncludingAspectsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsGT = data
		case "actionLookupValueCountNotIncludingAspectsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsGTE = data
		case "actionLookupValueCountNotIncludingAspectsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsLT = data
		case "actionLookupValueCountNotIncludingAspectsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsLTE = data
		case "actionLookupValueCountNotIncludingAspectsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsIsNil = data
		case "actionLookupValueCountNotIncludingAspectsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLookupValueCountNotIncludingAspectsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLookupValueCountNotIncludingAspectsNotNil = data
		case "actionCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCount = data
		case "actionCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNEQ = data
		case "actionCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountIn = data
		case "actionCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIn = data
		case "actionCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountGT = data
		case "actionCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountGTE = data
		case "actionCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountLT = data
		case "actionCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountLTE = data
		case "actionCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountIsNil = data
		case "actionCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotNil = data
		case "actionCountNotIncludingAspects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspects"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspects = data
		case "actionCountNotIncludingAspectsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsNEQ = data
		case "actionCountNotIncludingAspectsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsIn = data
		case "actionCountNotIncludingAspectsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsNotIn = data
		case "actionCountNotIncludingAspectsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsGT = data
		case "actionCountNotIncludingAspectsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsGTE = data
		case "actionCountNotIncludingAspectsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsLT = data
		case "actionCountNotIncludingAspectsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsLTE = data
		case "actionCountNotIncludingAspectsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsIsNil = data
		case "actionCountNotIncludingAspectsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionCountNotIncludingAspectsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionCountNotIncludingAspectsNotNil = data
		case "inputFileConfiguredTargetCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCount = data
		case "inputFileConfiguredTargetCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountNEQ = data
		case "inputFileConfiguredTargetCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountIn = data
		case "inputFileConfiguredTargetCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountNotIn = data
		case "inputFileConfiguredTargetCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountGT = data
		case "inputFileConfiguredTargetCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountGTE = data
		case "inputFileConfiguredTargetCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountLT = data
		case "inputFileConfiguredTargetCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountLTE = data
		case "inputFileConfiguredTargetCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountIsNil = data
		case "inputFileConfiguredTargetCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputFileConfiguredTargetCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InputFileConfiguredTargetCountNotNil = data
		case "outputFileConfiguredTargetCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCount = data
		case "outputFileConfiguredTargetCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountNEQ = data
		case "outputFileConfiguredTargetCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountIn = data
		case "outputFileConfiguredTargetCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountNotIn = data
		case "outputFileConfiguredTargetCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountGT = data
		case "outputFileConfiguredTargetCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountGTE = data
		case "outputFileConfiguredTargetCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountLT = data
		case "outputFileConfiguredTargetCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountLTE = data
		case "outputFileConfiguredTargetCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountIsNil = data
		case "outputFileConfiguredTargetCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputFileConfiguredTargetCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputFileConfiguredTargetCountNotNil = data
		case "otherConfiguredTargetCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCount = data
		case "otherConfiguredTargetCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountNEQ = data
		case "otherConfiguredTargetCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountIn = data
		case "otherConfiguredTargetCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountNotIn = data
		case "otherConfiguredTargetCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountGT = data
		case "otherConfiguredTargetCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountGTE = data
		case "otherConfiguredTargetCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountLT = data
		case "otherConfiguredTargetCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountLTE = data
		case "otherConfiguredTargetCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountIsNil = data
		case "otherConfiguredTargetCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherConfiguredTargetCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherConfiguredTargetCountNotNil = data
		case "outputArtifactCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCount = data
		case "outputArtifactCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountNEQ = data
		case "outputArtifactCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountIn = data
		case "outputArtifactCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountNotIn = data
		case "outputArtifactCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountGT = data
		case "outputArtifactCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountGTE = data
		case "outputArtifactCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountLT = data
		case "outputArtifactCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountLTE = data
		case "outputArtifactCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountIsNil = data
		case "outputArtifactCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputArtifactCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputArtifactCountNotNil = data
		case "postInvocationSkyframeNodeCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCount = data
		case "postInvocationSkyframeNodeCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountNEQ = data
		case "postInvocationSkyframeNodeCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountIn = data
		case "postInvocationSkyframeNodeCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountNotIn = data
		case "postInvocationSkyframeNodeCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountGT = data
		case "postInvocationSkyframeNodeCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountGTE = data
		case "postInvocationSkyframeNodeCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountLT = data
		case "postInvocationSkyframeNodeCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountLTE = data
		case "postInvocationSkyframeNodeCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountIsNil = data
		case "postInvocationSkyframeNodeCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postInvocationSkyframeNodeCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostInvocationSkyframeNodeCountNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasDirtiedValues":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDirtiedValues"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDirtiedValues = data
		case "hasDirtiedValuesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDirtiedValuesWith"))
			data, err := ec.unmarshalOEvaluationStatWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDirtiedValuesWith = data
		case "hasChangedValues":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChangedValues"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChangedValues = data
		case "hasChangedValuesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChangedValuesWith"))
			data, err := ec.unmarshalOEvaluationStatWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChangedValuesWith = data
		case "hasBuiltValues":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuiltValues"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuiltValues = data
		case "hasBuiltValuesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuiltValuesWith"))
			data, err := ec.unmarshalOEvaluationStatWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuiltValuesWith = data
		case "hasCleanedValues":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCleanedValues"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCleanedValues = data
		case "hasCleanedValuesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCleanedValuesWith"))
			data, err := ec.unmarshalOEvaluationStatWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCleanedValuesWith = data
		case "hasEvaluatedValues":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEvaluatedValues"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEvaluatedValues = data
		case "hasEvaluatedValuesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEvaluatedValuesWith"))
			data, err := ec.unmarshalOEvaluationStatWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEvaluatedValuesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBuildWhereInput(ctx context.Context, obj any) (ent.BuildWhereInput, error) {
	var it ent.BuildWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "buildURL", "buildURLNEQ", "buildURLIn", "buildURLNotIn", "buildURLGT", "buildURLGTE", "buildURLLT", "buildURLLTE", "buildURLContains", "buildURLHasPrefix", "buildURLHasSuffix", "buildURLEqualFold", "buildURLContainsFold", "buildUUID", "buildUUIDNEQ", "buildUUIDIn", "buildUUIDNotIn", "buildUUIDGT", "buildUUIDGTE", "buildUUIDLT", "buildUUIDLTE", "instanceName", "instanceNameNEQ", "instanceNameIn", "instanceNameNotIn", "instanceNameGT", "instanceNameGTE", "instanceNameLT", "instanceNameLTE", "instanceNameContains", "instanceNameHasPrefix", "instanceNameHasSuffix", "instanceNameEqualFold", "instanceNameContainsFold", "timestamp", "timestampNEQ", "timestampIn", "timestampNotIn", "timestampGT", "timestampGTE", "timestampLT", "timestampLTE", "hasInvocations", "hasInvocationsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBuildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBuildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "buildURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURL = data
		case "buildURLNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLNEQ = data
		case "buildURLIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLIn = data
		case "buildURLNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLNotIn = data
		case "buildURLGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLGT = data
		case "buildURLGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLGTE = data
		case "buildURLLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLLT = data
		case "buildURLLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLLTE = data
		case "buildURLContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLContains = data
		case "buildURLHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLHasPrefix = data
		case "buildURLHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLHasSuffix = data
		case "buildURLEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLEqualFold = data
		case "buildURLContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLContainsFold = data
		case "buildUUID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUID"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUID = data
		case "buildUUIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDNEQ"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDNEQ = data
		case "buildUUIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDIn"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDIn = data
		case "buildUUIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDNotIn"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDNotIn = data
		case "buildUUIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDGT"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDGT = data
		case "buildUUIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDGTE"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDGTE = data
		case "buildUUIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDLT"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDLT = data
		case "buildUUIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDLTE"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDLTE = data
		case "instanceName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceName = data
		case "instanceNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameNEQ = data
		case "instanceNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameIn = data
		case "instanceNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameNotIn = data
		case "instanceNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameGT = data
		case "instanceNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameGTE = data
		case "instanceNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameLT = data
		case "instanceNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameLTE = data
		case "instanceNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameContains = data
		case "instanceNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameHasPrefix = data
		case "instanceNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameHasSuffix = data
		case "instanceNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameEqualFold = data
		case "instanceNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceNameContainsFold = data
		case "timestamp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timestamp = data
		case "timestampNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimestampNEQ = data
		case "timestampIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimestampIn = data
		case "timestampNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimestampNotIn = data
		case "timestampGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimestampGT = data
		case "timestampGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimestampGTE = data
		case "timestampLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimestampLT = data
		case "timestampLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimestampLTE = data
		case "hasInvocations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInvocations"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInvocations = data
		case "hasInvocationsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInvocationsWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInvocationsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCumulativeMetricsWhereInput(ctx context.Context, obj any) (ent.CumulativeMetricsWhereInput, error) {
	var it ent.CumulativeMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "numAnalyses", "numAnalysesNEQ", "numAnalysesIn", "numAnalysesNotIn", "numAnalysesGT", "numAnalysesGTE", "numAnalysesLT", "numAnalysesLTE", "numAnalysesIsNil", "numAnalysesNotNil", "numBuilds", "numBuildsNEQ", "numBuildsIn", "numBuildsNotIn", "numBuildsGT", "numBuildsGTE", "numBuildsLT", "numBuildsLTE", "numBuildsIsNil", "numBuildsNotNil", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCumulativeMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCumulativeMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCumulativeMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "numAnalyses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalyses"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalyses = data
		case "numAnalysesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesNEQ = data
		case "numAnalysesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesIn = data
		case "numAnalysesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesNotIn = data
		case "numAnalysesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesGT = data
		case "numAnalysesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesGTE = data
		case "numAnalysesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesLT = data
		case "numAnalysesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesLTE = data
		case "numAnalysesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesIsNil = data
		case "numAnalysesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesNotNil = data
		case "numBuilds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuilds"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuilds = data
		case "numBuildsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsNEQ = data
		case "numBuildsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsIn = data
		case "numBuildsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsNotIn = data
		case "numBuildsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsGT = data
		case "numBuildsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsGTE = data
		case "numBuildsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsLT = data
		case "numBuildsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsLTE = data
		case "numBuildsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsIsNil = data
		case "numBuildsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEvaluationStatWhereInput(ctx context.Context, obj any) (ent.EvaluationStatWhereInput, error) {
	var it ent.EvaluationStatWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "skyfunctionName", "skyfunctionNameNEQ", "skyfunctionNameIn", "skyfunctionNameNotIn", "skyfunctionNameGT", "skyfunctionNameGTE", "skyfunctionNameLT", "skyfunctionNameLTE", "skyfunctionNameContains", "skyfunctionNameHasPrefix", "skyfunctionNameHasSuffix", "skyfunctionNameIsNil", "skyfunctionNameNotNil", "skyfunctionNameEqualFold", "skyfunctionNameContainsFold", "count", "countNEQ", "countIn", "countNotIn", "countGT", "countGTE", "countLT", "countLTE", "countIsNil", "countNotNil", "hasBuildGraphMetrics", "hasBuildGraphMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOEvaluationStatWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOEvaluationStatWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOEvaluationStatWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EvaluationStatWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EvaluationStatWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EvaluationStatWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EvaluationStatWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EvaluationStatWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EvaluationStatWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EvaluationStatWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EvaluationStatWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "skyfunctionName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionName = data
		case "skyfunctionNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameNEQ = data
		case "skyfunctionNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameIn = data
		case "skyfunctionNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameNotIn = data
		case "skyfunctionNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameGT = data
		case "skyfunctionNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameGTE = data
		case "skyfunctionNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameLT = data
		case "skyfunctionNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameLTE = data
		case "skyfunctionNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameContains = data
		case "skyfunctionNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameHasPrefix = data
		case "skyfunctionNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameHasSuffix = data
		case "skyfunctionNameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameIsNil = data
		case "skyfunctionNameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameNotNil = data
		case "skyfunctionNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameEqualFold = data
		case "skyfunctionNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skyfunctionNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkyfunctionNameContainsFold = data
		case "count":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Count = data
		case "countNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNEQ = data
		case "countIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountIn = data
		case "countNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNotIn = data
		case "countGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountGT = data
		case "countGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountGTE = data
		case "countLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountLT = data
		case "countLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountLTE = data
		case "countIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountIsNil = data
		case "countNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNotNil = data
		case "hasBuildGraphMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuildGraphMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuildGraphMetrics = data
		case "hasBuildGraphMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuildGraphMetricsWith"))
			data, err := ec.unmarshalOBuildGraphMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuildGraphMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExectionInfoWhereInput(ctx context.Context, obj any) (ent.ExectionInfoWhereInput, error) {
	var it ent.ExectionInfoWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "timeoutSeconds", "timeoutSecondsNEQ", "timeoutSecondsIn", "timeoutSecondsNotIn", "timeoutSecondsGT", "timeoutSecondsGTE", "timeoutSecondsLT", "timeoutSecondsLTE", "timeoutSecondsIsNil", "timeoutSecondsNotNil", "strategy", "strategyNEQ", "strategyIn", "strategyNotIn", "strategyGT", "strategyGTE", "strategyLT", "strategyLTE", "strategyContains", "strategyHasPrefix", "strategyHasSuffix", "strategyIsNil", "strategyNotNil", "strategyEqualFold", "strategyContainsFold", "cachedRemotely", "cachedRemotelyNEQ", "cachedRemotelyIsNil", "cachedRemotelyNotNil", "exitCode", "exitCodeNEQ", "exitCodeIn", "exitCodeNotIn", "exitCodeGT", "exitCodeGTE", "exitCodeLT", "exitCodeLTE", "exitCodeIsNil", "exitCodeNotNil", "hostname", "hostnameNEQ", "hostnameIn", "hostnameNotIn", "hostnameGT", "hostnameGTE", "hostnameLT", "hostnameLTE", "hostnameContains", "hostnameHasPrefix", "hostnameHasSuffix", "hostnameIsNil", "hostnameNotNil", "hostnameEqualFold", "hostnameContainsFold", "hasTestResult", "hasTestResultWith", "hasTimingBreakdown", "hasTimingBreakdownWith", "hasResourceUsage", "hasResourceUsageWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOExectionInfoWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOExectionInfoWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOExectionInfoWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ExectionInfoWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ExectionInfoWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ExectionInfoWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ExectionInfoWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ExectionInfoWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ExectionInfoWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ExectionInfoWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ExectionInfoWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "timeoutSeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSeconds"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSeconds = data
		case "timeoutSecondsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsNEQ = data
		case "timeoutSecondsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsIn = data
		case "timeoutSecondsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsNotIn = data
		case "timeoutSecondsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsGT = data
		case "timeoutSecondsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsGTE = data
		case "timeoutSecondsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsLT = data
		case "timeoutSecondsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsLTE = data
		case "timeoutSecondsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsIsNil = data
		case "timeoutSecondsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSecondsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutSecondsNotNil = data
		case "strategy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategy"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Strategy = data
		case "strategyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyNEQ = data
		case "strategyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyIn = data
		case "strategyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyNotIn = data
		case "strategyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyGT = data
		case "strategyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyGTE = data
		case "strategyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyLT = data
		case "strategyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyLTE = data
		case "strategyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyContains = data
		case "strategyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyHasPrefix = data
		case "strategyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyHasSuffix = data
		case "strategyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyIsNil = data
		case "strategyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyNotNil = data
		case "strategyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyEqualFold = data
		case "strategyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyContainsFold = data
		case "cachedRemotely":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedRemotely"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedRemotely = data
		case "cachedRemotelyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedRemotelyNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedRemotelyNEQ = data
		case "cachedRemotelyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedRemotelyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedRemotelyIsNil = data
		case "cachedRemotelyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedRemotelyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedRemotelyNotNil = data
		case "exitCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCode"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCode = data
		case "exitCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNEQ = data
		case "exitCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeIn = data
		case "exitCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNotIn = data
		case "exitCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeGT = data
		case "exitCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeGTE = data
		case "exitCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeLT = data
		case "exitCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeLTE = data
		case "exitCodeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeIsNil = data
		case "exitCodeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exitCodeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExitCodeNotNil = data
		case "hostname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hostname = data
		case "hostnameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameNEQ = data
		case "hostnameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameIn = data
		case "hostnameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameNotIn = data
		case "hostnameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameGT = data
		case "hostnameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameGTE = data
		case "hostnameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameLT = data
		case "hostnameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameLTE = data
		case "hostnameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameContains = data
		case "hostnameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameHasPrefix = data
		case "hostnameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameHasSuffix = data
		case "hostnameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameIsNil = data
		case "hostnameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameNotNil = data
		case "hostnameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameEqualFold = data
		case "hostnameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostnameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HostnameContainsFold = data
		case "hasTestResult":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestResult"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestResult = data
		case "hasTestResultWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestResultWith"))
			data, err := ec.unmarshalOTestResultBESWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestResultWith = data
		case "hasTimingBreakdown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTimingBreakdown"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTimingBreakdown = data
		case "hasTimingBreakdownWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTimingBreakdownWith"))
			data, err := ec.unmarshalOTimingBreakdownWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTimingBreakdownWith = data
		case "hasResourceUsage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasResourceUsage"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasResourceUsage = data
		case "hasResourceUsageWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasResourceUsageWith"))
			data, err := ec.unmarshalOResourceUsageWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasResourceUsageWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGarbageMetricsWhereInput(ctx context.Context, obj any) (ent.GarbageMetricsWhereInput, error) {
	var it ent.GarbageMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "type", "typeNEQ", "typeIn", "typeNotIn", "typeGT", "typeGTE", "typeLT", "typeLTE", "typeContains", "typeHasPrefix", "typeHasSuffix", "typeIsNil", "typeNotNil", "typeEqualFold", "typeContainsFold", "garbageCollected", "garbageCollectedNEQ", "garbageCollectedIn", "garbageCollectedNotIn", "garbageCollectedGT", "garbageCollectedGTE", "garbageCollectedLT", "garbageCollectedLTE", "garbageCollectedIsNil", "garbageCollectedNotNil", "hasMemoryMetrics", "hasMemoryMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOGarbageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOGarbageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOGarbageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "typeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeGT = data
		case "typeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeGTE = data
		case "typeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeLT = data
		case "typeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeLTE = data
		case "typeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeContains = data
		case "typeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeHasPrefix = data
		case "typeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeHasSuffix = data
		case "typeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIsNil = data
		case "typeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotNil = data
		case "typeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeEqualFold = data
		case "typeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeContainsFold = data
		case "garbageCollected":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollected"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollected = data
		case "garbageCollectedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedNEQ = data
		case "garbageCollectedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedIn = data
		case "garbageCollectedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedNotIn = data
		case "garbageCollectedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedGT = data
		case "garbageCollectedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedGTE = data
		case "garbageCollectedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedLT = data
		case "garbageCollectedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedLTE = data
		case "garbageCollectedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedIsNil = data
		case "garbageCollectedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedNotNil = data
		case "hasMemoryMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMemoryMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMemoryMetrics = data
		case "hasMemoryMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMemoryMetricsWith"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMemoryMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIncompleteBuildLogWhereInput(ctx context.Context, obj any) (ent.IncompleteBuildLogWhereInput, error) {
	var it ent.IncompleteBuildLogWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "snippetID", "snippetIDNEQ", "snippetIDIn", "snippetIDNotIn", "snippetIDGT", "snippetIDGTE", "snippetIDLT", "snippetIDLTE", "logSnippet", "logSnippetNEQ", "logSnippetIn", "logSnippetNotIn", "logSnippetGT", "logSnippetGTE", "logSnippetLT", "logSnippetLTE", "logSnippetContains", "logSnippetHasPrefix", "logSnippetHasSuffix", "logSnippetEqualFold", "logSnippetContainsFold", "hasBazelInvocation", "hasBazelInvocationWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOIncompleteBuildLogWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOIncompleteBuildLogWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOIncompleteBuildLogWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IncompleteBuildLogWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IncompleteBuildLogWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IncompleteBuildLogWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IncompleteBuildLogWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IncompleteBuildLogWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IncompleteBuildLogWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IncompleteBuildLogWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IncompleteBuildLogWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "snippetID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snippetID"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SnippetID = data
		case "snippetIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snippetIDNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SnippetIDNEQ = data
		case "snippetIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snippetIDIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SnippetIDIn = data
		case "snippetIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snippetIDNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SnippetIDNotIn = data
		case "snippetIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snippetIDGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SnippetIDGT = data
		case "snippetIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snippetIDGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SnippetIDGTE = data
		case "snippetIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snippetIDLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SnippetIDLT = data
		case "snippetIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snippetIDLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SnippetIDLTE = data
		case "logSnippet":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippet"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippet = data
		case "logSnippetNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetNEQ = data
		case "logSnippetIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetIn = data
		case "logSnippetNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetNotIn = data
		case "logSnippetGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetGT = data
		case "logSnippetGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetGTE = data
		case "logSnippetLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetLT = data
		case "logSnippetLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetLTE = data
		case "logSnippetContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetContains = data
		case "logSnippetHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetHasPrefix = data
		case "logSnippetHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetHasSuffix = data
		case "logSnippetEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetEqualFold = data
		case "logSnippetContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logSnippetContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogSnippetContainsFold = data
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvocationFilesWhereInput(ctx context.Context, obj any) (ent.InvocationFilesWhereInput, error) {
	var it ent.InvocationFilesWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "content", "contentNEQ", "contentIn", "contentNotIn", "contentGT", "contentGTE", "contentLT", "contentLTE", "contentContains", "contentHasPrefix", "contentHasSuffix", "contentIsNil", "contentNotNil", "contentEqualFold", "contentContainsFold", "digest", "digestNEQ", "digestIn", "digestNotIn", "digestGT", "digestGTE", "digestLT", "digestLTE", "digestContains", "digestHasPrefix", "digestHasSuffix", "digestIsNil", "digestNotNil", "digestEqualFold", "digestContainsFold", "sizeBytes", "sizeBytesNEQ", "sizeBytesIn", "sizeBytesNotIn", "sizeBytesGT", "sizeBytesGTE", "sizeBytesLT", "sizeBytesLTE", "sizeBytesIsNil", "sizeBytesNotNil", "digestFunction", "digestFunctionNEQ", "digestFunctionIn", "digestFunctionNotIn", "digestFunctionGT", "digestFunctionGTE", "digestFunctionLT", "digestFunctionLTE", "digestFunctionContains", "digestFunctionHasPrefix", "digestFunctionHasSuffix", "digestFunctionIsNil", "digestFunctionNotNil", "digestFunctionEqualFold", "digestFunctionContainsFold", "hasBazelInvocation", "hasBazelInvocationWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOInvocationFilesWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOInvocationFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOInvocationFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.InvocationFilesWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.InvocationFilesWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.InvocationFilesWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.InvocationFilesWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.InvocationFilesWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.InvocationFilesWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.InvocationFilesWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.InvocationFilesWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "contentNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentNEQ = data
		case "contentIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentIn = data
		case "contentNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentNotIn = data
		case "contentGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentGT = data
		case "contentGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentGTE = data
		case "contentLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentLT = data
		case "contentLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentLTE = data
		case "contentContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentContains = data
		case "contentHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentHasPrefix = data
		case "contentHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentHasSuffix = data
		case "contentIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentIsNil = data
		case "contentNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentNotNil = data
		case "contentEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentEqualFold = data
		case "contentContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentContainsFold = data
		case "digest":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digest"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Digest = data
		case "digestNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestNEQ = data
		case "digestIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestIn = data
		case "digestNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestNotIn = data
		case "digestGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestGT = data
		case "digestGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestGTE = data
		case "digestLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestLT = data
		case "digestLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestLTE = data
		case "digestContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestContains = data
		case "digestHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestHasPrefix = data
		case "digestHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestHasSuffix = data
		case "digestIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestIsNil = data
		case "digestNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestNotNil = data
		case "digestEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestEqualFold = data
		case "digestContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestContainsFold = data
		case "sizeBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytes = data
		case "sizeBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNEQ = data
		case "sizeBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesIn = data
		case "sizeBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNotIn = data
		case "sizeBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesGT = data
		case "sizeBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesGTE = data
		case "sizeBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesLT = data
		case "sizeBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesLTE = data
		case "sizeBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesIsNil = data
		case "sizeBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNotNil = data
		case "digestFunction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunction"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunction = data
		case "digestFunctionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionNEQ = data
		case "digestFunctionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionIn = data
		case "digestFunctionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionNotIn = data
		case "digestFunctionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionGT = data
		case "digestFunctionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionGTE = data
		case "digestFunctionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionLT = data
		case "digestFunctionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionLTE = data
		case "digestFunctionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionContains = data
		case "digestFunctionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionHasPrefix = data
		case "digestFunctionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionHasSuffix = data
		case "digestFunctionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionIsNil = data
		case "digestFunctionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionNotNil = data
		case "digestFunctionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionEqualFold = data
		case "digestFunctionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestFunctionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestFunctionContainsFold = data
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMemoryMetricsWhereInput(ctx context.Context, obj any) (ent.MemoryMetricsWhereInput, error) {
	var it ent.MemoryMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "peakPostGcHeapSize", "peakPostGcHeapSizeNEQ", "peakPostGcHeapSizeIn", "peakPostGcHeapSizeNotIn", "peakPostGcHeapSizeGT", "peakPostGcHeapSizeGTE", "peakPostGcHeapSizeLT", "peakPostGcHeapSizeLTE", "peakPostGcHeapSizeIsNil", "peakPostGcHeapSizeNotNil", "usedHeapSizePostBuild", "usedHeapSizePostBuildNEQ", "usedHeapSizePostBuildIn", "usedHeapSizePostBuildNotIn", "usedHeapSizePostBuildGT", "usedHeapSizePostBuildGTE", "usedHeapSizePostBuildLT", "usedHeapSizePostBuildLTE", "usedHeapSizePostBuildIsNil", "usedHeapSizePostBuildNotNil", "peakPostGcTenuredSpaceHeapSize", "peakPostGcTenuredSpaceHeapSizeNEQ", "peakPostGcTenuredSpaceHeapSizeIn", "peakPostGcTenuredSpaceHeapSizeNotIn", "peakPostGcTenuredSpaceHeapSizeGT", "peakPostGcTenuredSpaceHeapSizeGTE", "peakPostGcTenuredSpaceHeapSizeLT", "peakPostGcTenuredSpaceHeapSizeLTE", "peakPostGcTenuredSpaceHeapSizeIsNil", "peakPostGcTenuredSpaceHeapSizeNotNil", "hasMetrics", "hasMetricsWith", "hasGarbageMetrics", "hasGarbageMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "peakPostGcHeapSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSize"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSize = data
		case "peakPostGcHeapSizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeNEQ = data
		case "peakPostGcHeapSizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeIn = data
		case "peakPostGcHeapSizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeNotIn = data
		case "peakPostGcHeapSizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeGT = data
		case "peakPostGcHeapSizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeGTE = data
		case "peakPostGcHeapSizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeLT = data
		case "peakPostGcHeapSizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeLTE = data
		case "peakPostGcHeapSizeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeIsNil = data
		case "peakPostGcHeapSizeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeNotNil = data
		case "usedHeapSizePostBuild":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuild"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuild = data
		case "usedHeapSizePostBuildNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildNEQ = data
		case "usedHeapSizePostBuildIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildIn = data
		case "usedHeapSizePostBuildNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildNotIn = data
		case "usedHeapSizePostBuildGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildGT = data
		case "usedHeapSizePostBuildGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildGTE = data
		case "usedHeapSizePostBuildLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildLT = data
		case "usedHeapSizePostBuildLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildLTE = data
		case "usedHeapSizePostBuildIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildIsNil = data
		case "usedHeapSizePostBuildNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildNotNil = data
		case "peakPostGcTenuredSpaceHeapSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSize"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSize = data
		case "peakPostGcTenuredSpaceHeapSizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeNEQ = data
		case "peakPostGcTenuredSpaceHeapSizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeIn = data
		case "peakPostGcTenuredSpaceHeapSizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeNotIn = data
		case "peakPostGcTenuredSpaceHeapSizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeGT = data
		case "peakPostGcTenuredSpaceHeapSizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeGTE = data
		case "peakPostGcTenuredSpaceHeapSizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeLT = data
		case "peakPostGcTenuredSpaceHeapSizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeLTE = data
		case "peakPostGcTenuredSpaceHeapSizeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeIsNil = data
		case "peakPostGcTenuredSpaceHeapSizeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasGarbageMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasGarbageMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasGarbageMetrics = data
		case "hasGarbageMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasGarbageMetricsWith"))
			data, err := ec.unmarshalOGarbageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasGarbageMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetricsWhereInput(ctx context.Context, obj any) (ent.MetricsWhereInput, error) {
	var it ent.MetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "hasBazelInvocation", "hasBazelInvocationWith", "hasActionSummary", "hasActionSummaryWith", "hasMemoryMetrics", "hasMemoryMetricsWith", "hasTargetMetrics", "hasTargetMetricsWith", "hasPackageMetrics", "hasPackageMetricsWith", "hasTimingMetrics", "hasTimingMetricsWith", "hasCumulativeMetrics", "hasCumulativeMetricsWith", "hasArtifactMetrics", "hasArtifactMetricsWith", "hasNetworkMetrics", "hasNetworkMetricsWith", "hasBuildGraphMetrics", "hasBuildGraphMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		case "hasActionSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummary = data
		case "hasActionSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummaryWith"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummaryWith = data
		case "hasMemoryMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMemoryMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMemoryMetrics = data
		case "hasMemoryMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMemoryMetricsWith"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMemoryMetricsWith = data
		case "hasTargetMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTargetMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTargetMetrics = data
		case "hasTargetMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTargetMetricsWith"))
			data, err := ec.unmarshalOTargetMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTargetMetricsWith = data
		case "hasPackageMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageMetrics = data
		case "hasPackageMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageMetricsWith"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageMetricsWith = data
		case "hasTimingMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTimingMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTimingMetrics = data
		case "hasTimingMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTimingMetricsWith"))
			data, err := ec.unmarshalOTimingMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTimingMetricsWith = data
		case "hasCumulativeMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCumulativeMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCumulativeMetrics = data
		case "hasCumulativeMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCumulativeMetricsWith"))
			data, err := ec.unmarshalOCumulativeMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCumulativeMetricsWith = data
		case "hasArtifactMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifactMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArtifactMetrics = data
		case "hasArtifactMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifactMetricsWith"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArtifactMetricsWith = data
		case "hasNetworkMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNetworkMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNetworkMetrics = data
		case "hasNetworkMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNetworkMetricsWith"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNetworkMetricsWith = data
		case "hasBuildGraphMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuildGraphMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuildGraphMetrics = data
		case "hasBuildGraphMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuildGraphMetricsWith"))
			data, err := ec.unmarshalOBuildGraphMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuildGraphMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMissDetailWhereInput(ctx context.Context, obj any) (ent.MissDetailWhereInput, error) {
	var it ent.MissDetailWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "reason", "reasonNEQ", "reasonIn", "reasonNotIn", "reasonIsNil", "reasonNotNil", "count", "countNEQ", "countIn", "countNotIn", "countGT", "countGTE", "countLT", "countLTE", "countIsNil", "countNotNil", "hasActionCacheStatistics", "hasActionCacheStatisticsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOMissDetailWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOMissDetailWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOMissDetailWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOMissDetailReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "reasonNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNEQ"))
			data, err := ec.unmarshalOMissDetailReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNEQ = data
		case "reasonIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIn"))
			data, err := ec.unmarshalOMissDetailReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIn = data
		case "reasonNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotIn"))
			data, err := ec.unmarshalOMissDetailReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotIn = data
		case "reasonIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIsNil = data
		case "reasonNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotNil = data
		case "count":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Count = data
		case "countNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNEQ = data
		case "countIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountIn = data
		case "countNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNotIn = data
		case "countGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountGT = data
		case "countGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountGTE = data
		case "countLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountLT = data
		case "countLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountLTE = data
		case "countIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountIsNil = data
		case "countNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNotNil = data
		case "hasActionCacheStatistics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionCacheStatistics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionCacheStatistics = data
		case "hasActionCacheStatisticsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionCacheStatisticsWith"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionCacheStatisticsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNamedSetOfFilesWhereInput(ctx context.Context, obj any) (ent.NamedSetOfFilesWhereInput, error) {
	var it ent.NamedSetOfFilesWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "hasOutputGroup", "hasOutputGroupWith", "hasFiles", "hasFilesWith", "hasFileSets", "hasFileSetsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalONamedSetOfFilesWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalONamedSetOfFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalONamedSetOfFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NamedSetOfFilesWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NamedSetOfFilesWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NamedSetOfFilesWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NamedSetOfFilesWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NamedSetOfFilesWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NamedSetOfFilesWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NamedSetOfFilesWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NamedSetOfFilesWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "hasOutputGroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOutputGroup"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasOutputGroup = data
		case "hasOutputGroupWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOutputGroupWith"))
			data, err := ec.unmarshalOOutputGroupWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroupWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasOutputGroupWith = data
		case "hasFiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFiles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFiles = data
		case "hasFilesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFilesWith"))
			data, err := ec.unmarshalOTestFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFilesWith = data
		case "hasFileSets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFileSets"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFileSets = data
		case "hasFileSetsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFileSetsWith"))
			data, err := ec.unmarshalONamedSetOfFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFileSetsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNetworkMetricsWhereInput(ctx context.Context, obj any) (ent.NetworkMetricsWhereInput, error) {
	var it ent.NetworkMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "hasMetrics", "hasMetricsWith", "hasSystemNetworkStats", "hasSystemNetworkStatsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasSystemNetworkStats":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSystemNetworkStats"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSystemNetworkStats = data
		case "hasSystemNetworkStatsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSystemNetworkStatsWith"))
			data, err := ec.unmarshalOSystemNetworkStatsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSystemNetworkStatsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOutputGroupWhereInput(ctx context.Context, obj any) (ent.OutputGroupWhereInput, error) {
	var it ent.OutputGroupWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "incomplete", "incompleteNEQ", "incompleteIsNil", "incompleteNotNil", "hasInlineFiles", "hasInlineFilesWith", "hasFileSets", "hasFileSetsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOOutputGroupWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroupWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOOutputGroupWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroupWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOOutputGroupWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroupWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.OutputGroupWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.OutputGroupWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.OutputGroupWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.OutputGroupWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.OutputGroupWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.OutputGroupWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.OutputGroupWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.OutputGroupWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "incomplete":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incomplete"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Incomplete = data
		case "incompleteNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompleteNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteNEQ = data
		case "incompleteIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompleteIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteIsNil = data
		case "incompleteNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompleteNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncompleteNotNil = data
		case "hasInlineFiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInlineFiles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInlineFiles = data
		case "hasInlineFilesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInlineFilesWith"))
			data, err := ec.unmarshalOTestFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInlineFilesWith = data
		case "hasFileSets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFileSets"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFileSets = data
		case "hasFileSetsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFileSetsWith"))
			data, err := ec.unmarshalONamedSetOfFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFileSetsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPackageLoadMetricsWhereInput(ctx context.Context, obj any) (ent.PackageLoadMetricsWhereInput, error) {
	var it ent.PackageLoadMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "loadDuration", "loadDurationNEQ", "loadDurationIn", "loadDurationNotIn", "loadDurationGT", "loadDurationGTE", "loadDurationLT", "loadDurationLTE", "loadDurationIsNil", "loadDurationNotNil", "numTargets", "numTargetsNEQ", "numTargetsIn", "numTargetsNotIn", "numTargetsGT", "numTargetsGTE", "numTargetsLT", "numTargetsLTE", "numTargetsIsNil", "numTargetsNotNil", "computationSteps", "computationStepsNEQ", "computationStepsIn", "computationStepsNotIn", "computationStepsGT", "computationStepsGTE", "computationStepsLT", "computationStepsLTE", "computationStepsIsNil", "computationStepsNotNil", "numTransitiveLoads", "numTransitiveLoadsNEQ", "numTransitiveLoadsIn", "numTransitiveLoadsNotIn", "numTransitiveLoadsGT", "numTransitiveLoadsGTE", "numTransitiveLoadsLT", "numTransitiveLoadsLTE", "numTransitiveLoadsIsNil", "numTransitiveLoadsNotNil", "packageOverhead", "packageOverheadNEQ", "packageOverheadIn", "packageOverheadNotIn", "packageOverheadGT", "packageOverheadGTE", "packageOverheadLT", "packageOverheadLTE", "packageOverheadIsNil", "packageOverheadNotNil", "hasPackageMetrics", "hasPackageMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPackageLoadMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPackageLoadMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPackageLoadMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "loadDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDuration"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDuration = data
		case "loadDurationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationNEQ = data
		case "loadDurationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationIn = data
		case "loadDurationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationNotIn = data
		case "loadDurationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationGT = data
		case "loadDurationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationGTE = data
		case "loadDurationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationLT = data
		case "loadDurationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationLTE = data
		case "loadDurationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationIsNil = data
		case "loadDurationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationNotNil = data
		case "numTargets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargets"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargets = data
		case "numTargetsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsNEQ = data
		case "numTargetsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsIn = data
		case "numTargetsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsNotIn = data
		case "numTargetsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsGT = data
		case "numTargetsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsGTE = data
		case "numTargetsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsLT = data
		case "numTargetsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsLTE = data
		case "numTargetsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsIsNil = data
		case "numTargetsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsNotNil = data
		case "computationSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationSteps"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationSteps = data
		case "computationStepsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsNEQ = data
		case "computationStepsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsIn = data
		case "computationStepsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsNotIn = data
		case "computationStepsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsGT = data
		case "computationStepsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsGTE = data
		case "computationStepsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsLT = data
		case "computationStepsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsLTE = data
		case "computationStepsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsIsNil = data
		case "computationStepsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsNotNil = data
		case "numTransitiveLoads":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoads"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoads = data
		case "numTransitiveLoadsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsNEQ = data
		case "numTransitiveLoadsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsIn = data
		case "numTransitiveLoadsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsNotIn = data
		case "numTransitiveLoadsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsGT = data
		case "numTransitiveLoadsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsGTE = data
		case "numTransitiveLoadsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsLT = data
		case "numTransitiveLoadsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsLTE = data
		case "numTransitiveLoadsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsIsNil = data
		case "numTransitiveLoadsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsNotNil = data
		case "packageOverhead":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverhead"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverhead = data
		case "packageOverheadNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadNEQ = data
		case "packageOverheadIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadIn = data
		case "packageOverheadNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadNotIn = data
		case "packageOverheadGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadGT = data
		case "packageOverheadGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadGTE = data
		case "packageOverheadLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadLT = data
		case "packageOverheadLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadLTE = data
		case "packageOverheadIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadIsNil = data
		case "packageOverheadNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadNotNil = data
		case "hasPackageMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageMetrics = data
		case "hasPackageMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageMetricsWith"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPackageMetricsWhereInput(ctx context.Context, obj any) (ent.PackageMetricsWhereInput, error) {
	var it ent.PackageMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "packagesLoaded", "packagesLoadedNEQ", "packagesLoadedIn", "packagesLoadedNotIn", "packagesLoadedGT", "packagesLoadedGTE", "packagesLoadedLT", "packagesLoadedLTE", "packagesLoadedIsNil", "packagesLoadedNotNil", "hasMetrics", "hasMetricsWith", "hasPackageLoadMetrics", "hasPackageLoadMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "packagesLoaded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoaded"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoaded = data
		case "packagesLoadedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedNEQ = data
		case "packagesLoadedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedIn = data
		case "packagesLoadedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedNotIn = data
		case "packagesLoadedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedGT = data
		case "packagesLoadedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedGTE = data
		case "packagesLoadedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedLT = data
		case "packagesLoadedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedLTE = data
		case "packagesLoadedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedIsNil = data
		case "packagesLoadedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasPackageLoadMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageLoadMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageLoadMetrics = data
		case "hasPackageLoadMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageLoadMetricsWith"))
			data, err := ec.unmarshalOPackageLoadMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageLoadMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResourceUsageWhereInput(ctx context.Context, obj any) (ent.ResourceUsageWhereInput, error) {
	var it ent.ResourceUsageWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "value", "valueNEQ", "valueIn", "valueNotIn", "valueGT", "valueGTE", "valueLT", "valueLTE", "valueContains", "valueHasPrefix", "valueHasSuffix", "valueIsNil", "valueNotNil", "valueEqualFold", "valueContainsFold", "hasExecutionInfo", "hasExecutionInfoWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOResourceUsageWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOResourceUsageWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOResourceUsageWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ResourceUsageWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ResourceUsageWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ResourceUsageWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ResourceUsageWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ResourceUsageWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ResourceUsageWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ResourceUsageWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ResourceUsageWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "valueNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueNEQ = data
		case "valueIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueIn = data
		case "valueNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueNotIn = data
		case "valueGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueGT = data
		case "valueGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueGTE = data
		case "valueLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueLT = data
		case "valueLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueLTE = data
		case "valueContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueContains = data
		case "valueHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueHasPrefix = data
		case "valueHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueHasSuffix = data
		case "valueIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueIsNil = data
		case "valueNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueNotNil = data
		case "valueEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueEqualFold = data
		case "valueContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueContainsFold = data
		case "hasExecutionInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasExecutionInfo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasExecutionInfo = data
		case "hasExecutionInfoWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasExecutionInfoWith"))
			data, err := ec.unmarshalOExectionInfoWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasExecutionInfoWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRunnerCountWhereInput(ctx context.Context, obj any) (ent.RunnerCountWhereInput, error) {
	var it ent.RunnerCountWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "execKind", "execKindNEQ", "execKindIn", "execKindNotIn", "execKindGT", "execKindGTE", "execKindLT", "execKindLTE", "execKindContains", "execKindHasPrefix", "execKindHasSuffix", "execKindIsNil", "execKindNotNil", "execKindEqualFold", "execKindContainsFold", "actionsExecuted", "actionsExecutedNEQ", "actionsExecutedIn", "actionsExecutedNotIn", "actionsExecutedGT", "actionsExecutedGTE", "actionsExecutedLT", "actionsExecutedLTE", "actionsExecutedIsNil", "actionsExecutedNotNil", "hasActionSummary", "hasActionSummaryWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalORunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalORunnerCountWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalORunnerCountWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "execKind":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKind"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKind = data
		case "execKindNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindNEQ = data
		case "execKindIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindIn = data
		case "execKindNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindNotIn = data
		case "execKindGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindGT = data
		case "execKindGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindGTE = data
		case "execKindLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindLT = data
		case "execKindLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindLTE = data
		case "execKindContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindContains = data
		case "execKindHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindHasPrefix = data
		case "execKindHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindHasSuffix = data
		case "execKindIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindIsNil = data
		case "execKindNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindNotNil = data
		case "execKindEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindEqualFold = data
		case "execKindContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindContainsFold = data
		case "actionsExecuted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecuted"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecuted = data
		case "actionsExecutedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNEQ = data
		case "actionsExecutedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIn = data
		case "actionsExecutedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotIn = data
		case "actionsExecutedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGT = data
		case "actionsExecutedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGTE = data
		case "actionsExecutedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLT = data
		case "actionsExecutedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLTE = data
		case "actionsExecutedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIsNil = data
		case "actionsExecutedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotNil = data
		case "hasActionSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummary = data
		case "hasActionSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummaryWith"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummaryWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSourceControlWhereInput(ctx context.Context, obj any) (ent.SourceControlWhereInput, error) {
	var it ent.SourceControlWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "provider", "providerNEQ", "providerIn", "providerNotIn", "providerIsNil", "providerNotNil", "instanceURL", "instanceURLNEQ", "instanceURLIn", "instanceURLNotIn", "instanceURLGT", "instanceURLGTE", "instanceURLLT", "instanceURLLTE", "instanceURLContains", "instanceURLHasPrefix", "instanceURLHasSuffix", "instanceURLIsNil", "instanceURLNotNil", "instanceURLEqualFold", "instanceURLContainsFold", "repo", "repoNEQ", "repoIn", "repoNotIn", "repoGT", "repoGTE", "repoLT", "repoLTE", "repoContains", "repoHasPrefix", "repoHasSuffix", "repoIsNil", "repoNotNil", "repoEqualFold", "repoContainsFold", "refs", "refsNEQ", "refsIn", "refsNotIn", "refsGT", "refsGTE", "refsLT", "refsLTE", "refsContains", "refsHasPrefix", "refsHasSuffix", "refsIsNil", "refsNotNil", "refsEqualFold", "refsContainsFold", "commitSha", "commitShaNEQ", "commitShaIn", "commitShaNotIn", "commitShaGT", "commitShaGTE", "commitShaLT", "commitShaLTE", "commitShaContains", "commitShaHasPrefix", "commitShaHasSuffix", "commitShaIsNil", "commitShaNotNil", "commitShaEqualFold", "commitShaContainsFold", "actor", "actorNEQ", "actorIn", "actorNotIn", "actorGT", "actorGTE", "actorLT", "actorLTE", "actorContains", "actorHasPrefix", "actorHasSuffix", "actorIsNil", "actorNotNil", "actorEqualFold", "actorContainsFold", "eventName", "eventNameNEQ", "eventNameIn", "eventNameNotIn", "eventNameGT", "eventNameGTE", "eventNameLT", "eventNameLTE", "eventNameContains", "eventNameHasPrefix", "eventNameHasSuffix", "eventNameIsNil", "eventNameNotNil", "eventNameEqualFold", "eventNameContainsFold", "workflow", "workflowNEQ", "workflowIn", "workflowNotIn", "workflowGT", "workflowGTE", "workflowLT", "workflowLTE", "workflowContains", "workflowHasPrefix", "workflowHasSuffix", "workflowIsNil", "workflowNotNil", "workflowEqualFold", "workflowContainsFold", "runID", "runIDNEQ", "runIDIn", "runIDNotIn", "runIDGT", "runIDGTE", "runIDLT", "runIDLTE", "runIDContains", "runIDHasPrefix", "runIDHasSuffix", "runIDIsNil", "runIDNotNil", "runIDEqualFold", "runIDContainsFold", "runNumber", "runNumberNEQ", "runNumberIn", "runNumberNotIn", "runNumberGT", "runNumberGTE", "runNumberLT", "runNumberLTE", "runNumberContains", "runNumberHasPrefix", "runNumberHasSuffix", "runNumberIsNil", "runNumberNotNil", "runNumberEqualFold", "runNumberContainsFold", "job", "jobNEQ", "jobIn", "jobNotIn", "jobGT", "jobGTE", "jobLT", "jobLTE", "jobContains", "jobHasPrefix", "jobHasSuffix", "jobIsNil", "jobNotNil", "jobEqualFold", "jobContainsFold", "action", "actionNEQ", "actionIn", "actionNotIn", "actionGT", "actionGTE", "actionLT", "actionLTE", "actionContains", "actionHasPrefix", "actionHasSuffix", "actionIsNil", "actionNotNil", "actionEqualFold", "actionContainsFold", "runnerName", "runnerNameNEQ", "runnerNameIn", "runnerNameNotIn", "runnerNameGT", "runnerNameGTE", "runnerNameLT", "runnerNameLTE", "runnerNameContains", "runnerNameHasPrefix", "runnerNameHasSuffix", "runnerNameIsNil", "runnerNameNotNil", "runnerNameEqualFold", "runnerNameContainsFold", "runnerArch", "runnerArchNEQ", "runnerArchIn", "runnerArchNotIn", "runnerArchGT", "runnerArchGTE", "runnerArchLT", "runnerArchLTE", "runnerArchContains", "runnerArchHasPrefix", "runnerArchHasSuffix", "runnerArchIsNil", "runnerArchNotNil", "runnerArchEqualFold", "runnerArchContainsFold", "runnerOs", "runnerOsNEQ", "runnerOsIn", "runnerOsNotIn", "runnerOsGT", "runnerOsGTE", "runnerOsLT", "runnerOsLTE", "runnerOsContains", "runnerOsHasPrefix", "runnerOsHasSuffix", "runnerOsIsNil", "runnerOsNotNil", "runnerOsEqualFold", "runnerOsContainsFold", "workspace", "workspaceNEQ", "workspaceIn", "workspaceNotIn", "workspaceGT", "workspaceGTE", "workspaceLT", "workspaceLTE", "workspaceContains", "workspaceHasPrefix", "workspaceHasSuffix", "workspaceIsNil", "workspaceNotNil", "workspaceEqualFold", "workspaceContainsFold", "hasBazelInvocation", "hasBazelInvocationWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOSourceControlWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControlWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOSourceControlWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControlWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOSourceControlWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControlWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SourceControlWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SourceControlWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SourceControlWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SourceControlWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SourceControlWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SourceControlWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SourceControlWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SourceControlWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalOSourceControlProvider2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "providerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerNEQ"))
			data, err := ec.unmarshalOSourceControlProvider2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderNEQ = data
		case "providerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIn"))
			data, err := ec.unmarshalOSourceControlProvider2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProviderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderIn = data
		case "providerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerNotIn"))
			data, err := ec.unmarshalOSourceControlProvider2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProviderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderNotIn = data
		case "providerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderIsNil = data
		case "providerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderNotNil = data
		case "instanceURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURL = data
		case "instanceURLNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLNEQ = data
		case "instanceURLIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLIn = data
		case "instanceURLNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLNotIn = data
		case "instanceURLGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLGT = data
		case "instanceURLGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLGTE = data
		case "instanceURLLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLLT = data
		case "instanceURLLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLLTE = data
		case "instanceURLContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLContains = data
		case "instanceURLHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLHasPrefix = data
		case "instanceURLHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLHasSuffix = data
		case "instanceURLIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLIsNil = data
		case "instanceURLNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLNotNil = data
		case "instanceURLEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLEqualFold = data
		case "instanceURLContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceURLContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstanceURLContainsFold = data
		case "repo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Repo = data
		case "repoNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoNEQ = data
		case "repoIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoIn = data
		case "repoNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoNotIn = data
		case "repoGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoGT = data
		case "repoGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoGTE = data
		case "repoLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoLT = data
		case "repoLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoLTE = data
		case "repoContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoContains = data
		case "repoHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoHasPrefix = data
		case "repoHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoHasSuffix = data
		case "repoIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoIsNil = data
		case "repoNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoNotNil = data
		case "repoEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoEqualFold = data
		case "repoContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repoContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepoContainsFold = data
		case "refs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refs"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Refs = data
		case "refsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsNEQ = data
		case "refsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsIn = data
		case "refsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsNotIn = data
		case "refsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsGT = data
		case "refsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsGTE = data
		case "refsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsLT = data
		case "refsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsLTE = data
		case "refsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsContains = data
		case "refsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsHasPrefix = data
		case "refsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsHasSuffix = data
		case "refsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsIsNil = data
		case "refsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsNotNil = data
		case "refsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsEqualFold = data
		case "refsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefsContainsFold = data
		case "commitSha":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitSha"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitSha = data
		case "commitShaNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaNEQ = data
		case "commitShaIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaIn = data
		case "commitShaNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaNotIn = data
		case "commitShaGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaGT = data
		case "commitShaGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaGTE = data
		case "commitShaLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaLT = data
		case "commitShaLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaLTE = data
		case "commitShaContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaContains = data
		case "commitShaHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaHasPrefix = data
		case "commitShaHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaHasSuffix = data
		case "commitShaIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaIsNil = data
		case "commitShaNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaNotNil = data
		case "commitShaEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaEqualFold = data
		case "commitShaContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitShaContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommitShaContainsFold = data
		case "actor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Actor = data
		case "actorNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorNEQ = data
		case "actorIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorIn = data
		case "actorNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorNotIn = data
		case "actorGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorGT = data
		case "actorGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorGTE = data
		case "actorLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorLT = data
		case "actorLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorLTE = data
		case "actorContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorContains = data
		case "actorHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorHasPrefix = data
		case "actorHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorHasSuffix = data
		case "actorIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorIsNil = data
		case "actorNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorNotNil = data
		case "actorEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorEqualFold = data
		case "actorContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actorContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActorContainsFold = data
		case "eventName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventName = data
		case "eventNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameNEQ = data
		case "eventNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameIn = data
		case "eventNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameNotIn = data
		case "eventNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameGT = data
		case "eventNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameGTE = data
		case "eventNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameLT = data
		case "eventNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameLTE = data
		case "eventNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameContains = data
		case "eventNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameHasPrefix = data
		case "eventNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameHasSuffix = data
		case "eventNameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameIsNil = data
		case "eventNameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameNotNil = data
		case "eventNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameEqualFold = data
		case "eventNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventNameContainsFold = data
		case "workflow":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflow"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Workflow = data
		case "workflowNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowNEQ = data
		case "workflowIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowIn = data
		case "workflowNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowNotIn = data
		case "workflowGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowGT = data
		case "workflowGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowGTE = data
		case "workflowLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowLT = data
		case "workflowLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowLTE = data
		case "workflowContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowContains = data
		case "workflowHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowHasPrefix = data
		case "workflowHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowHasSuffix = data
		case "workflowIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowIsNil = data
		case "workflowNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowNotNil = data
		case "workflowEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowEqualFold = data
		case "workflowContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workflowContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkflowContainsFold = data
		case "runID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunID = data
		case "runIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDNEQ = data
		case "runIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDIn = data
		case "runIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDNotIn = data
		case "runIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDGT = data
		case "runIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDGTE = data
		case "runIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDLT = data
		case "runIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDLTE = data
		case "runIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDContains = data
		case "runIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDHasPrefix = data
		case "runIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDHasSuffix = data
		case "runIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDIsNil = data
		case "runIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDNotNil = data
		case "runIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDEqualFold = data
		case "runIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunIDContainsFold = data
		case "runNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumber = data
		case "runNumberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberNEQ = data
		case "runNumberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberIn = data
		case "runNumberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberNotIn = data
		case "runNumberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberGT = data
		case "runNumberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberGTE = data
		case "runNumberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberLT = data
		case "runNumberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberLTE = data
		case "runNumberContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberContains = data
		case "runNumberHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberHasPrefix = data
		case "runNumberHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberHasSuffix = data
		case "runNumberIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberIsNil = data
		case "runNumberNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberNotNil = data
		case "runNumberEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberEqualFold = data
		case "runNumberContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runNumberContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunNumberContainsFold = data
		case "job":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Job = data
		case "jobNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobNEQ = data
		case "jobIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobIn = data
		case "jobNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobNotIn = data
		case "jobGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobGT = data
		case "jobGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobGTE = data
		case "jobLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobLT = data
		case "jobLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobLTE = data
		case "jobContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobContains = data
		case "jobHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobHasPrefix = data
		case "jobHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobHasSuffix = data
		case "jobIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobIsNil = data
		case "jobNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobNotNil = data
		case "jobEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobEqualFold = data
		case "jobContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobContainsFold = data
		case "action":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Action = data
		case "actionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionNEQ = data
		case "actionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionIn = data
		case "actionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionNotIn = data
		case "actionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionGT = data
		case "actionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionGTE = data
		case "actionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLT = data
		case "actionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionLTE = data
		case "actionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionContains = data
		case "actionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionHasPrefix = data
		case "actionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionHasSuffix = data
		case "actionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionIsNil = data
		case "actionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionNotNil = data
		case "actionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionEqualFold = data
		case "actionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionContainsFold = data
		case "runnerName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerName = data
		case "runnerNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameNEQ = data
		case "runnerNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameIn = data
		case "runnerNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameNotIn = data
		case "runnerNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameGT = data
		case "runnerNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameGTE = data
		case "runnerNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameLT = data
		case "runnerNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameLTE = data
		case "runnerNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameContains = data
		case "runnerNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameHasPrefix = data
		case "runnerNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameHasSuffix = data
		case "runnerNameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameIsNil = data
		case "runnerNameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameNotNil = data
		case "runnerNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameEqualFold = data
		case "runnerNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerNameContainsFold = data
		case "runnerArch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArch"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArch = data
		case "runnerArchNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchNEQ = data
		case "runnerArchIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchIn = data
		case "runnerArchNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchNotIn = data
		case "runnerArchGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchGT = data
		case "runnerArchGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchGTE = data
		case "runnerArchLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchLT = data
		case "runnerArchLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchLTE = data
		case "runnerArchContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchContains = data
		case "runnerArchHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchHasPrefix = data
		case "runnerArchHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchHasSuffix = data
		case "runnerArchIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchIsNil = data
		case "runnerArchNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchNotNil = data
		case "runnerArchEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchEqualFold = data
		case "runnerArchContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerArchContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerArchContainsFold = data
		case "runnerOs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOs"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOs = data
		case "runnerOsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsNEQ = data
		case "runnerOsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsIn = data
		case "runnerOsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsNotIn = data
		case "runnerOsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsGT = data
		case "runnerOsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsGTE = data
		case "runnerOsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsLT = data
		case "runnerOsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsLTE = data
		case "runnerOsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsContains = data
		case "runnerOsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsHasPrefix = data
		case "runnerOsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsHasSuffix = data
		case "runnerOsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsIsNil = data
		case "runnerOsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsNotNil = data
		case "runnerOsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsEqualFold = data
		case "runnerOsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runnerOsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunnerOsContainsFold = data
		case "workspace":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspace"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Workspace = data
		case "workspaceNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceNEQ = data
		case "workspaceIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceIn = data
		case "workspaceNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceNotIn = data
		case "workspaceGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceGT = data
		case "workspaceGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceGTE = data
		case "workspaceLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceLT = data
		case "workspaceLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceLTE = data
		case "workspaceContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceContains = data
		case "workspaceHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceHasPrefix = data
		case "workspaceHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceHasSuffix = data
		case "workspaceIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceIsNil = data
		case "workspaceNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceNotNil = data
		case "workspaceEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceEqualFold = data
		case "workspaceContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspaceContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkspaceContainsFold = data
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemNetworkStatsWhereInput(ctx context.Context, obj any) (ent.SystemNetworkStatsWhereInput, error) {
	var it ent.SystemNetworkStatsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "bytesSent", "bytesSentNEQ", "bytesSentIn", "bytesSentNotIn", "bytesSentGT", "bytesSentGTE", "bytesSentLT", "bytesSentLTE", "bytesSentIsNil", "bytesSentNotNil", "bytesRecv", "bytesRecvNEQ", "bytesRecvIn", "bytesRecvNotIn", "bytesRecvGT", "bytesRecvGTE", "bytesRecvLT", "bytesRecvLTE", "bytesRecvIsNil", "bytesRecvNotNil", "packetsSent", "packetsSentNEQ", "packetsSentIn", "packetsSentNotIn", "packetsSentGT", "packetsSentGTE", "packetsSentLT", "packetsSentLTE", "packetsSentIsNil", "packetsSentNotNil", "packetsRecv", "packetsRecvNEQ", "packetsRecvIn", "packetsRecvNotIn", "packetsRecvGT", "packetsRecvGTE", "packetsRecvLT", "packetsRecvLTE", "packetsRecvIsNil", "packetsRecvNotNil", "peakBytesSentPerSec", "peakBytesSentPerSecNEQ", "peakBytesSentPerSecIn", "peakBytesSentPerSecNotIn", "peakBytesSentPerSecGT", "peakBytesSentPerSecGTE", "peakBytesSentPerSecLT", "peakBytesSentPerSecLTE", "peakBytesSentPerSecIsNil", "peakBytesSentPerSecNotNil", "peakBytesRecvPerSec", "peakBytesRecvPerSecNEQ", "peakBytesRecvPerSecIn", "peakBytesRecvPerSecNotIn", "peakBytesRecvPerSecGT", "peakBytesRecvPerSecGTE", "peakBytesRecvPerSecLT", "peakBytesRecvPerSecLTE", "peakBytesRecvPerSecIsNil", "peakBytesRecvPerSecNotNil", "peakPacketsSentPerSec", "peakPacketsSentPerSecNEQ", "peakPacketsSentPerSecIn", "peakPacketsSentPerSecNotIn", "peakPacketsSentPerSecGT", "peakPacketsSentPerSecGTE", "peakPacketsSentPerSecLT", "peakPacketsSentPerSecLTE", "peakPacketsSentPerSecIsNil", "peakPacketsSentPerSecNotNil", "peakPacketsRecvPerSec", "peakPacketsRecvPerSecNEQ", "peakPacketsRecvPerSecIn", "peakPacketsRecvPerSecNotIn", "peakPacketsRecvPerSecGT", "peakPacketsRecvPerSecGTE", "peakPacketsRecvPerSecLT", "peakPacketsRecvPerSecLTE", "peakPacketsRecvPerSecIsNil", "peakPacketsRecvPerSecNotNil", "hasNetworkMetrics", "hasNetworkMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOSystemNetworkStatsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOSystemNetworkStatsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOSystemNetworkStatsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "bytesSent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSent"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSent = data
		case "bytesSentNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentNEQ = data
		case "bytesSentIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentIn = data
		case "bytesSentNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentNotIn = data
		case "bytesSentGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentGT = data
		case "bytesSentGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentGTE = data
		case "bytesSentLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentLT = data
		case "bytesSentLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentLTE = data
		case "bytesSentIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentIsNil = data
		case "bytesSentNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentNotNil = data
		case "bytesRecv":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecv"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecv = data
		case "bytesRecvNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvNEQ = data
		case "bytesRecvIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvIn = data
		case "bytesRecvNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvNotIn = data
		case "bytesRecvGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvGT = data
		case "bytesRecvGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvGTE = data
		case "bytesRecvLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvLT = data
		case "bytesRecvLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvLTE = data
		case "bytesRecvIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvIsNil = data
		case "bytesRecvNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvNotNil = data
		case "packetsSent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSent"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSent = data
		case "packetsSentNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentNEQ = data
		case "packetsSentIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentIn = data
		case "packetsSentNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentNotIn = data
		case "packetsSentGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentGT = data
		case "packetsSentGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentGTE = data
		case "packetsSentLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentLT = data
		case "packetsSentLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentLTE = data
		case "packetsSentIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentIsNil = data
		case "packetsSentNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentNotNil = data
		case "packetsRecv":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecv"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecv = data
		case "packetsRecvNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvNEQ = data
		case "packetsRecvIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvIn = data
		case "packetsRecvNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvNotIn = data
		case "packetsRecvGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvGT = data
		case "packetsRecvGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvGTE = data
		case "packetsRecvLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvLT = data
		case "packetsRecvLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvLTE = data
		case "packetsRecvIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvIsNil = data
		case "packetsRecvNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvNotNil = data
		case "peakBytesSentPerSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSec"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSec = data
		case "peakBytesSentPerSecNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecNEQ = data
		case "peakBytesSentPerSecIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecIn = data
		case "peakBytesSentPerSecNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecNotIn = data
		case "peakBytesSentPerSecGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecGT = data
		case "peakBytesSentPerSecGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecGTE = data
		case "peakBytesSentPerSecLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecLT = data
		case "peakBytesSentPerSecLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecLTE = data
		case "peakBytesSentPerSecIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecIsNil = data
		case "peakBytesSentPerSecNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecNotNil = data
		case "peakBytesRecvPerSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSec"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSec = data
		case "peakBytesRecvPerSecNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecNEQ = data
		case "peakBytesRecvPerSecIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecIn = data
		case "peakBytesRecvPerSecNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecNotIn = data
		case "peakBytesRecvPerSecGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecGT = data
		case "peakBytesRecvPerSecGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecGTE = data
		case "peakBytesRecvPerSecLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecLT = data
		case "peakBytesRecvPerSecLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecLTE = data
		case "peakBytesRecvPerSecIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecIsNil = data
		case "peakBytesRecvPerSecNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecNotNil = data
		case "peakPacketsSentPerSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSec"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSec = data
		case "peakPacketsSentPerSecNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecNEQ = data
		case "peakPacketsSentPerSecIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecIn = data
		case "peakPacketsSentPerSecNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecNotIn = data
		case "peakPacketsSentPerSecGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecGT = data
		case "peakPacketsSentPerSecGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecGTE = data
		case "peakPacketsSentPerSecLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecLT = data
		case "peakPacketsSentPerSecLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecLTE = data
		case "peakPacketsSentPerSecIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecIsNil = data
		case "peakPacketsSentPerSecNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecNotNil = data
		case "peakPacketsRecvPerSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSec"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSec = data
		case "peakPacketsRecvPerSecNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecNEQ"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecNEQ = data
		case "peakPacketsRecvPerSecIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecIn = data
		case "peakPacketsRecvPerSecNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecNotIn"))
			data, err := ec.unmarshalOInt2ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecNotIn = data
		case "peakPacketsRecvPerSecGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecGT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecGT = data
		case "peakPacketsRecvPerSecGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecGTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecGTE = data
		case "peakPacketsRecvPerSecLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecLT"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecLT = data
		case "peakPacketsRecvPerSecLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecLTE"))
			data, err := ec.unmarshalOInt2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecLTE = data
		case "peakPacketsRecvPerSecIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecIsNil = data
		case "peakPacketsRecvPerSecNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecNotNil = data
		case "hasNetworkMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNetworkMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNetworkMetrics = data
		case "hasNetworkMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNetworkMetricsWith"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNetworkMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTargetMetricsWhereInput(ctx context.Context, obj any) (ent.TargetMetricsWhereInput, error) {
	var it ent.TargetMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "targetsLoaded", "targetsLoadedNEQ", "targetsLoadedIn", "targetsLoadedNotIn", "targetsLoadedGT", "targetsLoadedGTE", "targetsLoadedLT", "targetsLoadedLTE", "targetsLoadedIsNil", "targetsLoadedNotNil", "targetsConfigured", "targetsConfiguredNEQ", "targetsConfiguredIn", "targetsConfiguredNotIn", "targetsConfiguredGT", "targetsConfiguredGTE", "targetsConfiguredLT", "targetsConfiguredLTE", "targetsConfiguredIsNil", "targetsConfiguredNotNil", "targetsConfiguredNotIncludingAspects", "targetsConfiguredNotIncludingAspectsNEQ", "targetsConfiguredNotIncludingAspectsIn", "targetsConfiguredNotIncludingAspectsNotIn", "targetsConfiguredNotIncludingAspectsGT", "targetsConfiguredNotIncludingAspectsGTE", "targetsConfiguredNotIncludingAspectsLT", "targetsConfiguredNotIncludingAspectsLTE", "targetsConfiguredNotIncludingAspectsIsNil", "targetsConfiguredNotIncludingAspectsNotNil", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTargetMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTargetMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTargetMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "targetsLoaded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoaded"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoaded = data
		case "targetsLoadedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedNEQ = data
		case "targetsLoadedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedIn = data
		case "targetsLoadedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedNotIn = data
		case "targetsLoadedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedGT = data
		case "targetsLoadedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedGTE = data
		case "targetsLoadedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedLT = data
		case "targetsLoadedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedLTE = data
		case "targetsLoadedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedIsNil = data
		case "targetsLoadedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedNotNil = data
		case "targetsConfigured":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfigured"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfigured = data
		case "targetsConfiguredNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNEQ = data
		case "targetsConfiguredIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredIn = data
		case "targetsConfiguredNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIn = data
		case "targetsConfiguredGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredGT = data
		case "targetsConfiguredGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredGTE = data
		case "targetsConfiguredLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredLT = data
		case "targetsConfiguredLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredLTE = data
		case "targetsConfiguredIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredIsNil = data
		case "targetsConfiguredNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotNil = data
		case "targetsConfiguredNotIncludingAspects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspects"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspects = data
		case "targetsConfiguredNotIncludingAspectsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsNEQ = data
		case "targetsConfiguredNotIncludingAspectsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsIn = data
		case "targetsConfiguredNotIncludingAspectsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsNotIn = data
		case "targetsConfiguredNotIncludingAspectsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsGT = data
		case "targetsConfiguredNotIncludingAspectsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsGTE = data
		case "targetsConfiguredNotIncludingAspectsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsLT = data
		case "targetsConfiguredNotIncludingAspectsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsLTE = data
		case "targetsConfiguredNotIncludingAspectsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsIsNil = data
		case "targetsConfiguredNotIncludingAspectsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTargetOrder(ctx context.Context, obj any) (ent.TargetOrder, error) {
	var it ent.TargetOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNTargetOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTargetWhereInput(ctx context.Context, obj any) (ent.TargetWhereInput, error) {
	var it ent.TargetWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "label", "labelNEQ", "labelIn", "labelNotIn", "labelGT", "labelGTE", "labelLT", "labelLTE", "labelContains", "labelHasPrefix", "labelHasSuffix", "labelEqualFold", "labelContainsFold", "targetKind", "targetKindNEQ", "targetKindIn", "targetKindNotIn", "targetKindGT", "targetKindGTE", "targetKindLT", "targetKindLTE", "targetKindContains", "targetKindHasPrefix", "targetKindHasSuffix", "targetKindIsNil", "targetKindNotNil", "targetKindEqualFold", "targetKindContainsFold", "testSize", "testSizeNEQ", "testSizeIn", "testSizeNotIn", "testSizeIsNil", "testSizeNotNil", "success", "successNEQ", "successIsNil", "successNotNil", "testTimeout", "testTimeoutNEQ", "testTimeoutIn", "testTimeoutNotIn", "testTimeoutGT", "testTimeoutGTE", "testTimeoutLT", "testTimeoutLTE", "testTimeoutIsNil", "testTimeoutNotNil", "startTimeInMs", "startTimeInMsNEQ", "startTimeInMsIn", "startTimeInMsNotIn", "startTimeInMsGT", "startTimeInMsGTE", "startTimeInMsLT", "startTimeInMsLTE", "startTimeInMsIsNil", "startTimeInMsNotNil", "endTimeInMs", "endTimeInMsNEQ", "endTimeInMsIn", "endTimeInMsNotIn", "endTimeInMsGT", "endTimeInMsGTE", "endTimeInMsLT", "endTimeInMsLTE", "endTimeInMsIsNil", "endTimeInMsNotNil", "durationInMs", "durationInMsNEQ", "durationInMsIn", "durationInMsNotIn", "durationInMsGT", "durationInMsGTE", "durationInMsLT", "durationInMsLTE", "durationInMsIsNil", "durationInMsNotNil", "abortReason", "abortReasonNEQ", "abortReasonIn", "abortReasonNotIn", "abortReasonIsNil", "abortReasonNotNil", "hasBazelInvocation", "hasBazelInvocationWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTargetWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTargetWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTargetWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "labelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNEQ = data
		case "labelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIn = data
		case "labelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotIn = data
		case "labelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGT = data
		case "labelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGTE = data
		case "labelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLT = data
		case "labelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLTE = data
		case "labelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContains = data
		case "labelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasPrefix = data
		case "labelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasSuffix = data
		case "labelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelEqualFold = data
		case "labelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContainsFold = data
		case "targetKind":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKind"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKind = data
		case "targetKindNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindNEQ = data
		case "targetKindIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindIn = data
		case "targetKindNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindNotIn = data
		case "targetKindGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindGT = data
		case "targetKindGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindGTE = data
		case "targetKindLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindLT = data
		case "targetKindLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindLTE = data
		case "targetKindContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindContains = data
		case "targetKindHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindHasPrefix = data
		case "targetKindHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindHasSuffix = data
		case "targetKindIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindIsNil = data
		case "targetKindNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindNotNil = data
		case "targetKindEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindEqualFold = data
		case "targetKindContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetKindContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetKindContainsFold = data
		case "testSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testSize"))
			data, err := ec.unmarshalOTargetTestSize2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestSize = data
		case "testSizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testSizeNEQ"))
			data, err := ec.unmarshalOTargetTestSize2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestSizeNEQ = data
		case "testSizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testSizeIn"))
			data, err := ec.unmarshalOTargetTestSize2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSizeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestSizeIn = data
		case "testSizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testSizeNotIn"))
			data, err := ec.unmarshalOTargetTestSize2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSizeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestSizeNotIn = data
		case "testSizeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testSizeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestSizeIsNil = data
		case "testSizeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testSizeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestSizeNotNil = data
		case "success":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("success"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Success = data
		case "successNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("successNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SuccessNEQ = data
		case "successIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("successIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SuccessIsNil = data
		case "successNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("successNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SuccessNotNil = data
		case "testTimeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeout"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeout = data
		case "testTimeoutNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutNEQ = data
		case "testTimeoutIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutIn = data
		case "testTimeoutNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutNotIn = data
		case "testTimeoutGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutGT = data
		case "testTimeoutGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutGTE = data
		case "testTimeoutLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutLT = data
		case "testTimeoutLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutLTE = data
		case "testTimeoutIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutIsNil = data
		case "testTimeoutNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testTimeoutNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestTimeoutNotNil = data
		case "startTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMs = data
		case "startTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsNEQ = data
		case "startTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsIn = data
		case "startTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsNotIn = data
		case "startTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsGT = data
		case "startTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsGTE = data
		case "startTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsLT = data
		case "startTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsLTE = data
		case "startTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsIsNil = data
		case "startTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTimeInMsNotNil = data
		case "endTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMs = data
		case "endTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsNEQ = data
		case "endTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsIn = data
		case "endTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsNotIn = data
		case "endTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsGT = data
		case "endTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsGTE = data
		case "endTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsLT = data
		case "endTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsLTE = data
		case "endTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsIsNil = data
		case "endTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTimeInMsNotNil = data
		case "durationInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMs = data
		case "durationInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsNEQ = data
		case "durationInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsIn = data
		case "durationInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsNotIn = data
		case "durationInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsGT = data
		case "durationInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsGTE = data
		case "durationInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsLT = data
		case "durationInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsLTE = data
		case "durationInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsIsNil = data
		case "durationInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationInMsNotNil = data
		case "abortReason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abortReason"))
			data, err := ec.unmarshalOTargetAbortReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbortReason = data
		case "abortReasonNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abortReasonNEQ"))
			data, err := ec.unmarshalOTargetAbortReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbortReasonNEQ = data
		case "abortReasonIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abortReasonIn"))
			data, err := ec.unmarshalOTargetAbortReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbortReasonIn = data
		case "abortReasonNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abortReasonNotIn"))
			data, err := ec.unmarshalOTargetAbortReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbortReasonNotIn = data
		case "abortReasonIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abortReasonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbortReasonIsNil = data
		case "abortReasonNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abortReasonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbortReasonNotNil = data
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestCollectionOrder(ctx context.Context, obj any) (ent.TestCollectionOrder, error) {
	var it ent.TestCollectionOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNTestCollectionOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestCollectionWhereInput(ctx context.Context, obj any) (ent.TestCollectionWhereInput, error) {
	var it ent.TestCollectionWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "label", "labelNEQ", "labelIn", "labelNotIn", "labelGT", "labelGTE", "labelLT", "labelLTE", "labelContains", "labelHasPrefix", "labelHasSuffix", "labelIsNil", "labelNotNil", "labelEqualFold", "labelContainsFold", "overallStatus", "overallStatusNEQ", "overallStatusIn", "overallStatusNotIn", "overallStatusIsNil", "overallStatusNotNil", "strategy", "strategyNEQ", "strategyIn", "strategyNotIn", "strategyGT", "strategyGTE", "strategyLT", "strategyLTE", "strategyContains", "strategyHasPrefix", "strategyHasSuffix", "strategyIsNil", "strategyNotNil", "strategyEqualFold", "strategyContainsFold", "cachedLocally", "cachedLocallyNEQ", "cachedLocallyIsNil", "cachedLocallyNotNil", "cachedRemotely", "cachedRemotelyNEQ", "cachedRemotelyIsNil", "cachedRemotelyNotNil", "firstSeen", "firstSeenNEQ", "firstSeenIn", "firstSeenNotIn", "firstSeenGT", "firstSeenGTE", "firstSeenLT", "firstSeenLTE", "firstSeenIsNil", "firstSeenNotNil", "durationMs", "durationMsNEQ", "durationMsIn", "durationMsNotIn", "durationMsGT", "durationMsGTE", "durationMsLT", "durationMsLTE", "durationMsIsNil", "durationMsNotNil", "hasBazelInvocation", "hasBazelInvocationWith", "hasTestSummary", "hasTestSummaryWith", "hasTestResults", "hasTestResultsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTestCollectionWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTestCollectionWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTestCollectionWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestCollectionWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestCollectionWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestCollectionWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestCollectionWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestCollectionWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestCollectionWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestCollectionWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestCollectionWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "labelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNEQ = data
		case "labelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIn = data
		case "labelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotIn = data
		case "labelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGT = data
		case "labelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGTE = data
		case "labelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLT = data
		case "labelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLTE = data
		case "labelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContains = data
		case "labelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasPrefix = data
		case "labelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasSuffix = data
		case "labelIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIsNil = data
		case "labelNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotNil = data
		case "labelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelEqualFold = data
		case "labelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContainsFold = data
		case "overallStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatus"))
			data, err := ec.unmarshalOTestCollectionOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatus = data
		case "overallStatusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusNEQ"))
			data, err := ec.unmarshalOTestCollectionOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusNEQ = data
		case "overallStatusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusIn"))
			data, err := ec.unmarshalOTestCollectionOverallStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusIn = data
		case "overallStatusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusNotIn"))
			data, err := ec.unmarshalOTestCollectionOverallStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusNotIn = data
		case "overallStatusIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusIsNil = data
		case "overallStatusNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusNotNil = data
		case "strategy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategy"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Strategy = data
		case "strategyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyNEQ = data
		case "strategyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyIn = data
		case "strategyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyNotIn = data
		case "strategyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyGT = data
		case "strategyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyGTE = data
		case "strategyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyLT = data
		case "strategyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyLTE = data
		case "strategyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyContains = data
		case "strategyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyHasPrefix = data
		case "strategyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyHasSuffix = data
		case "strategyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyIsNil = data
		case "strategyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyNotNil = data
		case "strategyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyEqualFold = data
		case "strategyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StrategyContainsFold = data
		case "cachedLocally":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedLocally"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedLocally = data
		case "cachedLocallyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedLocallyNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedLocallyNEQ = data
		case "cachedLocallyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedLocallyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedLocallyIsNil = data
		case "cachedLocallyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedLocallyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedLocallyNotNil = data
		case "cachedRemotely":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedRemotely"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedRemotely = data
		case "cachedRemotelyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedRemotelyNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedRemotelyNEQ = data
		case "cachedRemotelyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedRemotelyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedRemotelyIsNil = data
		case "cachedRemotelyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedRemotelyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedRemotelyNotNil = data
		case "firstSeen":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeen"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeen = data
		case "firstSeenNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenNEQ = data
		case "firstSeenIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenIn = data
		case "firstSeenNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenNotIn = data
		case "firstSeenGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenGT = data
		case "firstSeenGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenGTE = data
		case "firstSeenLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenLT = data
		case "firstSeenLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenLTE = data
		case "firstSeenIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenIsNil = data
		case "firstSeenNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstSeenNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstSeenNotNil = data
		case "durationMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMs = data
		case "durationMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsNEQ = data
		case "durationMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsIn = data
		case "durationMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsNotIn = data
		case "durationMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsGT = data
		case "durationMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsGTE = data
		case "durationMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsLT = data
		case "durationMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsLTE = data
		case "durationMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsIsNil = data
		case "durationMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationMsNotNil = data
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		case "hasTestSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestSummary = data
		case "hasTestSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestSummaryWith"))
			data, err := ec.unmarshalOTestSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestSummaryWith = data
		case "hasTestResults":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestResults"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestResults = data
		case "hasTestResultsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestResultsWith"))
			data, err := ec.unmarshalOTestResultBESWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestResultsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestFileWhereInput(ctx context.Context, obj any) (ent.TestFileWhereInput, error) {
	var it ent.TestFileWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "digest", "digestNEQ", "digestIn", "digestNotIn", "digestGT", "digestGTE", "digestLT", "digestLTE", "digestContains", "digestHasPrefix", "digestHasSuffix", "digestIsNil", "digestNotNil", "digestEqualFold", "digestContainsFold", "file", "fileNEQ", "fileIn", "fileNotIn", "fileGT", "fileGTE", "fileLT", "fileLTE", "fileContains", "fileHasPrefix", "fileHasSuffix", "fileIsNil", "fileNotNil", "fileEqualFold", "fileContainsFold", "length", "lengthNEQ", "lengthIn", "lengthNotIn", "lengthGT", "lengthGTE", "lengthLT", "lengthLTE", "lengthIsNil", "lengthNotNil", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "hasTestResult", "hasTestResultWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTestFileWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTestFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTestFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestFileWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestFileWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestFileWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestFileWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestFileWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestFileWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestFileWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestFileWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "digest":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digest"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Digest = data
		case "digestNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestNEQ = data
		case "digestIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestIn = data
		case "digestNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestNotIn = data
		case "digestGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestGT = data
		case "digestGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestGTE = data
		case "digestLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestLT = data
		case "digestLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestLTE = data
		case "digestContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestContains = data
		case "digestHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestHasPrefix = data
		case "digestHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestHasSuffix = data
		case "digestIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestIsNil = data
		case "digestNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestNotNil = data
		case "digestEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestEqualFold = data
		case "digestContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digestContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DigestContainsFold = data
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = data
		case "fileNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileNEQ = data
		case "fileIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileIn = data
		case "fileNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileNotIn = data
		case "fileGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileGT = data
		case "fileGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileGTE = data
		case "fileLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileLT = data
		case "fileLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileLTE = data
		case "fileContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileContains = data
		case "fileHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileHasPrefix = data
		case "fileHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileHasSuffix = data
		case "fileIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileIsNil = data
		case "fileNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileNotNil = data
		case "fileEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileEqualFold = data
		case "fileContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileContainsFold = data
		case "length":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Length = data
		case "lengthNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthNEQ = data
		case "lengthIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthIn = data
		case "lengthNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthNotIn = data
		case "lengthGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthGT = data
		case "lengthGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthGTE = data
		case "lengthLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthLT = data
		case "lengthLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthLTE = data
		case "lengthIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthIsNil = data
		case "lengthNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lengthNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LengthNotNil = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "hasTestResult":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestResult"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestResult = data
		case "hasTestResultWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestResultWith"))
			data, err := ec.unmarshalOTestResultBESWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestResultWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestResultBESWhereInput(ctx context.Context, obj any) (ent.TestResultBESWhereInput, error) {
	var it ent.TestResultBESWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "testStatus", "testStatusNEQ", "testStatusIn", "testStatusNotIn", "testStatusIsNil", "testStatusNotNil", "statusDetails", "statusDetailsNEQ", "statusDetailsIn", "statusDetailsNotIn", "statusDetailsGT", "statusDetailsGTE", "statusDetailsLT", "statusDetailsLTE", "statusDetailsContains", "statusDetailsHasPrefix", "statusDetailsHasSuffix", "statusDetailsIsNil", "statusDetailsNotNil", "statusDetailsEqualFold", "statusDetailsContainsFold", "label", "labelNEQ", "labelIn", "labelNotIn", "labelGT", "labelGTE", "labelLT", "labelLTE", "labelContains", "labelHasPrefix", "labelHasSuffix", "labelIsNil", "labelNotNil", "labelEqualFold", "labelContainsFold", "cachedLocally", "cachedLocallyNEQ", "cachedLocallyIsNil", "cachedLocallyNotNil", "testAttemptStartMillisEpoch", "testAttemptStartMillisEpochNEQ", "testAttemptStartMillisEpochIn", "testAttemptStartMillisEpochNotIn", "testAttemptStartMillisEpochGT", "testAttemptStartMillisEpochGTE", "testAttemptStartMillisEpochLT", "testAttemptStartMillisEpochLTE", "testAttemptStartMillisEpochIsNil", "testAttemptStartMillisEpochNotNil", "testAttemptStart", "testAttemptStartNEQ", "testAttemptStartIn", "testAttemptStartNotIn", "testAttemptStartGT", "testAttemptStartGTE", "testAttemptStartLT", "testAttemptStartLTE", "testAttemptStartContains", "testAttemptStartHasPrefix", "testAttemptStartHasSuffix", "testAttemptStartIsNil", "testAttemptStartNotNil", "testAttemptStartEqualFold", "testAttemptStartContainsFold", "testAttemptDurationMillis", "testAttemptDurationMillisNEQ", "testAttemptDurationMillisIn", "testAttemptDurationMillisNotIn", "testAttemptDurationMillisGT", "testAttemptDurationMillisGTE", "testAttemptDurationMillisLT", "testAttemptDurationMillisLTE", "testAttemptDurationMillisIsNil", "testAttemptDurationMillisNotNil", "testAttemptDuration", "testAttemptDurationNEQ", "testAttemptDurationIn", "testAttemptDurationNotIn", "testAttemptDurationGT", "testAttemptDurationGTE", "testAttemptDurationLT", "testAttemptDurationLTE", "testAttemptDurationIsNil", "testAttemptDurationNotNil", "hasTestCollection", "hasTestCollectionWith", "hasTestActionOutput", "hasTestActionOutputWith", "hasExecutionInfo", "hasExecutionInfoWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTestResultBESWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTestResultBESWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTestResultBESWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestResultBESWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestResultBESWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestResultBESWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestResultBESWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestResultBESWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestResultBESWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestResultBESWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestResultBESWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "testStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testStatus"))
			data, err := ec.unmarshalOTestResultBESTestStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestStatus = data
		case "testStatusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testStatusNEQ"))
			data, err := ec.unmarshalOTestResultBESTestStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestStatusNEQ = data
		case "testStatusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testStatusIn"))
			data, err := ec.unmarshalOTestResultBESTestStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestStatusIn = data
		case "testStatusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testStatusNotIn"))
			data, err := ec.unmarshalOTestResultBESTestStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestStatusNotIn = data
		case "testStatusIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testStatusIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestStatusIsNil = data
		case "testStatusNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testStatusNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestStatusNotNil = data
		case "statusDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetails"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetails = data
		case "statusDetailsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsNEQ = data
		case "statusDetailsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsIn = data
		case "statusDetailsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsNotIn = data
		case "statusDetailsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsGT = data
		case "statusDetailsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsGTE = data
		case "statusDetailsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsLT = data
		case "statusDetailsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsLTE = data
		case "statusDetailsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsContains = data
		case "statusDetailsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsHasPrefix = data
		case "statusDetailsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsHasSuffix = data
		case "statusDetailsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsIsNil = data
		case "statusDetailsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsNotNil = data
		case "statusDetailsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsEqualFold = data
		case "statusDetailsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetailsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetailsContainsFold = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "labelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNEQ = data
		case "labelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIn = data
		case "labelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotIn = data
		case "labelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGT = data
		case "labelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGTE = data
		case "labelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLT = data
		case "labelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLTE = data
		case "labelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContains = data
		case "labelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasPrefix = data
		case "labelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasSuffix = data
		case "labelIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIsNil = data
		case "labelNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotNil = data
		case "labelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelEqualFold = data
		case "labelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContainsFold = data
		case "cachedLocally":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedLocally"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedLocally = data
		case "cachedLocallyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedLocallyNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedLocallyNEQ = data
		case "cachedLocallyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedLocallyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedLocallyIsNil = data
		case "cachedLocallyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachedLocallyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CachedLocallyNotNil = data
		case "testAttemptStartMillisEpoch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpoch"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpoch = data
		case "testAttemptStartMillisEpochNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochNEQ = data
		case "testAttemptStartMillisEpochIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochIn = data
		case "testAttemptStartMillisEpochNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochNotIn = data
		case "testAttemptStartMillisEpochGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochGT = data
		case "testAttemptStartMillisEpochGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochGTE = data
		case "testAttemptStartMillisEpochLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochLT = data
		case "testAttemptStartMillisEpochLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochLTE = data
		case "testAttemptStartMillisEpochIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochIsNil = data
		case "testAttemptStartMillisEpochNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartMillisEpochNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartMillisEpochNotNil = data
		case "testAttemptStart":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStart"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStart = data
		case "testAttemptStartNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartNEQ = data
		case "testAttemptStartIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartIn = data
		case "testAttemptStartNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartNotIn = data
		case "testAttemptStartGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartGT = data
		case "testAttemptStartGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartGTE = data
		case "testAttemptStartLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartLT = data
		case "testAttemptStartLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartLTE = data
		case "testAttemptStartContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartContains = data
		case "testAttemptStartHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartHasPrefix = data
		case "testAttemptStartHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartHasSuffix = data
		case "testAttemptStartIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartIsNil = data
		case "testAttemptStartNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartNotNil = data
		case "testAttemptStartEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartEqualFold = data
		case "testAttemptStartContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptStartContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptStartContainsFold = data
		case "testAttemptDurationMillis":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillis"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillis = data
		case "testAttemptDurationMillisNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisNEQ = data
		case "testAttemptDurationMillisIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisIn = data
		case "testAttemptDurationMillisNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisNotIn = data
		case "testAttemptDurationMillisGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisGT = data
		case "testAttemptDurationMillisGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisGTE = data
		case "testAttemptDurationMillisLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisLT = data
		case "testAttemptDurationMillisLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisLTE = data
		case "testAttemptDurationMillisIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisIsNil = data
		case "testAttemptDurationMillisNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationMillisNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationMillisNotNil = data
		case "testAttemptDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDuration"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDuration = data
		case "testAttemptDurationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationNEQ = data
		case "testAttemptDurationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationIn = data
		case "testAttemptDurationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationNotIn = data
		case "testAttemptDurationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationGT = data
		case "testAttemptDurationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationGTE = data
		case "testAttemptDurationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationLT = data
		case "testAttemptDurationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationLTE = data
		case "testAttemptDurationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationIsNil = data
		case "testAttemptDurationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAttemptDurationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TestAttemptDurationNotNil = data
		case "hasTestCollection":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestCollection"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestCollection = data
		case "hasTestCollectionWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestCollectionWith"))
			data, err := ec.unmarshalOTestCollectionWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestCollectionWith = data
		case "hasTestActionOutput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestActionOutput"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestActionOutput = data
		case "hasTestActionOutputWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestActionOutputWith"))
			data, err := ec.unmarshalOTestFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestActionOutputWith = data
		case "hasExecutionInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasExecutionInfo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasExecutionInfo = data
		case "hasExecutionInfoWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasExecutionInfoWith"))
			data, err := ec.unmarshalOExectionInfoWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasExecutionInfoWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestSummaryWhereInput(ctx context.Context, obj any) (ent.TestSummaryWhereInput, error) {
	var it ent.TestSummaryWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "overallStatus", "overallStatusNEQ", "overallStatusIn", "overallStatusNotIn", "overallStatusIsNil", "overallStatusNotNil", "totalRunCount", "totalRunCountNEQ", "totalRunCountIn", "totalRunCountNotIn", "totalRunCountGT", "totalRunCountGTE", "totalRunCountLT", "totalRunCountLTE", "totalRunCountIsNil", "totalRunCountNotNil", "runCount", "runCountNEQ", "runCountIn", "runCountNotIn", "runCountGT", "runCountGTE", "runCountLT", "runCountLTE", "runCountIsNil", "runCountNotNil", "attemptCount", "attemptCountNEQ", "attemptCountIn", "attemptCountNotIn", "attemptCountGT", "attemptCountGTE", "attemptCountLT", "attemptCountLTE", "attemptCountIsNil", "attemptCountNotNil", "shardCount", "shardCountNEQ", "shardCountIn", "shardCountNotIn", "shardCountGT", "shardCountGTE", "shardCountLT", "shardCountLTE", "shardCountIsNil", "shardCountNotNil", "totalNumCached", "totalNumCachedNEQ", "totalNumCachedIn", "totalNumCachedNotIn", "totalNumCachedGT", "totalNumCachedGTE", "totalNumCachedLT", "totalNumCachedLTE", "totalNumCachedIsNil", "totalNumCachedNotNil", "firstStartTime", "firstStartTimeNEQ", "firstStartTimeIn", "firstStartTimeNotIn", "firstStartTimeGT", "firstStartTimeGTE", "firstStartTimeLT", "firstStartTimeLTE", "firstStartTimeIsNil", "firstStartTimeNotNil", "lastStopTime", "lastStopTimeNEQ", "lastStopTimeIn", "lastStopTimeNotIn", "lastStopTimeGT", "lastStopTimeGTE", "lastStopTimeLT", "lastStopTimeLTE", "lastStopTimeIsNil", "lastStopTimeNotNil", "totalRunDuration", "totalRunDurationNEQ", "totalRunDurationIn", "totalRunDurationNotIn", "totalRunDurationGT", "totalRunDurationGTE", "totalRunDurationLT", "totalRunDurationLTE", "totalRunDurationIsNil", "totalRunDurationNotNil", "label", "labelNEQ", "labelIn", "labelNotIn", "labelGT", "labelGTE", "labelLT", "labelLTE", "labelContains", "labelHasPrefix", "labelHasSuffix", "labelIsNil", "labelNotNil", "labelEqualFold", "labelContainsFold", "hasTestCollection", "hasTestCollectionWith", "hasPassed", "hasPassedWith", "hasFailed", "hasFailedWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTestSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummaryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTestSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTestSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestSummaryWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestSummaryWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestSummaryWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestSummaryWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestSummaryWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestSummaryWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestSummaryWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TestSummaryWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "overallStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatus"))
			data, err := ec.unmarshalOTestSummaryOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatus = data
		case "overallStatusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusNEQ"))
			data, err := ec.unmarshalOTestSummaryOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusNEQ = data
		case "overallStatusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusIn"))
			data, err := ec.unmarshalOTestSummaryOverallStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusIn = data
		case "overallStatusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusNotIn"))
			data, err := ec.unmarshalOTestSummaryOverallStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusNotIn = data
		case "overallStatusIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusIsNil = data
		case "overallStatusNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overallStatusNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OverallStatusNotNil = data
		case "totalRunCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCount = data
		case "totalRunCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountNEQ = data
		case "totalRunCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountIn = data
		case "totalRunCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountNotIn = data
		case "totalRunCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountGT = data
		case "totalRunCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountGTE = data
		case "totalRunCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountLT = data
		case "totalRunCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountLTE = data
		case "totalRunCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountIsNil = data
		case "totalRunCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunCountNotNil = data
		case "runCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCount = data
		case "runCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountNEQ = data
		case "runCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountIn = data
		case "runCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountNotIn = data
		case "runCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountGT = data
		case "runCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountGTE = data
		case "runCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountLT = data
		case "runCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountLTE = data
		case "runCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountIsNil = data
		case "runCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RunCountNotNil = data
		case "attemptCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCount = data
		case "attemptCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountNEQ = data
		case "attemptCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountIn = data
		case "attemptCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountNotIn = data
		case "attemptCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountGT = data
		case "attemptCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountGTE = data
		case "attemptCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountLT = data
		case "attemptCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountLTE = data
		case "attemptCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountIsNil = data
		case "attemptCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attemptCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttemptCountNotNil = data
		case "shardCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCount = data
		case "shardCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountNEQ = data
		case "shardCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountIn = data
		case "shardCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountNotIn = data
		case "shardCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountGT = data
		case "shardCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountGTE = data
		case "shardCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountLT = data
		case "shardCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountLTE = data
		case "shardCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountIsNil = data
		case "shardCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shardCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShardCountNotNil = data
		case "totalNumCached":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCached"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCached = data
		case "totalNumCachedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedNEQ = data
		case "totalNumCachedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedIn = data
		case "totalNumCachedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedNotIn = data
		case "totalNumCachedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedGT = data
		case "totalNumCachedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedGTE = data
		case "totalNumCachedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedLT = data
		case "totalNumCachedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedLTE = data
		case "totalNumCachedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedIsNil = data
		case "totalNumCachedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalNumCachedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalNumCachedNotNil = data
		case "firstStartTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTime"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTime = data
		case "firstStartTimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeNEQ = data
		case "firstStartTimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeIn = data
		case "firstStartTimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeNotIn = data
		case "firstStartTimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeGT = data
		case "firstStartTimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeGTE = data
		case "firstStartTimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeLT = data
		case "firstStartTimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeLTE = data
		case "firstStartTimeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeIsNil = data
		case "firstStartTimeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartTimeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartTimeNotNil = data
		case "lastStopTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTime"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTime = data
		case "lastStopTimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeNEQ = data
		case "lastStopTimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeIn = data
		case "lastStopTimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeNotIn = data
		case "lastStopTimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeGT = data
		case "lastStopTimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeGTE = data
		case "lastStopTimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeLT = data
		case "lastStopTimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeLTE = data
		case "lastStopTimeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeIsNil = data
		case "lastStopTimeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastStopTimeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastStopTimeNotNil = data
		case "totalRunDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDuration"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDuration = data
		case "totalRunDurationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationNEQ = data
		case "totalRunDurationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationIn = data
		case "totalRunDurationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationNotIn = data
		case "totalRunDurationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationGT = data
		case "totalRunDurationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationGTE = data
		case "totalRunDurationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationLT = data
		case "totalRunDurationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationLTE = data
		case "totalRunDurationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationIsNil = data
		case "totalRunDurationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalRunDurationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalRunDurationNotNil = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "labelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNEQ = data
		case "labelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIn = data
		case "labelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotIn = data
		case "labelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGT = data
		case "labelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGTE = data
		case "labelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLT = data
		case "labelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLTE = data
		case "labelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContains = data
		case "labelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasPrefix = data
		case "labelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasSuffix = data
		case "labelIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIsNil = data
		case "labelNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotNil = data
		case "labelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelEqualFold = data
		case "labelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContainsFold = data
		case "hasTestCollection":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestCollection"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestCollection = data
		case "hasTestCollectionWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTestCollectionWith"))
			data, err := ec.unmarshalOTestCollectionWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTestCollectionWith = data
		case "hasPassed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPassed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPassed = data
		case "hasPassedWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPassedWith"))
			data, err := ec.unmarshalOTestFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPassedWith = data
		case "hasFailed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFailed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFailed = data
		case "hasFailedWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFailedWith"))
			data, err := ec.unmarshalOTestFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFailedWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimingBreakdownWhereInput(ctx context.Context, obj any) (ent.TimingBreakdownWhereInput, error) {
	var it ent.TimingBreakdownWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "time", "timeNEQ", "timeIn", "timeNotIn", "timeGT", "timeGTE", "timeLT", "timeLTE", "timeContains", "timeHasPrefix", "timeHasSuffix", "timeIsNil", "timeNotNil", "timeEqualFold", "timeContainsFold", "hasExecutionInfo", "hasExecutionInfoWith", "hasChild", "hasChildWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTimingBreakdownWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTimingBreakdownWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTimingBreakdownWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingBreakdownWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingBreakdownWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingBreakdownWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingBreakdownWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingBreakdownWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingBreakdownWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingBreakdownWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingBreakdownWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "time":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Time = data
		case "timeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeNEQ = data
		case "timeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeIn = data
		case "timeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeNotIn = data
		case "timeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeGT = data
		case "timeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeGTE = data
		case "timeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLT = data
		case "timeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLTE = data
		case "timeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeContains = data
		case "timeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeHasPrefix = data
		case "timeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeHasSuffix = data
		case "timeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeIsNil = data
		case "timeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeNotNil = data
		case "timeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeEqualFold = data
		case "timeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeContainsFold = data
		case "hasExecutionInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasExecutionInfo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasExecutionInfo = data
		case "hasExecutionInfoWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasExecutionInfoWith"))
			data, err := ec.unmarshalOExectionInfoWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasExecutionInfoWith = data
		case "hasChild":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChild"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChild = data
		case "hasChildWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasChildWith"))
			data, err := ec.unmarshalOTimingChildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasChildWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimingChildWhereInput(ctx context.Context, obj any) (ent.TimingChildWhereInput, error) {
	var it ent.TimingChildWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "time", "timeNEQ", "timeIn", "timeNotIn", "timeGT", "timeGTE", "timeLT", "timeLTE", "timeContains", "timeHasPrefix", "timeHasSuffix", "timeIsNil", "timeNotNil", "timeEqualFold", "timeContainsFold", "hasTimingBreakdown", "hasTimingBreakdownWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTimingChildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTimingChildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTimingChildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingChildWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingChildWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingChildWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingChildWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingChildWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingChildWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingChildWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingChildWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "time":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Time = data
		case "timeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeNEQ = data
		case "timeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeIn = data
		case "timeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeNotIn = data
		case "timeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeGT = data
		case "timeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeGTE = data
		case "timeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLT = data
		case "timeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLTE = data
		case "timeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeContains = data
		case "timeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeHasPrefix = data
		case "timeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeHasSuffix = data
		case "timeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeIsNil = data
		case "timeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeNotNil = data
		case "timeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeEqualFold = data
		case "timeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeContainsFold = data
		case "hasTimingBreakdown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTimingBreakdown"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTimingBreakdown = data
		case "hasTimingBreakdownWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTimingBreakdownWith"))
			data, err := ec.unmarshalOTimingBreakdownWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTimingBreakdownWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimingMetricsWhereInput(ctx context.Context, obj any) (ent.TimingMetricsWhereInput, error) {
	var it ent.TimingMetricsWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "cpuTimeInMs", "cpuTimeInMsNEQ", "cpuTimeInMsIn", "cpuTimeInMsNotIn", "cpuTimeInMsGT", "cpuTimeInMsGTE", "cpuTimeInMsLT", "cpuTimeInMsLTE", "cpuTimeInMsIsNil", "cpuTimeInMsNotNil", "wallTimeInMs", "wallTimeInMsNEQ", "wallTimeInMsIn", "wallTimeInMsNotIn", "wallTimeInMsGT", "wallTimeInMsGTE", "wallTimeInMsLT", "wallTimeInMsLTE", "wallTimeInMsIsNil", "wallTimeInMsNotNil", "analysisPhaseTimeInMs", "analysisPhaseTimeInMsNEQ", "analysisPhaseTimeInMsIn", "analysisPhaseTimeInMsNotIn", "analysisPhaseTimeInMsGT", "analysisPhaseTimeInMsGTE", "analysisPhaseTimeInMsLT", "analysisPhaseTimeInMsLTE", "analysisPhaseTimeInMsIsNil", "analysisPhaseTimeInMsNotNil", "executionPhaseTimeInMs", "executionPhaseTimeInMsNEQ", "executionPhaseTimeInMsIn", "executionPhaseTimeInMsNotIn", "executionPhaseTimeInMsGT", "executionPhaseTimeInMsGTE", "executionPhaseTimeInMsLT", "executionPhaseTimeInMsLTE", "executionPhaseTimeInMsIsNil", "executionPhaseTimeInMsNotNil", "actionsExecutionStartInMs", "actionsExecutionStartInMsNEQ", "actionsExecutionStartInMsIn", "actionsExecutionStartInMsNotIn", "actionsExecutionStartInMsGT", "actionsExecutionStartInMsGTE", "actionsExecutionStartInMsLT", "actionsExecutionStartInMsLTE", "actionsExecutionStartInMsIsNil", "actionsExecutionStartInMsNotNil", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTimingMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTimingMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTimingMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "cpuTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMs = data
		case "cpuTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsNEQ = data
		case "cpuTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsIn = data
		case "cpuTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsNotIn = data
		case "cpuTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsGT = data
		case "cpuTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsGTE = data
		case "cpuTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsLT = data
		case "cpuTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsLTE = data
		case "cpuTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsIsNil = data
		case "cpuTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsNotNil = data
		case "wallTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMs = data
		case "wallTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsNEQ = data
		case "wallTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsIn = data
		case "wallTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsNotIn = data
		case "wallTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsGT = data
		case "wallTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsGTE = data
		case "wallTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsLT = data
		case "wallTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsLTE = data
		case "wallTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsIsNil = data
		case "wallTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsNotNil = data
		case "analysisPhaseTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMs = data
		case "analysisPhaseTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsNEQ = data
		case "analysisPhaseTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsIn = data
		case "analysisPhaseTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsNotIn = data
		case "analysisPhaseTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsGT = data
		case "analysisPhaseTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsGTE = data
		case "analysisPhaseTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsLT = data
		case "analysisPhaseTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsLTE = data
		case "analysisPhaseTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsIsNil = data
		case "analysisPhaseTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsNotNil = data
		case "executionPhaseTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMs = data
		case "executionPhaseTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsNEQ = data
		case "executionPhaseTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsIn = data
		case "executionPhaseTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsNotIn = data
		case "executionPhaseTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsGT = data
		case "executionPhaseTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsGTE = data
		case "executionPhaseTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsLT = data
		case "executionPhaseTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsLTE = data
		case "executionPhaseTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsIsNil = data
		case "executionPhaseTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsNotNil = data
		case "actionsExecutionStartInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMs = data
		case "actionsExecutionStartInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsNEQ = data
		case "actionsExecutionStartInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsIn = data
		case "actionsExecutionStartInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsNotIn = data
		case "actionsExecutionStartInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsGT = data
		case "actionsExecutionStartInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsGTE = data
		case "actionsExecutionStartInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsLT = data
		case "actionsExecutionStartInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsLTE = data
		case "actionsExecutionStartInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsIsNil = data
		case "actionsExecutionStartInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _BuildStep(ctx context.Context, sel ast.SelectionSet, obj model.BuildStep) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.TestProblem:
		return ec._TestProblem(ctx, sel, &obj)
	case *model.TestProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestProblem(ctx, sel, obj)
	case model.TargetProblem:
		return ec._TargetProblem(ctx, sel, &obj)
	case *model.TargetProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._TargetProblem(ctx, sel, obj)
	case model.ProgressProblem:
		return ec._ProgressProblem(ctx, sel, &obj)
	case *model.ProgressProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProgressProblem(ctx, sel, obj)
	case model.ActionProblem:
		return ec._ActionProblem(ctx, sel, &obj)
	case *model.ActionProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionProblem(ctx, sel, obj)
	case *ent.TimingMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._TimingMetrics(ctx, sel, obj)
	case *ent.TimingChild:
		if obj == nil {
			return graphql.Null
		}
		return ec._TimingChild(ctx, sel, obj)
	case *ent.TimingBreakdown:
		if obj == nil {
			return graphql.Null
		}
		return ec._TimingBreakdown(ctx, sel, obj)
	case *ent.TestSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestSummary(ctx, sel, obj)
	case *ent.TestResultBES:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestResultBES(ctx, sel, obj)
	case model.TestResult:
		return ec._TestResult(ctx, sel, &obj)
	case *model.TestResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestResult(ctx, sel, obj)
	case *ent.TestFile:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestFile(ctx, sel, obj)
	case *ent.TestCollection:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestCollection(ctx, sel, obj)
	case *ent.TargetMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._TargetMetrics(ctx, sel, obj)
	case *ent.Target:
		if obj == nil {
			return graphql.Null
		}
		return ec._Target(ctx, sel, obj)
	case *ent.SystemNetworkStats:
		if obj == nil {
			return graphql.Null
		}
		return ec._SystemNetworkStats(ctx, sel, obj)
	case *ent.SourceControl:
		if obj == nil {
			return graphql.Null
		}
		return ec._SourceControl(ctx, sel, obj)
	case *ent.RunnerCount:
		if obj == nil {
			return graphql.Null
		}
		return ec._RunnerCount(ctx, sel, obj)
	case *ent.ResourceUsage:
		if obj == nil {
			return graphql.Null
		}
		return ec._ResourceUsage(ctx, sel, obj)
	case model.Problem:
		if obj == nil {
			return graphql.Null
		}
		return ec._Problem(ctx, sel, obj)
	case *ent.PackageMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._PackageMetrics(ctx, sel, obj)
	case *ent.PackageLoadMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._PackageLoadMetrics(ctx, sel, obj)
	case *ent.OutputGroup:
		if obj == nil {
			return graphql.Null
		}
		return ec._OutputGroup(ctx, sel, obj)
	case *ent.NetworkMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._NetworkMetrics(ctx, sel, obj)
	case *ent.NamedSetOfFiles:
		if obj == nil {
			return graphql.Null
		}
		return ec._NamedSetOfFiles(ctx, sel, obj)
	case *ent.MissDetail:
		if obj == nil {
			return graphql.Null
		}
		return ec._MissDetail(ctx, sel, obj)
	case *ent.Metrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metrics(ctx, sel, obj)
	case *ent.MemoryMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._MemoryMetrics(ctx, sel, obj)
	case *ent.InvocationFiles:
		if obj == nil {
			return graphql.Null
		}
		return ec._InvocationFiles(ctx, sel, obj)
	case *ent.IncompleteBuildLog:
		if obj == nil {
			return graphql.Null
		}
		return ec._IncompleteBuildLog(ctx, sel, obj)
	case *ent.GarbageMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._GarbageMetrics(ctx, sel, obj)
	case *ent.ExectionInfo:
		if obj == nil {
			return graphql.Null
		}
		return ec._ExectionInfo(ctx, sel, obj)
	case *ent.EvaluationStat:
		if obj == nil {
			return graphql.Null
		}
		return ec._EvaluationStat(ctx, sel, obj)
	case *ent.CumulativeMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._CumulativeMetrics(ctx, sel, obj)
	case *ent.BuildGraphMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._BuildGraphMetrics(ctx, sel, obj)
	case *ent.Build:
		if obj == nil {
			return graphql.Null
		}
		return ec._Build(ctx, sel, obj)
	case *ent.Blob:
		if obj == nil {
			return graphql.Null
		}
		return ec._Blob(ctx, sel, obj)
	case *ent.BazelInvocationProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._BazelInvocationProblem(ctx, sel, obj)
	case *ent.BazelInvocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._BazelInvocation(ctx, sel, obj)
	case *ent.ArtifactMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._ArtifactMetrics(ctx, sel, obj)
	case *ent.ActionSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionSummary(ctx, sel, obj)
	case *ent.ActionData:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionData(ctx, sel, obj)
	case *ent.ActionCacheStatistics:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionCacheStatistics(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Problem(ctx context.Context, sel ast.SelectionSet, obj model.Problem) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.TestProblem:
		return ec._TestProblem(ctx, sel, &obj)
	case *model.TestProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestProblem(ctx, sel, obj)
	case model.TargetProblem:
		return ec._TargetProblem(ctx, sel, &obj)
	case *model.TargetProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._TargetProblem(ctx, sel, obj)
	case model.ProgressProblem:
		return ec._ProgressProblem(ctx, sel, &obj)
	case *model.ProgressProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProgressProblem(ctx, sel, obj)
	case model.ActionProblem:
		return ec._ActionProblem(ctx, sel, &obj)
	case *model.ActionProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionProblem(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var actionCacheStatisticsImplementors = []string{"ActionCacheStatistics", "Node"}

func (ec *executionContext) _ActionCacheStatistics(ctx context.Context, sel ast.SelectionSet, obj *ent.ActionCacheStatistics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionCacheStatisticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionCacheStatistics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionCacheStatistics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sizeInBytes":
			out.Values[i] = ec._ActionCacheStatistics_sizeInBytes(ctx, field, obj)
		case "saveTimeInMs":
			out.Values[i] = ec._ActionCacheStatistics_saveTimeInMs(ctx, field, obj)
		case "loadTimeInMs":
			out.Values[i] = ec._ActionCacheStatistics_loadTimeInMs(ctx, field, obj)
		case "hits":
			out.Values[i] = ec._ActionCacheStatistics_hits(ctx, field, obj)
		case "misses":
			out.Values[i] = ec._ActionCacheStatistics_misses(ctx, field, obj)
		case "actionSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionCacheStatistics_actionSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "missDetails":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionCacheStatistics_missDetails(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionDataImplementors = []string{"ActionData", "Node"}

func (ec *executionContext) _ActionData(ctx context.Context, sel ast.SelectionSet, obj *ent.ActionData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionData")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionData_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mnemonic":
			out.Values[i] = ec._ActionData_mnemonic(ctx, field, obj)
		case "actionsExecuted":
			out.Values[i] = ec._ActionData_actionsExecuted(ctx, field, obj)
		case "actionsCreated":
			out.Values[i] = ec._ActionData_actionsCreated(ctx, field, obj)
		case "firstStartedMs":
			out.Values[i] = ec._ActionData_firstStartedMs(ctx, field, obj)
		case "lastEndedMs":
			out.Values[i] = ec._ActionData_lastEndedMs(ctx, field, obj)
		case "systemTime":
			out.Values[i] = ec._ActionData_systemTime(ctx, field, obj)
		case "userTime":
			out.Values[i] = ec._ActionData_userTime(ctx, field, obj)
		case "actionSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionData_actionSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionProblemImplementors = []string{"ActionProblem", "Node", "Problem"}

func (ec *executionContext) _ActionProblem(ctx context.Context, sel ast.SelectionSet, obj *model.ActionProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionProblem")
		case "id":
			out.Values[i] = ec._ActionProblem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "label":
			out.Values[i] = ec._ActionProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._ActionProblem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stdout":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionProblem_stdout(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "stderr":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionProblem_stderr(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSummaryImplementors = []string{"ActionSummary", "Node"}

func (ec *executionContext) _ActionSummary(ctx context.Context, sel ast.SelectionSet, obj *ent.ActionSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSummary")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionsCreated":
			out.Values[i] = ec._ActionSummary_actionsCreated(ctx, field, obj)
		case "actionsCreatedNotIncludingAspects":
			out.Values[i] = ec._ActionSummary_actionsCreatedNotIncludingAspects(ctx, field, obj)
		case "actionsExecuted":
			out.Values[i] = ec._ActionSummary_actionsExecuted(ctx, field, obj)
		case "remoteCacheHits":
			out.Values[i] = ec._ActionSummary_remoteCacheHits(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionData":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_actionData(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "runnerCount":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_runnerCount(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionCacheStatistics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_actionCacheStatistics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var artifactMetricsImplementors = []string{"ArtifactMetrics", "Node"}

func (ec *executionContext) _ArtifactMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.ArtifactMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArtifactMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ArtifactMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sourceArtifactsReadSizeInBytes":
			out.Values[i] = ec._ArtifactMetrics_sourceArtifactsReadSizeInBytes(ctx, field, obj)
		case "sourceArtifactsReadCount":
			out.Values[i] = ec._ArtifactMetrics_sourceArtifactsReadCount(ctx, field, obj)
		case "outputArtifactsSeenSizeInBytes":
			out.Values[i] = ec._ArtifactMetrics_outputArtifactsSeenSizeInBytes(ctx, field, obj)
		case "outputArtifactsSeenCount":
			out.Values[i] = ec._ArtifactMetrics_outputArtifactsSeenCount(ctx, field, obj)
		case "outputArtifactsFromActionCacheSizeInBytes":
			out.Values[i] = ec._ArtifactMetrics_outputArtifactsFromActionCacheSizeInBytes(ctx, field, obj)
		case "outputArtifactsFromActionCacheCount":
			out.Values[i] = ec._ArtifactMetrics_outputArtifactsFromActionCacheCount(ctx, field, obj)
		case "topLevelArtifactsSizeInBytes":
			out.Values[i] = ec._ArtifactMetrics_topLevelArtifactsSizeInBytes(ctx, field, obj)
		case "topLevelArtifactsCount":
			out.Values[i] = ec._ArtifactMetrics_topLevelArtifactsCount(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ArtifactMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelCommandImplementors = []string{"BazelCommand"}

func (ec *executionContext) _BazelCommand(ctx context.Context, sel ast.SelectionSet, obj *model.BazelCommand) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelCommandImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelCommand")
		case "id":
			out.Values[i] = ec._BazelCommand_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "command":
			out.Values[i] = ec._BazelCommand_command(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "executable":
			out.Values[i] = ec._BazelCommand_executable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "residual":
			out.Values[i] = ec._BazelCommand_residual(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "explicitCmdLine":
			out.Values[i] = ec._BazelCommand_explicitCmdLine(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cmdLine":
			out.Values[i] = ec._BazelCommand_cmdLine(ctx, field, obj)
		case "startupOptions":
			out.Values[i] = ec._BazelCommand_startupOptions(ctx, field, obj)
		case "explicitStartupOptions":
			out.Values[i] = ec._BazelCommand_explicitStartupOptions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationImplementors = []string{"BazelInvocation", "Node"}

func (ec *executionContext) _BazelInvocation(ctx context.Context, sel ast.SelectionSet, obj *ent.BazelInvocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocation")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "invocationID":
			out.Values[i] = ec._BazelInvocation_invocationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startedAt":
			out.Values[i] = ec._BazelInvocation_startedAt(ctx, field, obj)
		case "endedAt":
			out.Values[i] = ec._BazelInvocation_endedAt(ctx, field, obj)
		case "changeNumber":
			out.Values[i] = ec._BazelInvocation_changeNumber(ctx, field, obj)
		case "patchsetNumber":
			out.Values[i] = ec._BazelInvocation_patchsetNumber(ctx, field, obj)
		case "bepCompleted":
			out.Values[i] = ec._BazelInvocation_bepCompleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stepLabel":
			out.Values[i] = ec._BazelInvocation_stepLabel(ctx, field, obj)
		case "userEmail":
			out.Values[i] = ec._BazelInvocation_userEmail(ctx, field, obj)
		case "userLdap":
			out.Values[i] = ec._BazelInvocation_userLdap(ctx, field, obj)
		case "cpu":
			out.Values[i] = ec._BazelInvocation_cpu(ctx, field, obj)
		case "platformName":
			out.Values[i] = ec._BazelInvocation_platformName(ctx, field, obj)
		case "hostname":
			out.Values[i] = ec._BazelInvocation_hostname(ctx, field, obj)
		case "isCiWorker":
			out.Values[i] = ec._BazelInvocation_isCiWorker(ctx, field, obj)
		case "configurationMnemonic":
			out.Values[i] = ec._BazelInvocation_configurationMnemonic(ctx, field, obj)
		case "numFetches":
			out.Values[i] = ec._BazelInvocation_numFetches(ctx, field, obj)
		case "instanceName":
			out.Values[i] = ec._BazelInvocation_instanceName(ctx, field, obj)
		case "bazelVersion":
			out.Values[i] = ec._BazelInvocation_bazelVersion(ctx, field, obj)
		case "exitCodeName":
			out.Values[i] = ec._BazelInvocation_exitCodeName(ctx, field, obj)
		case "exitCodeCode":
			out.Values[i] = ec._BazelInvocation_exitCodeCode(ctx, field, obj)
		case "build":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_build(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "incompleteBuildLogs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_incompleteBuildLogs(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "invocationFiles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_invocationFiles(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "testCollection":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_testCollection(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "targets":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_targets(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sourceControl":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_sourceControl(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bazelCommand":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_bazelCommand(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "state":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_state(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "problems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_problems(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "profile":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_profile(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buildLogs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_buildLogs(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationConnectionImplementors = []string{"BazelInvocationConnection"}

func (ec *executionContext) _BazelInvocationConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.BazelInvocationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocationConnection")
		case "edges":
			out.Values[i] = ec._BazelInvocationConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BazelInvocationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._BazelInvocationConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationEdgeImplementors = []string{"BazelInvocationEdge"}

func (ec *executionContext) _BazelInvocationEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.BazelInvocationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocationEdge")
		case "node":
			out.Values[i] = ec._BazelInvocationEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BazelInvocationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationProblemImplementors = []string{"BazelInvocationProblem", "Node"}

func (ec *executionContext) _BazelInvocationProblem(ctx context.Context, sel ast.SelectionSet, obj *ent.BazelInvocationProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocationProblem")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocationProblem_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "problemType":
			out.Values[i] = ec._BazelInvocationProblem_problemType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "label":
			out.Values[i] = ec._BazelInvocationProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocationProblem_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationStateImplementors = []string{"BazelInvocationState"}

func (ec *executionContext) _BazelInvocationState(ctx context.Context, sel ast.SelectionSet, obj *model.BazelInvocationState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocationState")
		case "id":
			out.Values[i] = ec._BazelInvocationState_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "buildEndTime":
			out.Values[i] = ec._BazelInvocationState_buildEndTime(ctx, field, obj)
		case "buildStartTime":
			out.Values[i] = ec._BazelInvocationState_buildStartTime(ctx, field, obj)
		case "exitCode":
			out.Values[i] = ec._BazelInvocationState_exitCode(ctx, field, obj)
		case "bepCompleted":
			out.Values[i] = ec._BazelInvocationState_bepCompleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var blobImplementors = []string{"Blob", "Node"}

func (ec *executionContext) _Blob(ctx context.Context, sel ast.SelectionSet, obj *ent.Blob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blobImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Blob")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Blob_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "uri":
			out.Values[i] = ec._Blob_uri(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sizeBytes":
			out.Values[i] = ec._Blob_sizeBytes(ctx, field, obj)
		case "archivingStatus":
			out.Values[i] = ec._Blob_archivingStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "reason":
			out.Values[i] = ec._Blob_reason(ctx, field, obj)
		case "archiveURL":
			out.Values[i] = ec._Blob_archiveURL(ctx, field, obj)
		case "instanceName":
			out.Values[i] = ec._Blob_instanceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var blobReferenceImplementors = []string{"BlobReference"}

func (ec *executionContext) _BlobReference(ctx context.Context, sel ast.SelectionSet, obj *model.BlobReference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blobReferenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlobReference")
		case "name":
			out.Values[i] = ec._BlobReference_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "downloadURL":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BlobReference_downloadURL(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sizeInBytes":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BlobReference_sizeInBytes(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "availabilityStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BlobReference_availabilityStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "ephemeralURL":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BlobReference_ephemeralURL(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var buildImplementors = []string{"Build", "Node"}

func (ec *executionContext) _Build(ctx context.Context, sel ast.SelectionSet, obj *ent.Build) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Build")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Build_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buildURL":
			out.Values[i] = ec._Build_buildURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "buildUUID":
			out.Values[i] = ec._Build_buildUUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "instanceName":
			out.Values[i] = ec._Build_instanceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timestamp":
			out.Values[i] = ec._Build_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "invocations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Build_invocations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var buildConnectionImplementors = []string{"BuildConnection"}

func (ec *executionContext) _BuildConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.BuildConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildConnection")
		case "edges":
			out.Values[i] = ec._BuildConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BuildConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._BuildConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var buildEdgeImplementors = []string{"BuildEdge"}

func (ec *executionContext) _BuildEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.BuildEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildEdge")
		case "node":
			out.Values[i] = ec._BuildEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BuildEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var buildGraphMetricsImplementors = []string{"BuildGraphMetrics", "Node"}

func (ec *executionContext) _BuildGraphMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.BuildGraphMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildGraphMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildGraphMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BuildGraphMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionLookupValueCount":
			out.Values[i] = ec._BuildGraphMetrics_actionLookupValueCount(ctx, field, obj)
		case "actionLookupValueCountNotIncludingAspects":
			out.Values[i] = ec._BuildGraphMetrics_actionLookupValueCountNotIncludingAspects(ctx, field, obj)
		case "actionCount":
			out.Values[i] = ec._BuildGraphMetrics_actionCount(ctx, field, obj)
		case "actionCountNotIncludingAspects":
			out.Values[i] = ec._BuildGraphMetrics_actionCountNotIncludingAspects(ctx, field, obj)
		case "inputFileConfiguredTargetCount":
			out.Values[i] = ec._BuildGraphMetrics_inputFileConfiguredTargetCount(ctx, field, obj)
		case "outputFileConfiguredTargetCount":
			out.Values[i] = ec._BuildGraphMetrics_outputFileConfiguredTargetCount(ctx, field, obj)
		case "otherConfiguredTargetCount":
			out.Values[i] = ec._BuildGraphMetrics_otherConfiguredTargetCount(ctx, field, obj)
		case "outputArtifactCount":
			out.Values[i] = ec._BuildGraphMetrics_outputArtifactCount(ctx, field, obj)
		case "postInvocationSkyframeNodeCount":
			out.Values[i] = ec._BuildGraphMetrics_postInvocationSkyframeNodeCount(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BuildGraphMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dirtiedValues":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BuildGraphMetrics_dirtiedValues(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "changedValues":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BuildGraphMetrics_changedValues(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "builtValues":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BuildGraphMetrics_builtValues(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cleanedValues":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BuildGraphMetrics_cleanedValues(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "evaluatedValues":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BuildGraphMetrics_evaluatedValues(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cumulativeMetricsImplementors = []string{"CumulativeMetrics", "Node"}

func (ec *executionContext) _CumulativeMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.CumulativeMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cumulativeMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CumulativeMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CumulativeMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "numAnalyses":
			out.Values[i] = ec._CumulativeMetrics_numAnalyses(ctx, field, obj)
		case "numBuilds":
			out.Values[i] = ec._CumulativeMetrics_numBuilds(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CumulativeMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var evaluationStatImplementors = []string{"EvaluationStat", "Node"}

func (ec *executionContext) _EvaluationStat(ctx context.Context, sel ast.SelectionSet, obj *ent.EvaluationStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evaluationStatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvaluationStat")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EvaluationStat_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "skyfunctionName":
			out.Values[i] = ec._EvaluationStat_skyfunctionName(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EvaluationStat_count(ctx, field, obj)
		case "buildGraphMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EvaluationStat_buildGraphMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var exectionInfoImplementors = []string{"ExectionInfo", "Node"}

func (ec *executionContext) _ExectionInfo(ctx context.Context, sel ast.SelectionSet, obj *ent.ExectionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, exectionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExectionInfo")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExectionInfo_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timeoutSeconds":
			out.Values[i] = ec._ExectionInfo_timeoutSeconds(ctx, field, obj)
		case "strategy":
			out.Values[i] = ec._ExectionInfo_strategy(ctx, field, obj)
		case "cachedRemotely":
			out.Values[i] = ec._ExectionInfo_cachedRemotely(ctx, field, obj)
		case "exitCode":
			out.Values[i] = ec._ExectionInfo_exitCode(ctx, field, obj)
		case "hostname":
			out.Values[i] = ec._ExectionInfo_hostname(ctx, field, obj)
		case "testResult":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExectionInfo_testResult(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timingBreakdown":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExectionInfo_timingBreakdown(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "resourceUsage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExectionInfo_resourceUsage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var exitCodeImplementors = []string{"ExitCode"}

func (ec *executionContext) _ExitCode(ctx context.Context, sel ast.SelectionSet, obj *model.ExitCode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, exitCodeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExitCode")
		case "id":
			out.Values[i] = ec._ExitCode_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._ExitCode_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ExitCode_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var garbageMetricsImplementors = []string{"GarbageMetrics", "Node"}

func (ec *executionContext) _GarbageMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.GarbageMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, garbageMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GarbageMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GarbageMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "type":
			out.Values[i] = ec._GarbageMetrics_type(ctx, field, obj)
		case "garbageCollected":
			out.Values[i] = ec._GarbageMetrics_garbageCollected(ctx, field, obj)
		case "memoryMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GarbageMetrics_memoryMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var incompleteBuildLogImplementors = []string{"IncompleteBuildLog", "Node"}

func (ec *executionContext) _IncompleteBuildLog(ctx context.Context, sel ast.SelectionSet, obj *ent.IncompleteBuildLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, incompleteBuildLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IncompleteBuildLog")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._IncompleteBuildLog_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "snippetID":
			out.Values[i] = ec._IncompleteBuildLog_snippetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "logSnippet":
			out.Values[i] = ec._IncompleteBuildLog_logSnippet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._IncompleteBuildLog_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var invocationFilesImplementors = []string{"InvocationFiles", "Node"}

func (ec *executionContext) _InvocationFiles(ctx context.Context, sel ast.SelectionSet, obj *ent.InvocationFiles) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invocationFilesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvocationFiles")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InvocationFiles_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._InvocationFiles_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "content":
			out.Values[i] = ec._InvocationFiles_content(ctx, field, obj)
		case "digest":
			out.Values[i] = ec._InvocationFiles_digest(ctx, field, obj)
		case "sizeBytes":
			out.Values[i] = ec._InvocationFiles_sizeBytes(ctx, field, obj)
		case "digestFunction":
			out.Values[i] = ec._InvocationFiles_digestFunction(ctx, field, obj)
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InvocationFiles_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memoryMetricsImplementors = []string{"MemoryMetrics", "Node"}

func (ec *executionContext) _MemoryMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.MemoryMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memoryMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemoryMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemoryMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "peakPostGcHeapSize":
			out.Values[i] = ec._MemoryMetrics_peakPostGcHeapSize(ctx, field, obj)
		case "usedHeapSizePostBuild":
			out.Values[i] = ec._MemoryMetrics_usedHeapSizePostBuild(ctx, field, obj)
		case "peakPostGcTenuredSpaceHeapSize":
			out.Values[i] = ec._MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemoryMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "garbageMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemoryMetrics_garbageMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricsImplementors = []string{"Metrics", "Node"}

func (ec *executionContext) _Metrics(ctx context.Context, sel ast.SelectionSet, obj *ent.Metrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_actionSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "memoryMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_memoryMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "targetMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_targetMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "packageMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_packageMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timingMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_timingMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cumulativeMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_cumulativeMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "artifactMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_artifactMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "networkMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_networkMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buildGraphMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_buildGraphMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricsConnectionImplementors = []string{"MetricsConnection"}

func (ec *executionContext) _MetricsConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.MetricsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetricsConnection")
		case "edges":
			out.Values[i] = ec._MetricsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._MetricsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._MetricsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricsEdgeImplementors = []string{"MetricsEdge"}

func (ec *executionContext) _MetricsEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.MetricsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetricsEdge")
		case "node":
			out.Values[i] = ec._MetricsEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._MetricsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var missDetailImplementors = []string{"MissDetail", "Node"}

func (ec *executionContext) _MissDetail(ctx context.Context, sel ast.SelectionSet, obj *ent.MissDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, missDetailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MissDetail")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MissDetail_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "reason":
			out.Values[i] = ec._MissDetail_reason(ctx, field, obj)
		case "count":
			out.Values[i] = ec._MissDetail_count(ctx, field, obj)
		case "actionCacheStatistics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MissDetail_actionCacheStatistics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var namedSetOfFilesImplementors = []string{"NamedSetOfFiles", "Node"}

func (ec *executionContext) _NamedSetOfFiles(ctx context.Context, sel ast.SelectionSet, obj *ent.NamedSetOfFiles) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, namedSetOfFilesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NamedSetOfFiles")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NamedSetOfFiles_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "outputGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NamedSetOfFiles_outputGroup(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "files":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NamedSetOfFiles_files(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fileSets":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NamedSetOfFiles_fileSets(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var networkMetricsImplementors = []string{"NetworkMetrics", "Node"}

func (ec *executionContext) _NetworkMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.NetworkMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, networkMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NetworkMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NetworkMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NetworkMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systemNetworkStats":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NetworkMetrics_systemNetworkStats(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var outputGroupImplementors = []string{"OutputGroup", "Node"}

func (ec *executionContext) _OutputGroup(ctx context.Context, sel ast.SelectionSet, obj *ent.OutputGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, outputGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OutputGroup")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OutputGroup_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._OutputGroup_name(ctx, field, obj)
		case "incomplete":
			out.Values[i] = ec._OutputGroup_incomplete(ctx, field, obj)
		case "inlineFiles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OutputGroup_inlineFiles(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fileSets":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OutputGroup_fileSets(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var packageLoadMetricsImplementors = []string{"PackageLoadMetrics", "Node"}

func (ec *executionContext) _PackageLoadMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.PackageLoadMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, packageLoadMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PackageLoadMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageLoadMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._PackageLoadMetrics_name(ctx, field, obj)
		case "loadDuration":
			out.Values[i] = ec._PackageLoadMetrics_loadDuration(ctx, field, obj)
		case "numTargets":
			out.Values[i] = ec._PackageLoadMetrics_numTargets(ctx, field, obj)
		case "computationSteps":
			out.Values[i] = ec._PackageLoadMetrics_computationSteps(ctx, field, obj)
		case "numTransitiveLoads":
			out.Values[i] = ec._PackageLoadMetrics_numTransitiveLoads(ctx, field, obj)
		case "packageOverhead":
			out.Values[i] = ec._PackageLoadMetrics_packageOverhead(ctx, field, obj)
		case "packageMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageLoadMetrics_packageMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var packageMetricsImplementors = []string{"PackageMetrics", "Node"}

func (ec *executionContext) _PackageMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.PackageMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, packageMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PackageMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "packagesLoaded":
			out.Values[i] = ec._PackageMetrics_packagesLoaded(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "packageLoadMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageMetrics_packageLoadMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *entgql.PageInfo[int]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileImplementors = []string{"Profile"}

func (ec *executionContext) _Profile(ctx context.Context, sel ast.SelectionSet, obj *model.Profile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Profile")
		case "id":
			out.Values[i] = ec._Profile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Profile_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "digest":
			out.Values[i] = ec._Profile_digest(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sizeInBytes":
			out.Values[i] = ec._Profile_sizeInBytes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "digestFunction":
			out.Values[i] = ec._Profile_digestFunction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var progressProblemImplementors = []string{"ProgressProblem", "Node", "Problem"}

func (ec *executionContext) _ProgressProblem(ctx context.Context, sel ast.SelectionSet, obj *model.ProgressProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, progressProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProgressProblem")
		case "id":
			out.Values[i] = ec._ProgressProblem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._ProgressProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "output":
			out.Values[i] = ec._ProgressProblem_output(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "nodes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findBazelInvocations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findBazelInvocations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findBuilds":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findBuilds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMetrics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMetrics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findRunnerCounts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findRunnerCounts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTargets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTargets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTests(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_bazelInvocation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBuild":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBuild(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUniqueTestLabels":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUniqueTestLabels(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUniqueTargetLabels":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUniqueTargetLabels(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTestDurationAggregation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTestDurationAggregation(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTestPassAggregation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTestPassAggregation(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTargetDurationAggregation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTargetDurationAggregation(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTargetPassAggregation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTargetPassAggregation(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTestsWithOffset":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTestsWithOffset(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTargetsWithOffset":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTargetsWithOffset(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAveragePassPercentageForLabel":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAveragePassPercentageForLabel(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var resourceUsageImplementors = []string{"ResourceUsage", "Node"}

func (ec *executionContext) _ResourceUsage(ctx context.Context, sel ast.SelectionSet, obj *ent.ResourceUsage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceUsageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceUsage")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ResourceUsage_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._ResourceUsage_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._ResourceUsage_value(ctx, field, obj)
		case "executionInfo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ResourceUsage_executionInfo(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var runnerCountImplementors = []string{"RunnerCount", "Node"}

func (ec *executionContext) _RunnerCount(ctx context.Context, sel ast.SelectionSet, obj *ent.RunnerCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, runnerCountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RunnerCount")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RunnerCount_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._RunnerCount_name(ctx, field, obj)
		case "execKind":
			out.Values[i] = ec._RunnerCount_execKind(ctx, field, obj)
		case "actionsExecuted":
			out.Values[i] = ec._RunnerCount_actionsExecuted(ctx, field, obj)
		case "actionSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RunnerCount_actionSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var runnerCountConnectionImplementors = []string{"RunnerCountConnection"}

func (ec *executionContext) _RunnerCountConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.RunnerCountConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, runnerCountConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RunnerCountConnection")
		case "edges":
			out.Values[i] = ec._RunnerCountConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RunnerCountConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._RunnerCountConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var runnerCountEdgeImplementors = []string{"RunnerCountEdge"}

func (ec *executionContext) _RunnerCountEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.RunnerCountEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, runnerCountEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RunnerCountEdge")
		case "node":
			out.Values[i] = ec._RunnerCountEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._RunnerCountEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sourceControlImplementors = []string{"SourceControl", "Node"}

func (ec *executionContext) _SourceControl(ctx context.Context, sel ast.SelectionSet, obj *ent.SourceControl) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sourceControlImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SourceControl")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SourceControl_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "provider":
			out.Values[i] = ec._SourceControl_provider(ctx, field, obj)
		case "instanceURL":
			out.Values[i] = ec._SourceControl_instanceURL(ctx, field, obj)
		case "repo":
			out.Values[i] = ec._SourceControl_repo(ctx, field, obj)
		case "refs":
			out.Values[i] = ec._SourceControl_refs(ctx, field, obj)
		case "commitSha":
			out.Values[i] = ec._SourceControl_commitSha(ctx, field, obj)
		case "actor":
			out.Values[i] = ec._SourceControl_actor(ctx, field, obj)
		case "eventName":
			out.Values[i] = ec._SourceControl_eventName(ctx, field, obj)
		case "workflow":
			out.Values[i] = ec._SourceControl_workflow(ctx, field, obj)
		case "runID":
			out.Values[i] = ec._SourceControl_runID(ctx, field, obj)
		case "runNumber":
			out.Values[i] = ec._SourceControl_runNumber(ctx, field, obj)
		case "job":
			out.Values[i] = ec._SourceControl_job(ctx, field, obj)
		case "action":
			out.Values[i] = ec._SourceControl_action(ctx, field, obj)
		case "runnerName":
			out.Values[i] = ec._SourceControl_runnerName(ctx, field, obj)
		case "runnerArch":
			out.Values[i] = ec._SourceControl_runnerArch(ctx, field, obj)
		case "runnerOs":
			out.Values[i] = ec._SourceControl_runnerOs(ctx, field, obj)
		case "workspace":
			out.Values[i] = ec._SourceControl_workspace(ctx, field, obj)
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SourceControl_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemNetworkStatsImplementors = []string{"SystemNetworkStats", "Node"}

func (ec *executionContext) _SystemNetworkStats(ctx context.Context, sel ast.SelectionSet, obj *ent.SystemNetworkStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemNetworkStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemNetworkStats")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemNetworkStats_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bytesSent":
			out.Values[i] = ec._SystemNetworkStats_bytesSent(ctx, field, obj)
		case "bytesRecv":
			out.Values[i] = ec._SystemNetworkStats_bytesRecv(ctx, field, obj)
		case "packetsSent":
			out.Values[i] = ec._SystemNetworkStats_packetsSent(ctx, field, obj)
		case "packetsRecv":
			out.Values[i] = ec._SystemNetworkStats_packetsRecv(ctx, field, obj)
		case "peakBytesSentPerSec":
			out.Values[i] = ec._SystemNetworkStats_peakBytesSentPerSec(ctx, field, obj)
		case "peakBytesRecvPerSec":
			out.Values[i] = ec._SystemNetworkStats_peakBytesRecvPerSec(ctx, field, obj)
		case "peakPacketsSentPerSec":
			out.Values[i] = ec._SystemNetworkStats_peakPacketsSentPerSec(ctx, field, obj)
		case "peakPacketsRecvPerSec":
			out.Values[i] = ec._SystemNetworkStats_peakPacketsRecvPerSec(ctx, field, obj)
		case "networkMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemNetworkStats_networkMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetImplementors = []string{"Target", "Node"}

func (ec *executionContext) _Target(ctx context.Context, sel ast.SelectionSet, obj *ent.Target) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Target")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Target_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "label":
			out.Values[i] = ec._Target_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tag":
			out.Values[i] = ec._Target_tag(ctx, field, obj)
		case "targetKind":
			out.Values[i] = ec._Target_targetKind(ctx, field, obj)
		case "testSize":
			out.Values[i] = ec._Target_testSize(ctx, field, obj)
		case "success":
			out.Values[i] = ec._Target_success(ctx, field, obj)
		case "testTimeout":
			out.Values[i] = ec._Target_testTimeout(ctx, field, obj)
		case "startTimeInMs":
			out.Values[i] = ec._Target_startTimeInMs(ctx, field, obj)
		case "endTimeInMs":
			out.Values[i] = ec._Target_endTimeInMs(ctx, field, obj)
		case "durationInMs":
			out.Values[i] = ec._Target_durationInMs(ctx, field, obj)
		case "abortReason":
			out.Values[i] = ec._Target_abortReason(ctx, field, obj)
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Target_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetAggregateImplementors = []string{"TargetAggregate"}

func (ec *executionContext) _TargetAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.TargetAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetAggregate")
		case "label":
			out.Values[i] = ec._TargetAggregate_label(ctx, field, obj)
		case "count":
			out.Values[i] = ec._TargetAggregate_count(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._TargetAggregate_sum(ctx, field, obj)
		case "min":
			out.Values[i] = ec._TargetAggregate_min(ctx, field, obj)
		case "max":
			out.Values[i] = ec._TargetAggregate_max(ctx, field, obj)
		case "avg":
			out.Values[i] = ec._TargetAggregate_avg(ctx, field, obj)
		case "pass":
			out.Values[i] = ec._TargetAggregate_pass(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetConnectionImplementors = []string{"TargetConnection"}

func (ec *executionContext) _TargetConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TargetConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetConnection")
		case "edges":
			out.Values[i] = ec._TargetConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TargetConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TargetConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetEdgeImplementors = []string{"TargetEdge"}

func (ec *executionContext) _TargetEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TargetEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetEdge")
		case "node":
			out.Values[i] = ec._TargetEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TargetEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetGridCellImplementors = []string{"TargetGridCell"}

func (ec *executionContext) _TargetGridCell(ctx context.Context, sel ast.SelectionSet, obj *model.TargetGridCell) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetGridCellImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetGridCell")
		case "invocationId":
			out.Values[i] = ec._TargetGridCell_invocationId(ctx, field, obj)
		case "complete":
			out.Values[i] = ec._TargetGridCell_complete(ctx, field, obj)
		case "abortReason":
			out.Values[i] = ec._TargetGridCell_abortReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetGridResultImplementors = []string{"TargetGridResult"}

func (ec *executionContext) _TargetGridResult(ctx context.Context, sel ast.SelectionSet, obj *model.TargetGridResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetGridResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetGridResult")
		case "total":
			out.Values[i] = ec._TargetGridResult_total(ctx, field, obj)
		case "result":
			out.Values[i] = ec._TargetGridResult_result(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetGridRowImplementors = []string{"TargetGridRow"}

func (ec *executionContext) _TargetGridRow(ctx context.Context, sel ast.SelectionSet, obj *model.TargetGridRow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetGridRowImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetGridRow")
		case "label":
			out.Values[i] = ec._TargetGridRow_label(ctx, field, obj)
		case "count":
			out.Values[i] = ec._TargetGridRow_count(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._TargetGridRow_sum(ctx, field, obj)
		case "min":
			out.Values[i] = ec._TargetGridRow_min(ctx, field, obj)
		case "max":
			out.Values[i] = ec._TargetGridRow_max(ctx, field, obj)
		case "avg":
			out.Values[i] = ec._TargetGridRow_avg(ctx, field, obj)
		case "passRate":
			out.Values[i] = ec._TargetGridRow_passRate(ctx, field, obj)
		case "cells":
			out.Values[i] = ec._TargetGridRow_cells(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetMetricsImplementors = []string{"TargetMetrics", "Node"}

func (ec *executionContext) _TargetMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.TargetMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TargetMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "targetsLoaded":
			out.Values[i] = ec._TargetMetrics_targetsLoaded(ctx, field, obj)
		case "targetsConfigured":
			out.Values[i] = ec._TargetMetrics_targetsConfigured(ctx, field, obj)
		case "targetsConfiguredNotIncludingAspects":
			out.Values[i] = ec._TargetMetrics_targetsConfiguredNotIncludingAspects(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TargetMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetProblemImplementors = []string{"TargetProblem", "Node", "Problem"}

func (ec *executionContext) _TargetProblem(ctx context.Context, sel ast.SelectionSet, obj *model.TargetProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetProblem")
		case "id":
			out.Values[i] = ec._TargetProblem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._TargetProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testCollectionImplementors = []string{"TestCollection", "Node"}

func (ec *executionContext) _TestCollection(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCollection")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestCollection_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "label":
			out.Values[i] = ec._TestCollection_label(ctx, field, obj)
		case "overallStatus":
			out.Values[i] = ec._TestCollection_overallStatus(ctx, field, obj)
		case "strategy":
			out.Values[i] = ec._TestCollection_strategy(ctx, field, obj)
		case "cachedLocally":
			out.Values[i] = ec._TestCollection_cachedLocally(ctx, field, obj)
		case "cachedRemotely":
			out.Values[i] = ec._TestCollection_cachedRemotely(ctx, field, obj)
		case "firstSeen":
			out.Values[i] = ec._TestCollection_firstSeen(ctx, field, obj)
		case "durationMs":
			out.Values[i] = ec._TestCollection_durationMs(ctx, field, obj)
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestCollection_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "testSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestCollection_testSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "testResults":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestCollection_testResults(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testCollectionConnectionImplementors = []string{"TestCollectionConnection"}

func (ec *executionContext) _TestCollectionConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCollectionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCollectionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCollectionConnection")
		case "edges":
			out.Values[i] = ec._TestCollectionConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TestCollectionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TestCollectionConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testCollectionEdgeImplementors = []string{"TestCollectionEdge"}

func (ec *executionContext) _TestCollectionEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TestCollectionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testCollectionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestCollectionEdge")
		case "node":
			out.Values[i] = ec._TestCollectionEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TestCollectionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testFileImplementors = []string{"TestFile", "Node"}

func (ec *executionContext) _TestFile(ctx context.Context, sel ast.SelectionSet, obj *ent.TestFile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testFileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestFile")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestFile_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "digest":
			out.Values[i] = ec._TestFile_digest(ctx, field, obj)
		case "file":
			out.Values[i] = ec._TestFile_file(ctx, field, obj)
		case "length":
			out.Values[i] = ec._TestFile_length(ctx, field, obj)
		case "name":
			out.Values[i] = ec._TestFile_name(ctx, field, obj)
		case "prefix":
			out.Values[i] = ec._TestFile_prefix(ctx, field, obj)
		case "testResult":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestFile_testResult(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testGridCellImplementors = []string{"TestGridCell"}

func (ec *executionContext) _TestGridCell(ctx context.Context, sel ast.SelectionSet, obj *model.TestGridCell) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testGridCellImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestGridCell")
		case "invocationId":
			out.Values[i] = ec._TestGridCell_invocationId(ctx, field, obj)
		case "status":
			out.Values[i] = ec._TestGridCell_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testGridResultImplementors = []string{"TestGridResult"}

func (ec *executionContext) _TestGridResult(ctx context.Context, sel ast.SelectionSet, obj *model.TestGridResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testGridResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestGridResult")
		case "total":
			out.Values[i] = ec._TestGridResult_total(ctx, field, obj)
		case "result":
			out.Values[i] = ec._TestGridResult_result(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testGridRowImplementors = []string{"TestGridRow"}

func (ec *executionContext) _TestGridRow(ctx context.Context, sel ast.SelectionSet, obj *model.TestGridRow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testGridRowImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestGridRow")
		case "label":
			out.Values[i] = ec._TestGridRow_label(ctx, field, obj)
		case "count":
			out.Values[i] = ec._TestGridRow_count(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._TestGridRow_sum(ctx, field, obj)
		case "min":
			out.Values[i] = ec._TestGridRow_min(ctx, field, obj)
		case "max":
			out.Values[i] = ec._TestGridRow_max(ctx, field, obj)
		case "avg":
			out.Values[i] = ec._TestGridRow_avg(ctx, field, obj)
		case "passRate":
			out.Values[i] = ec._TestGridRow_passRate(ctx, field, obj)
		case "cells":
			out.Values[i] = ec._TestGridRow_cells(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testProblemImplementors = []string{"TestProblem", "Node", "Problem"}

func (ec *executionContext) _TestProblem(ctx context.Context, sel ast.SelectionSet, obj *model.TestProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestProblem")
		case "id":
			out.Values[i] = ec._TestProblem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._TestProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._TestProblem_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "results":
			out.Values[i] = ec._TestProblem_results(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testResultImplementors = []string{"TestResult", "Node"}

func (ec *executionContext) _TestResult(ctx context.Context, sel ast.SelectionSet, obj *model.TestResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestResult")
		case "id":
			out.Values[i] = ec._TestResult_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "run":
			out.Values[i] = ec._TestResult_run(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "shard":
			out.Values[i] = ec._TestResult_shard(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attempt":
			out.Values[i] = ec._TestResult_attempt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._TestResult_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "actionLogOutput":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestResult_actionLogOutput(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "undeclaredTestOutputs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestResult_undeclaredTestOutputs(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testResultBESImplementors = []string{"TestResultBES", "Node"}

func (ec *executionContext) _TestResultBES(ctx context.Context, sel ast.SelectionSet, obj *ent.TestResultBES) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testResultBESImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestResultBES")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestResultBES_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "testStatus":
			out.Values[i] = ec._TestResultBES_testStatus(ctx, field, obj)
		case "statusDetails":
			out.Values[i] = ec._TestResultBES_statusDetails(ctx, field, obj)
		case "label":
			out.Values[i] = ec._TestResultBES_label(ctx, field, obj)
		case "warning":
			out.Values[i] = ec._TestResultBES_warning(ctx, field, obj)
		case "cachedLocally":
			out.Values[i] = ec._TestResultBES_cachedLocally(ctx, field, obj)
		case "testAttemptStartMillisEpoch":
			out.Values[i] = ec._TestResultBES_testAttemptStartMillisEpoch(ctx, field, obj)
		case "testAttemptStart":
			out.Values[i] = ec._TestResultBES_testAttemptStart(ctx, field, obj)
		case "testAttemptDurationMillis":
			out.Values[i] = ec._TestResultBES_testAttemptDurationMillis(ctx, field, obj)
		case "testAttemptDuration":
			out.Values[i] = ec._TestResultBES_testAttemptDuration(ctx, field, obj)
		case "testCollection":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestResultBES_testCollection(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "testActionOutput":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestResultBES_testActionOutput(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "executionInfo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestResultBES_executionInfo(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testSummaryImplementors = []string{"TestSummary", "Node"}

func (ec *executionContext) _TestSummary(ctx context.Context, sel ast.SelectionSet, obj *ent.TestSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestSummary")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestSummary_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "overallStatus":
			out.Values[i] = ec._TestSummary_overallStatus(ctx, field, obj)
		case "totalRunCount":
			out.Values[i] = ec._TestSummary_totalRunCount(ctx, field, obj)
		case "runCount":
			out.Values[i] = ec._TestSummary_runCount(ctx, field, obj)
		case "attemptCount":
			out.Values[i] = ec._TestSummary_attemptCount(ctx, field, obj)
		case "shardCount":
			out.Values[i] = ec._TestSummary_shardCount(ctx, field, obj)
		case "totalNumCached":
			out.Values[i] = ec._TestSummary_totalNumCached(ctx, field, obj)
		case "firstStartTime":
			out.Values[i] = ec._TestSummary_firstStartTime(ctx, field, obj)
		case "lastStopTime":
			out.Values[i] = ec._TestSummary_lastStopTime(ctx, field, obj)
		case "totalRunDuration":
			out.Values[i] = ec._TestSummary_totalRunDuration(ctx, field, obj)
		case "label":
			out.Values[i] = ec._TestSummary_label(ctx, field, obj)
		case "testCollection":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestSummary_testCollection(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "passed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestSummary_passed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "failed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestSummary_failed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timingBreakdownImplementors = []string{"TimingBreakdown", "Node"}

func (ec *executionContext) _TimingBreakdown(ctx context.Context, sel ast.SelectionSet, obj *ent.TimingBreakdown) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timingBreakdownImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimingBreakdown")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingBreakdown_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._TimingBreakdown_name(ctx, field, obj)
		case "time":
			out.Values[i] = ec._TimingBreakdown_time(ctx, field, obj)
		case "executionInfo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingBreakdown_executionInfo(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "child":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingBreakdown_child(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timingChildImplementors = []string{"TimingChild", "Node"}

func (ec *executionContext) _TimingChild(ctx context.Context, sel ast.SelectionSet, obj *ent.TimingChild) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timingChildImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimingChild")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingChild_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._TimingChild_name(ctx, field, obj)
		case "time":
			out.Values[i] = ec._TimingChild_time(ctx, field, obj)
		case "timingBreakdown":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingChild_timingBreakdown(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timingMetricsImplementors = []string{"TimingMetrics", "Node"}

func (ec *executionContext) _TimingMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.TimingMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timingMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimingMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cpuTimeInMs":
			out.Values[i] = ec._TimingMetrics_cpuTimeInMs(ctx, field, obj)
		case "wallTimeInMs":
			out.Values[i] = ec._TimingMetrics_wallTimeInMs(ctx, field, obj)
		case "analysisPhaseTimeInMs":
			out.Values[i] = ec._TimingMetrics_analysisPhaseTimeInMs(ctx, field, obj)
		case "executionPhaseTimeInMs":
			out.Values[i] = ec._TimingMetrics_executionPhaseTimeInMs(ctx, field, obj)
		case "actionsExecutionStartInMs":
			out.Values[i] = ec._TimingMetrics_actionsExecutionStartInMs(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Email":
			out.Values[i] = ec._User_Email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "LDAP":
			out.Values[i] = ec._User_LDAP(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNActionCacheStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInput(ctx context.Context, v any) (*ent.ActionCacheStatisticsWhereInput, error) {
	res, err := ec.unmarshalInputActionCacheStatisticsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActionData2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionData(ctx context.Context, sel ast.SelectionSet, v *ent.ActionData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActionData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActionDataWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInput(ctx context.Context, v any) (*ent.ActionDataWhereInput, error) {
	res, err := ec.unmarshalInputActionDataWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNActionOutputStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐActionOutputStatus(ctx context.Context, v any) (model.ActionOutputStatus, error) {
	var res model.ActionOutputStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActionOutputStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐActionOutputStatus(ctx context.Context, sel ast.SelectionSet, v model.ActionOutputStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNActionSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInput(ctx context.Context, v any) (*ent.ActionSummaryWhereInput, error) {
	res, err := ec.unmarshalInputActionSummaryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNArtifactMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInput(ctx context.Context, v any) (*ent.ArtifactMetricsWhereInput, error) {
	res, err := ec.unmarshalInputArtifactMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBazelCommand2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelCommand(ctx context.Context, sel ast.SelectionSet, v model.BazelCommand) graphql.Marshaler {
	return ec._BazelCommand(ctx, sel, &v)
}

func (ec *executionContext) marshalNBazelCommand2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelCommand(ctx context.Context, sel ast.SelectionSet, v *model.BazelCommand) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BazelCommand(ctx, sel, v)
}

func (ec *executionContext) marshalNBazelInvocation2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx context.Context, sel ast.SelectionSet, v ent.BazelInvocation) graphql.Marshaler {
	return ec._BazelInvocation(ctx, sel, &v)
}

func (ec *executionContext) marshalNBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BazelInvocation(ctx, sel, v)
}

func (ec *executionContext) marshalNBazelInvocationConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationConnection(ctx context.Context, sel ast.SelectionSet, v ent.BazelInvocationConnection) graphql.Marshaler {
	return ec._BazelInvocationConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBazelInvocationConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationConnection(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocationConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BazelInvocationConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBazelInvocationOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationOrderField(ctx context.Context, v any) (*ent.BazelInvocationOrderField, error) {
	var res = new(ent.BazelInvocationOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBazelInvocationOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocationOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNBazelInvocationProblemWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInput(ctx context.Context, v any) (*ent.BazelInvocationProblemWhereInput, error) {
	res, err := ec.unmarshalInputBazelInvocationProblemWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBazelInvocationState2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelInvocationState(ctx context.Context, sel ast.SelectionSet, v model.BazelInvocationState) graphql.Marshaler {
	return ec._BazelInvocationState(ctx, sel, &v)
}

func (ec *executionContext) marshalNBazelInvocationState2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelInvocationState(ctx context.Context, sel ast.SelectionSet, v *model.BazelInvocationState) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BazelInvocationState(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx context.Context, v any) (*ent.BazelInvocationWhereInput, error) {
	res, err := ec.unmarshalInputBazelInvocationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx context.Context, v any) (blob.ArchivingStatus, error) {
	var res blob.ArchivingStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx context.Context, sel ast.SelectionSet, v blob.ArchivingStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNBlobReference2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx context.Context, sel ast.SelectionSet, v model.BlobReference) graphql.Marshaler {
	return ec._BlobReference(ctx, sel, &v)
}

func (ec *executionContext) marshalNBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx context.Context, sel ast.SelectionSet, v *model.BlobReference) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BlobReference(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBlobWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInput(ctx context.Context, v any) (*ent.BlobWhereInput, error) {
	res, err := ec.unmarshalInputBlobWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBuildConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildConnection(ctx context.Context, sel ast.SelectionSet, v ent.BuildConnection) graphql.Marshaler {
	return ec._BuildConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBuildConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildConnection(ctx context.Context, sel ast.SelectionSet, v *ent.BuildConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BuildConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBuildGraphMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInput(ctx context.Context, v any) (*ent.BuildGraphMetricsWhereInput, error) {
	res, err := ec.unmarshalInputBuildGraphMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx context.Context, v any) (*ent.BuildWhereInput, error) {
	res, err := ec.unmarshalInputBuildWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCumulativeMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInput(ctx context.Context, v any) (*ent.CumulativeMetricsWhereInput, error) {
	res, err := ec.unmarshalInputCumulativeMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v any) (entgql.Cursor[int], error) {
	var res entgql.Cursor[int]
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v entgql.Cursor[int]) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEvaluationStatWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInput(ctx context.Context, v any) (*ent.EvaluationStatWhereInput, error) {
	res, err := ec.unmarshalInputEvaluationStatWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNExectionInfoWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInput(ctx context.Context, v any) (*ent.ExectionInfoWhereInput, error) {
	res, err := ec.unmarshalInputExectionInfoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGarbageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.GarbageMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GarbageMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGarbageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInput(ctx context.Context, v any) (*ent.GarbageMetricsWhereInput, error) {
	res, err := ec.unmarshalInputGarbageMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIncompleteBuildLog2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLog(ctx context.Context, sel ast.SelectionSet, v *ent.IncompleteBuildLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IncompleteBuildLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIncompleteBuildLogWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogWhereInput(ctx context.Context, v any) (*ent.IncompleteBuildLogWhereInput, error) {
	res, err := ec.unmarshalInputIncompleteBuildLogWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int32(ctx context.Context, v any) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v any) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2uint64(ctx context.Context, v any) (uint64, error) {
	res, err := graphql.UnmarshalUint64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	res := graphql.MarshalUint64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNInvocationFiles2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFiles(ctx context.Context, sel ast.SelectionSet, v *ent.InvocationFiles) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InvocationFiles(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInvocationFilesWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesWhereInput(ctx context.Context, v any) (*ent.InvocationFilesWhereInput, error) {
	res, err := ec.unmarshalInputInvocationFilesWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMemoryMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInput(ctx context.Context, v any) (*ent.MemoryMetricsWhereInput, error) {
	res, err := ec.unmarshalInputMemoryMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMetricsConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsConnection(ctx context.Context, sel ast.SelectionSet, v ent.MetricsConnection) graphql.Marshaler {
	return ec._MetricsConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNMetricsConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsConnection(ctx context.Context, sel ast.SelectionSet, v *ent.MetricsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetricsConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx context.Context, v any) (*ent.MetricsWhereInput, error) {
	res, err := ec.unmarshalInputMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMissDetail2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetail(ctx context.Context, sel ast.SelectionSet, v *ent.MissDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MissDetail(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, v any) (missdetail.Reason, error) {
	var res missdetail.Reason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, sel ast.SelectionSet, v missdetail.Reason) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMissDetailWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInput(ctx context.Context, v any) (*ent.MissDetailWhereInput, error) {
	res, err := ec.unmarshalInputMissDetailWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNamedSetOfFilesWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInput(ctx context.Context, v any) (*ent.NamedSetOfFilesWhereInput, error) {
	res, err := ec.unmarshalInputNamedSetOfFilesWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNetworkMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInput(ctx context.Context, v any) (*ent.NetworkMetricsWhereInput, error) {
	res, err := ec.unmarshalInputNetworkMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNode2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v []ent.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, v any) (entgql.OrderDirection, error) {
	var res entgql.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v entgql.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOutputGroupWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroupWhereInput(ctx context.Context, v any) (*ent.OutputGroupWhereInput, error) {
	res, err := ec.unmarshalInputOutputGroupWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPackageLoadMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.PackageLoadMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PackageLoadMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPackageLoadMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInput(ctx context.Context, v any) (*ent.PackageLoadMetricsWhereInput, error) {
	res, err := ec.unmarshalInputPackageLoadMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPackageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInput(ctx context.Context, v any) (*ent.PackageMetricsWhereInput, error) {
	res, err := ec.unmarshalInputPackageMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v entgql.PageInfo[int]) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNProblem2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProblem(ctx context.Context, sel ast.SelectionSet, v model.Problem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Problem(ctx, sel, v)
}

func (ec *executionContext) marshalNProblem2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProblemᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Problem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProblem2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProblem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNResourceUsage2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsage(ctx context.Context, sel ast.SelectionSet, v *ent.ResourceUsage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ResourceUsage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResourceUsageWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageWhereInput(ctx context.Context, v any) (*ent.ResourceUsageWhereInput, error) {
	res, err := ec.unmarshalInputResourceUsageWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRunnerCount2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCount(ctx context.Context, sel ast.SelectionSet, v *ent.RunnerCount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RunnerCount(ctx, sel, v)
}

func (ec *executionContext) marshalNRunnerCountConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountConnection(ctx context.Context, sel ast.SelectionSet, v ent.RunnerCountConnection) graphql.Marshaler {
	return ec._RunnerCountConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRunnerCountConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountConnection(ctx context.Context, sel ast.SelectionSet, v *ent.RunnerCountConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RunnerCountConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx context.Context, v any) (*ent.RunnerCountWhereInput, error) {
	res, err := ec.unmarshalInputRunnerCountWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSourceControlProvider2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx context.Context, v any) (sourcecontrol.Provider, error) {
	var res sourcecontrol.Provider
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSourceControlProvider2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx context.Context, sel ast.SelectionSet, v sourcecontrol.Provider) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSourceControlWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControlWhereInput(ctx context.Context, v any) (*ent.SourceControlWhereInput, error) {
	res, err := ec.unmarshalInputSourceControlWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemNetworkStatsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInput(ctx context.Context, v any) (*ent.SystemNetworkStatsWhereInput, error) {
	res, err := ec.unmarshalInputSystemNetworkStatsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTarget2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTarget(ctx context.Context, sel ast.SelectionSet, v *ent.Target) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Target(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTargetAbortReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx context.Context, v any) (target.AbortReason, error) {
	var res target.AbortReason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTargetAbortReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx context.Context, sel ast.SelectionSet, v target.AbortReason) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTargetConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetConnection(ctx context.Context, sel ast.SelectionSet, v ent.TargetConnection) graphql.Marshaler {
	return ec._TargetConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTargetConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetConnection(ctx context.Context, sel ast.SelectionSet, v *ent.TargetConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TargetConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTargetMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInput(ctx context.Context, v any) (*ent.TargetMetricsWhereInput, error) {
	res, err := ec.unmarshalInputTargetMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTargetOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetOrderField(ctx context.Context, v any) (*ent.TargetOrderField, error) {
	var res = new(ent.TargetOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTargetOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TargetOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNTargetTestSize2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx context.Context, v any) (target.TestSize, error) {
	var res target.TestSize
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTargetTestSize2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx context.Context, sel ast.SelectionSet, v target.TestSize) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTargetWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInput(ctx context.Context, v any) (*ent.TargetWhereInput, error) {
	res, err := ec.unmarshalInputTargetWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestCollection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollection(ctx context.Context, sel ast.SelectionSet, v *ent.TestCollection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TestCollection(ctx, sel, v)
}

func (ec *executionContext) marshalNTestCollectionConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionConnection(ctx context.Context, sel ast.SelectionSet, v ent.TestCollectionConnection) graphql.Marshaler {
	return ec._TestCollectionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTestCollectionConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionConnection(ctx context.Context, sel ast.SelectionSet, v *ent.TestCollectionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TestCollectionConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTestCollectionOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionOrderField(ctx context.Context, v any) (*ent.TestCollectionOrderField, error) {
	var res = new(ent.TestCollectionOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestCollectionOrderField2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TestCollectionOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNTestCollectionOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx context.Context, v any) (testcollection.OverallStatus, error) {
	var res testcollection.OverallStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestCollectionOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx context.Context, sel ast.SelectionSet, v testcollection.OverallStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTestCollectionWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInput(ctx context.Context, v any) (*ent.TestCollectionWhereInput, error) {
	res, err := ec.unmarshalInputTestCollectionWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestFile2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFile(ctx context.Context, sel ast.SelectionSet, v *ent.TestFile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TestFile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTestFileWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInput(ctx context.Context, v any) (*ent.TestFileWhereInput, error) {
	res, err := ec.unmarshalInputTestFileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestResult2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestResultᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TestResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTestResult2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTestResult2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestResult(ctx context.Context, sel ast.SelectionSet, v *model.TestResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TestResult(ctx, sel, v)
}

func (ec *executionContext) marshalNTestResultBES2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBES(ctx context.Context, sel ast.SelectionSet, v *ent.TestResultBES) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TestResultBES(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTestResultBESTestStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx context.Context, v any) (testresultbes.TestStatus, error) {
	var res testresultbes.TestStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestResultBESTestStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx context.Context, sel ast.SelectionSet, v testresultbes.TestStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTestResultBESWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInput(ctx context.Context, v any) (*ent.TestResultBESWhereInput, error) {
	res, err := ec.unmarshalInputTestResultBESWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTestSummaryOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx context.Context, v any) (testsummary.OverallStatus, error) {
	var res testsummary.OverallStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestSummaryOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx context.Context, sel ast.SelectionSet, v testsummary.OverallStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTestSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummaryWhereInput(ctx context.Context, v any) (*ent.TestSummaryWhereInput, error) {
	res, err := ec.unmarshalInputTestSummaryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimingBreakdownWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInput(ctx context.Context, v any) (*ent.TimingBreakdownWhereInput, error) {
	res, err := ec.unmarshalInputTimingBreakdownWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimingChild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChild(ctx context.Context, sel ast.SelectionSet, v *ent.TimingChild) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TimingChild(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTimingChildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildWhereInput(ctx context.Context, v any) (*ent.TimingChildWhereInput, error) {
	res, err := ec.unmarshalInputTimingChildWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTimingMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInput(ctx context.Context, v any) (*ent.TimingMetricsWhereInput, error) {
	res, err := ec.unmarshalInputTimingMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (uuid.UUID, error) {
	res, err := uuidgql.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := uuidgql.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOActionCacheStatistics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatistics(ctx context.Context, sel ast.SelectionSet, v *ent.ActionCacheStatistics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionCacheStatistics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx context.Context, v any) ([]*ent.ActionCacheStatisticsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.ActionCacheStatisticsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActionCacheStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOActionCacheStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInput(ctx context.Context, v any) (*ent.ActionCacheStatisticsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputActionCacheStatisticsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionData2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ActionData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActionData2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOActionDataWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInputᚄ(ctx context.Context, v any) ([]*ent.ActionDataWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.ActionDataWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActionDataWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOActionDataWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInput(ctx context.Context, v any) (*ent.ActionDataWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputActionDataWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummary(ctx context.Context, sel ast.SelectionSet, v *ent.ActionSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSummary(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx context.Context, v any) ([]*ent.ActionSummaryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.ActionSummaryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActionSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOActionSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInput(ctx context.Context, v any) (*ent.ActionSummaryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputActionSummaryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.ArtifactMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArtifactMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.ArtifactMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.ArtifactMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNArtifactMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOArtifactMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInput(ctx context.Context, v any) (*ent.ArtifactMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArtifactMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBazelInvocation2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.BazelInvocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BazelInvocation(ctx, sel, v)
}

func (ec *executionContext) marshalOBazelInvocationEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.BazelInvocationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBazelInvocationEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBazelInvocationEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationEdge(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BazelInvocationEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBazelInvocationOrder2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationOrder(ctx context.Context, v any) (*ent.BazelInvocationOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBazelInvocationOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBazelInvocationProblemWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInputᚄ(ctx context.Context, v any) ([]*ent.BazelInvocationProblemWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.BazelInvocationProblemWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBazelInvocationProblemWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBazelInvocationProblemWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInput(ctx context.Context, v any) (*ent.BazelInvocationProblemWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBazelInvocationProblemWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx context.Context, v any) ([]*ent.BazelInvocationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.BazelInvocationWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx context.Context, v any) (*ent.BazelInvocationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBazelInvocationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlobArchivingStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatusᚄ(ctx context.Context, v any) ([]blob.ArchivingStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]blob.ArchivingStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBlobArchivingStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []blob.ArchivingStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBlobArchivingStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx context.Context, v any) (*blob.ArchivingStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(blob.ArchivingStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlobArchivingStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx context.Context, sel ast.SelectionSet, v *blob.ArchivingStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx context.Context, sel ast.SelectionSet, v *model.BlobReference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlobReference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlobWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInputᚄ(ctx context.Context, v any) ([]*ent.BlobWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.BlobWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlobWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlobWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInput(ctx context.Context, v any) (*ent.BlobWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlobWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBuild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuild(ctx context.Context, sel ast.SelectionSet, v *ent.Build) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Build(ctx, sel, v)
}

func (ec *executionContext) marshalOBuildEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.BuildEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBuildEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBuildEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildEdge(ctx context.Context, sel ast.SelectionSet, v *ent.BuildEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BuildEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOBuildGraphMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.BuildGraphMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BuildGraphMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBuildGraphMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.BuildGraphMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.BuildGraphMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBuildGraphMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBuildGraphMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildGraphMetricsWhereInput(ctx context.Context, v any) (*ent.BuildGraphMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBuildGraphMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBuildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInputᚄ(ctx context.Context, v any) ([]*ent.BuildWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.BuildWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx context.Context, v any) (*ent.BuildWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBuildWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCumulativeMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.CumulativeMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CumulativeMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCumulativeMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.CumulativeMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.CumulativeMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCumulativeMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCumulativeMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInput(ctx context.Context, v any) (*ent.CumulativeMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCumulativeMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v any) (*entgql.Cursor[int], error) {
	if v == nil {
		return nil, nil
	}
	var res = new(entgql.Cursor[int])
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v *entgql.Cursor[int]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOEvaluationStat2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStat(ctx context.Context, sel ast.SelectionSet, v *ent.EvaluationStat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EvaluationStat(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEvaluationStatWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInputᚄ(ctx context.Context, v any) ([]*ent.EvaluationStatWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.EvaluationStatWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEvaluationStatWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEvaluationStatWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEvaluationStatWhereInput(ctx context.Context, v any) (*ent.EvaluationStatWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEvaluationStatWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOExectionInfo2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfo(ctx context.Context, sel ast.SelectionSet, v *ent.ExectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExectionInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOExectionInfoWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInputᚄ(ctx context.Context, v any) ([]*ent.ExectionInfoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.ExectionInfoWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNExectionInfoWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOExectionInfoWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐExectionInfoWhereInput(ctx context.Context, v any) (*ent.ExectionInfoWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputExectionInfoWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOExitCode2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐExitCode(ctx context.Context, sel ast.SelectionSet, v *model.ExitCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExitCode(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGarbageMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.GarbageMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGarbageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGarbageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.GarbageMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.GarbageMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGarbageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOGarbageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInput(ctx context.Context, v any) (*ent.GarbageMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGarbageMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) marshalOIncompleteBuildLog2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.IncompleteBuildLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIncompleteBuildLog2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOIncompleteBuildLogWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogWhereInputᚄ(ctx context.Context, v any) ([]*ent.IncompleteBuildLogWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.IncompleteBuildLogWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIncompleteBuildLogWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOIncompleteBuildLogWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐIncompleteBuildLogWhereInput(ctx context.Context, v any) (*ent.IncompleteBuildLogWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIncompleteBuildLogWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt2int32(ctx context.Context, v any) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	return res
}

func (ec *executionContext) unmarshalOInt2int64(ctx context.Context, v any) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	return res
}

func (ec *executionContext) unmarshalOInt2uint64(ctx context.Context, v any) (uint64, error) {
	res, err := graphql.UnmarshalUint64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	res := graphql.MarshalUint64(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕint32ᚄ(ctx context.Context, v any) ([]int32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]int32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕint32ᚄ(ctx context.Context, sel ast.SelectionSet, v []int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int32(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕint64ᚄ(ctx context.Context, v any) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v any) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕuint64ᚄ(ctx context.Context, v any) ([]uint64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uint64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2uint64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕuint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2uint64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v any) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖuint64(ctx context.Context, v any) (*uint64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUint64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖuint64(ctx context.Context, sel ast.SelectionSet, v *uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUint64(*v)
	return res
}

func (ec *executionContext) marshalOInvocationFiles2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.InvocationFiles) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInvocationFiles2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFiles(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInvocationFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesWhereInputᚄ(ctx context.Context, v any) ([]*ent.InvocationFilesWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.InvocationFilesWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInvocationFilesWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInvocationFilesWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐInvocationFilesWhereInput(ctx context.Context, v any) (*ent.InvocationFilesWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInvocationFilesWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMemoryMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.MemoryMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MemoryMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.MemoryMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.MemoryMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMemoryMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMemoryMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInput(ctx context.Context, v any) (*ent.MemoryMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMemoryMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.Metrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Metrics(ctx, sel, v)
}

func (ec *executionContext) marshalOMetricsEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.MetricsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMetricsEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMetricsEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsEdge(ctx context.Context, sel ast.SelectionSet, v *ent.MetricsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetricsEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.MetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.MetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx context.Context, v any) (*ent.MetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMissDetail2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.MissDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMissDetail2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, v any) (missdetail.Reason, error) {
	var res missdetail.Reason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, sel ast.SelectionSet, v missdetail.Reason) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOMissDetailReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReasonᚄ(ctx context.Context, v any) ([]missdetail.Reason, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]missdetail.Reason, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMissDetailReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReasonᚄ(ctx context.Context, sel ast.SelectionSet, v []missdetail.Reason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMissDetailReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, v any) (*missdetail.Reason, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(missdetail.Reason)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMissDetailReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, sel ast.SelectionSet, v *missdetail.Reason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMissDetailWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInputᚄ(ctx context.Context, v any) ([]*ent.MissDetailWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.MissDetailWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMissDetailWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMissDetailWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInput(ctx context.Context, v any) (*ent.MissDetailWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMissDetailWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONamedSetOfFiles2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFiles(ctx context.Context, sel ast.SelectionSet, v *ent.NamedSetOfFiles) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NamedSetOfFiles(ctx, sel, v)
}

func (ec *executionContext) unmarshalONamedSetOfFilesWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInputᚄ(ctx context.Context, v any) ([]*ent.NamedSetOfFilesWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.NamedSetOfFilesWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNamedSetOfFilesWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONamedSetOfFilesWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNamedSetOfFilesWhereInput(ctx context.Context, v any) (*ent.NamedSetOfFilesWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNamedSetOfFilesWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONetworkMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.NetworkMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NetworkMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.NetworkMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.NetworkMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNetworkMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONetworkMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInput(ctx context.Context, v any) (*ent.NetworkMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNetworkMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONode2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v ent.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOOutputGroup2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroup(ctx context.Context, sel ast.SelectionSet, v *ent.OutputGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OutputGroup(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOutputGroupWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroupWhereInputᚄ(ctx context.Context, v any) ([]*ent.OutputGroupWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.OutputGroupWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOutputGroupWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroupWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOutputGroupWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐOutputGroupWhereInput(ctx context.Context, v any) (*ent.OutputGroupWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOutputGroupWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPackageLoadMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.PackageLoadMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPackageLoadMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPackageLoadMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.PackageLoadMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.PackageLoadMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPackageLoadMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPackageLoadMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInput(ctx context.Context, v any) (*ent.PackageLoadMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPackageLoadMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPackageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.PackageMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PackageMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.PackageMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.PackageMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPackageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPackageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInput(ctx context.Context, v any) (*ent.PackageMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPackageMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProfile2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProfile(ctx context.Context, sel ast.SelectionSet, v *model.Profile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Profile(ctx, sel, v)
}

func (ec *executionContext) marshalOResourceUsage2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ResourceUsage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResourceUsage2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOResourceUsageWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageWhereInputᚄ(ctx context.Context, v any) ([]*ent.ResourceUsageWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.ResourceUsageWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNResourceUsageWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOResourceUsageWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐResourceUsageWhereInput(ctx context.Context, v any) (*ent.ResourceUsageWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputResourceUsageWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORunnerCount2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.RunnerCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRunnerCount2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORunnerCount2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCount(ctx context.Context, sel ast.SelectionSet, v *ent.RunnerCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RunnerCount(ctx, sel, v)
}

func (ec *executionContext) marshalORunnerCountEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.RunnerCountEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORunnerCountEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORunnerCountEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountEdge(ctx context.Context, sel ast.SelectionSet, v *ent.RunnerCountEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RunnerCountEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORunnerCountWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInputᚄ(ctx context.Context, v any) ([]*ent.RunnerCountWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.RunnerCountWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx context.Context, v any) (*ent.RunnerCountWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRunnerCountWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSourceControl2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControl(ctx context.Context, sel ast.SelectionSet, v *ent.SourceControl) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SourceControl(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSourceControlProvider2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx context.Context, v any) (sourcecontrol.Provider, error) {
	var res sourcecontrol.Provider
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSourceControlProvider2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx context.Context, sel ast.SelectionSet, v sourcecontrol.Provider) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOSourceControlProvider2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProviderᚄ(ctx context.Context, v any) ([]sourcecontrol.Provider, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]sourcecontrol.Provider, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSourceControlProvider2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSourceControlProvider2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProviderᚄ(ctx context.Context, sel ast.SelectionSet, v []sourcecontrol.Provider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSourceControlProvider2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSourceControlProvider2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx context.Context, v any) (*sourcecontrol.Provider, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(sourcecontrol.Provider)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSourceControlProvider2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋsourcecontrolᚐProvider(ctx context.Context, sel ast.SelectionSet, v *sourcecontrol.Provider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSourceControlWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControlWhereInputᚄ(ctx context.Context, v any) ([]*ent.SourceControlWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.SourceControlWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSourceControlWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControlWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSourceControlWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSourceControlWhereInput(ctx context.Context, v any) (*ent.SourceControlWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSourceControlWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v any) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSystemNetworkStats2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStats(ctx context.Context, sel ast.SelectionSet, v *ent.SystemNetworkStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemNetworkStats(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemNetworkStatsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInputᚄ(ctx context.Context, v any) ([]*ent.SystemNetworkStatsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.SystemNetworkStatsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemNetworkStatsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSystemNetworkStatsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInput(ctx context.Context, v any) (*ent.SystemNetworkStatsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemNetworkStatsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTarget2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Target) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTarget2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTarget(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTarget2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTarget(ctx context.Context, sel ast.SelectionSet, v *ent.Target) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Target(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTargetAbortReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx context.Context, v any) (target.AbortReason, error) {
	var res target.AbortReason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTargetAbortReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx context.Context, sel ast.SelectionSet, v target.AbortReason) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTargetAbortReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReasonᚄ(ctx context.Context, v any) ([]target.AbortReason, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]target.AbortReason, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTargetAbortReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTargetAbortReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReasonᚄ(ctx context.Context, sel ast.SelectionSet, v []target.AbortReason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTargetAbortReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTargetAbortReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx context.Context, v any) (*target.AbortReason, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(target.AbortReason)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTargetAbortReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐAbortReason(ctx context.Context, sel ast.SelectionSet, v *target.AbortReason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOTargetAggregate2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetAggregate(ctx context.Context, sel ast.SelectionSet, v []*model.TargetAggregate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTargetAggregate2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetAggregate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTargetAggregate2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetAggregate(ctx context.Context, sel ast.SelectionSet, v *model.TargetAggregate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TargetAggregate(ctx, sel, v)
}

func (ec *executionContext) marshalOTargetEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TargetEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTargetEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTargetEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TargetEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TargetEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOTargetGridCell2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridCell(ctx context.Context, sel ast.SelectionSet, v []*model.TargetGridCell) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTargetGridCell2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridCell(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTargetGridCell2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridCell(ctx context.Context, sel ast.SelectionSet, v *model.TargetGridCell) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TargetGridCell(ctx, sel, v)
}

func (ec *executionContext) marshalOTargetGridResult2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridResult(ctx context.Context, sel ast.SelectionSet, v *model.TargetGridResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TargetGridResult(ctx, sel, v)
}

func (ec *executionContext) marshalOTargetGridRow2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridRow(ctx context.Context, sel ast.SelectionSet, v []*model.TargetGridRow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTargetGridRow2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridRow(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTargetGridRow2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTargetGridRow(ctx context.Context, sel ast.SelectionSet, v *model.TargetGridRow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TargetGridRow(ctx, sel, v)
}

func (ec *executionContext) marshalOTargetMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.TargetMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TargetMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTargetMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.TargetMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TargetMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTargetMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTargetMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInput(ctx context.Context, v any) (*ent.TargetMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTargetMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTargetOrder2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetOrder(ctx context.Context, v any) (*ent.TargetOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTargetOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTargetTestSize2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx context.Context, v any) (target.TestSize, error) {
	var res target.TestSize
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTargetTestSize2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx context.Context, sel ast.SelectionSet, v target.TestSize) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTargetTestSize2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSizeᚄ(ctx context.Context, v any) ([]target.TestSize, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]target.TestSize, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTargetTestSize2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTargetTestSize2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSizeᚄ(ctx context.Context, sel ast.SelectionSet, v []target.TestSize) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTargetTestSize2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTargetTestSize2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx context.Context, v any) (*target.TestSize, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(target.TestSize)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTargetTestSize2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtargetᚐTestSize(ctx context.Context, sel ast.SelectionSet, v *target.TestSize) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTargetWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInputᚄ(ctx context.Context, v any) ([]*ent.TargetWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TargetWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTargetWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTargetWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetWhereInput(ctx context.Context, v any) (*ent.TargetWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTargetWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestCollection2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TestCollection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTestCollection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTestCollection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollection(ctx context.Context, sel ast.SelectionSet, v *ent.TestCollection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestCollection(ctx, sel, v)
}

func (ec *executionContext) marshalOTestCollectionEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TestCollectionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestCollectionEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTestCollectionEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TestCollectionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestCollectionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestCollectionOrder2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionOrder(ctx context.Context, v any) (*ent.TestCollectionOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestCollectionOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestCollectionOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx context.Context, v any) (testcollection.OverallStatus, error) {
	var res testcollection.OverallStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestCollectionOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx context.Context, sel ast.SelectionSet, v testcollection.OverallStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTestCollectionOverallStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatusᚄ(ctx context.Context, v any) ([]testcollection.OverallStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]testcollection.OverallStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestCollectionOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTestCollectionOverallStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []testcollection.OverallStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTestCollectionOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTestCollectionOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx context.Context, v any) (*testcollection.OverallStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(testcollection.OverallStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestCollectionOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestcollectionᚐOverallStatus(ctx context.Context, sel ast.SelectionSet, v *testcollection.OverallStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTestCollectionWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInputᚄ(ctx context.Context, v any) ([]*ent.TestCollectionWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TestCollectionWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestCollectionWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestCollectionWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestCollectionWhereInput(ctx context.Context, v any) (*ent.TestCollectionWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestCollectionWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestFile2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TestFile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTestFile2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTestFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInputᚄ(ctx context.Context, v any) ([]*ent.TestFileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TestFileWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestFileWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestFileWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestFileWhereInput(ctx context.Context, v any) (*ent.TestFileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestFileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestGridCell2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridCell(ctx context.Context, sel ast.SelectionSet, v []*model.TestGridCell) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestGridCell2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridCell(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTestGridCell2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridCell(ctx context.Context, sel ast.SelectionSet, v *model.TestGridCell) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestGridCell(ctx, sel, v)
}

func (ec *executionContext) marshalOTestGridResult2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridResult(ctx context.Context, sel ast.SelectionSet, v *model.TestGridResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestGridResult(ctx, sel, v)
}

func (ec *executionContext) marshalOTestGridRow2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridRow(ctx context.Context, sel ast.SelectionSet, v []*model.TestGridRow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestGridRow2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridRow(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTestGridRow2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestGridRow(ctx context.Context, sel ast.SelectionSet, v *model.TestGridRow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestGridRow(ctx, sel, v)
}

func (ec *executionContext) marshalOTestResultBES2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TestResultBES) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTestResultBES2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBES(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTestResultBES2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBES(ctx context.Context, sel ast.SelectionSet, v *ent.TestResultBES) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestResultBES(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestResultBESTestStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx context.Context, v any) (testresultbes.TestStatus, error) {
	var res testresultbes.TestStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestResultBESTestStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx context.Context, sel ast.SelectionSet, v testresultbes.TestStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTestResultBESTestStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatusᚄ(ctx context.Context, v any) ([]testresultbes.TestStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]testresultbes.TestStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestResultBESTestStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTestResultBESTestStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []testresultbes.TestStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTestResultBESTestStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTestResultBESTestStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx context.Context, v any) (*testresultbes.TestStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(testresultbes.TestStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestResultBESTestStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestresultbesᚐTestStatus(ctx context.Context, sel ast.SelectionSet, v *testresultbes.TestStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTestResultBESWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInputᚄ(ctx context.Context, v any) ([]*ent.TestResultBESWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TestResultBESWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestResultBESWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestResultBESWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestResultBESWhereInput(ctx context.Context, v any) (*ent.TestResultBESWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestResultBESWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummary(ctx context.Context, sel ast.SelectionSet, v *ent.TestSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestSummary(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestSummaryOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx context.Context, v any) (testsummary.OverallStatus, error) {
	var res testsummary.OverallStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestSummaryOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx context.Context, sel ast.SelectionSet, v testsummary.OverallStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTestSummaryOverallStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatusᚄ(ctx context.Context, v any) ([]testsummary.OverallStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]testsummary.OverallStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestSummaryOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTestSummaryOverallStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []testsummary.OverallStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTestSummaryOverallStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTestSummaryOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx context.Context, v any) (*testsummary.OverallStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(testsummary.OverallStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestSummaryOverallStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋtestsummaryᚐOverallStatus(ctx context.Context, sel ast.SelectionSet, v *testsummary.OverallStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTestSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummaryWhereInputᚄ(ctx context.Context, v any) ([]*ent.TestSummaryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TestSummaryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTestSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummaryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTestSummaryWhereInput(ctx context.Context, v any) (*ent.TestSummaryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestSummaryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, v any) ([]time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2timeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2timeᚐTime(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOTimingBreakdown2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdown(ctx context.Context, sel ast.SelectionSet, v *ent.TimingBreakdown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimingBreakdown(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTimingBreakdownWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInputᚄ(ctx context.Context, v any) ([]*ent.TimingBreakdownWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TimingBreakdownWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimingBreakdownWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTimingBreakdownWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingBreakdownWhereInput(ctx context.Context, v any) (*ent.TimingBreakdownWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimingBreakdownWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimingChild2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TimingChild) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimingChild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChild(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTimingChildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildWhereInputᚄ(ctx context.Context, v any) ([]*ent.TimingChildWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TimingChildWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimingChildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTimingChildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingChildWhereInput(ctx context.Context, v any) (*ent.TimingChildWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimingChildWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimingMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.TimingMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimingMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTimingMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInputᚄ(ctx context.Context, v any) ([]*ent.TimingMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ent.TimingMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimingMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTimingMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInput(ctx context.Context, v any) (*ent.TimingMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimingMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v any) ([]uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := uuidgql.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := uuidgql.MarshalUUID(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
